class ZOSSDCL_PRO_EXTRAC_FE definition
  public
  create public .

*"* public components of class ZOSSDCL_PRO_EXTRAC_FE
*"* do not include other source files here!!!
public section.
  type-pools ABAP .

  types:
    ltt_rbcab         TYPE STANDARD TABLE OF zostb_rbcab .
  types:
    ltt_rbdet_v2      TYPE STANDARD TABLE OF zostb_rbdet_v2 .
  types:
    ltt_rbcab_json    TYPE STANDARD TABLE OF zoses_rbcab_json .
  types:
    ltt_rbdet_v2_json TYPE STANDARD TABLE OF zoses_rbdet_v2_json .
  types GTY_JSON_DATA type ZOSFEES_JSON_DATA .
  types GTY_NOJSON_DATA type ZOSFEES_DATA_NOJSON .
  types GTY_NOJSON_DATA_CB type ZOSFECBES_DATA_NOJSON .

  constants GC_SYSTEM_PRD type SYST-HOST value 'PRD' ##NO_TEXT.
  constants GC_SYSTEM_QAS type SYST-HOST value 'QAS' ##NO_TEXT.

  methods BUILD_XML
    importing
      !I_NRODOCSAP type ZOSFETB_JSON-ZZT_NRODOCSAP
      !I_NUMERACION type ZOSFETB_JSON-ZZT_NUMERACION
      !I_SHOW type XFELD optional
      !I_DOWN type XFELD optional
      !I_FOLDER type STRING optional
    exceptions
      ERROR .
  methods EXTRAE_DATA_BO
    importing
      !P_VBELN type VBELN
      !IS_OPTIONS type ZOSFEES_EXTRACT_OPTIONS optional
    exporting
      !P_ERROR type CHAR01
      !P_MESSAGE type BAPIRETTAB
      !ES_DATANOJSON type GTY_NOJSON_DATA .
  methods EXTRAE_DATA_COMUNICADO_BAJAS
    importing
      !P_BUKRS type BUKRS
      !P_FECFAC type VBRK-FKDAT
      !P_REPRO type CHAR01
      !P_GETFDOC type XFELD optional
      !P_GETFFO type CHAR01 optional
    exporting
      !P_MESSAGE type BAPIRETTAB
    exceptions
      ERROR .
  methods EXTRAE_DATA_FA
    importing
      !P_VBELN type VBELN
      !IS_OPTIONS type ZOSFEES_EXTRACT_OPTIONS optional
    exporting
      !P_ERROR type CHAR01
      !P_MESSAGE type BAPIRETTAB
      !ES_DATANOJSON type GTY_NOJSON_DATA .
  methods EXTRAE_DATA_NC
    importing
      !P_VBELN type VBELN
      !IS_OPTIONS type ZOSFEES_EXTRACT_OPTIONS optional
    exporting
      !P_ERROR type CHAR01
      !P_MESSAGE type BAPIRETTAB
      !ES_DATANOJSON type GTY_NOJSON_DATA .
  methods EXTRAE_DATA_ND
    importing
      !P_VBELN type VBELN
      !IS_OPTIONS type ZOSFEES_EXTRACT_OPTIONS optional
    exporting
      !P_ERROR type CHAR01
      !P_MESSAGE type BAPIRETTAB
      !ES_DATANOJSON type GTY_NOJSON_DATA .
  methods EXTRAE_DATA_RESUMEN_BOLETAS
    importing
      !I_BUKRS type BUKRS
      !I_FKDAT type FKDAT
      !I_REPRO type CHAR01
    exporting
      !ET_RETURN type BAPIRETTAB
    exceptions
      ERROR .
  methods GET_CONSTANTS
    importing
      !I_VBELN type VBELN optional
      !I_BUKRS type BUKRS optional
      !I_TPPROC type ZOSFETB_UBL-TPPROC
      !I_DATE type ZOSFETB_UBL-BEGDA optional .
  class-methods GET_BADI_OBJECT
    importing
      !I_CLASSNAME type STRING
    changing
      !CO_OBJ type ANY .
protected section.

  data:
    BEGIN OF gc_verubl,
        ubl2_0 TYPE zosfetb_ubl-zz_verubl VALUE '2.0',
        ubl2_1 TYPE zosfetb_ubl-zz_verubl VALUE '2.1',
      END OF gc_verubl .
  data:
    BEGIN OF gc_cat,
        catalogo01 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO01',
        catalogo02 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO02',
        catalogo03 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO03',
        catalogo04 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO04',
        catalogo05 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO05',
        catalogo06 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO06',
        catalogo07 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO07',
        catalogo08 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO08',
        catalogo09 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO09',
        catalogo10 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO10',
        catalogo11 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO11',
        catalogo12 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO12',
        catalogo13 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO13',
        catalogo14 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO14',
        catalogo15 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO15',
        catalogo16 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO16',
        catalogo17 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO17',
        catalogo18 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO18',
        catalogo19 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO19',
        catalogo20 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO20',
        catalogo21 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO21',
        catalogo22 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO22',
        catalogo23 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO23',
        catalogo24 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO24',
        catalogo25 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO25',
        catalogo51 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO51',
        catalogo52 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO52',
        catalogo53 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO53',
        catalogo54 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO54',
        catalogo55 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO55',
        catalogo59 TYPE zosfetb_catacons-zz_catalogo VALUE 'CATALOGO59',
      END OF gc_cat .
  data GC_FEIS_CLASS type STRING value 'ZOSSDCL_PRO_EXTRAC_FE_IS' ##NO_TEXT.
private section.

  types:
*"* private components of class ZOSSDCL_PRO_EXTRAC_FE
*"* do not include other source files here!!!
    BEGIN OF ty_t001w,
        werks TYPE werks_d,
        name2 TYPE name1,
        adrnr TYPE adrnr,
      END OF ty_t001w .
  types:
    BEGIN OF ty_adrc,
        addrnumber TYPE ad_addrnum,
        cityp_code TYPE ad_citypnm,
        street     TYPE ad_street,
        house_num1 TYPE ad_hsnm1,
        str_suppl1 TYPE ad_strspp1,
        str_suppl2 TYPE ad_strspp2,
        city1      TYPE ad_city1,
        city2      TYPE ad_city2,
        country    TYPE land1,
        region     TYPE regio,
        tel_number TYPE ad_tlnmbr1,
        fax_number TYPE ad_fxnmbr1,
        str_suppl3 TYPE adrc-str_suppl3,  " Calle 4                         I-WMR-200815
        name1      TYPE adrc-name1,                                        "I-WMR-280815
        name2      TYPE adrc-name2,                                        "I-WMR-280815
        name3      TYPE adrc-name3,                                        "I-WMR-280815
        name4      TYPE adrc-name4,                                        "I-WMR-280815
        countr_txt TYPE t005t-landx,                                       "I-WMR-280815
        region_txt TYPE t005u-bezei,                                       "I-WMR-280815
        smtp_addr  TYPE ad_smtpadr,                                        "I-WMR-280815
        location   TYPE adrc-location,                                     "I-WMR-301015
      END OF ty_adrc .
  types:
    BEGIN OF ty_kna1,
        kunnr     TYPE kunnr,
*        name1     TYPE name1_gp,                                                    "E-WMR-111218-3000009765
*        name2     TYPE name2_gp,                                                    "E-WMR-111218-3000009765
*        name3     TYPE name3_gp,                                                    "E-WMR-111218-3000009765
        name1     TYPE adrc-name1,                                                  "I-WMR-111218-3000009765
        name2     TYPE adrc-name2,                                                  "I-WMR-111218-3000009765
        name3     TYPE adrc-name3,                                                  "I-WMR-111218-3000009765
        telf1     TYPE telf1,
        stcd1     TYPE stcd1,
        adrnr     TYPE adrnr,
        ktokd     TYPE ktokd,
        xcpdk     TYPE xcpdk,
        stcdt     TYPE j_1atoid,
*        name4     TYPE name4_gp,                                                    "E-WMR-111218-3000009765
        name4     TYPE adrc-name4,                                                  "I-WMR-111218-3000009765
        smtp_addr TYPE ad_smtpadr,
        ort01     TYPE ort01_gp,
        regio     TYPE regio,
        stras     TYPE stras_gp,
        land1     TYPE kna1-land1,    " País                   I-WMR-300615
        stkzn     TYPE kna1-stkzn,    " Persona física                    I-WMR-150915
        spras     TYPE kna1-spras,    " Idioma                              "I-NTP050917-3000008049
      END OF ty_kna1 .
  types:
    BEGIN OF ty_adr6,
        addrnumber TYPE ad_addrnum,
        persnumber TYPE ad_persnum,
        smtp_addr  TYPE ad_smtpadr,
      END OF   ty_adr6 .
  types:
    BEGIN OF lty_cabecera_monitor.
            INCLUDE TYPE zostb_docexposca.
    TYPES: END OF lty_cabecera_monitor .
  types:
    BEGIN OF lty_cabecera_salida_bj.
            INCLUDE TYPE zostb_docexpbaca.
    TYPES: END OF lty_cabecera_salida_bj .
  types:
    BEGIN OF lty_detalle_salida_bj.
            INCLUDE TYPE zostb_docexpbade.
    TYPES: END OF lty_detalle_salida_bj .
  types:
    BEGIN OF gty_cabecera,
        vkbur TYPE vkbur,
        bezei TYPE bezei20,
      END OF gty_cabecera .
  types:
    BEGIN OF ty_detalle,
        posnr TYPE posnr_vf, "Posición
        pstyv TYPE pstyv,    "Tipo Posición
        matnr TYPE matnr,    "Material
        fkimg TYPE fkimg,    "Cantidad
        vrkme TYPE vrkme,    "Unidad
        descr TYPE tline_t,  "Descripción
        punit TYPE netwr_fp, "Precio unitario
        pvent TYPE netwr_fp, "Precio venta
        mwsbp TYPE mwsbp,    "Importe impuesto moneda documento
      END OF ty_detalle .
  types:
    BEGIN OF ty_vbap,
        vbeln TYPE vbap-vbeln,
        posnr TYPE vbap-posnr,
        vgbel TYPE vbap-vgbel,
        vgpos TYPE vbap-vgpos,
      END OF ty_vbap .
  types:
    BEGIN OF ty_vbfa_aux,
        vbelv   TYPE vbeln_von,
        posnv   TYPE posnr_von,
        vbeln   TYPE vbeln_nach,
        vbtyp_n TYPE vbtyp_n,
      END OF   ty_vbfa_aux .
  types:
    BEGIN OF ty_process,
        license       TYPE string,            " N° Instalación SAP                  "I-WMR-190918-3000009765
        s4core        TYPE xfeld,             " S/4 Hana activo                     "I-WMR-190918-3000009765
        table_condpre TYPE tabname,           " Tabla Condición de precios          "I-WMR-190918-3000009765
        s_t001        TYPE t001,              " Datos de sociedad                   "I-WMR-23092020-3000014829
      END OF ty_process .
  types:
    BEGIN OF lty_catahomo08.
            INCLUDE TYPE zostb_catahomo08.
    TYPES: END OF lty_catahomo08 .
  types:
    BEGIN OF lty_catahomo12.
            INCLUDE TYPE zostb_catahomo12.
    TYPES: END OF lty_catahomo12 .
  types:
    BEGIN OF lty_cata01.
            INCLUDE TYPE zostb_catalogo01.
    TYPES: END OF lty_cata01 .
  types:
    BEGIN OF lty_cata03,
        msehi   TYPE t006-msehi,
        isocode TYPE t006-isocode,
      END OF lty_cata03 .
  types:
    BEGIN OF lty_cata05.
            INCLUDE TYPE zostb_catalogo05.
    TYPES: END OF lty_cata05 .
  types:
    BEGIN OF lty_cata06.
            INCLUDE TYPE zostb_catalogo06.
    TYPES: END OF lty_cata06 .
  types:
    BEGIN OF lty_cata07.
            INCLUDE TYPE zostb_catalogo07.
    TYPES: END OF lty_cata07 .
  types:
    BEGIN OF lty_cata11.
            INCLUDE TYPE zostb_catalogo11.
    TYPES: END OF lty_cata11 .
  types:
    BEGIN OF lty_cata12.
            INCLUDE TYPE zostb_catalogo12.
    TYPES: END OF lty_cata12 .
  types:
    BEGIN OF lty_cata14.
            INCLUDE TYPE zostb_catalogo14.
    TYPES: END OF lty_cata14 .
  types:
    BEGIN OF lty_cata15.
            INCLUDE TYPE zostb_catalogo15.
    TYPES: END OF lty_cata15 .
  types:
    BEGIN OF lty_cata16.
            INCLUDE TYPE zostb_catalogo16.
    TYPES: END OF lty_cata16 .
  types LTY_CONST type ZOSTB_CONST_FE .
  types:
    BEGIN OF lty_text.
            INCLUDE TYPE tline.
    TYPES: END OF lty_text .
  types:
    BEGIN OF lty_consextsun.
            INCLUDE TYPE zostb_consextsun.
    TYPES: END OF lty_consextsun .
  types:
    BEGIN OF lty_constakonv.
            INCLUDE TYPE zostb_constakonv.
    TYPES: END OF lty_constakonv .
  types:
    BEGIN OF lty_constfkart.
            INCLUDE TYPE zostb_constfkart.
    TYPES: END OF lty_constfkart .
  types:
    BEGIN OF lty_constpstyv.
            INCLUDE TYPE zostb_constpstyv.
    TYPES: END OF lty_constpstyv .
  types:
    BEGIN OF lty_catacons.
            INCLUDE TYPE zosfetb_catacons.
    TYPES: END OF lty_catacons .
  types:
    BEGIN OF lty_constkdgrp.
            INCLUDE TYPE zostb_constkdgrp.
    TYPES: END OF lty_constkdgrp .
  types:
    BEGIN OF lty_constauart.
            INCLUDE TYPE zostb_constauart.
    TYPES: END OF lty_constauart .
  types:
    BEGIN OF lty_asgtnhr.
            INCLUDE TYPE zosfetb_asgtnhr.
    TYPES: END OF lty_asgtnhr .
  types:
    BEGIN OF lty_guiremi,
        xblnr     TYPE likp-xblnr,
        wadat_ist TYPE wadat_ist,
      END OF lty_guiremi .
  types:
    BEGIN OF lty_lotno,
        lotno TYPE zostb_lotno-lotno,
      END OF lty_lotno .
  types:
    BEGIN OF lty_vbak,
        vbeln    TYPE vbak-vbeln,
        augru    TYPE vbak-augru,
        xblnr    TYPE vbak-xblnr,
        zuonr    TYPE vbak-vbeln,
        xblnr1   TYPE vbak-vbeln,
        auart    TYPE vbak-auart,     "Clase de documento de ventas
        bukrs_vf TYPE vbak-bukrs_vf,                                         "I-WMR-230218-3000009148
        zz_gjahr TYPE gjahr,                                                 "I-3000012056-NTP-030719
        vgtyp    TYPE vbak-vgtyp,                                            "I-PBM300620-3000014304
        vgbel    TYPE vbak-vgbel,                                            "I-PBM300620-3000014304
      END OF lty_vbak .
  types:
    BEGIN OF lty_aubel,
        vbeln TYPE vbrp-vbeln,
        aubel TYPE vbrp-aubel,
      END OF lty_aubel .
  types:
    BEGIN OF lty_tvaut,
        augru TYPE tvaut-augru,
        bezei TYPE tvaut-bezei,
      END OF lty_tvaut .
  types:
    BEGIN OF lty_vbrk_ref,
        vbeln TYPE vbrk-vbeln,
        xblnr TYPE vbrk-xblnr,
        fkart TYPE vbrk-fkart,
        taxk1 TYPE vbrk-taxk1,
      END OF lty_vbrk_ref .
  types:
    BEGIN OF lty_vbrp_ref,
        vbeln TYPE vbrp-vbeln,
        posnr TYPE vbrp-posnr,
        taxm1 TYPE vbrp-taxm1,
        autyp TYPE vbrp-autyp,
        aubel TYPE vbrp-aubel,
      END OF lty_vbrp_ref .
  types:
    BEGIN OF lty_docexposca_ref,
        zz_nrodocsap  TYPE zostb_docexposca-zz_nrodocsap,
        zz_numeracion TYPE zostb_docexposca-zz_numeracion,
      END OF lty_docexposca_ref .
  types:
    BEGIN OF lty_comwa.
            INCLUDE TYPE vbco6.
    TYPES: END OF lty_comwa .
  types:
    BEGIN OF lty_xvbfa.
            INCLUDE TYPE vbfa.
    TYPES: END OF lty_xvbfa .
  types:
    BEGIN OF lty_vbap_07,
        vbeln TYPE vbap-vbeln,
        posnr TYPE vbap-posnr,
        vgbel TYPE vbap-vgbel,
        vgpos TYPE vbap-vgpos,
      END OF lty_vbap_07 .
  types:
    BEGIN OF lty_lineas,
        linea TYPE char1024,
      END OF lty_lineas .
  types:
    BEGIN OF lty_vbrp_0701,
        vbeln TYPE vbrp-vbeln,
        posnr TYPE vbrp-posnr,
      END OF lty_vbrp_0701 .
  types:
    BEGIN OF lty_vbrk_07,
        vbeln TYPE vbrp-vbeln,
        fkart TYPE vbrk-fkart,
        xblnr TYPE xblnr,
      END OF lty_vbrk_07 .
  types:
    BEGIN OF lty_cabecera_salida2.
            INCLUDE TYPE zoses_docexpreca.
    TYPES: END OF lty_cabecera_salida2 .
  types:
    BEGIN OF lty_detalle_salida2.
            INCLUDE TYPE zoses_docexprede.
    TYPES: END OF lty_detalle_salida2 .
  types:
    BEGIN OF ty_likps,
        vgbel     TYPE lips-vgbel,
        vgpos     TYPE lips-vgpos,
        vbeln     TYPE likp-vbeln,
        xblnr     TYPE likp-xblnr,
        wadat_ist TYPE wadat_ist, "Fecha movimiento de mercancías real
      END OF ty_likps .
  types:
    BEGIN OF lty_kappl,
        fkart TYPE vbrk-kappl,
      END OF lty_kappl .
  types:
    BEGIN OF lty_t003i,
        blart  TYPE t003_i-blart,
        doccls TYPE t003_i-blart,
        fkart  TYPE tvfk-fkart,
        vbtyp  TYPE tvfk-vbtyp,
      END OF lty_t003i .
  types:
    BEGIN OF lty_knvv,
        kunnr TYPE kunnr,
        vkorg TYPE vkorg,
        vtweg TYPE vtweg,
        spart TYPE spart,
        bzirk TYPE bzirk,
        kvgr1 TYPE knvv-kvgr1,                                            "I-WMR-020117-3000006110
      END OF   lty_knvv .
  types:
    BEGIN OF lty_cardes_val,
        import TYPE zostb_docexposcd-zz_cargo,
        _base  TYPE zostb_docexposcd-zz_cargo_base,
        _pct   TYPE zostb_docexposcd-zz_cargo_pct,
        _com   TYPE zostb_docexposcd-zz_cargo_com,
        _nabi  TYPE zostb_docexposcd-zz_nabi, "I-020920-NTP-3000014481
      END OF lty_cardes_val .
  types:
    BEGIN OF lty_cardes,
        "Totalizable
        kschl        TYPE konv-kschl,
        vbeln        TYPE vbrp-vbeln,
        matnr        TYPE vbrp-matnr,
        vrkme        TYPE vbrp-vrkme,
        pstyv        TYPE vbrp-pstyv,
        zzkdmat_auft TYPE vbap-kdmat,
        uecha        TYPE lips-uecha,
        "Cargos y Descuentos
        cargo        TYPE zostb_docexposcd-zz_cargo,
        cargo_base   TYPE zostb_docexposcd-zz_cargo_base,
        cargo_pct    TYPE zostb_docexposcd-zz_cargo_pct,
        cargo_com    TYPE zostb_docexposcd-zz_cargo_com,
        dscto        TYPE zostb_docexposcd-zz_dscto,
        dscto_base   TYPE zostb_docexposcd-zz_dscto_base,
        dscto_pct    TYPE zostb_docexposcd-zz_dscto_pct,
        dscto_com    TYPE zostb_docexposcd-zz_dscto_com,
        nabi         TYPE zostb_docexposcd-zz_nabi, "I-020920-NTP-3000014481
        "Al agregar nuevos añadir tambien a lty_cardes_glob
      END OF lty_cardes .
  types:
    BEGIN OF lty_cardes_glob,
        "Totalizable
        kschl        TYPE konv-kschl,
        vbeln        TYPE vbrp-vbeln,
        matnr        TYPE vbrp-matnr,
        vrkme        TYPE vbrp-vrkme,
        pstyv        TYPE vbrp-pstyv,
        zzkdmat_auft TYPE vbap-kdmat,
        uecha        TYPE lips-uecha,
        "Cargos y Descuentos
        cargo        TYPE zostb_docexposcd-zz_cargo,
        cargo_base   TYPE zostb_docexposcd-zz_cargo_base,
**        cargo_pct    TYPE char6,                          "La diferencia con lty_cardes es que no suma %
        cargo_pct    TYPE zostb_docexposcd-zz_cargo_pct,                                    "I-WMR-03092021-3000017707
        cargo_com    TYPE zostb_docexposcd-zz_cargo_com,
        dscto        TYPE zostb_docexposcd-zz_dscto,
        dscto_base   TYPE zostb_docexposcd-zz_dscto_base,
**        dscto_pct    TYPE char6,                          "La diferencia con lty_cardes es que no suma % "E-WMR-03092021-3000017707
        dscto_pct    TYPE zostb_docexposcd-zz_dscto_pct,                                    "I-WMR-03092021-3000017707
        dscto_com    TYPE zostb_docexposcd-zz_dscto_com,
        nabi         TYPE zostb_docexposcd-zz_nabi, "I-020920-NTP-3000014481
        "Al agregar nuevos añadir tambien a lty_cardes
      END OF lty_cardes_glob .
  types:
    BEGIN OF lty_formapago,
        cuota   TYPE zostb_docexposfp-zz_cuota,
        fec_vto TYPE zostb_docexposfp-zz_fec_vto,
      END OF lty_formapago .
  types:
    ltt_cardes_val TYPE STANDARD TABLE OF lty_cardes_val WITH DEFAULT KEY .
  types:
    ltt_cardes TYPE STANDARD TABLE OF lty_cardes WITH DEFAULT KEY .
  types:
    ltt_cardes_glob TYPE STANDARD TABLE OF lty_cardes_glob WITH DEFAULT KEY .
  types:
    ltt_formapago TYPE STANDARD TABLE OF lty_formapago WITH DEFAULT KEY .
  types:
    BEGIN OF lty_vbrk_group_001,
      bukrs           TYPE vbrk-bukrs,
      vbeln           TYPE vbrk-vbeln,
      fktyp           TYPE vbrk-fktyp,
      fkart           TYPE vbrk-fkart,
      fkdat           TYPE vbrk-fkdat,
      knumv           TYPE vbrk-knumv,
      taxk1           TYPE vbrk-taxk1,
      kunag           TYPE vbrk-kunag,
      netwr           TYPE vbrk-netwr,
      waerk           TYPE vbrk-waerk,
      kdgrp           TYPE vbrk-kdgrp,
      mwsbk           TYPE vbrk-mwsbk,
      spart           TYPE spart,
      zterm           TYPE dzterm,
      kalsm           TYPE kalsmasd,
      kunrg           TYPE kunrg,           "Pagador
      inco1           TYPE inco1,
      inco2           TYPE inco2,                                                       "I-WMR-100715
      ktgrd           TYPE ktgrd,
      fksto           TYPE fksto,           "Factura está anulada
      zz_numeracion   TYPE zosed_numeracion,
      butxt           TYPE t001-butxt,
      adrnr           TYPE t001-adrnr,
      name1           TYPE adrc-name1,
      name2           TYPE adrc-name2,
      name3           TYPE adrc-name3,
      cityp_code      TYPE adrc-cityp_code,
      street          TYPE adrc-street,
      house_num1      TYPE adrc-house_num1,
      str_suppl1      TYPE adrc-str_suppl1,
      city1           TYPE adrc-city1,
      city2           TYPE adrc-city2,
      tel_number      TYPE adrc-tel_number,
      country         TYPE adrc-country,
      region          TYPE adrc-region,
      land1           TYPE t005u-land1,
      bland           TYPE t005u-bland,
      bezei           TYPE t005u-bezei,
      paval           TYPE t001z-paval,
      stcd1           TYPE kna1-stcd1,
      stcdt           TYPE kna1-stcdt,
      tfact           TYPE char02,
      tmotivo         TYPE char02,
      tipodocref      TYPE char16,
      tipodocdesc     TYPE char80,
      motivosuste     TYPE char80,
      numera          TYPE char13,
      tdocui          TYPE char01,
      name12          TYPE char100, "char70, "OFV 10.09.2015
      telf1           TYPE kna1-telf1,
    END OF lty_vbrk_group_001 .
  types:
    BEGIN OF lty_vbrk_group_002,
      adq_spras       TYPE kna1-spras,      " Adquirente: Idioma                         I-WMR-28042020-3000014301
      totvvopgra      TYPE vbrk-netwr,
      totvvopgra_taxa TYPE vbrk-netwr,      "Total operaciones gravadas base imponible "I-3000011712-NTP210419
      opergravhomo    TYPE char04,
      totvvopina      TYPE vbrk-netwr,
      operinafhomo    TYPE char04,
      totvvopexo      TYPE vbrk-netwr,
      operexohomo     TYPE char04,
      sumaigv         TYPE vbrp-netwr,
      igvporcent      TYPE vbrp-netwr,
      sumaisc         TYPE vbrp-netwr,
      sumaotrtri      TYPE vbrp-netwr,
      "sumaotrcar      TYPE vbrp-netwr,       "E-080920-NTP-3000014481
      "desctot         TYPE vbrp-netwr,       "E-080920-NTP-3000014481
      imptotvent      TYPE vbrp-netwr,
      imporpermn      TYPE vbrp-netwr,
      baseperml       TYPE vbrp-netwr,        " Base Percepción en ML                    I-WMR-20112020-3000014557
      imporpermn_por  TYPE konv-kbetr,
      imporpermn_mtc  TYPE vbrp-netwr,
      totvalveno      TYPE vbrp-netwr,
      "desctoglob      TYPE vbrp-netwr,       "E-080920-NTP-3000014481
      totvalanticip   TYPE vbrp-netwr,       " Valor anticipo por item                   I-WMR-100715
      totvaligvant    TYPE vbrp-netwr,       " Valor IGV anticipo por item               I-WMR-160715
      tipnumeotr      TYPE char25,
      tipnumothomo    TYPE char02,
      leyendas        TYPE string,
      leyendasho      TYPE char01,
      leyendas02      TYPE string,
      leyendasho02    TYPE char01,
      leyendas03      TYPE string,
      leyendasho03    TYPE char01,
      leyendas04      TYPE string,          " Leyenda de detracciones                    I-WMR-070319-3000010823
      leyendasho04    TYPE char01,          " Detracciones                               I-WMR-070319-3000010823
      xblnr           TYPE vbrk-xblnr,
      vkorg           TYPE vkorg,
      vtweg           TYPE vtweg,
*        desctoxite      TYPE vbrp-netwr,
      dirpaisadq      TYPE string,
      tipdocmodif     TYPE char16,
      tipdocmodifho   TYPE char02,
      rfbsk           TYPE vbrk-rfbsk,
      tipodoc         TYPE char02,
      kurrf           TYPE vbrk-kurrf,
      awkey           TYPE bkpf-awkey,
      zz_vbeln        TYPE vbeln_va,
      zz_bstkd        TYPE zostb_docexposca-zz_bstkd, " vbkd-bstkd,  I-WMR-030617-3000007316
      zz_detra        TYPE konv-kwert,
      zz_text1        TYPE text1_052,
      zzt_numeracion  TYPE zosed_numeracion,
      zz_tip_ope      TYPE zostb_docexposc2-zz_tip_ope,      "I-WMR-080715
    END OF lty_vbrk_group_002 .
  types:
    BEGIN OF lty_vbrk_group_003,
      zz_check_tg     TYPE xfeld,    " Transferencia Gratuita I-WMR-050615
      land1_vbrk      TYPE vbrk-land1,                       "I-WMR-300615
      landtx_vbrk     TYPE vbrk-landtx,                      "I-WMR-300615
      zz_check_expor  TYPE xfeld,    " Exportación            I-WMR-080715
      zz_tot_flete    TYPE zostb_docexposc2-zz_tot_flete,  " Flete   I-WMR-080715
      zz_tot_seguro   TYPE zostb_docexposc2-zz_tot_seguro, " Seguro  I-WMR-080715
      zz_tot_otros    TYPE zostb_docexposc2-zz_tot_otros,  " Otros   "OFV 23.07.2015
      fecdocmodif     TYPE vbrk-fkdat, " Fecha Doc. que se modifica  I-WMR-130715
      sfakn           TYPE vbrk-sfakn, " Documento anulado           I-WMR-100815
      adrnr_rg        TYPE vbpa-adrnr, " N° direcc.Respansable Pago  I-WMR-091015
      kunre           TYPE vbpa-kunnr, " Destinatario de Factura     I-WMR-250815
      adrnr_re        TYPE vbpa-adrnr, " N° direcc.destinatario Fact I-WMR-250815
      kun1d           TYPE vbpa-kunnr,  " Cliente Superior           I-WMR-21015
      adrnr_1d        TYPE vbpa-adrnr,  "N° direcc.Cliente superior  I-WMR-21015
      adrnr_ag        TYPE vbpa-adrnr,  "N° direcc.Solicitante       I-WMR-260619-3000012056
      exnum           TYPE vbrk-exnum, " Nro.datos comercio exterior I-WMR-230915
**        hkunnr          TYPE knvh-hkunnr,  " Cliente Superior          I-WMR-21015
      vbtyp           TYPE vbrk-vbtyp, " Tipo documento comercial    I-WMR-261016-3000005766
      razdir_jrq      TYPE xfeld,      " Ind. tomar razón social y dirección de jerarquía de clientes  I-WMR-020117-3000006110
      zz_check_vtaiti TYPE xfeld,      " Venta Itinerante            I-WMR-281015
      zz_check_vtasrv TYPE xfeld,      " Venta de Servicios          I-WMR-281015
      bzirk           TYPE vbrk-bzirk, " Zona de Ventas                I-WMR-020216
      ernam           TYPE vbrk-ernam, " Usuario creador             I-WMR-241116-3000005346
      zz_sdrefer      TYPE vbrk-vbeln, " Documento referencia NC/ND  I-WMR-151216-3000005346
      zlsch           TYPE vbrk-zlsch, " Vía de Pago                 I-WMR-280417-3000007140
      zz_verubl       TYPE zosfetb_ubl-zz_verubl,                     "I-NTP281118-3000009651
      zz_verestrdoc   TYPE zosfetb_ubl-zz_verestrdoc,                 "I-NTP281118-3000009651
      zz_rgtno        TYPE idcn_loma-rgtno,  "Nº pila oficial         "I-PBM230119-3000011120
      zz_codreg_per   TYPE zostb_docexposca-zz_codreg_per, " Código Regimen Percepción   I-WMR-161017-3000008124
      kunwe           TYPE vbpa-kunnr, " Destinatario de Mcías       I-WMR-150218-3000009072
      adrnr_we        TYPE vbpa-adrnr, " N° direcc.destinatario Mcía I-WMR-150218-3000009072
      zz_bolreb       TYPE xfeld,      " Boleta con Rebate           I-WMR-150218-3000009072
      zz_check_anticp TYPE xfeld,      " Venta Anticipos              "I-WMR-190219-3000011108
      zz_detracodbs   TYPE zostb_docexposc2-zz_detracodbs,      " Código B/S Detracción  I-WMR-070319-3000010823
      zz_detraporc    TYPE zostb_docexposc2-zz_detraporc,       " % Detracción           I-WMR-120619-3000010823
      zz_detractabn   TYPE zostb_docexposc2-zz_detractabn,      " Detrac: Cuenta Bco.Nac.I-WMR-120619-3000010823
      zz_detra_mdpg   TYPE zostb_docexposc2-zz_detra_mdpg,      " Detrac: Medio pago     I-WMR-260819-3000010823
      zz_sumaigvhom07 TYPE zostb_docexposc2-zz_sumaigvhom07,    " % IGV para PDF         I-WMR-270619-3000012056
      zz_gjahr        TYPE gjahr,                               " Ejercicio              I-3000012056-NTP-030719
      t_cardes_glob   TYPE ltt_cardes,                          " Tab de Cargos y Dsctos I-3000011712-NTP100419
*{I-080920-NTP-3000014481
      mwsbp           TYPE vbrp-mwsbp,
      sumaigv_pdf     TYPE vbrp-mwsbp,
      valvenxite      TYPE zostb_docexposca-zz_valvenxite,
      tot_ant         TYPE zostb_docexposc2-zz_tot_ant,
      igv_ant         TYPE vbrp-mwsbp,
      valven          TYPE zostb_docexposca-zz_valven,
      preven          TYPE zostb_docexposca-zz_preven,
      desctoxite      TYPE zostb_docexposca-zz_desctoxite,                               "I-WMR-29072021-3000017358
      cargosxite      TYPE zostb_docexposca-zz_cargosxite,                               "I-WMR-29072021-3000017358
    END OF lty_vbrk_group_003 .
  types:
    BEGIN OF lty_vbrk_group_004,
      cargosglob      TYPE zostb_docexposca-zz_cargosglob,
      desctoglob      TYPE zostb_docexposca-zz_desctoglob,
      desctotot       TYPE zostb_docexposca-zz_desctotot,
      desctotot_sabi  TYPE zostb_docexposca-zz_desctotot_sabi,                           "I-WMR-29072021-3000017358
      desctotot_nabi  TYPE zostb_docexposca-zz_desctotot_nabi,
      cargostot       TYPE zostb_docexposca-zz_cargostot,
      cargostot_sabi  TYPE zostb_docexposca-zz_cargostot_sabi,                           "I-WMR-29072021-3000017358
      cargostot_nabi  TYPE zostb_docexposca-zz_cargostot_nabi,
*}I-080920-NTP-3000014481
      sumimpopgrat    TYPE zostb_docexposc2-zz_sumimpopgrat,    " Suma Impuestos Op.Grat I-WMR-300719-3000010823
*      zz_tot_flete_02 TYPE zostb_docexposc2-zz_tot_flete_02,    " Flete 02               I-WMR-150919-3000010823
*      zz_tot_seguro_02 TYPE zostb_docexposc2-zz_tot_seguro_02,  " Seguro 02              I-WMR-150919-3000010823
      docmodif_ndpena TYPE xfeld,      " Docmodif ND penalidad                           I-070120-NTP-3000013599
      incov           TYPE string,     " Versión de Incoterms                            I-WMR-12052020-3000013923
      inco2_l         TYPE string,     " Ubicación de incoterms 1                        I-WMR-12052020-3000013923
      inco3_l         TYPE string,     " Ubicación de incoterms 2                        I-WMR-12052020-3000013923
      vbklt           TYPE tvak-vbklt, " Identificación Solicitud corrección factura     I-WMR-08122020-3000014557
      ihrez           TYPE vbkd-ihrez,    " Referencia de pedido cliente                 I-WMR-08122020-3000014557
      bstkd_e         TYPE vbkd-bstkd_e,  " Referencia de pedido Dest.Mcías              I-WMR-08122020-3000014557
      acuserecibo     TYPE string,  "Acuse recibo cliente                                "I-301220-NTP-3000014557
      zz_check_nccero TYPE xfeld,                               " Nc con importe cero    I-231020-NTP-3000015579
      zz_fp_tipo      TYPE zostb_docexposc2-zz_fp_tipo,         " Forma de pago tipo     I-100321-NTP-3000016017
      zz_fp_total     TYPE zostb_docexposc2-zz_fp_total,        " Forma de pago total    I-100321-NTP-3000016017
      zz_fp_fec_vto   TYPE zostb_docexposc2-zz_fec_vto,         " Forma de pago FecVcto  I-120321-NTP-3000016017
      zz_fp_nc_ajuste TYPE xfeld,                               " Forma de pago NCajuste I-040521-NTP-3000016091
      zz_sdrefer_tmp  TYPE vbrk-vbeln, " Documento referencia NC/ND                      I-190321-SVM-3000016390
      zz_sdreferwaerk TYPE vbrk-waerk, " Documento referencia NC/ND  I-PBM-250721-3000017358
      t_formapago     TYPE ltt_formapago,                       " Tabla de pago cuotas   I-100321-NTP-3000016017
      zz_check_nc_corr TYPE xfeld,                              " Nc con importe cero    I-PBM030621-3000017155
      zz_detra_mdoc   TYPE zostb_docexposc2-zz_detra_mdoc,      " Detra en moneda doc    I-221021-NTP-3000017871
      zz_detra_md     TYPE zostb_docexposc2-zz_detra_md,        " Detra MODASA           I-221021-NTP-3000017871
      zz_saldoapagar  TYPE zostb_docexposc2-zz_saldoapagar,     " Saldo a pagar          I-151021-NTP-3000017917
    END OF lty_vbrk_group_004 .
  types:
    BEGIN OF lty_vbrk.
      INCLUDE TYPE lty_vbrk_group_001.
      INCLUDE TYPE lty_vbrk_group_002.
      INCLUDE TYPE lty_vbrk_group_003.
      INCLUDE TYPE lty_vbrk_group_004.
  types: END OF lty_vbrk .
  types:
    BEGIN OF lty_vbpa,
        vbeln TYPE vbpa-vbeln,
        posnr TYPE vbpa-posnr,
        kunnr TYPE vbpa-kunnr,
        parvw TYPE vbpa-parvw,
        vrkme TYPE vbrp-vrkme,
        fkimg TYPE vbrp-fkimg,
        arktx TYPE vbrp-arktx,
        stcd1 TYPE kna1-stcd1,
        stcdt TYPE kna1-stcdt,
        stkzn TYPE kna1-stkzn,
        name1 TYPE kna1-name1,
        name2 TYPE kna1-name2,
        knumv TYPE vbrk-knumv,
        regio TYPE kna1-regio,
        adrnr TYPE kna1-adrnr,
        land1 TYPE vbpa-land1,                                                    "I-WMR-070217-3000006563
      END OF lty_vbpa .
  types:
    BEGIN OF lty_vbrp,
        knumv           TYPE vbrk-knumv,
        vbeln           TYPE vbrp-vbeln,
        posnr           TYPE vbrp-posnr,
        vgbel           TYPE vbrp-vgbel,
        vrkme           TYPE vbrp-vrkme,
        fkimg           TYPE vbrp-fkimg,
        arktx           TYPE string, " vbrp-arktx,                                 "M-WMR-180517-3000007316
        netwr           TYPE vbrp-netwr,
        mwsbp           TYPE vbrp-mwsbp,
        vgtyp           TYPE vbrp-vgtyp,
        autyp           TYPE vbrp-autyp,
        taxm1           TYPE vbrp-taxm1,
        aubel           TYPE vbrp-aubel,
        aupos           TYPE posnr_va,
        pstyv           TYPE vbrp-pstyv,
        matnr           TYPE vbrp-matnr,
        kwert           TYPE p LENGTH 12 DECIMALS 2,
        kbetr           TYPE p LENGTH 16 DECIMALS 10,                   "I-270721-NTP-3000017358
        pventa          TYPE p LENGTH 16 DECIMALS 10, "TYPE vbrp-netwr, "I-270721-NTP-3000017358
        afigv           TYPE char02,
        afigv0102       TYPE vbrp-mwsbp,
        afigv03         TYPE char02,
        afigv04         TYPE char04,
        afigv05         TYPE char03,
        afigv06         TYPE char03,
        tipisc          TYPE char02,
        tipisc00102     TYPE konv-kwert,
        tipisc04        TYPE char04,
        tipisc05        TYPE char03,
        tipisc06        TYPE char03,
        uummsunat       TYPE char03,
        valvenxite_taxa TYPE p LENGTH 16 DECIMALS 6, "TYPE vbrp-netwr, "I-3000011712-NTP210419
        valvenxite      TYPE p LENGTH 16 DECIMALS 6, "TYPE vbrp-netwr,
        valvenxite_cab  TYPE zostb_docexposde-zz_valvenxite,                               "I-110920-NTP-3000014481
        sumaigv         TYPE vbrp-netwr,
        sumaiscsv       TYPE vbrp-netwr,
        sumaisc         TYPE vbrp-netwr,
        sumaotrtri      TYPE vbrp-netwr,
        sumaotrcar      TYPE vbrp-netwr,
*        desctot         TYPE vbrp-netwr,             "E-3000011712-NTP110419
        imptotvent      TYPE vbrp-netwr,
        tipmonemif      TYPE vbrk-waerk,
        tipnumegre      TYPE string,
        imporpermn      TYPE vbrp-netwr,
        imporpermn_por  TYPE konv-kbetr,
        imporpermn_mtc  TYPE vbrp-netwr,
        valrefunit      TYPE vbrp-netwr,
        totvalveno      TYPE vbrp-netwr,
*        desctoglob      TYPE p LENGTH 12 DECIMALS 2, "E-3000011712-NTP110419
*        desctoxite      TYPE p LENGTH 12 DECIMALS 2, "E-3000011712-NTP110419
        valantxite      TYPE vbrp-netwr,       " Valor anticipo por item                   I-WMR-100715
        valigvant       TYPE vbrp-mwsbp,       " Valor IGV de Anticipos (Estadístico)      I-WMR-160715
        umvkz           TYPE vbrp-umvkz,
        kmein           TYPE konv-kmein,
        kzwi1           TYPE vbrp-kzwi1,
        werks           TYPE vbrp-werks,
        meins           TYPE vbrp-meins,
        vkbur           TYPE vkbur,
        vgpos           TYPE vgpos,    "Núm.posición de la posición modelo
        augru_auft      TYPE vbrp-augru_auft,  " Motivo de pedido  I-WMR-050615
        vkorg           TYPE vbrk-vkorg,       " Organización                              I-WMR-080615
        vtweg           TYPE vbrk-vtweg,       " Canal                                     I-WMR-080615
        fkdat           TYPE vbrk-fkdat,       " Fecha factura                             I-WMR-080615
        afect_igv       TYPE char01,           " Afecto (A), Exonerado (E) o Inafecto (I)  I-WMR-080615
        text_id         TYPE thead-tdid,       " Id Texto posición                         I-WMR-170615
        text_pos        TYPE string,           " Texto de posición                         I-WMR-170615
        kvgr1           TYPE vbrp-kvgr1,       " Grupo de clientes 1                       I-WMR-180615
        charg           TYPE vbrp-charg,       " Lote                                      I-WMR-010915
        ntgew           TYPE vbrp-ntgew,       " Peso neto                                 I-WMR-171016-3000005361
        brgew           TYPE vbrp-brgew,       " Peso bruto                                I-WMR-171016-3000005361
        gewei           TYPE vbrp-gewei,       " Unidad de peso                            I-WMR-171016-3000005361
        lgort           TYPE vbrp-lgort,       " Almacén                                   I-WMR-171016-3000005361
        zzkdmat_auft    TYPE vbap-kdmat,       " N° material cliente                       I-WMR-010915
        zz_check_bonif  TYPE xfeld,            " Bonificado                                I-WMR-240915
        zz_dscto_01     TYPE vbrp-netwr,       " Descuento 01                              I-WMR-250116
        zz_dscto_02     TYPE vbrp-netwr,       " Descuento 02                              I-WMR-250116
        matkl           TYPE vbrp-matkl,       " Grupo de artículos                        I-WMR-231116-3000005346
        uecha           TYPE vbrp-uecha,       " Pos.superior de partición de lotes        I-WMR-221216-3000006249
        mvgr5           TYPE vbrp-mvgr5,       " Grupo de materiales 5                     I-WMR-280317-3000006749
        zz_sid_number   TYPE zostb_docexposde-zz_sid_number, " SID Number                  I-WMR-280317-3000006749
        zz_sid_descr    TYPE zostb_docexposde-zz_sid_descr,  " SID Descripción             I-WMR-280317-3000006749
        zz_certif_fce   TYPE zostb_docexposde-zz_certif_fce, " Certificado FCE             I-WMR-280317-3000006749
        zz_certif_fda   TYPE zostb_docexposde-zz_certif_fda, " Certificado FDA             I-WMR-280317-3000006749
        zz_part_ara     TYPE zostb_docexposde-zz_part_ara,   " Partida Arancelaria         I-WMR-280317-3000006749
        zz_codigo_hts   TYPE zostb_docexposde-zz_codigo_hts, " Código Armonizado           I-WMR-280317-3000006749
        zz_codreg_per   TYPE zostb_docexposca-zz_codreg_per, " Código Regimen Percepción   I-WMR-161017-3000008124
        vstel           TYPE vbrp-vstel,       " Puesto Expedición                         I-WMR-180918-3000010497
        zz_valunit_4d   TYPE zostb_docexposde-zz_valunit_4d, " Valor Unitario (4 decimales)I-WMR-231118-3000010907
        kzwi3           type vbrp-kzwi3,                                                  "I-140120-NTP-3000013600
        "cargosxite      TYPE zostb_docexposde-zz_cargosxite,      " Cargos por Item        I-WMR-070319-3000010823
        t_cardes_item   TYPE ltt_cardes, " Tabla de Cargos y Desctos Item                  I-3000011712-NTP100419
        t_cardes_glob   TYPE ltt_cardes, " Tabla de Cargos y Desctos Global                I-3000011712-NTP100419
        zz_valrefunit_4d TYPE zostb_docexposde-zz_valrefunit_4d,                           "I-WMR-181019-3000012593
*{I-080920-NTP-3000014481
        tributo         TYPE char4,
        mwsbp_cab       TYPE vbrp-mwsbp,
        desctoxite      TYPE zostb_docexposde-zz_desctoxite,
        desctoxite_sabi TYPE zostb_docexposde-zz_desctoxite_sabi,                          "I-WMR-29072021-3000017358
        desctoxite_nabi TYPE zostb_docexposde-zz_desctoxite_nabi,
        cargosxite      TYPE zostb_docexposde-zz_cargosxite,
        cargosxite_sabi TYPE zostb_docexposde-zz_cargosxite_sabi,                          "I-WMR-29072021-3000017358
        cargosxite_nabi TYPE zostb_docexposde-zz_cargosxite_nabi,
        desctoglob      TYPE zostb_docexposde-zz_desctoxite,
        desctoglob_sabi TYPE zostb_docexposde-zz_desctoxite_sabi,                          "I-WMR-29072021-3000017358
        desctoglob_nabi TYPE zostb_docexposde-zz_desctoxite_nabi,
        cargosglob      TYPE zostb_docexposde-zz_cargosxite,
        cargosglob_sabi TYPE zostb_docexposde-zz_cargosxite_sabi,                          "I-WMR-29072021-3000017358
        cargosglob_nabi TYPE zostb_docexposde-zz_cargosxite_nabi,
        desctotot       TYPE zostb_docexposca-zz_desctotot,
        desctotot_sabi  TYPE zostb_docexposca-zz_desctotot_sabi,                           "I-WMR-29072021-3000017358
        desctotot_nabi  TYPE zostb_docexposca-zz_desctotot_nabi,
        cargostot       TYPE zostb_docexposca-zz_cargostot,
        cargostot_sabi  TYPE zostb_docexposca-zz_cargostot_sabi,                           "I-WMR-29072021-3000017358
        cargostot_nabi  TYPE zostb_docexposca-zz_cargostot_nabi,
        tdscto_gratuito TYPE dmbtr,
        tcargo_gratuito TYPE dmbtr,
*}I-080920-NTP-3000014481
        icbp            TYPE zostb_docexposde-zz_icbp, " Icbp                              I-070421-NTP-3000016475
        icbp_tasa       TYPE zostb_docexposde-zz_icbp_tasa, " Icbp tasa                    I-070421-NTP-3000016475
      END OF lty_vbrp .
  types:
    BEGIN OF lty_vbrp_tot,
        vbeln           TYPE vbrp-vbeln,
        posnr           TYPE vbrp-posnr,
        vrkme           TYPE vbrp-vrkme,
        fkimg           TYPE vbrp-fkimg,
        arktx           TYPE string, "vbrp-arktx,
        netwr           TYPE vbrp-netwr,
        mwsbp           TYPE vbrp-mwsbp,
        matnr           TYPE vbrp-matnr,
        aubel           TYPE vbrp-aubel,
        aupos           TYPE vbrp-aupos,
        kwert           TYPE p LENGTH 12 DECIMALS 2,
        kbetr           TYPE p LENGTH 16 DECIMALS 10,                   "I-270721-NTP-3000017358
        pventa          TYPE p LENGTH 16 DECIMALS 10, "TYPE vbrp-netwr, "I-270721-NTP-3000017358
        afigv           TYPE char02,
        afigv0102       TYPE vbrp-mwsbp,
        afigv03         TYPE char02,
        afigv04         TYPE char04,
        afigv05         TYPE char03,
        afigv06         TYPE char03,
        tipisc          TYPE char02,
        tipisc00102     TYPE konv-kwert,
        tipisc04        TYPE char04,
        tipisc05        TYPE char03,
        tipisc06        TYPE char03,
        uummsunat       TYPE char03,
        valvenxite_taxa TYPE p LENGTH 16 DECIMALS 6, "TYPE vbrp-netwr,                    "I-3000011712-NTP210419
        valvenxite      TYPE p LENGTH 16 DECIMALS 6, "TYPE vbrp-netwr,
        sumaigv         TYPE vbrp-netwr,
        sumaiscsv       TYPE vbrp-netwr,
        sumaisc         TYPE vbrp-netwr,
        sumaotrtri      TYPE vbrp-netwr,
        sumaotrcar      TYPE vbrp-netwr,
        desctot         TYPE vbrp-netwr,
        imptotvent      TYPE vbrp-netwr,
        tipmonemif      TYPE vbrk-waerk,
        tipnumegre      TYPE string,
        imporpermn      TYPE vbrp-netwr,
        imporpermn_mtc  TYPE vbrp-netwr,
        valrefunit      TYPE vbrp-netwr,
        totvalveno      TYPE vbrp-netwr,
*        desctoglob      TYPE p LENGTH 12 DECIMALS 2,
*        desctoxite      TYPE p LENGTH 12 DECIMALS 2,
        valantxite      TYPE vbrp-netwr,       " Valor anticipo por item                   I-WMR-100715
        valigvant       TYPE vbrp-mwsbp,       " Valor IGV de Anticipos (Estadístico)      I-WMR-160715
        umvkz           TYPE vbrp-umvkz,
        kmein           TYPE konv-kmein,
        kzwi1           TYPE vbrp-kzwi1,
        vgbel           TYPE vbrp-vgbel,
        vgpos           TYPE vgpos,    "Núm.posición de la posición modelo
**         zjson           TYPE char200,                                           "E-WMR-051015
        zjson           TYPE string,     " Lotes y Cantidad                      I-WMR-051015
        charg           TYPE vbrp-charg, " Lote                                  I-WMR-160915
        text_id         TYPE thead-tdid,       " Id Texto posición                         I-WMR-170615
        text_pos        TYPE string,           " Texto de posición                         I-WMR-170615
        zz_mat_cont     TYPE zostb_docexposde-zz_mat_cont, " 2do elemento JSon Descripción I-WMR-010915
        zzkdmat_auft    TYPE vbap-kdmat,       " N° material cliente                       I-WMR-160915
        zz_dscto_01     TYPE vbrp-netwr,       " Descuento 01                              I-WMR-250116
        zz_dscto_02     TYPE vbrp-netwr,       " Descuento 02                              I-WMR-250116
        ntgew           TYPE vbrp-ntgew,       " Peso neto                                 I-WMR-171016-3000005361
        brgew           TYPE vbrp-brgew,       " Peso bruto                                I-WMR-171016-3000005361
        gewei           TYPE vbrp-gewei,       " Unidad de peso                            I-WMR-171016-3000005361
        lgort           TYPE vbrp-lgort,       " Almacén                                   I-WMR-171016-3000005361
        matkl           TYPE vbrp-matkl,       " Grupo de artículos                        I-WMR-231116-3000005346
        zz_sid_number   TYPE zostb_docexposde-zz_sid_number, " SID Number                  I-WMR-280317-3000006749
        zz_sid_descr    TYPE zostb_docexposde-zz_sid_descr,  " SID Descripción             I-WMR-280317-3000006749
        zz_certif_fce   TYPE zostb_docexposde-zz_certif_fce, " Certificado FCE             I-WMR-280317-3000006749
        zz_certif_fda   TYPE zostb_docexposde-zz_certif_fda, " Certificado FDA             I-WMR-280317-3000006749
        zz_part_ara     TYPE zostb_docexposde-zz_part_ara,   " Partida Arancelaria         I-WMR-280317-3000006749
        zz_codigo_hts   TYPE zostb_docexposde-zz_codigo_hts, " Código Armonizado           I-WMR-280317-3000006749
        zz_codreg_per   TYPE zostb_docexposca-zz_codreg_per, " Código Regimen Percepción   I-WMR-161017-3000008124
        zz_valunit_4d   TYPE zostb_docexposde-zz_valunit_4d, " Valor Unitario (4 decimales)I-WMR-231118-3000010907
        vstel           TYPE vbrp-vstel,       " Puesto Expedición                         I-WMR-180918-3000010497
        kzwi3           TYPE vbrp-kzwi3,                                                  "I-130120-NTP-3000013600
        augru_auft      TYPE vbrp-augru_auft,  " Motivo de pedido                         "I-170220-NTP-3000013785
        taxm1           TYPE vbrp-taxm1,       " Clase de impuesto                        "I-210420-SVM-3000014302
        zz_valrefunit_4d TYPE zostb_docexposde-zz_valrefunit_4d,                           "I-WMR-181019-3000012593
        zz_dessrv_alt   TYPE zostb_docexposde-zz_dessrv_alt, " Descripción alternativa     I-WMR-20042020-3000014097
        zz_txtpos_alt   TYPE zostb_docexposde-zz_txtpos_alt, " Texto adic. alternativo     I-WMR-20042020-3000014097
        "Al añadir campos no totalizable, "excluir de totalizar" en metodo set_vbrp_final para austral
*{I-080920-NTP-3000014481
        tributo         type char4,
        desctoxite      TYPE zostb_docexposde-zz_desctoxite,
        desctoxite_sabi TYPE zostb_docexposde-zz_desctoxite_sabi,                          "I-WMR-29072021-3000017358
        desctoxite_nabi TYPE zostb_docexposde-zz_desctoxite_nabi,
        cargosxite      TYPE zostb_docexposde-zz_cargosxite,
        cargosxite_sabi TYPE zostb_docexposde-zz_cargosxite_sabi,                          "I-WMR-29072021-3000017358
        cargosxite_nabi TYPE zostb_docexposde-zz_cargosxite_nabi,
        desctoglob      TYPE zostb_docexposde-zz_desctoxite,
        desctoglob_sabi TYPE zostb_docexposde-zz_desctoxite_sabi,                          "I-WMR-29072021-3000017358
        desctoglob_nabi TYPE zostb_docexposde-zz_desctoxite_nabi,
        cargosglob      TYPE zostb_docexposde-zz_cargosxite,
        cargosglob_sabi TYPE zostb_docexposde-zz_cargosxite_sabi,                          "I-WMR-29072021-3000017358
        cargosglob_nabi TYPE zostb_docexposde-zz_cargosxite_nabi,
        desctotot       TYPE zostb_docexposca-zz_desctotot,
        desctotot_sabi  TYPE zostb_docexposca-zz_desctotot_sabi,                           "I-WMR-29072021-3000017358
        desctotot_nabi  TYPE zostb_docexposca-zz_desctotot_nabi,
        cargostot       TYPE zostb_docexposca-zz_cargostot,
        cargostot_sabi  TYPE zostb_docexposca-zz_cargostot_sabi,                           "I-WMR-29072021-3000017358
        cargostot_nabi  TYPE zostb_docexposca-zz_cargostot_nabi,
*}I-080920-NTP-3000014481
        "Al añadir campos no totalizable, "excluir de totalizar" en metodo set_vbrp_final para austral
      END OF lty_vbrp_tot .
  types:
    BEGIN OF lty_vbrp_f.
      INCLUDE TYPE lty_vbrp_tot.
  types:
        t_cardes_item   TYPE ltt_cardes, " Tabla de Cargos y Desctos Item                  I-3000011712-NTP100419
        t_cardes_glob   TYPE ltt_cardes, " Tabla de Cargos y Desctos Global                I-3000011712-NTP100419
    END OF lty_vbrp_f .
  types:
    BEGIN OF lty_cabecera_salida.
            INCLUDE TYPE zostb_docexposca.
    TYPES: END OF lty_cabecera_salida .
  types:
    BEGIN OF lty_cabecera_sal2.
            INCLUDE TYPE zostb_docexposc2.
    TYPES: END OF lty_cabecera_sal2 .
  types:
    BEGIN OF lty_detalle_salida.
            INCLUDE TYPE zostb_docexposde.
    TYPES: END OF lty_detalle_salida .
  types:
    BEGIN OF lty_header_texts.
            INCLUDE TYPE zostb_docexpostc.
    TYPES: END OF lty_header_texts .
  types:
    BEGIN OF lty_aplic_anticipo.
****        bukrs         TYPE zostb_docexposca-bukrs,
****        zz_nrodocsap  TYPE zostb_docexposca-zz_nrodocsap,
****        zz_numeracion TYPE zostb_docexposca-zz_numeracion,
****        zz_tip_ope    TYPE zostb_docexposc2-zz_tip_ope,
****        zz_mto_pre    TYPE zostb_docexposc2-zz_mto_pre,
****        zz_tidocre    TYPE zostb_docexposc2-zz_tidocre,
****        zz_tipdocant  TYPE zostb_docexposca-zz_tipodoc,
****        zz_ser_ant    TYPE zostb_docexposc2-zz_ser_ant,
****        zz_tot_ant    TYPE zostb_docexposc2-zz_tot_ant,
            INCLUDE TYPE zostb_docexposaa.
    TYPES: END OF lty_aplic_anticipo .
  types:
    BEGIN OF lty_cliente.
****        zz_nrodocsap  TYPE zosed_nrodocsap,
****        zz_numeracion TYPE zosed_numeracion,
****        ruc           TYPE c LENGTH 11,
****        razon_social  TYPE c LENGTH 200,
****        direccion     TYPE c LENGTH 200,
****        telefono      TYPE c LENGTH 200,
****        email         TYPE ad_smtpadr,
****      END OF lty_cliente .
            INCLUDE TYPE zosfees_docexposcl.
    TYPES: END OF lty_cliente .
  types:
    BEGIN OF lty_t005u,
        land1 TYPE t005u-land1,
        bland TYPE t005u-bland,
        bezei TYPE t005u-bezei,
      END OF lty_t005u .
  types:
    BEGIN OF lty_t001z,
        bukrs TYPE t001z-bukrs,
        paval TYPE t001z-paval,
      END OF lty_t001z .
  types:
    BEGIN OF lty_marc,
        matnr TYPE marc-matnr,
        werks TYPE marc-werks,
        stawn TYPE marc-stawn,
      END OF lty_marc .
  types:
    BEGIN OF lty_konv,
        knumv TYPE konv-knumv,
        kposn TYPE konv-kposn,
        kschl TYPE konv-kschl,
        kwert TYPE konv-kwert,
        kbetr TYPE konv-kbetr,
        kstat TYPE konv-kstat,
        kinak TYPE konv-kinak,
        koaid TYPE konv-koaid,
        kmein TYPE konv-kmein,
        kumza TYPE konv-kumza,
        kumne TYPE konv-kumne,
        kpein TYPE kpein,
        kherk TYPE kherk,
        mwsk1 TYPE konv-mwsk1,    " Indicador de Impuestos          I-WMR-060117-3000006260
        mwsk2 TYPE konv-mwsk2,                                      "I-NTP020718-3000009651
        kawrt TYPE konv-kawrt,                                      "I-NTP020718-3000009651
        krech TYPE konv-krech,                                      "I-3000011712-NTP160419
      END OF lty_konv .
  types:
    BEGIN OF lty_likp,
        vbeln     TYPE likp-vbeln,
        xblnr     TYPE likp-xblnr,
        wadat_ist TYPE wadat_ist, "Fecha movimiento de mercancías real
        kunnr     TYPE kunwe,     "Destinatario de mercancías
        route     TYPE likp-route,  " Ruta                          I-WMR-171016-3000005361
        btgew     TYPE likp-btgew,  " Peso total                    I-WMR-171016-3000005361
        gewei     TYPE likp-gewei,  " Unidad de peso                I-WMR-171016-3000005361
        anzpk     TYPE likp-anzpk,  " Cantidad de bultos de entrega I-WMR-231116-3000005346
      END OF lty_likp .
  types:
    BEGIN OF lty_adrc,
        addrnumber TYPE ad_addrnum,
        street     TYPE adrc-street,
        house_num1 TYPE adrc-house_num1,
        str_suppl1 TYPE adrc-str_suppl1,
        city1      TYPE adrc-city1,
        city2      TYPE adrc-city2,
        region     TYPE adrc-region,
        bezei      TYPE t005u-bezei,
      END OF lty_adrc .
  types:
    BEGIN OF lty_catahomo06.
            INCLUDE TYPE zostb_catahomo06.
    TYPES: END OF lty_catahomo06 .
  types:
    BEGIN OF lty_catahomo07.
            INCLUDE TYPE zostb_catahomo07.
    TYPES: END OF lty_catahomo07 .
  types:
    BEGIN OF lty_catahomo09.
            INCLUDE TYPE zostb_catahomo09.
    TYPES:END OF   lty_catahomo09 .
  types:
    BEGIN OF lty_catahomo10.
            INCLUDE TYPE zostb_catahomo10.
    TYPES:END OF   lty_catahomo10 .
  types:
    BEGIN OF lty_catahomo15.
            INCLUDE TYPE zostb_catahomo15.
    TYPES: END OF lty_catahomo15 .
  types:
    BEGIN OF lty_catahomo51.
            INCLUDE TYPE zostb_catahomo51.
    TYPES: END OF lty_catahomo51 .
  types:
    BEGIN OF lty_catahomo53.
            INCLUDE TYPE zostb_catahomo53.
    TYPES: END OF lty_catahomo53 .
  types:
    BEGIN OF lty_catahomo54.
            INCLUDE TYPE zostb_catahomo54.
    TYPES: END OF lty_catahomo54 .
  types:
    BEGIN OF lty_catahomo59.
    INCLUDE TYPE zostb_catahomo59.
  TYPES: END OF lty_catahomo59 .
  types:
    BEGIN OF lty_idcn_excp,
        bukrs TYPE bukrs,
        lotno TYPE lotno,     "Número de pila interno
        bokno TYPE bokno,
        invno TYPE vinvno,
        xblnr TYPE xblnr1,
        issdt TYPE issdt,     "Fecha emisión/anulación
        excif TYPE excif,     "Info breve sobre documento no válido
        bllnr TYPE vbeln_vf,
      END OF   lty_idcn_excp .
  types:
    BEGIN OF lty_idcn_loma,
        bukrs TYPE bukrs,
        lotno TYPE lotno,     "Número de pila interno
        invtp TYPE invtp,     "Tipo de formulario
      END OF   lty_idcn_loma .
  types:
    BEGIN OF lty_lips,
        vbeln TYPE vbeln_vl,
        posnr TYPE posnr_vl,
        uecha TYPE uecha,
        charg TYPE charg_d,
        lfimg TYPE lfimg,
        matnr TYPE matnr,    "Número de material Factura
        posmt TYPE posnr_vf, "Posición de factura
        vkorg TYPE vkorg,
        knumv TYPE knumv,
      END OF   lty_lips .
  types:
    BEGIN OF lty_vbap_lips,
      vbelv TYPE vbfa-vbelv,                                                            "I-WMR-181119-3000013223
      posnv TYPE vbfa-posnv,                                                            "I-WMR-181119-3000013223
      vbeln TYPE vbfa-vbeln,                                                            "I-WMR-181119-3000013223
      posnn TYPE vbfa-posnn,                                                            "I-WMR-181119-3000013223
    END OF lty_vbap_lips .
  types:
    BEGIN OF lty_sumlot,
        charg TYPE charg_d,
        lfimg TYPE lfimg,
      END OF   lty_sumlot .
  types:
    BEGIN OF lty_matrix,
        posmt  TYPE posnr_vf,
        matnr  TYPE matnr,
        charg  TYPE charg_d,
        lfimg  TYPE lfimg,
        netwr  TYPE netwr_fp,
*{  BEGIN OF INSERT WMR-200916-3000005766
        mwsbp  TYPE vbrp-mwsbp,
*}  END OF INSERT WMR-200916-3000005766
        kschl  TYPE kschl,
        kbetr  TYPE kbetr,
        kschl1 TYPE kschl,
        kbetr1 TYPE kbetr,
        vkorg  TYPE vkorg,
      END OF lty_matrix .
  types:
    BEGIN OF lty_agrup,
        posmt  TYPE posnr_vf,
        matnr  TYPE matnr,
        kschl  TYPE kschl,
        kschl1 TYPE kschl,
        kbetr0 TYPE kbetr,
        kbetr1 TYPE kbetr,
        kbetr  TYPE kbetr,
        lfimg  TYPE lfimg,
        netwr  TYPE netwr_fp,
*{  BEGIN OF INSERT WMR-200916-3000005766
        mwsbp  TYPE vbrp-mwsbp,
*}  END OF INSERT WMR-200916-3000005766
**      zlotes TYPE char200,                                                   "E-WMR-051015
        zlotes TYPE string, " Lotes y Cantidad                                  I-WMR-051015
      END OF   lty_agrup .
  types:
    BEGIN OF lty_lips_agr,
        matnr TYPE matnr,
        charg TYPE charg_d,
        lfimg TYPE lfimg,
      END OF   lty_lips_agr .
  types:
    BEGIN OF lty_t052,
        zterm TYPE t052-zterm,     "Clave de condiciones de pago
        ztag1 TYPE t052-ztag1,     "Días a partir de fecha base para plazo de pago
        ztag2 TYPE t052-ztag2,     "Días a partir de fecha base para plazo de pago  "I-100321-NTP-3000016017
        ztag3 TYPE t052-ztag3,     "Días a partir de fecha base para plazo de pago  "I-100321-NTP-3000016017
        xsplt TYPE t052-xsplt,     "Indicador: Condición para pago a plazos         "I-100321-NTP-3000016017
      END OF   lty_t052 .
  types:
    BEGIN OF lty_mara,
        matnr TYPE matnr,
        labor TYPE labor,
      END OF   lty_mara .
  types:
    BEGIN OF lty_ttxit,
        tdobject TYPE ttxit-tdobject,
        tdid     TYPE ttxit-tdid,
        tdtext   TYPE ttxit-tdtext,
      END OF   lty_ttxit .
  types:
    BEGIN OF lty_address,
        adrnr      TYPE  adrnr,
        pais       TYPE  adrc-country,
        depmto     TYPE  bezei40,    " Departamento
        provin     TYPE  ad_city1,   " Provincia
        distri     TYPE  ad_city2,   " Distrito
        street     TYPE  ad_street,  " Dirección
        stnumb     TYPE  ad_hsnm1,   " Número
        str_suppl1 TYPE  adrc-str_suppl1,   "Dirección
        ubigeo     TYPE  adrc-cityp_code,  " Ubigeo
        taxjurcode TYPE  adrc-taxjurcode, "Codigo "I-3000010993-NTP070119
      END OF lty_address .
  types:
    BEGIN OF lty_with_item,
        bukrs     TYPE  with_item-bukrs,
        belnr     TYPE  with_item-belnr,
        gjahr     TYPE  with_item-gjahr,
        buzei     TYPE  with_item-buzei,
        witht     TYPE  with_item-witht,
        wt_withcd TYPE  with_item-wt_withcd,
        wt_qbshh  TYPE  with_item-wt_qbshh,   " Importe de retención en ML
        wt_qsshb  TYPE  with_item-wt_qsshb,   " Base imponible en MD                "I-WMR-271118-3000009765
        wt_qbshb  TYPE  with_item-wt_qbshb,   " Importe de retención en MD          "I-WMR-271118-3000009765
        qsatz     TYPE  with_item-qsatz,      " Porcentaje de retención             "I-WMR-271118-3000009765
        wt_qsshh  TYPE  with_item-wt_qsshh,   " Base imponible en ML                "I-080720-NTP-3000014647
        hkont     TYPE  with_item-hkont,                                            "I-WMR-20112020-3000014557
      END OF lty_with_item .
  types:
    BEGIN OF lty_proxy.
            INCLUDE TYPE zostb_envwsfe.
    TYPES: END OF lty_proxy .
  types:
    BEGIN OF lty_mch1,
        matnr TYPE  mch1-matnr,
        charg TYPE  mch1-charg,
        vfdat TYPE  mch1-vfdat.
    TYPES: END OF lty_mch1 .
  types:
    BEGIN OF lty_mvke,
        matnr TYPE  mvke-matnr,
        vkorg TYPE  mvke-vkorg,
        vtweg TYPE  mvke-vtweg,
        mvgr1 TYPE  mvke-mvgr1.
    TYPES: END OF lty_mvke .
  types:
    BEGIN OF lty_vbpa3,
        vbeln TYPE  vbpa3-vbeln,
        posnr TYPE  vbpa3-posnr,
        parvw TYPE  vbpa3-parvw,
        stcdt TYPE  vbpa3-stcdt,
        stcd1 TYPE  vbpa3-stcd1,
        stkzn TYPE  vbpa3-stkzn.
    TYPES: END OF lty_vbpa3 .
  types:
    BEGIN OF ty_numeracion,
        bukrs  TYPE t001-bukrs,
        identi TYPE zostb_rbcab-zz_identifiresu,
        correl TYPE numc06.
    TYPES: END OF ty_numeracion .
  types:
    BEGIN OF ty_bus_part,
        kunnr    TYPE kna1-kunnr,                                                        "I-WMR-121018-3000009765
        partner  TYPE dfkkbptaxnum-partner,                                              "I-WMR-121018-3000009765
        taxtype  TYPE dfkkbptaxnum-taxtype,                                              "I-WMR-121018-3000009765
        taxnum   TYPE dfkkbptaxnum-taxnum,                                               "I-WMR-121018-3000009765
        taxnumxl TYPE dfkkbptaxnum-taxnum.                                             "I-WMR-310119-3000011180
    TYPES: END OF ty_bus_part .
  types:
    BEGIN OF ty_but000,
        customer  TYPE cvi_cust_link-customer,                                            "I-WMR-111218-3000009765
        partner   TYPE but000-partner,                                                    "I-WMR-111218-3000009765
        type      TYPE but000-type,                                                       "I-WMR-111218-3000009765
        name_org1 TYPE but000-name_org1,                                                  "I-WMR-111218-3000009765
        name_org2 TYPE but000-name_org2,                                                  "I-WMR-111218-3000009765
        name_org3 TYPE but000-name_org3,                                                  "I-WMR-111218-3000009765
        name_org4 TYPE but000-name_org4.                                                  "I-WMR-111218-3000009765
    TYPES: END OF ty_but000 .
  types:
    BEGIN OF ty_bp_pers,
        kunnr        TYPE kna1-kunnr,                                                        "I-WMR-271118-3000010852
        relnr        TYPE but051-relnr,                                                      "I-WMR-271118-3000010852
        partner1     TYPE but051-partner1,                                                   "I-WMR-271118-3000010852
        partner2     TYPE but051-partner2,                                                   "I-WMR-271118-3000010852
        date_to      TYPE but051-date_to,                                                    "I-WMR-271118-3000010852
        reltyp       TYPE but051-reltyp,                                                     "I-WMR-271118-3000010852
        pafkt        TYPE but051-pafkt,                                                      "I-WMR-271118-3000010852
        smtp_address TYPE but051-smtp_address.                                            "I-WMR-271118-3000010852
    TYPES: END OF ty_bp_pers .
  types:
    BEGIN OF lty_t059minmax,
        land1     TYPE t059minmax-land1,                                                  "I-WMR-10092020-3000015240
        witht     TYPE t059minmax-witht,                                                  "I-WMR-10092020-3000015240
        wt_withcd TYPE t059minmax-wt_withcd,                                              "I-WMR-10092020-3000015240
        wt_date   TYPE t059minmax-wt_date,                                                "I-WMR-10092020-3000015240
        waers     TYPE t059minmax-waers,                                                  "I-WMR-10092020-3000015240
        wt_wtminb TYPE t059minmax-wt_wtminb,                                              "I-WMR-10092020-3000015240
        endda     TYPE datum.                                                             "I-WMR-10092020-3000015240
    TYPES: END OF lty_t059minmax .
  types:
    ltt_kna1  TYPE STANDARD TABLE OF ty_kna1 .
  types:
    ltt_docexposca TYPE STANDARD TABLE OF zoses_docexposca .
  types:
    ltt_docexposde TYPE STANDARD TABLE OF zoses_docexposde .
  types:
    ltt_docexposcl TYPE STANDARD TABLE OF zoses_docexposcl .
  types:
    ltt_vbrk TYPE STANDARD TABLE OF lty_vbrk .
  types:
    ltt_knvv TYPE STANDARD TABLE OF lty_knvv .
  types:
    ltt_vbrp TYPE STANDARD TABLE OF lty_vbrp .
  types:
    ltt_vbrp_f TYPE STANDARD TABLE OF lty_vbrp_f .
  types:
    ltt_vbpa TYPE STANDARD TABLE OF lty_vbpa .
  types:
    ltt_header_texts TYPE STANDARD TABLE OF lty_header_texts .
  types:
    ltt_aplic_anticipo TYPE STANDARD TABLE OF lty_aplic_anticipo .
  types:
    ltt_adrc TYPE STANDARD TABLE OF lty_adrc .
  types:
    ltt_t005u TYPE STANDARD TABLE OF lty_t005u .
  types:
    ltt_t001z TYPE STANDARD TABLE OF lty_t001z .
  types:
    ltt_likp TYPE STANDARD TABLE OF lty_likp .
  types:
    ltt_cabsal TYPE STANDARD TABLE OF lty_cabecera_salida .
  types:
    ltt_cabsal2 TYPE STANDARD TABLE OF lty_cabecera_sal2 .
  types:
    ltt_detsal TYPE STANDARD TABLE OF lty_detalle_salida .
  types:
    ltt_cliente TYPE STANDARD TABLE OF lty_cliente .
  types:
    ltt_cabsalres TYPE STANDARD TABLE OF lty_cabecera_salida2 .
  types:
    ltt_desalres TYPE STANDARD TABLE OF lty_detalle_salida2 .
  types:
    ltt_cabmo TYPE STANDARD TABLE OF lty_cabecera_monitor .
  types:
    ltt_rbdet TYPE STANDARD TABLE OF zostb_rbdet .
  types:
    ltt_bacab TYPE STANDARD TABLE OF zostb_bacab .
  types:
    ltt_badet TYPE STANDARD TABLE OF zostb_badet .
  types:
    ltt_balog TYPE STANDARD TABLE OF zostb_balog .
  types:
    ltt_rblog TYPE STANDARD TABLE OF zostb_rblog .
  types:
    ltt_matrix TYPE STANDARD TABLE OF lty_matrix .
  types:
    ltt_agrup TYPE STANDARD TABLE OF lty_agrup .
  types:
    ltt_text TYPE STANDARD TABLE OF lty_text .
  types:
    tt_numeracion  TYPE STANDARD TABLE OF ty_numeracion .
  types:
    ltt_guiremi TYPE STANDARD TABLE OF lty_guiremi .
  types:
    ltt_with_item TYPE STANDARD TABLE OF lty_with_item .

  constants GC_CAMPO_HOST type STRING value 'HOSTNAME' ##NO_TEXT.
  constants GC_CAMPO_MANDT_PRD type STRING value 'MANDTPRD' ##NO_TEXT.
  constants GC_CAMPO_TEST_ACT type STRING value 'TEST_ACT' ##NO_TEXT.
  constants GC_COUNTCHAR_DESCR_BS type I value 233 ##NO_TEXT.
  constants GC_PARVW_AG type VBPA-PARVW value 'AG' ##NO_TEXT.
  constants GC_PARVW_RG type VBPA-PARVW value 'RG' ##NO_TEXT.
  constants GC_PARVW_WE type VBPA-PARVW value 'WE' ##NO_TEXT.
  constants GC_PARVW_ZD type VBPA-PARVW value 'ZD' ##NO_TEXT.
  constants GC_PARVW_RE type VBPA-PARVW value 'RE' ##NO_TEXT.
  constants GC_PARVW_1D type VBPA-PARVW value '1D' ##NO_TEXT.
  constants GC_PERU type T005-LAND1 value 'PE' ##NO_TEXT.
  constants GC_EEUU type T005-LAND1 value 'US' ##NO_TEXT.
  constants GC_BOLIVIA type T005-LAND1 value 'BO' ##NO_TEXT.
  constants GC_ESPANOL type SPRAS value 'S' ##NO_TEXT.
  constants GC_INGLES type SPRAS value 'E' ##NO_TEXT.
  constants GC_AFECTO_IGV type STRING value 'A' ##NO_TEXT.
  constants GC_APLIC type ZOSTB_CONST_FE-APLICACION value 'EXTRACTOR' ##NO_TEXT.
  constants GC_AUART_1 type AUART value 'ZSNC' ##NO_TEXT.
  constants GC_AUART_2 type AUART value 'ZSND' ##NO_TEXT.
  constants GC_AUART_3 type AUART value 'ZPCA' ##NO_TEXT.
  constants GC_AUART_4 type AUART value 'ZPCL' ##NO_TEXT.
  constants GC_CHAR0 type CHAR1 value '0' ##NO_TEXT.
  constants GC_CHAR1 type CHAR1 value '1' ##NO_TEXT.
  constants GC_CHAR6 type CHAR1 value '6' ##NO_TEXT.
  constants GC_CHARA type CHAR01 value 'A' ##NO_TEXT.
  constants GC_CHARB type CHAR01 value 'B' ##NO_TEXT.
  constants GC_CHARC type CHAR01 value 'C' ##NO_TEXT.
  constants GC_CHARD type CHAR01 value 'D' ##NO_TEXT.
  constants GC_CHARE type CHAR01 value 'E' ##NO_TEXT.
  constants GC_CHARG type CHAR01 value 'G' ##NO_TEXT.
  constants GC_CHARH type CHAR01 value 'H' ##NO_TEXT.
  constants GC_CHARI type CHAR01 value 'I' ##NO_TEXT.
  constants GC_CHARJ type CHAR01 value 'J' ##NO_TEXT.
  constants GC_CHARK type CHAR01 value 'K' ##NO_TEXT.
  constants GC_CHARL type CHAR01 value 'L' ##NO_TEXT.
  constants GC_CHARM type CHAR01 value 'M' ##NO_TEXT.
  constants GC_CHARN type CHAR01 value 'N' ##NO_TEXT.
  constants GC_CHARO type CHAR01 value 'O' ##NO_TEXT.
  constants GC_CHARP type CHAR01 value 'P' ##NO_TEXT.
  constants GC_CHARS type CHAR01 value 'S' ##NO_TEXT.
  constants GC_CHART type CHAR01 value 'T' ##NO_TEXT.
  constants GC_CHARV type CHAR01 value 'V' ##NO_TEXT.
  constants GC_CODAFEC1 type CHAR2 value '10' ##NO_TEXT.
  constants GC_CODAFEC15 type CHAR2 value '15' ##NO_TEXT.
  constants GC_CODAFEC2 type CHAR2 value '30' ##NO_TEXT.
  constants GC_CODAFEC3 type CHAR2 value '40' ##NO_TEXT.
  constants GC_CODAFEC31 type CHAR2 value '31' ##NO_TEXT.
  constants GC_CODAFEC4 type CHAR2 value '20' ##NO_TEXT.
  constants GC_COMPONENT_S4CORE type CVERS-COMPONENT value 'S4CORE' ##NO_TEXT.
  constants GC_DOC_REF type CHAR40 value '{“0”:””, “1”:””}, {“0”:””, “1”:””}' ##NO_TEXT.
  constants GC_EXONER_IGV type STRING value 'E' ##NO_TEXT.
  constants GC_DOUBLE_QUOTES type STRING value '"' ##NO_TEXT.
  constants GC_BACKSLASH_DOUBLEQUOTES type STRING value '\"' ##NO_TEXT.
  constants GC_CRLF type STRING value '#' ##NO_TEXT.
  constants GC_FKART type FKART value 'ZNCA' ##NO_TEXT.
  constants GC_FNAME_KALSM type CHAR30 value 'ZOSES_KALSM_RANGE' ##NO_TEXT.
  constants GC_ID_PROXY type STRING value 'PRX' ##NO_TEXT.
  constants GC_INAFEC_IGV type STRING value 'I' ##NO_TEXT.
  constants GC_KALSM type KALSMASD value 'ZAC002' ##NO_TEXT.
  constants GC_KHERK_A type KONV-KHERK value 'A' ##NO_TEXT.
  constants GC_KOAID_A type KONV-KOAID value 'A' ##NO_TEXT.
  constants GC_KOAID_B type KONV-KOAID value 'B' ##NO_TEXT.
  constants GC_KOAID_D type KONV-KOAID value 'D' ##NO_TEXT.
  constants GC_KSCHL1 type KSCHL value 'ZDSP' ##NO_TEXT.
  constants GC_KSCHL2 type KSCHL value 'ZDSA' ##NO_TEXT.
  constants GC_KSCHL_1 type KONV-KSCHL value 'ZPRB' ##NO_TEXT.
  constants GC_KSCHL_2 type KONV-KSCHL value 'ZDPC' ##NO_TEXT.
  constants GC_KTGRD_01 type KTGRD value '01' ##NO_TEXT.
  constants GC_KTGRD_02 type KTGRD value '02' ##NO_TEXT.
  constants GC_KTGRD_03 type KTGRD value '03' ##NO_TEXT.
  constants GC_KTGRD_04 type KTGRD value '04' ##NO_TEXT.
  constants GC_KTGRD_05 type KTGRD value '05' ##NO_TEXT.
  constants GC_KTGRD_06 type KTGRD value '06' ##NO_TEXT.
  constants GC_KTGRD_07 type KTGRD value '07' ##NO_TEXT.
  constants GC_KTOKD type KNA1-KTOKD value 'ZEMP' ##NO_TEXT.
  constants GC_MODU type ZOSTB_CONST_FE-MODULO value 'SD' ##NO_TEXT.
  constants GC_PARTY type T001Z-PARTY value 'TAXNR' ##NO_TEXT.
  constants GC_PREFIX_BJ type CHAR02 value 'BJ' ##NO_TEXT.
  constants GC_PREFIX_BL type CHAR02 value 'BL' ##NO_TEXT.
  constants GC_PREFIX_FC type CHAR02 value 'FC' ##NO_TEXT.
  constants GC_PREFIX_NC type CHAR02 value 'NC' ##NO_TEXT.
  constants GC_PREFIX_ND type CHAR02 value 'ND' ##NO_TEXT.
  constants GC_PREFIX_RB type CHAR02 value 'RB' ##NO_TEXT.
  constants GC_PROG type PROGRAMM value 'ZOSSD_PRO_EXTRAC' ##NO_TEXT.
  constants GC_PSTYV_DI1 type PSTYV value 'ZPDS' ##NO_TEXT.
  constants GC_PSTYV_DI2 type PSTYV value 'ZPPS' ##NO_TEXT.
  constants GC_RFBSK_C type RFBSK value 'C' ##NO_TEXT.
  constants GC_STATUSCDR_0 type ZOSED_STATUS_CDR value '0' ##NO_TEXT.
  constants GC_STATUSCDR_1 type ZOSED_STATUS_CDR value '1' ##NO_TEXT.
  constants GC_STATUSCDR_2 type ZOSED_STATUS_CDR value '2' ##NO_TEXT.
  constants GC_STATUSCDR_3 type ZOSED_STATUS_CDR value '3' ##NO_TEXT.
  constants GC_STATUSCDR_4 type ZOSED_STATUS_CDR value '4' ##NO_TEXT.
  constants GC_STATUSCDR_5 type ZOSED_STATUS_CDR value '5' ##NO_TEXT.
  constants GC_STATUSCDR_6 type ZOSED_STATUS_CDR value '6' ##NO_TEXT.
  constants GC_STATUSCDR_7 type ZOSED_STATUS_CDR value '7' ##NO_TEXT.
  constants GC_STATUSCDR_8 type ZOSED_STATUS_CDR value '8' ##NO_TEXT.
  constants GC_STATUSCDR_9 type ZOSED_STATUS_CDR value '9' ##NO_TEXT.
  constants GC_STCDT type J_1ATOID value '6' ##NO_TEXT.
  constants GC_SYSTEM_SUNAT_HOMO type STRING value 'HOM' ##NO_TEXT.
  constants GC_SYSTEM_SUNAT_PROD type STRING value 'PRD' ##NO_TEXT.
  constants GC_SYSTEM_SUNAT_TEST type STRING value 'TES' ##NO_TEXT.
  constants GC_TABNAME_KONV type TABNAME value 'KONV' ##NO_TEXT.
  constants GC_TABNAME_PRCD_ELEMENTS type TABNAME value 'PRCD_ELEMENTS' ##NO_TEXT.
  constants GC_TIPDOC_BL type DOCCLS value '03' ##NO_TEXT.
  constants GC_TIPDOC_FA type DOCCLS value '01' ##NO_TEXT.
  constants GC_TIPDOC_NC type DOCCLS value '07' ##NO_TEXT.
  constants GC_TIPDOC_ND type DOCCLS value '08' ##NO_TEXT.
  constants GC_TIPOP_01 type ZOSTB_DOCEXPOSAA-ZZ_TIP_OPE value '01' ##NO_TEXT.
  constants GC_TIPOP_02 type ZOSTB_DOCEXPOSAA-ZZ_TIP_OPE value '02' ##NO_TEXT.
  constants GC_TIPOP_04 type ZOSTB_DOCEXPOSAA-ZZ_TIP_OPE value '04' ##NO_TEXT.
  constants GC_TIPOP_05 type ZOSTB_DOCEXPOSAA-ZZ_TIP_OPE value '05' ##NO_TEXT.
  constants GC_TIPOP_0101 type ZOSTB_DOCEXPOSAA-ZZ_TIP_OPE value '0101' ##NO_TEXT.
  constants GC_TIPOP_0200 type ZOSTB_DOCEXPOSAA-ZZ_TIP_OPE value '0200' ##NO_TEXT.
  constants GC_TIPOP_0201 type ZOSTB_DOCEXPOSAA-ZZ_TIP_OPE value '0201' ##NO_TEXT.
  constants GC_TIPOP_0401 type ZOSTB_DOCEXPOSAA-ZZ_TIP_OPE value '0401' ##NO_TEXT.
  constants GC_VBELN type VBRK-VBELN value '9999999999' ##NO_TEXT.
  constants GC_VBTYP_N type VBTYP_N value 'N' ##NO_TEXT.
  constants GC_VBTYP_S type VBTYP_N value 'S' ##NO_TEXT.
  constants GC_VERSION_1 type ZOSED_VERSIVIGEN value '01' ##NO_TEXT.
  constants GC_VERSION_2 type ZOSED_VERSIVIGEN value '02' ##NO_TEXT.
  constants GC_VKORG1 type VKORG value 'AC01' ##NO_TEXT.
  constants GC_VKORG2 type VKORG value 'AC02' ##NO_TEXT.
  constants GC_VKORG3 type VKORG value 'AC03' ##NO_TEXT.
  constants GC_VKORG4 type VKORG value 'AC04' ##NO_TEXT.
  constants GC_VTWEG1 type VTWEG value 'A1' ##NO_TEXT.
  constants GC_VTWEG2 type VTWEG value 'A2' ##NO_TEXT.
  constants GC_VTWEG3 type VTWEG value 'B1' ##NO_TEXT.
  constants GC_VTWEG4 type VTWEG value 'B2' ##NO_TEXT.
  constants GC_WAERS_PEN type WAERS value 'PEN' ##NO_TEXT.
  data GC_PVMIN type VBRP-NETWR value '0.01' ##NO_TEXT.
  data GS_SERIE_REFNC type ZOSTB_CONST_FE .
  data GS_CONSEXTSUN type LTY_CONSEXTSUN .
  data GS_PROCESS type TY_PROCESS .
  data:
    gt_mara TYPE STANDARD TABLE OF lty_mara .
  data:
    gt_t052 TYPE STANDARD TABLE OF lty_t052 .
  data GW_CTROL type C .
  data GW_DIREC type CHAR200 .
  data GW_DIR_LLE type CHAR200 .
  data GW_IGVPORCENT type CHAR5 .
  data GW_LABOR type LABOR .
  data GW_LICENSE type STRING .
  data GW_PARVW_VE type VBPA-PARVW value 'VE' ##NO_TEXT.
  data GW_PERNR type PERNR_D .
  data GW_SIN_AGRUP_POS type CHAR01 .
  data GW_SW_PERNR type CHAR1 .
  data GW_TIPDOC type DOCCLS .
  data GW_UND_PRNT_SAP type CHAR01 .
  data GW_IMP_BOIGV type XFELD value '' ##NO_TEXT.
  data GW_IMP_BOTG type XFELD value '' ##NO_TEXT.
  data GW_VBELN type VBELN .
  data GW_VGBEL type VGBEL .
  data GW_XBLNR type XBLNR_V1 .
  data LS_IDCN_EXCP type LTY_IDCN_EXCP .
  data LS_IDCN_LOMA type LTY_IDCN_LOMA .
  data ZS_LABOR_CTRL type ZOSTB_CONST_FE .
  data:
    lth_ttxit TYPE HASHED TABLE OF lty_ttxit  WITH UNIQUE KEY tdobject tdid .
  data:
    ltr_exonera TYPE RANGE OF stawn .
  data:
    ltr_fecfac TYPE RANGE OF vbrk-fkdat .
  data:
    ltr_fkart TYPE RANGE OF vbrk-fkart .
  data:
    ltr_fkart3 TYPE RANGE OF vbrk-fkart .
  data:
    ltr_fkart4 TYPE RANGE OF vbrk-fkart .
  data:
    ltr_fkart7 TYPE RANGE OF vbrk-fkart .
  data:
    ltr_fkart8 TYPE RANGE OF vbrk-fkart .
  data:
    ltr_kalsm_e TYPE RANGE OF zoses_kalsm_range .
  data:
    ltr_kschl TYPE RANGE OF konv-kschl .
  data:
    ltr_numer TYPE RANGE OF char13 .
  data:
    ltr_pstyv TYPE RANGE OF vbrp-pstyv .
  data:
    ltr_status TYPE RANGE OF zosed_status_cdr .
  data:
    ltr_vbeln TYPE RANGE OF vbrk-vbeln .
  data:
    ltr_vkorgvi TYPE RANGE OF vbrk-vkorg .        "I LJG-20160415
  data:
    ltr_vkorgvsp TYPE RANGE OF vbrk-vkorg .        "I LJG-20160415
  data:
    ltr_vtwegvi TYPE RANGE OF vbrk-vtweg .        "I LJG-20160415
  data:
    ltr_vtwegvsp TYPE RANGE OF vbrk-vtweg .        "I LJG-20160415
  data:
    ltr_motnc_ajfp TYPE RANGE OF zostb_catahomo09-zz_codigo_sunat .                       "I-WMR-19032021-3000016455
  data:
    lt_adr6 TYPE TABLE OF ty_adr6 .
  data:
    lt_adrc TYPE TABLE OF lty_adrc .
  data:
    lt_adrc_aux TYPE TABLE OF ty_adrc .
  data:
    lt_adrc_ct TYPE TABLE OF ty_adrc .
  data:
    lt_agrup TYPE STANDARD TABLE OF lty_agrup .
  data LT_APLICA_ANTICIPO type LTT_APLIC_ANTICIPO .
  data:
    lt_aubel TYPE TABLE OF lty_aubel .
  data:
    lt_balog TYPE TABLE OF zostb_balog .
  data:
    lt_balogg_aux TYPE STANDARD TABLE OF zostb_balog .
  data:
    lt_cata01 TYPE TABLE OF lty_cata01 .
  data:
    lt_cata03 TYPE HASHED TABLE OF lty_cata03  WITH UNIQUE KEY msehi .
  data:
    lt_cata05 TYPE TABLE OF lty_cata05 .
  data:
    lt_cata07 TYPE TABLE OF lty_cata07 .
  data:
    lt_cata11 TYPE TABLE OF lty_cata11 .
  data:
    lt_cata14 TYPE TABLE OF lty_cata14 .
  data:
    lt_cata15 TYPE TABLE OF lty_cata15 .
  data:
    lt_cata16 TYPE TABLE OF lty_cata16 .
  data:
    lt_cata17 TYPE TABLE OF zostb_catalogo17 .
  data:
    lt_cata51 TYPE TABLE OF zostb_catalogo51 .
  data:
    lt_cata52 TYPE TABLE OF zostb_catalogo52 .
  data:
    lt_cata53 TYPE TABLE OF zostb_catalogo53 .
  data:
    lt_cata54 TYPE TABLE OF zostb_catalogo54 .
  data:
    lt_catahomo06 TYPE TABLE OF lty_catahomo06 .
  data:
    lt_catahomo07 TYPE HASHED TABLE OF lty_catahomo07  WITH UNIQUE KEY taxm1 augru .
  data:
    lt_catahomo08 TYPE HASHED TABLE OF lty_catahomo08  WITH UNIQUE KEY taxm1 .
  data:
    lt_catahomo09 TYPE TABLE OF lty_catahomo09 .
  data:
    lt_catahomo10 TYPE TABLE OF lty_catahomo10 .
  data:
    lt_catahomo12 TYPE HASHED TABLE OF lty_catahomo12  WITH UNIQUE KEY zz_tip_doc zz_tidocre .
  data:
    lt_catahomo15 TYPE HASHED TABLE OF lty_catahomo15  WITH UNIQUE KEY bukrs witht wt_withcd .
  data:
    lt_catahomo51 TYPE TABLE OF lty_catahomo51 .
  data:
    lt_catahomo53 TYPE TABLE OF lty_catahomo53 .
  data:
    lt_catahomo54 TYPE HASHED TABLE OF lty_catahomo54  WITH UNIQUE KEY witht wt_withcd .
  data:
    lt_catahomo59 TYPE TABLE OF lty_catahomo59 .
  data:
    lth_asgtnhr   TYPE HASHED TABLE OF lty_asgtnhr  WITH UNIQUE KEY taxtype .
  data:
    lt_const TYPE TABLE OF lty_const .
  data:
    lt_constakonv TYPE TABLE OF lty_constakonv .
  data:
    lt_constauart TYPE TABLE OF lty_constauart .
  data:
    lt_constfkart TYPE TABLE OF lty_constfkart .
  data:
    lt_constkdgrp TYPE TABLE OF lty_constkdgrp .
  data:
    lt_constpstyv TYPE TABLE OF lty_constpstyv .
  data:
    lt_catacons TYPE TABLE OF lty_catacons .
  data:
    lt_felog TYPE TABLE OF zostb_felog .
  data:
    lt_guiremi TYPE TABLE OF lty_guiremi .
  data:
    lt_idcn_excp TYPE STANDARD TABLE OF lty_idcn_excp .
  data:
    lt_idcn_loma TYPE STANDARD TABLE OF lty_idcn_loma .
  data:
    lt_kna1 TYPE TABLE OF ty_kna1 .
  data:
    lt_knvv TYPE STANDARD TABLE OF lty_knvv .
  data:
    lt_konv TYPE SORTED TABLE OF lty_konv WITH NON-UNIQUE KEY knumv kposn koaid .
  data:
    lt_konvv TYPE SORTED TABLE OF lty_konv WITH NON-UNIQUE KEY knumv kposn kschl .
  data:
    lt_likp TYPE TABLE OF lty_likp .
  data:
    lt_lips TYPE STANDARD TABLE OF lty_lips .
  data:
    lt_vbap_lips TYPE STANDARD TABLE OF lty_vbap_lips .
  data:
    lt_marc TYPE SORTED TABLE OF lty_marc WITH NON-UNIQUE KEY matnr werks .
  data:
    lt_matrix TYPE STANDARD TABLE OF lty_matrix .
  data:
    lt_proxy TYPE STANDARD TABLE OF lty_proxy .
  data:
    lt_rblog TYPE TABLE OF zostb_rblog .
  data:
    lt_t001w TYPE TABLE OF ty_t001w .
  data:
    lt_t001z TYPE TABLE OF lty_t001z .
  data:
    lt_t005u TYPE TABLE OF lty_t005u .
  data:
    lt_t006 TYPE TABLE OF t006 .
  data:
    lt_t052u TYPE TABLE OF t052u .
  data:
    lt_t042z TYPE HASHED TABLE OF t042z WITH UNIQUE KEY land1 zlsch .
  data:
    lt_text TYPE TABLE OF lty_text .
  data:
    lt_tvaut TYPE TABLE OF lty_tvaut .
  data:
    lt_vbak TYPE SORTED TABLE OF lty_vbak  WITH NON-UNIQUE KEY vbeln .
  data:
    lt_vbap_07 TYPE TABLE OF lty_vbap_07 .
  data:
    lt_vbfa_aux TYPE TABLE OF ty_vbfa_aux .
  data:
    lt_vbpa TYPE SORTED TABLE OF lty_vbpa  WITH NON-UNIQUE KEY vbeln .
  data:
    lt_vbrk_07 TYPE TABLE OF lty_vbrk_07 .
  data:
    lt_vbrk_ref TYPE TABLE OF lty_vbrk_ref .
  data:
    lt_vbrp_0701 TYPE TABLE OF lty_vbrp_0701 .
  data:
    lt_vbrp_ref TYPE TABLE OF lty_vbrp_ref .
  data:
    lwa_adrc LIKE LINE OF lt_adrc .
  data:
    lwa_aubel LIKE LINE OF lt_aubel .
  data:
    lwa_cata01 LIKE LINE OF lt_cata01 .
  data:
    lwa_cata03 LIKE LINE OF lt_cata03 .
  data:
    lwa_cata05 LIKE LINE OF lt_cata05 .
  data:
    lwa_cata07 LIKE LINE OF lt_cata07 .
  data:
    lwa_cata11 LIKE LINE OF lt_cata11 .
  data:
    lwa_cata14 LIKE LINE OF lt_cata14 .
  data:
    lwa_cata15 LIKE LINE OF lt_cata15 .
  data:
    lwa_cata16 LIKE LINE OF lt_cata16 .
  data:
    ls_cata05 LIKE LINE OF lt_cata05 .
  data:
    ls_cata15 LIKE LINE OF lt_cata15 .
  data:
    ls_cata17 LIKE LINE OF lt_cata17 .
  data:
    ls_cata52 LIKE LINE OF lt_cata52 .
  data:
    ls_cata53 LIKE LINE OF lt_cata53 .
  data:
    ls_cata54 LIKE LINE OF lt_cata54 .
  data:
    lwa_catahomo06 LIKE LINE OF lt_catahomo06 .
  data:
    lwa_catahomo07 LIKE LINE OF lt_catahomo07 .
  data:
    lwa_catahomo08 LIKE LINE OF lt_catahomo08 .
  data:
    lwa_catahomo12 LIKE LINE OF lt_catahomo12 .
  data:
    lwa_catahomo15 LIKE LINE OF lt_catahomo15 .
  data:
    lwa_catahomo51 LIKE LINE OF lt_catahomo51 .
  data:
    lwa_catahomo53 LIKE LINE OF lt_catahomo53 .
  data:
    ls_catahomo53 LIKE LINE OF lt_catahomo53 .
  data:
    lwa_catahomo54 LIKE LINE OF lt_catahomo54 .
  data:
    lwa_catahomo59 LIKE LINE OF lt_catahomo59 .
  data:
    lwa_constakonv LIKE LINE OF lt_constakonv .
  data:
    lwa_constauart LIKE LINE OF lt_constauart .
  data:
    lwa_constfkart LIKE LINE OF lt_constfkart .
  data:
    lwa_constkdgrp LIKE LINE OF lt_constkdgrp .
  data:
    lwa_constpstyv LIKE LINE OF lt_constpstyv .
  data:
    lwa_fkart LIKE LINE OF ltr_fkart .
  data:
    lwa_guiremi LIKE LINE OF lt_guiremi .
  data:
    lwa_konv LIKE LINE OF lt_konv .
  data:
    lwa_kschl LIKE LINE OF ltr_kschl .
  data:
    lwa_likp LIKE LINE OF lt_likp .
  data:
    lwa_marc LIKE LINE OF lt_marc .
  data:
    lwa_pstyv LIKE LINE OF ltr_pstyv .
  data:
    lwa_t001z LIKE LINE OF lt_t001z .
  data:
    lwa_t005u LIKE LINE OF lt_t005u .
  data:
    lwa_t006 LIKE LINE OF lt_t006 .
  data:
    lwa_tvaut LIKE LINE OF lt_tvaut .
  data:
    lwa_vbak LIKE LINE OF lt_vbak .
  data:
    lwa_vbpa LIKE LINE OF lt_vbpa .
  data:
    lwa_vbrk_ref LIKE LINE OF lt_vbrk_ref .
  data:
    lwa_vbrp_ref LIKE LINE OF lt_vbrp_ref .
  data LW_CLASE type STRING .
  data LW_METHO type STRING .
  data OBJETO type ref to OBJECT .
  data:
    rs_status LIKE LINE OF ltr_status .
  data:
    rs_vkorgvi LIKE LINE OF ltr_vkorgvi .        "I LJG--20160415
  data:
    rs_vkorgvsp LIKE LINE OF ltr_vkorgvi .        "I LJG--20160415
  data:
    rs_vtwegvi LIKE LINE OF ltr_vtwegvi .        "I LJG--20160415
  data:
    rs_vtwegvsp LIKE LINE OF ltr_vtwegvi .        "I LJG--20160415
  data GS_UBL type ZOSFETB_UBL .
  data:
    BEGIN OF zconst,
        cubso_f_active TYPE datum,
        formapago_isactive TYPE xfeld,
      END OF zconst .

  methods GET_FORMADEPAGO
    importing
      !IS_VBRK type LTY_VBRK
      !IT_VBRP type LTT_VBRP
    exporting
      !E_FP_FEC_VTO type LTY_VBRK-ZZ_FP_FEC_VTO
      !E_FP_TIPO type LTY_VBRK-ZZ_FP_TIPO
      !E_FP_TOTAL type LTY_VBRK-ZZ_FP_TOTAL
      !E_FP_NC_AJUSTE type XFELD
      !ET_FORMAPAGO type LTY_VBRK-T_FORMAPAGO
      !E_CHECK_TG type XFELD .
  methods BUILD_ADITIONAL_TEXT_POSITION
    importing
      !IS_VBRK type LTY_VBRK
      !IS_VBRP type LTY_VBRP
    returning
      value(R_TEXT) type STRING .
  methods CALL_WS_BAJ
    importing
      !PI_BUKRS type BUKRS
      !PI_BACAB type LTT_BACAB
      !PI_BADET type LTT_BADET
      !PI_FECFAC type VBRK-FKDAT
    exporting
      !PE_ERROR type CHAR01
      !PE_MESSAGE type BAPIRETTAB .
  methods CALL_WS_BL
    importing
      !IS_NOJSON_DATA type GTY_NOJSON_DATA
      !IS_JSON_DATA type GTY_JSON_DATA
      !IS_OPTIONS type ZOSFEES_EXTRACT_OPTIONS
    exporting
      !PE_MESSAGE type BAPIRETTAB .
  methods CALL_WS_FA
    importing
      !IS_NOJSON_DATA type GTY_NOJSON_DATA
      !IS_JSON_DATA type GTY_JSON_DATA
      !IS_OPTIONS type ZOSFEES_EXTRACT_OPTIONS
    exporting
      !PE_MESSAGE type BAPIRETTAB .
  methods CALL_WS_MAIN
    importing
      !PI_BUKRS type BUKRS
      !PI_TIPDOC type BLART
      !PI_FECFAC type VBRK-FKDAT
      !PI_INPUT type ANY
      !PI_VBELN type VBELN optional
      !PI_ID type CLIKE
      !IS_OPTIONS type ZOSFEES_EXTRACT_OPTIONS optional
    exporting
      !PE_OUTPUT type ANY
      !PE_MESSAGE type BAPIRETTAB .
  methods CALL_WS_NC
    importing
      !IS_NOJSON_DATA type GTY_NOJSON_DATA
      !IS_JSON_DATA type GTY_JSON_DATA
      !IS_OPTIONS type ZOSFEES_EXTRACT_OPTIONS
    exporting
      !PE_MESSAGE type BAPIRETTAB .
  methods CALL_WS_ND
    importing
      !IS_NOJSON_DATA type GTY_NOJSON_DATA
      !IS_JSON_DATA type GTY_JSON_DATA
      !IS_OPTIONS type ZOSFEES_EXTRACT_OPTIONS
    exporting
      !PE_MESSAGE type BAPIRETTAB .
  methods CALL_WS_RES
    importing
      !PI_BUKRS type BUKRS
      !PI_CAB type LTT_RBCAB
      !PI_DET type LTT_RBDET
      !PI_FECFAC type VBRK-FKDAT
    exporting
      !PE_ERROR type CHAR01
      !PE_MESSAGE type BAPIRETTAB .
  methods CALL_WS_RES_V2
    importing
      !PI_BUKRS type BUKRS
      !PI_CAB type LTT_RBCAB_JSON
      !PI_DET type LTT_RBDET_V2_JSON
      !PI_FECFAC type VBRK-FKDAT
    exporting
      !PE_ERROR type CHAR01
      !PE_MESSAGE type BAPIRETTAB
    exceptions
      ERROR .
  methods CHECK_FIELD
    importing
      !PI_BADET type LTT_BADET
      !PI_FECFAC type VBRK-FKDAT
    exporting
      !PE_ERROR type CHAR1
      !PE_BALOG type LTT_BALOG .
  methods CHECK_FIELD_RES
    importing
      !PI_CAB type LTT_CABSALRES
      !PI_DET type LTT_DESALRES
      !PI_FECFAC type VBRK-FKDAT
    exporting
      !PE_ERROR type CHAR01
      !PE_RBLOG type LTT_RBLOG .
  methods CHECK_FIELD_RES_V2
    importing
      !PI_CAB type LTT_RBCAB
      !PI_DET type LTT_RBDET_V2
      !PI_FECFAC type VBRK-FKDAT
    exporting
      !PE_RBLOG type LTT_RBLOG
    exceptions
      ERROR .
  methods CHECK_HOMO
    importing
      !IS_DATA type GTY_NOJSON_DATA
      !IT_VBRK type LTT_VBRK
    changing
      !PE_ERROR type CHAR1
      !PE_MESSAGE type BAPIRETTAB .
  methods CONCATENATE_JSON
    importing
      !ID0 type CLIKE
      !ID1 type CLIKE optional
      !ID2 type CLIKE optional
      !ID3 type CLIKE optional
      !ID4 type CLIKE optional
      !ID5 type CLIKE optional
      !ID6 type CLIKE optional
      !ID7 type CLIKE optional
      !ID8 type CLIKE optional
      !ID9 type CLIKE optional
      !ID10 type CLIKE optional
    returning
      value(R_JSON) type STRING .
  methods DETERMINAR_AFECTACION_IGV
    importing
      !IT_VBRK type LTT_VBRK
    changing
      !CT_VBRP type LTT_VBRP .
  methods DETERMINAR_BOLETA_REBATE
    importing
      !IS_VBRK type LTY_VBRK
      !IT_VBRP type LTT_VBRP
    returning
      value(R_BOLREB) type XFELD .
  methods DETERMINAR_VENTA_ANTICIPOS
    importing
      !IS_VBRK type LTY_VBRK
    returning
      value(R_VTAANT) type XFELD .
  methods DETERMINAR_VENTA_ITINERANTE
    importing
      !IS_VBRK type LTY_VBRK
      !IT_VBRP type LTT_VBRP
    returning
      value(R_VTAITI) type XFELD .
  methods DETERMINAR_VENTA_SERVICIOS
    importing
      !IS_VBRK type LTY_VBRK
      !IT_VBRP type LTT_VBRP
    returning
      value(R_VTASRV) type XFELD .
  methods DETERMINE_FREE_TRANSFER
    importing
      !IS_VBRK type LTY_VBRK
      !IT_VBRP type LTT_VBRP
    returning
      value(ER_ISTG) type XFELD .
  methods DETERMINE_MASS_EXPORT
    changing
      !CT_VBRK type LTT_VBRK .
  methods DETERMINE_SINGLE_EXPORT
    importing
      !IS_VBRK type LTY_VBRK
    returning
      value(ER_ISEXP) type XFELD .
  methods ES_POSICION_BONIFICADA
    importing
      !IS_VBRP type LTY_VBRP
    returning
      value(R_BONIF) type XFELD .
  methods EXTRAE_DATA_BOLETAS_RES
    importing
      !P_BUKRS type BUKRS
      !P_FECFAC type VBRK-FKDAT
      !P_REPRO type CHAR01
    exporting
      !P_ERROR type CHAR01
      !P_MESSAGE type BAPIRETTAB
    exceptions
      ERROR .
  methods EXTRAE_DATA_BOLETAS_RES_V2
    importing
      !I_BUKRS type BUKRS
      !I_FKDAT type FKDAT
    exporting
      !ET_RETURN type BAPIRETTAB
    exceptions
      ERROR .
  methods EXTRAE_GUIAS
    importing
      !PI_VBRK type LTT_VBRK optional
      !PI_VBRP type LTT_VBRP optional
    exporting
      value(PE_LIKP) type LTT_LIKP .
  methods FORMAT_CHARAC_TYPE_PARAGRAPH
    importing
      !IS_VBRP type LTY_VBRP
    returning
      value(R_TEXT) type STRING .
  methods FORMAT_IDTEXT_TYPE_PARAGRAPH
    importing
      !IS_THEAD type THEAD
    returning
      value(R_TEXT) type STRING .
  methods FREE_DATA .
  methods GET_ADDRESS_DATA
    importing
      !I_ADRNR type AD_ADDRNUM
    returning
      value(ES_ADDRESS) type LTY_ADDRESS .
  methods GET_ADQUIR_HEADER
    importing
      !PI_TIPDOC type DOCCLS
      !PI_VBRK type LTY_VBRK
    changing
      !PE_NAME12 type LTY_VBRK-NAME12
      !PE_STCD1 type LTY_VBRK-STCD1
      !PE_STCDT type LTY_VBRK-STCDT
      !PE_DIRPAISADQ type LTY_VBRK-DIRPAISADQ .
  methods GET_AFECIGV_ITEM
    importing
      !PI_TIPDOC type DOCCLS
      !PI_VBRK type LTY_VBRK
      !PI_VBRP type LTY_VBRP
    exporting
      !PE_AFIGV type CHAR2
      !PE_TRIBUTO type CHAR4 .
  methods GET_CARDES_VAL_CONDITION
    importing
      !I_KNUMV type KNUMV
      !I_POSNR type POSNR
      !I_GLOBAL type XFELD optional
      !I_TIPDOC type CHAR02
      !I_NETWR type LTY_VBRP-NETWR
      !I_KZWI1 type LTY_VBRP-KZWI1
      !I_CHECK_EXPOR type XFELD
    exporting
      !ET_CARDES_VAL type LTT_CARDES_VAL .
  methods GET_CARGOGLO_ITEM
    importing
      !IS_VBRK type LTY_VBRK
      !IP_POSNR type VBRP-POSNR
      !I_TIPDOC type CHAR02 optional
      !I_NETWR type LTY_VBRP-NETWR
      !I_KZWI1 type LTY_VBRP-KZWI1
      !I_CHECK_EXPOR type XFELD
      !I_CHECK_TG type XFELD
      !I_CHECK_BONIF type XFELD
    exporting
      !ET_CARDES type LTT_CARDES
      !E_CARGOSGLOB_SABI type LTY_VBRP-CARGOSGLOB_SABI
      !E_CARGOSGLOB_NABI type LTY_VBRP-CARGOSGLOB_NABI
      !E_TCARGO_GRATUITO type DMBTR .
  methods GET_CARGOS_ITEM
    importing
      !IS_VBRK type LTY_VBRK
      !PI_KNUMV type KNUMV
      !PI_POSNR type VBRP-POSNR
      !I_PSTYV type PSTYV optional
      !I_CODTRIB type CHAR04 optional
      !I_TIPDOC type CHAR02
      !I_NETWR type LTY_VBRP-NETWR
      !I_KZWI1 type LTY_VBRP-KZWI1
      !I_CHECK_EXPOR type XFELD
      !I_CHECK_TG type XFELD
      !I_CHECK_BONIF type XFELD
    exporting
      !E_CARGOSXITE_SABI type LTY_VBRP-CARGOSXITE_SABI
      !E_CARGOSXITE_NABI type LTY_VBRP-CARGOSXITE_NABI
      !E_TCARGO_GRATUITO type DMBTR
      !ET_CARDES type LTT_CARDES .
  methods GET_CERTIFICATES_EXPORT_BY_POS
    importing
      !IS_VBRK type LTY_VBRK
    changing
      !CS_VBRP type LTY_VBRP .
  methods GET_CODIGO_ESTAB_SUNAT
    importing
      !IS_VBRK type LTY_VBRK
      !IT_VBRP type LTT_VBRP
      !IS_CABSAL type ZOSTB_DOCEXPOSCA
    returning
      value(R_TAXJURCODE2_HO) type ZOSTB_DOCEXPOSCA-ZZ_TAXJURCODE2_HO .
  methods GET_CUSTOM_FIELDS_TO_VBRP
    changing
      !CT_VBRP type LTT_VBRP .
  methods GET_DATA
    importing
      !PI_TIPDOC type DOCCLS
      !IS_OPTIONS type ZOSFEES_EXTRACT_OPTIONS optional
    exporting
      !PE_VBRK type LTT_VBRK
      !PE_VBRP type LTT_VBRP
      !PE_ERROR type CHAR01 .
  methods GET_DATA_BAJ
    importing
      !PI_BUKRS type BUKRS
      !PI_FECFAC type VBRK-FKDAT
      !PI_GETFFO type CHAR01 optional
      !PI_GETFDOC type XFELD optional
    exporting
      !PE_VBRK type LTT_VBRK
    exceptions
      ERROR .
  methods GET_DATA_MINING
    importing
      !IS_VBRK type LTY_VBRK
      !IT_VBRP type LTT_VBRP
    changing
      !CS_CAB2 type ZOSTB_DOCEXPOSC2 .
  methods GET_DATA_RES
    importing
      !PI_BUKRS type BUKRS
      !PI_FECFAC type VBRK-FKDAT
    exporting
      !PE_VBRK type LTT_VBRK
      !PE_VBRP type LTT_VBRP
      !PE_ERROR type CHAR01 .
  methods GET_DESCRIPTION_FROM_TDID
    importing
      !IS_THEAD type THEAD
    returning
      value(ER_TTXIT) type LTY_TTXIT .
  methods GET_DESCTO_ITEM
    importing
      !PI_KNUMV type KNUMV
      !PI_POSNR type VBRP-POSNR
      !I_WT_WITHCD type WT_WITHCD optional
      !I_TIPDOC type CHAR02
      !I_NETWR type LTY_VBRP-NETWR
      !I_KZWI1 type LTY_VBRP-KZWI1
      !I_CHECK_EXPOR type XFELD
      !I_CHECK_TG type XFELD
      !I_CHECK_BONIF type XFELD
    exporting
      !ET_CARDES type LTT_CARDES
      !E_DESCTOXITE_SABI type LTY_VBRP-DESCTOXITE_SABI
      !E_DESCTOXITE_NABI type LTY_VBRP-DESCTOXITE_NABI
      !E_TDSCTO_GRATUITO type DMBTR .
  methods GET_DESCTO_ITEM_ES
    importing
      !PI_KNUMV type KNUMV
      !PI_POSNR type VBRP-POSNR
    returning
      value(PE_DESCTOXITE) type LTY_VBRP-KWERT .
  methods GET_DESNCND
    importing
      !PI_VBRK type LTY_VBRK
    changing
      !PE_VBRP type LTY_VBRP
      !PE_ARKTX type CHAR30 .
  methods GET_DETRAC_HEADER
    importing
      !IS_VBRK type LTY_VBRK
      !IS_OPTIONS type ZOSFEES_EXTRACT_OPTIONS
    exporting
      !PE_DETRAC type LTY_VBRK-ZZ_DETRA
      !PE_DETRACODBS type LTY_VBRK-ZZ_DETRACODBS
      !PE_DETRAPORC type LTY_VBRK-ZZ_DETRAPORC
      !PE_DETRACTABN type LTY_VBRK-ZZ_DETRACTABN
      !PE_DETRA_MDPG type LTY_VBRK-ZZ_DETRA_MDPG
      !PE_DETRAC_MDOC type LTY_VBRK-ZZ_DETRA_MDOC .
  methods GET_DETRAC_PREVIEW
    importing
      !IS_OPTIONS type ZOSFEES_EXTRACT_OPTIONS
      !IS_VBRK type LTY_VBRK
    changing
      !CT_WITH_ITEM type LTT_WITH_ITEM .
  methods GET_DIR_SEDE_PRODUCTIVA
    importing
      !IS_VBRK type LTY_VBRK
      !IT_VBRP type LTT_VBRP
      !IT_LIKP type LTT_LIKP
    returning
      value(R_DIR_SDPR) type ZOSTB_DOCEXPOSC2-ZZ_DIR_SDPR .
  methods GET_DSCGLO_ITEM
    importing
      !PI_KNUMV type KNUMV
      !PI_POSNR type VBRP-POSNR
      !I_TIPDOC type CHAR02 optional
      !I_NETWR type LTY_VBRP-NETWR
      !I_KZWI1 type LTY_VBRP-KZWI1
      !I_CHECK_EXPOR type XFELD
      !I_CHECK_TG type XFELD
      !I_CHECK_BONIF type XFELD
    exporting
      !ET_CARDES type LTT_CARDES
      !E_DESCTOGLOB_SABI type LTY_VBRP-DESCTOGLOB_SABI
      !E_DESCTOGLOB_NABI type LTY_VBRP-DESCTOGLOB_NABI
      !E_TDSCTO_GRATUITO type DMBTR .
  methods GET_FACT_ANTICIPOS
    importing
      !IS_CABSAL2 type LTY_CABECERA_SAL2 optional
      !IS_VBRK type LTY_VBRK
      !IT_VBRP type LTT_VBRP
    exporting
      !E_TOT_ANT type ZOSTB_DOCEXPOSC2-ZZ_TOT_ANT
      !E_MWSBP type VBRP-MWSBP
    changing
      !CT_FACT type LTT_APLIC_ANTICIPO optional .
  methods GET_FEC_REG
    importing
      !PI_DATUM type SY-DATUM
      !PI_UZEIT type SY-UZEIT
    returning
      value(PE_DATTI) type XSDDATETIME_Z .
  methods GET_FISHERY_DATA
    importing
      !IS_VBAK type ANY
      !IS_LIKP type ANY
    exporting
      !ES_FISHERY_DATA type ZOSES_DATA_PESCA .
  methods GET_FI_DOCUMENT
    importing
      !I_VBELN type VBELN_VF
    returning
      value(R_BELNR) type BKPF-BELNR .
  methods GET_GUIA_REMISION
    importing
      !IS_VBRK type LTY_VBRK
      !IS_VBRP type LTY_VBRP
    changing
      !CT_GUIREMI type LTT_GUIREMI .
  methods GET_INCOTERMS_PART_2
    importing
      !IS_VBRK type LTY_VBRK
      !IT_VBRP type LTT_VBRP
    returning
      value(R_INCO2) type ZOSTB_DOCEXPOSC2-ZZ_INCO2 .
  methods GET_LAST_IDENTIFY
    importing
      !IT_NUMERACION type TT_NUMERACION
    returning
      value(R_LASTNUM) type CHAR03 .
  methods GET_LEYENDAS
    changing
      !PE_VBRK type LTY_VBRK
      !PE_CABSAL type LTY_CABECERA_SALIDA .
  methods GET_LEYENDAS_UBL2_1
    changing
      !CS_VBRK type LTY_VBRK
      !CS_CABSAL type LTY_CABECERA_SALIDA
      !CS_CABSAL2 type LTY_CABECERA_SAL2 .
  methods GET_MATERIAL_CODIGO_CUBSO
    importing
      !IS_VBRK type LTY_VBRK
      !IS_VBRP type LTY_VBRP_F
    returning
      value(R_MATERIAL_SUNAT) type ZOSTB_DOCEXPOSDE-ZZ_MATERIAL_SUNAT .
  methods GET_MAT_DES
    importing
      !PI_VBRK type LTY_VBRK
      !PI_VBRP type LTY_VBRP_F
      !PI_TIPDOC type DOCCLS
      !PI_LAST type CHAR1
    returning
      value(PE_STRING) type CHAR1024 .
  methods GET_MAT_DES_EXP
    importing
      !PI_VBRK type LTY_VBRK
      !PI_VBRP type LTY_VBRP_F
      !PI_LAST type CHAR1
    returning
      value(PE_STRING) type CHAR1024 .
  methods GET_MAT_DES_NAC
    importing
      !PI_VBRK type LTY_VBRK
      !PI_VBRP type LTY_VBRP_F
      !PI_LAST type CHAR1
    returning
      value(PE_STRING) type CHAR1024 .
  methods GET_MAT_DES_NOTEXP
    importing
      !PI_VBRK type LTY_VBRK
      !PI_VBRP type LTY_VBRP_F
      !PI_LAST type CHAR1
    returning
      value(PE_STRING) type CHAR1024 .
  methods GET_MAT_DES_NOTNAC
    importing
      !PI_VBRK type LTY_VBRK
      !PI_VBRP type LTY_VBRP_F
      !PI_LAST type CHAR1
    returning
      value(PE_STRING) type CHAR1024 .
  methods GET_NOTASV_HEADER
    importing
      !PI_VBRK type LTY_VBRK
      !PI_TIPDOC type DOCCLS
      !IT_VBRP type LTT_VBRP
    changing
      !PE_TIPDOCMODIF type LTY_VBRK-TIPDOCMODIF
      !PE_TIPDOCMODIFHO type LTY_VBRK-TIPDOCMODIFHO
      !PE_TIPODOCREF type LTY_VBRK-TIPODOCREF
      !PE_TIPODOCDESC type LTY_VBRK-TIPODOCDESC
      !PE_MOTIVOSUSTE type LTY_VBRK-MOTIVOSUSTE
      !PE_TMOTIVO type LTY_VBRK-TMOTIVO
      !PE_FECDOCMODIF type LTY_VBRK-FECDOCMODIF
      !PE_SDREFER type LTY_VBRK-ZZ_SDREFER
      !PE_SDREFERWAERK type LTY_VBRK-ZZ_SDREFERWAERK
      !PE_CHECK_NCCERO type LTY_VBRK-ZZ_CHECK_NCCERO
      !PE_CHECK_NC_CORR type LTY_VBRK-ZZ_CHECK_NC_CORR .
  methods GET_OPEEXO_HEADER
    importing
      !PI_VBRK type LTY_VBRK
      !PI_VBRP type LTT_VBRP
    returning
      value(PE_OPEEXO) type LTY_VBRK-TOTVVOPEXO .
  methods GET_OPEGRA_HEADER
    importing
      !PI_VBRK type LTY_VBRK
      !PI_VBRP type LTT_VBRP
    exporting
      value(PE_OPEGRA) type LTY_VBRK-TOTVVOPGRA
      !PE_OPEGRA_NETO type LTY_VBRK-TOTVVOPGRA .
  methods GET_OPEINA_HEADER
    importing
      !PI_VBRK type LTY_VBRK
      !PI_VBRP type LTT_VBRP
    returning
      value(PE_OPEINA) type LTY_VBRK-TOTVVOPINA .
  methods GET_ORDENC_HEADER
    importing
      !PI_VBRK type LTY_VBRK
      !IT_VBRP type LTT_VBRP
    returning
      value(PE_BSTKD) type BSTKD .
  methods GET_OTRTRI_ITEM
    importing
      !PI_KNUMV type KNUMV
      !PI_POSNR type VBRP-POSNR
    returning
      value(PE_ADICIO) type LTY_VBRP-SUMAOTRCAR .
  methods GET_PALLETS_AND_UNITS_EXPORT
    importing
      !IS_VBRK type LTY_VBRK
      !IT_VBRP type LTT_VBRP
    exporting
      !E_EXP_PALLET type ZOSTB_DOCEXPOSC2-ZZ_EXP_PALET
      !E_EXP_UNITS type ZOSTB_DOCEXPOSC2-ZZ_EXP_UNIDA .
  methods GET_PARTIDA_ARANCELARIA
    importing
      !IS_VBRK type LTY_VBRK
      !IS_VBRP type LTY_VBRP
    returning
      value(R_PART_ARA) type ZOSTB_DOCEXPOSDE-ZZ_PART_ARA .
  methods GET_PEDIDO_HEADER
    importing
      !PI_VBRK type LTY_VBRK
      !PI_VBRP type LTT_VBRP
    returning
      value(PE_PEDIDO) type VBELN .
  methods GET_PERCEP_ITEM
    importing
      !PI_KNUMV type KNUMV
      !PI_POSNR type VBRP-POSNR
    exporting
      value(PE_IMPORPERMN) type LTY_VBRP-IMPORPERMN
      value(PE_IMPORPERMN_POR) type LTY_VBRP-IMPORPERMN_POR
      !PE_CODREG_PER type LTY_VBRP-ZZ_CODREG_PER .
  methods GET_PORT_DATA
    importing
      !I_VBELN type VBELN_VF optional
      !IS_VBAK type ANY optional
      !IS_LIKP type LTY_LIKP optional
      !IS_VBRK type LTY_VBRK optional
      !IS_VBRP type LTY_VBRP optional
    exporting
      !ES_PORT_DATA type ZOSES_DATA_PORTUARIOS .
  methods GET_POSITION_EXPCERTIF
    importing
      !IS_VBRK type LTY_VBRK
    changing
      !CS_VBRP type LTY_VBRP .
  methods GET_REFERENCE_SD
    importing
      !IS_VBRK type LTY_VBRK
    returning
      value(R_SDREFER) type ZOSTB_DOCEXPOSC2-ZZ_SDREFER .
  methods GET_SID_NUMBER
    importing
      !IS_VBRP type LTY_VBRP
    exporting
      !E_SID_NUMBER type ZOSTB_DOCEXPOSDE-ZZ_SID_NUMBER
      !E_SID_DESCR type ZOSTB_DOCEXPOSDE-ZZ_SID_DESCR .
  methods GET_SPELL_AMOUNT
    importing
      !I_AMOUNT type ANY
      !I_WAERS type WAERS
      !I_SPRAS type SPRAS default 'S'
      !I_FKDAT type FKDAT
    returning
      value(E_INWORDS) type STRING .
  methods GET_SUMISC_ITEM
    importing
      !PI_FKART type FKART
      !PI_KNUMV type KNUMV
      !PI_POSNR type POSNR
    returning
      value(PE_SUMAISC) type NETWR .
  methods GET_SUNAT_RESOLUTION
    importing
      !I_BUKRS type BUKRS
    returning
      value(R_RESOL) type STRING .
  methods GET_TEXT
    importing
      !PI_NAME type THEAD-TDNAME
      !PI_ID type TDID
      !PI_OBJECT type THEAD-TDOBJECT
      !PI_SPRAS type THEAD-TDSPRAS default SY-LANGU
    returning
      value(PE_STRING) type STRING .
  methods GET_TEXT_CTABANK
    importing
      !IS_VBRK type LTY_VBRK
    returning
      value(R_TEXT_CTABANK) type STRING .
  methods GET_TEXT_EXPORT_BEP
    importing
      !IS_VBRK type LTY_VBRK
    returning
      value(R_TEXT_BEP) type ZOSTB_DOCEXPOSC2-ZZ_TEXT_BEP .
  methods GET_TEXT_LINES
    importing
      !IS_THEAD type THEAD
    exporting
      !ET_TEXT type LTT_TEXT .
  methods GET_TEXT_OBSERVATIONS
    importing
      !IS_VBRK type LTY_VBRK
    changing
      value(CS_CAB2) type ZOSTB_DOCEXPOSC2 .
  methods GET_TEXT_TOTEXP
    importing
      !IS_VBRK type LTY_VBRK
    returning
      value(R_INCO3) type ZOSTB_DOCEXPOSC2-ZZ_INCO3 .
  methods GET_TIPISC_ITEM
    importing
      !PI_KNUMV type KNUMV
      !PI_POSNR type VBRP-POSNR
      !PI_TAXM1 type LTY_VBRP-TAXM1
    changing
      !PE_TIPISC type LTY_VBRP-TIPISC
      !PE_SUMAISCSV type LTY_VBRP-SUMAISCSV .
  methods GET_TIPO_ENVIO_EXPORT
    importing
      !IS_VBRK type LTY_VBRK
      !IT_VBRP type LTT_VBRP
    returning
      value(R_EXP_TPENV) type ZOSTB_DOCEXPOSC2-ZZ_EXP_TPENV .
  methods GET_TIP_OP
    importing
      !PI_VBRK type LTY_VBRK
    returning
      value(PE_TIP_OPE) type ZOSTB_DOCEXPOSAA-ZZ_TIP_OPE .
  methods GET_TIP_OP2_1
    importing
      !PI_VBRK type LTY_VBRK
      !IT_VBRP type LTT_VBRP
      !IS_OPTIONS type ZOSFEES_EXTRACT_OPTIONS
    returning
      value(PE_TIP_OPE) type ZOSTB_DOCEXPOSAA-ZZ_TIP_OPE .
  methods GET_TOTALS_OPTIONAL
    changing
      !CS_VBRK type LTY_VBRK .
  methods GET_VALANT_ITEM
    importing
      !I_KNUMV type KONV-KNUMV
      !I_POSNR type VBRP-POSNR
    returning
      value(R_VALANT) type VBRP-NETWR .
  methods GET_VALIGVANTICIP_ITEM
    importing
      !I_KNUMV type KNUMV
      !I_POSNR type VBRP-POSNR
    returning
      value(R_IGVANT) type VBRP-NETWR .
  methods GET_VALIGV_ITEM
    importing
      !PI_KNUMV type KNUMV
      !PI_POSNR type VBRP-POSNR
      !PI_VBRK type LTY_VBRK
      !IS_VBRP type LTY_VBRP
      !IT_VBRP type LTT_VBRP
    changing
      !PE_IGVPORCENT type VBRP-NETWR
      !PE_MWSBP type VBRP-MWSBP
      !PE_MWSBP_CAB type VBRP-MWSBP .
  methods GET_VALREF_ITEM
    importing
      !PI_KNUMV type KNUMV
      !PI_FKART type FKART
      !PI_VBRK type LTY_VBRK
      !PI_VBRP type LTY_VBRP
    changing
      !PE_VALREFUNIT type ANY
      !PE_TOTVALVENO type LTY_VBRP-TOTVALVENO .
  methods GET_VALUNI_ITEM
    importing
      !PI_KNUMV type KNUMV
      !PI_VBRK type LTY_VBRK
      !PI_VBRP type LTY_VBRP
    changing
      !PE_VALUNIT type ANY
      !PE_KMEIN type MEINS .
  methods OBTENER_LUGAR_ENTREGA
    importing
      !IS_VBRK type LTY_VBRK
    returning
      value(ES_ADDRESS) type LTY_ADDRESS .
  methods OBTENER_NUMERO_PLACA
    importing
      !IS_VBRK type LTY_VBRK
    returning
      value(R_PLACA) type ZOSTB_DOCEXPOSC2-ZZ_PLACA .
  methods OTHERS_DISCOUNTS
    changing
      !CS_VBRP type LTY_VBRP .
  methods PRORRATEO_NETO_LOTES
    importing
      !IT_VBRP type LTT_VBRP
    changing
      !CT_MATRIX type LTT_MATRIX .
  methods S4_COMPLETAR_DATOS_NIF
    changing
      !CT_KNA1 type LTT_KNA1 .
  methods SERIALIZE_JSON
    importing
      !I_TABNAME type TABNAME optional
      !DATA type DATA
    returning
      value(JSON) type STRING .
  methods SERIALIZE_JSON_RECURSIVE
    importing
      !I_TABNAME type TABNAME optional
      !I_DATA type DATA
      !I_RECURSIVE_CALL type BOOLEAN optional
    changing
      !CT_STRING type TREXT_STRING .
  methods SERIALIZE_JSON_REPLACE
    importing
      !I_DATA type CLIKE
    returning
      value(R_DATA) type STRING .
  methods SET_AGROINDUSTRY_DATA_PART2
    importing
      !IS_VBRK type LTY_VBRK
      !IT_VBRP type LTT_VBRP
      !IT_LIKP type LTT_LIKP
    exporting
      !ES_EXPPART2 type ZOSFEES_EXP_PART2 .
  methods SET_AGRUPA_POS
    importing
      !PI_MATRIX type LTT_MATRIX
      !PI_VBRK type LTY_VBRK
    exporting
      !PE_AGRUP type LTT_AGRUP .
  methods SET_CABDET_RES
    importing
      !PI_VBRP type LTT_VBRP
      !PI_VBRK type LTT_VBRK
      !PI_REPRO type CHAR01
      !PI_FECFAC type VBRK-FKDAT
    exporting
      !PE_CAB type LTT_CABSALRES
      !PE_DET type LTT_DESALRES .
  methods SET_CABDET_RES_V2
    importing
      !PI_BUKRS type BUKRS
      !PI_FKDAT type FKDAT
    exporting
      !PE_CAB type LTT_RBCAB
      !PE_DET type LTT_RBDET_V2
    exceptions
      ERROR .
  methods SET_HEADER_EXPCERTIF
    importing
      !IS_VBRK type LTY_VBRK
      !IT_VBRP type LTT_VBRP
    exporting
      !ES_CERTIF type ZOSFEES_EXP_CERTIF .
  methods SET_HEADER_TEXTS
    importing
      !IT_VBRK type LTT_VBRK
      !IT_VBRP type LTT_VBRP
      !IS_OPTIONS type ZOSFEES_EXTRACT_OPTIONS
    exporting
      !ES_HEAD_TXT type GTY_NOJSON_DATA .
  methods SET_HEADER_WEIGHT
    importing
      !IS_VBRK type LTY_VBRK
      !IT_VBRP type LTT_VBRP
    exporting
      !ES_WEIGHT type ZOSFEES_WEIGHT .
  methods SET_HOMO_CAB
    importing
      !PI_TIPDOC type DOCCLS
    exporting
      !ES_CAB type GTY_NOJSON_DATA
    changing
      !PI_VBRP type LTT_VBRP
      !PE_VBRK type LTT_VBRK .
  methods SET_HOMO_CLI
    importing
      !PI_VBRK type LTT_VBRK
    exporting
      !ES_CLI type GTY_NOJSON_DATA
    changing
      !CS_CAB type GTY_NOJSON_DATA .
  methods SET_HOMO_DET
    importing
      !PI_TIPDOC type DOCCLS
      !PI_VBRP type LTT_VBRP
    exporting
      !ES_DET type GTY_NOJSON_DATA
    changing
      !PI_VBRK type LTT_VBRK .
  methods SET_HOMO_RES
    importing
      !PI_CAB type LTT_CABSALRES
      !PI_DET type LTT_DESALRES
    exporting
      !PE_CAB type LTT_CABSALRES
      !PE_DET type LTT_DESALRES .
  methods SET_HOMO_RES_V2
    changing
      !PC_CAB type LTT_RBCAB
      !PC_DET type LTT_RBDET_V2 .
  methods SET_JEISON_BAJ
    importing
      !PI_VBRK type LTT_VBRK
      !PI_FECFAC type VBRK-FKDAT
      !PI_REPRO type CHAR01
    exporting
      !PE_BACAB type LTT_BACAB
      !PE_BADET type LTT_BADET
      !PE_IDENTICOMUN type ZOSED_IDENTICOMUN .
  methods SET_JEISON_RES
    importing
      !PI_CAB type LTT_CABSALRES
      !PI_DET type LTT_DESALRES
    exporting
      !PE_RBCAB type LTT_RBCAB
      !PE_RBDET type LTT_RBDET .
  methods SET_JSON_CAB
    importing
      !PI_VBELN type VBRK-VBELN
      !PI_TIPDOC type DOCCLS
      !IS_DATA type GTY_NOJSON_DATA
      !PI_VBRK type LTT_VBRK
    exporting
      !ES_JSONCAB type GTY_JSON_DATA-JSONCAB
      !ET_JSONCAB_TC type GTY_JSON_DATA-T_JSONCAB_TC
      !ET_JSONCAB_GR type GTY_JSON_DATA-T_JSONCAB_GR
      !ET_JSONCAB_AA type GTY_JSON_DATA-T_JSONCAB_AA .
  methods SET_JSON_CAB_MAIN
    importing
      !I_TIPDOC type DOCCLS
      !IS_DATA type GTY_NOJSON_DATA
      !IT_VBRK type LTT_VBRK
    exporting
      !ES_JSONCAB type GTY_JSON_DATA-JSONCAB
      !ET_JSONCAB_TC type GTY_JSON_DATA-T_JSONCAB_TC
      !ET_JSONCAB_GR type GTY_JSON_DATA-T_JSONCAB_GR
      !ET_JSONCAB_AA type GTY_JSON_DATA-T_JSONCAB_AA .
  methods SET_JSON_CAB_UBL2_1
    importing
      !I_VBELN type VBRK-VBELN
      !I_TIPDOC type DOCCLS
      !IS_DATA type GTY_NOJSON_DATA
      !IT_VBRK type LTT_VBRK
    exporting
      !ES_JSONCAB type GTY_JSON_DATA-JSONCAB
      !ET_JSONCAB_TC type GTY_JSON_DATA-T_JSONCAB_TC
      !ET_JSONCAB_GR type GTY_JSON_DATA-T_JSONCAB_GR
      !ET_JSONCAB_AA type GTY_JSON_DATA-T_JSONCAB_AA .
  methods SET_JSON_CAB_UBL2_1_CUSTOMER
    importing
      !I_TIPDOC type DOCCLS
      !IS_VBRK type LTY_VBRK
      !IS_CABSAL type ZOSTB_DOCEXPOSCA
      !IS_CABSAL2 type ZOSTB_DOCEXPOSC2
      !IT_FORMAPAGO type GTY_NOJSON_DATA-T_FORMAPAGO
    changing
      !CS_JSONCAB type GTY_JSON_DATA-JSONCAB .
  methods SET_JSON_CARDES_UBL2_1
    importing
      !I_NRODOCSAP type ZOSTB_DOCEXPOSCA-ZZ_NRODOCSAP
      !I_POSICION type ZOSTB_DOCEXPOSDE-ZZ_NROPOSICION optional
      !IT_CARDES type ZOSFETT_DOCEXPOSCD
    exporting
      !E_DSCTO_JSON type STRING
      !E_CARGO_JSON type STRING .
  methods SET_JSON_CLI
    importing
      !IS_DATA type GTY_NOJSON_DATA
    exporting
      !ES_JSONCLI type GTY_JSON_DATA-JSONCLI .
  methods SET_JSON_DET
    importing
      !PI_VBELN type VBRK-VBELN
      !PI_TIPDOC type DOCCLS
      !IS_DATA type GTY_NOJSON_DATA
      !PI_VBRK type LTT_VBRK optional
      !PI_VBRP type LTT_VBRP
    exporting
      !ET_JSONDET type GTY_JSON_DATA-T_JSONDET .
  methods SET_JSON_DET_MAIN
    importing
      !I_TIPDOC type DOCCLS
      !IS_DATA type GTY_NOJSON_DATA
      !IT_VBRK type LTT_VBRK optional
      !IT_VBRP type LTT_VBRP
    exporting
      !ET_JSONDET type GTY_JSON_DATA-T_JSONDET .
  methods SET_JSON_DET_UBL2_1
    importing
      !I_VBELN type VBRK-VBELN
      !I_TIPDOC type DOCCLS
      !IS_DATA type GTY_NOJSON_DATA
      !IT_VBRK type LTT_VBRK
      !IT_VBRP type LTT_VBRP
    changing
      !ET_JSONDET type GTY_JSON_DATA-T_JSONDET .
  methods SET_JSON_DET_UBL2_1_CUSTOMER
    importing
      !IS_DETSAL type ZOSTB_DOCEXPOSDE
    changing
      !CS_JSONDET type ZOSFEES_JSON_DET .
  methods SET_JSON_RES_V2
    importing
      !PI_CAB type LTT_RBCAB
      !PI_DET type LTT_RBDET_V2
    exporting
      !PE_CAB_JSON type LTT_RBCAB_JSON
      !PE_DET_JSON type LTT_RBDET_V2_JSON .
  methods SET_NEW_ID
    importing
      !I_BUKRS type BUKRS
      !I_DATUM type DATUM
      !I_TYPID type CHAR02
    returning
      value(R_ID) type ZOSTB_RBCAB-ZZ_IDENTIFIRESU .
  methods SET_VBRP_FINAL
    importing
      !PI_TIPDOC type DOCCLS
      !PI_VBRP type LTT_VBRP
      !PI_VBRK type LTT_VBRK
    exporting
      !PE_VBRP_F type LTT_VBRP_F .
  methods SPLIT_XBLNR
    importing
      !I_XBLNR type VBRK-XBLNR
    exporting
      !E_TIPO type STRING
      !E_SERIE type STRING
      !E_CORRE type STRING
      !E_SERCOR type ZOSTB_FECAB-ZZT_NUMERACION .
  methods STRING_TO_XSTRING
    importing
      !INPUT type STRING
    returning
      value(OUTPUT) type XSTRING .
  methods SY_TO_RET
    importing
      !I_ROW type BAPIRET2-ROW optional
    returning
      value(RS_RETURN) type BAPIRET2 .
  methods UPD_IDENTI_BAJ
    importing
      !PI_VBRK type LTT_VBRK
      !PI_IDENTICOMUN type ZOSED_IDENTICOMUN .
  methods UPD_IDENTI_RES
    importing
      !PI_DET type LTT_DESALRES .
  methods UPD_IDENTI_RES_V2
    importing
      !PI_DET type LTT_RBDET_V2 .
  methods UPD_TABLA_BAJAS
    importing
      !PI_REPRO type CHAR01
      !PI_BALOG type LTT_BALOG
      !PI_BACAB type LTT_BACAB
      !PI_BADET type LTT_BADET .
  methods UPD_TABLA_RES
    importing
      !PI_REPRO type CHAR01
      !PI_CAB type LTT_RBCAB
      !PI_DET type LTT_RBDET .
  methods UPD_TABLA_RES_V2
    importing
      !PI_CAB type LTT_RBCAB
      !PI_DET type LTT_RBDET_V2
    exceptions
      ERROR .
  methods UPD_TABLES
    importing
      !PI_ERROR type CHAR1
      !IS_NOJSON_DATA type GTY_NOJSON_DATA
      !IS_JSON_DATA type GTY_JSON_DATA
      !IS_OPTIONS type ZOSFEES_EXTRACT_OPTIONS .
  methods UPD_VBRK
    importing
      !PI_TIPDOC type DOCCLS
      !PI_VBRP type LTT_VBRP
      !IS_OPTIONS type ZOSFEES_EXTRACT_OPTIONS
    changing
      !PE_VBRK type LTT_VBRK .
  methods UPD_VBRP
    importing
      !PI_TIPDOC type DOCCLS
    changing
      !PE_VBRP type LTT_VBRP
      !PE_VBRK type LTT_VBRK .
  methods XSTRING_TO_STRING
    importing
      !INPUT type XSTRING
    returning
      value(OUTPUT) type STRING .
  methods CONVERT_TO_LOCAL_CURRENCY
    importing
      !I_DATE type DATS
      !I_WAERS_L type WAERS
      !I_WAERS_F type WAERS
      !I_MONTO type ANY
    exporting
      !E_TCAMBIO type DMBTR
      !E_MONTO type ANY .
ENDCLASS.



CLASS ZOSSDCL_PRO_EXTRAC_FE IMPLEMENTATION.


  METHOD build_aditional_text_position.

*{  BEGIN OF INSERT WMR-290317-3000006749
    DATA: lr_land1 TYPE RANGE OF t005-land1,

          ls_land1 LIKE LINE OF lr_land1,
          ls_const LIKE LINE OF lt_const,
          ls_adrc  TYPE adrc.
*}  END OF INSERT WMR-290317-3000006749

    DATA: lt_texts TYPE TABLE OF string,
          lt_lines TYPE ltt_text,
          ls_texts LIKE LINE OF lt_texts,
          ls_thead TYPE  thead,
          ls_ttxit TYPE  lty_ttxit,
          ls_lines TYPE  lty_text,
          ls_mara  TYPE  mara,                                  "I-WMR-171016-3000005361
          ls_vbap  TYPE  vbap,                                                "I-WMR-080318-3000009296
          lw_text  TYPE  string,
          lw_fill  TYPE  xfeld.

    CASE gw_license.
      WHEN '0020316164'.  "Modasa

*{  BEGIN OF INSERTW WMR-150715
        " Texto de Posición
        CLEAR: ls_thead, lw_text, lt_lines, lw_fill.
        ls_thead-tdid     = 'Z049'.
        ls_thead-tdobject = 'VBBP'.
        CONCATENATE is_vbrp-vbeln is_vbrp-posnr INTO ls_thead-tdname.
        get_text_lines( EXPORTING is_thead = ls_thead
                        IMPORTING et_text  = lt_lines ).
        " Borrar Líneas iniciales en blanco
        LOOP AT lt_lines INTO ls_lines.
          IF ls_lines-tdline IS NOT INITIAL.
            lw_fill = abap_true.
          ENDIF.
          IF  ls_lines-tdline IS INITIAL
          AND lw_fill EQ abap_false.
            DELETE lt_lines INDEX sy-tabix.
          ENDIF.
        ENDLOOP.
        " El texto de posición se informa a partir de la 2da línea (no en blanco) en Texto adicional
        IF lt_lines[] IS NOT INITIAL.
          DELETE lt_lines INDEX 1.
          LOOP AT lt_lines INTO ls_lines.
            IF lw_text IS INITIAL.
              lw_text = ls_lines-tdline.
            ELSE.
*{  BEGIN OF REPLACE WMR-091015
              ""              CONCATENATE lw_text ls_lines-tdline INTO lw_text SEPARATED BY '#'.
              IF ls_lines-tdformat EQ '*'.
                CONCATENATE lw_text ls_lines-tdline INTO lw_text SEPARATED BY '#'.
              ELSE.
                CONCATENATE lw_text ls_lines-tdline INTO lw_text SEPARATED BY space.
              ENDIF.
*}  END OF REPLACE WMR-091015
            ENDIF.
          ENDLOOP.
          IF lw_text IS NOT INITIAL.
            APPEND lw_text TO lt_texts.
          ENDIF.
        ENDIF.
*}  END OF INSERTW WMR-150715

        " Texto formato de Características
        lw_text = format_charac_type_paragraph( is_vbrp ).
        IF lw_text IS NOT INITIAL.
          APPEND lw_text TO lt_texts.
        ENDIF.

        CASE is_vbrk-vtweg.
          WHEN 'M1' OR 'M2' OR 'MA' OR 'MB'.
            """""" MODABUS """"""

            " Número de Chasis
            CLEAR: ls_thead, ls_ttxit, lw_text.
            ls_thead-tdid     = 'Z034'.
            ls_thead-tdobject = 'VBBP'.
            CONCATENATE is_vbrp-vbeln is_vbrp-posnr INTO ls_thead-tdname.
            lw_text = format_idtext_type_paragraph( ls_thead ).
            IF lw_text IS NOT INITIAL.
              ls_ttxit = get_description_from_tdid( ls_thead ).
              CONCATENATE ls_ttxit-tdtext lw_text INTO lw_text SEPARATED BY '~'.
              APPEND lw_text TO lt_texts.
            ENDIF.

            " Número de Motor
            CLEAR: ls_thead, ls_ttxit, lw_text.
            ls_thead-tdid     = 'Z017'.
            ls_thead-tdobject = 'VBBP'.
            CONCATENATE is_vbrp-vbeln is_vbrp-posnr INTO ls_thead-tdname.
            lw_text = format_idtext_type_paragraph( ls_thead ).
            IF lw_text IS NOT INITIAL.
              ls_ttxit = get_description_from_tdid( ls_thead ).
              CONCATENATE ls_ttxit-tdtext lw_text INTO lw_text SEPARATED BY '~'.
              APPEND lw_text TO lt_texts.
            ENDIF.

            " Número serie de carrocería
            CLEAR: ls_thead, ls_ttxit, lw_text.
            ls_thead-tdid     = 'Z048'.
            ls_thead-tdobject = 'VBBP'.
            CONCATENATE is_vbrp-vbeln is_vbrp-posnr INTO ls_thead-tdname.
            lw_text = format_idtext_type_paragraph( ls_thead ).
            IF lw_text IS NOT INITIAL.
              ls_ttxit = get_description_from_tdid( ls_thead ).
              CONCATENATE ls_ttxit-tdtext lw_text INTO lw_text SEPARATED BY '~'.
              APPEND lw_text TO lt_texts.
            ENDIF.

            " Colores
            CLEAR: ls_thead, ls_ttxit, lw_text.
            ls_thead-tdid     = 'Z035'.
            ls_thead-tdobject = 'VBBP'.
            CONCATENATE is_vbrp-vbeln is_vbrp-posnr INTO ls_thead-tdname.
            lw_text = format_idtext_type_paragraph( ls_thead ).
            IF lw_text IS NOT INITIAL.
              ls_ttxit = get_description_from_tdid( ls_thead ).
              CONCATENATE ls_ttxit-tdtext lw_text INTO lw_text SEPARATED BY '~'.
              APPEND lw_text TO lt_texts.
            ENDIF.

          WHEN 'MP'.
            """""" MODAPOWER """"""

            " Potencia Grupo 11
            CLEAR: ls_thead, ls_ttxit, lw_text.
            ls_thead-tdid     = 'Z036'.
            ls_thead-tdobject = 'VBBP'.
            CONCATENATE is_vbrp-vbeln is_vbrp-posnr INTO ls_thead-tdname.
            lw_text = format_idtext_type_paragraph( ls_thead ).
            IF lw_text IS NOT INITIAL.
              ls_ttxit = get_description_from_tdid( ls_thead ).
              CONCATENATE ls_ttxit-tdtext lw_text INTO lw_text SEPARATED BY '~'.
              APPEND lw_text TO lt_texts.
            ENDIF.

            " Marca Grupo
            CLEAR: ls_thead, ls_ttxit, lw_text.
            ls_thead-tdid     = 'Z012'.
            ls_thead-tdobject = 'VBBP'.
            CONCATENATE is_vbrp-vbeln is_vbrp-posnr INTO ls_thead-tdname.
            lw_text = format_idtext_type_paragraph( ls_thead ).
            IF lw_text IS NOT INITIAL.
              ls_ttxit = get_description_from_tdid( ls_thead ).
              CONCATENATE ls_ttxit-tdtext lw_text INTO lw_text SEPARATED BY '~'.
              APPEND lw_text TO lt_texts.
            ENDIF.

            " Serie de grupo 16
            CLEAR: ls_thead, ls_ttxit, lw_text.
            ls_thead-tdid     = 'Z040'.
            ls_thead-tdobject = 'VBBP'.
            CONCATENATE is_vbrp-vbeln is_vbrp-posnr INTO ls_thead-tdname.
            lw_text = format_idtext_type_paragraph( ls_thead ).
            IF lw_text IS NOT INITIAL.
              ls_ttxit = get_description_from_tdid( ls_thead ).
              CONCATENATE ls_ttxit-tdtext lw_text INTO lw_text SEPARATED BY '~'.
              APPEND lw_text TO lt_texts.
            ENDIF.

            " Serie
            CLEAR: ls_thead, ls_ttxit, lw_text.
            ls_thead-tdid     = 'Z039'.
            ls_thead-tdobject = 'VBBP'.
            CONCATENATE is_vbrp-vbeln is_vbrp-posnr INTO ls_thead-tdname.
            lw_text = format_idtext_type_paragraph( ls_thead ).
            IF lw_text IS NOT INITIAL.
              ls_ttxit = get_description_from_tdid( ls_thead ).
              CONCATENATE ls_ttxit-tdtext lw_text INTO lw_text SEPARATED BY '~'.
              APPEND lw_text TO lt_texts.
            ENDIF.

        ENDCASE.

        ""        " Texto formato de Características
        ""        lw_text = format_charac_type_paragraph( is_vbrp ).
        ""        IF lw_text IS NOT INITIAL.
        ""          APPEND lw_text TO lt_texts.
        ""        ENDIF.

      WHEN '0020758614'.  "LSA

        " Texto de Id Texto de ventas de material
        CLEAR: ls_thead, lw_text.
        ls_thead-tdid     = 'Z044'.
        ls_thead-tdobject = 'VBBP'.
        CONCATENATE is_vbrp-vbeln is_vbrp-posnr INTO ls_thead-tdname.
        lw_text = format_idtext_type_paragraph( ls_thead ).
        IF lw_text IS NOT INITIAL.
          APPEND lw_text TO lt_texts.
        ENDIF.

      WHEN '0020886783'.  "Pedregal
*{  BEGIN OF DELETE WMR-131015
        ""        " Rango Facturas de Venta de Activos
        ""        REFRESH ltr_fkart.
        ""        LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 EQ 'V' AND zz_opcion02 EQ 'A' .
        ""          lwa_fkart-low     = lwa_constfkart-fkart.
        ""          lwa_fkart-sign    = 'I'.
        ""          lwa_fkart-option  = 'EQ'.
        ""          APPEND lwa_fkart TO ltr_fkart.
        ""        ENDLOOP.

        ""        " Número de serie del activo
        ""        IF is_vbrk-fkart IN ltr_fkart AND ltr_fkart[] IS NOT INITIAL.
        ""          CLEAR: lw_text.
        ""          lw_text = is_vbrp-zzkdmat_auft.
        ""          IF lw_text IS NOT INITIAL.
        ""            APPEND lw_text TO lt_texts.
        ""          ENDIF.
        ""        ENDIF.
*}  END OF DELETE WMR-131015

*&========================================================================================&*
*&      INICIO PROMELSA
*&========================================================================================&*
      WHEN '0020895037'.
        " Texto Adicional FE
        CLEAR: ls_thead, lw_text.
        ls_thead-tdid     = 'ZF02'.
        ls_thead-tdobject = 'VBBP'.
        CONCATENATE is_vbrp-vbeln is_vbrp-posnr INTO ls_thead-tdname.
        lw_text = format_idtext_type_paragraph( ls_thead ).
        IF lw_text IS NOT INITIAL.
          APPEND lw_text TO lt_texts.
        ENDIF.

*&========================================================================================&*
*&      FIN PROMELSA
*&========================================================================================&*

*&========================================================================================&*
*&      INICIO AIB 3000005361
*&========================================================================================&*
      WHEN '0020311006'
        OR '0020863116'. "AIB CLOUD
        IF is_vbrk-zz_check_expor EQ abap_true.
          " Descripción de Material en Inglés
          CLEAR: ls_thead, lw_text, lt_lines.
          ls_thead-tdspras  = 'EN'.
          ls_thead-tdid     = '0001'.
          ls_thead-tdobject = 'VBBP'.
          CONCATENATE is_vbrp-vbeln is_vbrp-posnr INTO ls_thead-tdname.
          get_text_lines( EXPORTING is_thead = ls_thead
                          IMPORTING et_text  = lt_lines ).
          IF lt_lines[] IS NOT INITIAL.
            READ TABLE lt_lines INTO ls_lines INDEX 1.
            lw_text = ls_lines-tdline.
            APPEND lw_text TO lt_texts.
          ELSE.
            CLEAR: ls_thead.
            ls_thead-tdspras  = 'EN'.
            ls_thead-tdid     = '0001'.
            ls_thead-tdobject = 'MVKE'.
            CONCATENATE is_vbrp-matnr is_vbrk-vkorg is_vbrk-vtweg INTO ls_thead-tdname.
            get_text_lines( EXPORTING is_thead = ls_thead
                            IMPORTING et_text  = lt_lines ).
            IF lt_lines[] IS NOT INITIAL.
              READ TABLE lt_lines INTO ls_lines INDEX 1.
              lw_text = ls_lines-tdline.
              APPEND lw_text TO lt_texts.
            ELSE.
              SELECT SINGLE maktx
                INTO lw_text
                FROM makt
                WHERE matnr EQ is_vbrp-matnr
                  AND spras EQ 'EN'.
              IF lw_text IS NOT INITIAL.
                APPEND lw_text TO lt_texts.
              ENDIF.
            ENDIF.
          ENDIF.

          " Partida Arancelaria - Factura
          CLEAR lw_text.
          SELECT SINGLE stawn
            INTO lw_text
            FROM eipo
            WHERE exnum EQ is_vbrk-exnum
              AND expos EQ is_vbrp-posnr.
          IF lw_text IS INITIAL.
*{E-NTP260618-3000009651
*            SELECT SINGLE stawn
*              INTO lw_text
*              FROM eipo
*              WHERE exnum EQ is_vbrk-exnum
*                AND expos EQ is_vbrp-vgpos.
*}E-NTP260618-3000009651
*{I-NTP260618-3000009651: " Partida Arancelaria - Entrega
             SELECT SINGLE b~stawn
               INTO lw_text
               FROM likp as a INNER JOIN eipo as b on b~exnum = a~exnum
                                                  and b~expos = is_vbrp-vgpos
               WHERE a~vbeln EQ is_vbrp-vgbel.
*}I-NTP260618-3000009651
          ENDIF.
          IF lw_text IS NOT INITIAL.
            CONCATENATE 'P.A.:' lw_text INTO lw_text SEPARATED BY space.
            APPEND lw_text TO lt_texts.
          ENDIF.

          IF is_vbrk-land1_vbrk EQ 'US'.  " Para USA
            IF is_vbrk-spart EQ '10'. " Conservas
              SELECT SINGLE matnr extwg groes
                INTO CORRESPONDING FIELDS OF ls_mara
                FROM mara
                WHERE matnr EQ is_vbrp-matnr.

              " SID
              CLEAR lw_text.
              IF ls_mara-extwg IS NOT INITIAL.
                CONCATENATE 'SID:' ls_mara-extwg INTO lw_text SEPARATED BY space.
                APPEND lw_text TO lt_texts.
              ENDIF.

              " Dimensiones
              CLEAR lw_text.
              IF ls_mara-groes IS NOT INITIAL.
                CONCATENATE 'Dimensiones:' ls_mara-groes INTO lw_text SEPARATED BY space.
                APPEND lw_text TO lt_texts.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.

*&========================================================================================&*
*&      FIN AIB 3000005361
*&========================================================================================&*

*&========================================================================================&*
*&      INICIO DANPER 3000006749
*&========================================================================================&*
      WHEN '0020974592'.
        IF is_vbrk-zz_check_expor EQ abap_true.

          LOOP AT lt_const INTO ls_const.
            CASE ls_const-campo.
              WHEN 'LAND1_CONS'.  " Proceso Conservas: Países
                CLEAR ls_land1.
                ls_land1-sign   = ls_const-signo.
                ls_land1-option = ls_const-opcion.
                ls_land1-low    = ls_const-valor1.
                ls_land1-high   = ls_const-valor2.
                APPEND ls_land1 TO lr_land1.

            ENDCASE.
          ENDLOOP.

          IF is_vbrp-zz_sid_number IS NOT INITIAL.

            " Verificar País del Destinatario de Mercancías sea EEUU o Puerto Rico
            LOOP AT lt_vbpa INTO lwa_vbpa WHERE vbeln EQ is_vbrk-vbeln
                                            AND parvw EQ gc_parvw_we
                                            AND land1 IN lr_land1.
              EXIT.
            ENDLOOP.

            IF sy-subrc EQ 0.
              "   1. Texto Comercial en Inglés
              CLEAR: lt_lines, ls_thead, lw_text.
              ls_thead-tdspras  = 'E'.
              ls_thead-tdid     = '0001'.
              ls_thead-tdobject = 'MVKE'.
              CONCATENATE is_vbrp-matnr is_vbrp-vkorg is_vbrp-vtweg INTO ls_thead-tdname RESPECTING BLANKS.
              get_text_lines( EXPORTING is_thead = ls_thead
                              IMPORTING et_text  = lt_lines ).
              IF lt_lines[] IS NOT INITIAL.
                LOOP AT lt_lines INTO ls_lines.
                  IF lw_text IS INITIAL.
                    lw_text = ls_lines-tdline.
                  ELSE.
                    CONCATENATE lw_text ls_lines-tdline INTO lw_text SEPARATED BY space.
                  ENDIF.
                ENDLOOP.
                APPEND lw_text TO lt_texts.
              ENDIF.
              "   2. SID Number: Descripción
*{  BEGIN OF INSERT WMR-180517-3000007316
              CLEAR lw_text.
              IF is_vbrp-zz_sid_descr IS NOT INITIAL.
                lw_text = is_vbrp-zz_sid_descr.
                APPEND lw_text TO lt_texts.
              ENDIF.
*}  END OF INSERT WMR-180517-3000007316
              "   3. SID Number
              CLEAR lw_text.
              IF is_vbrp-zz_sid_number IS NOT INITIAL.
*{  BEGIN OF REPLACE WMR-180517-3000007316
                ""                CONCATENATE 'SID Number: ' is_vbrp-zz_sid_number is_vbrp-zz_sid_descr
                ""                  INTO lw_text SEPARATED BY space.
                CONCATENATE 'SID Number: ' is_vbrp-zz_sid_number INTO lw_text SEPARATED BY space.
*}  END OF REPLACE WMR-180517-3000007316
                APPEND lw_text TO lt_texts.
              ENDIF.
*{  BEGIN OF REPLACE WMR-180517-3000007316
              ""              "   3. FCE Number
              ""              IF is_vbrp-zz_certif_fce IS NOT INITIAL.
              ""                CONCATENATE 'FCE number:' is_vbrp-zz_certif_fce INTO lw_text SEPARATED BY space.
              ""                APPEND lw_text TO lt_texts.
              ""              ENDIF.
              ""              "   4. FDA registration number
              ""              IF is_vbrp-zz_certif_fda IS NOT INITIAL.
              ""                CONCATENATE 'FDA registration number:' is_vbrp-zz_certif_fda INTO lw_text SEPARATED BY space.
              ""                APPEND lw_text TO lt_texts.
              ""              ENDIF.
              "   4. FDA registration number y FCE Number
              IF is_vbrp-zz_certif_fce IS NOT INITIAL
              OR is_vbrp-zz_certif_fda IS NOT INITIAL.
                CLEAR lw_text.
                IF is_vbrp-zz_certif_fda IS NOT INITIAL.
                  CONCATENATE 'FDA registration number:' is_vbrp-zz_certif_fda INTO lw_text SEPARATED BY space.
                ENDIF.
                IF is_vbrp-zz_certif_fce IS NOT INITIAL.
                  IF lw_text IS INITIAL.
                    CONCATENATE 'FCE number:' is_vbrp-zz_certif_fce INTO lw_text SEPARATED BY space.
                  ELSE.
                    CONCATENATE lw_text '- FCE number:' is_vbrp-zz_certif_fce INTO lw_text SEPARATED BY space.
                  ENDIF.
                ENDIF.
                APPEND lw_text TO lt_texts.
              ENDIF.
*}  END OF REPLACE WMR-180517-3000007316
              "   5. Texto Comercial en Español
              CLEAR: lt_lines, ls_thead, lw_text.
              ls_thead-tdspras  = 'S'.
              ls_thead-tdid     = '0001'.
              ls_thead-tdobject = 'MVKE'.
              CONCATENATE is_vbrp-matnr is_vbrp-vkorg is_vbrp-vtweg INTO ls_thead-tdname RESPECTING BLANKS.
              get_text_lines( EXPORTING is_thead = ls_thead
                              IMPORTING et_text  = lt_lines ).
              IF lt_lines[] IS NOT INITIAL.
                LOOP AT lt_lines INTO ls_lines.
                  IF lw_text IS INITIAL.
                    lw_text = ls_lines-tdline.
                  ELSE.
                    CONCATENATE lw_text ls_lines-tdline INTO lw_text SEPARATED BY space.
                  ENDIF.
                ENDLOOP.
                APPEND lw_text TO lt_texts.
              ENDIF.
*{  BEGIN OF REPLACE WMR-180517-3000007316
              ""              "   6. Partida Arancelaria
              ""              IF is_vbrp-zz_part_ara IS NOT INITIAL.
              ""                CONCATENATE 'P.A.:' is_vbrp-zz_part_ara INTO lw_text SEPARATED BY space.
              ""                APPEND lw_text TO lt_texts.
              ""              ENDIF.
              " 6. Código Armonizado (HTS) y Partida Arancelaria
              IF is_vbrp-zz_codigo_hts IS NOT INITIAL
              OR is_vbrp-zz_part_ara IS NOT INITIAL.
                CLEAR lw_text.
                IF is_vbrp-zz_codigo_hts IS NOT INITIAL.
                  CONCATENATE 'HTS:' is_vbrp-zz_codigo_hts INTO lw_text SEPARATED BY space.
                ENDIF.
                IF is_vbrp-zz_part_ara IS NOT INITIAL.
                  IF lw_text IS INITIAL.
                    CONCATENATE 'P.A.:' is_vbrp-zz_part_ara INTO lw_text SEPARATED BY space.
                  ELSE.
                    CONCATENATE lw_text '- P.A.:' is_vbrp-zz_part_ara INTO lw_text SEPARATED BY space.
                  ENDIF.
                ENDIF.
                APPEND lw_text TO lt_texts.
              ENDIF.
*}  END OF REPLACE WMR-180517-3000007316
            ENDIF.

          ELSE.

*{  BEGIN OF INSERT WMR-080318-3000009296
            " Obtener Material Info cliente
            CLEAR ls_vbap.
            SELECT SINGLE vbeln posnr kdmat INTO CORRESPONDING FIELDS OF ls_vbap
              FROM vbap
              WHERE vbeln = is_vbrp-aubel AND posnr = is_vbrp-aupos.
*}  END OF INSERT WMR-080318-3000009296

            " Verificar Idioma del Resposable de Factura
            READ TABLE lt_vbpa INTO lwa_vbpa
                 WITH KEY vbeln = is_vbrk-vbeln
""                          parvw = gc_parvw_rg.                                "I-WMR-080318-3000009430
                          parvw = gc_parvw_we.                                "I-WMR-200318-3000009430
            IF sy-subrc EQ 0.
              SELECT SINGLE addrnumber langu
                INTO CORRESPONDING FIELDS OF ls_adrc
                FROM adrc
                WHERE addrnumber EQ lwa_vbpa-adrnr
                  AND date_from  EQ '00010101'
                  AND nation     EQ ''.
              IF sy-subrc EQ 0.
                CASE ls_adrc-langu.
                  WHEN 'S'. " Idioma Español
                    IF ls_vbap-kdmat IS NOT INITIAL.                          "I-WMR-080318-3000009296
                      "   1. Texto material infocliente + texto breve material"I-WMR-080318-3000009296
                      CLEAR lw_text.                                          "I-WMR-080318-3000009296
                      CONCATENATE ls_vbap-kdmat is_vbrp-arktx                 "I-WMR-080318-3000009296
                                  INTO lw_text SEPARATED BY space.            "I-WMR-080318-3000009296
                      APPEND lw_text TO lt_texts.                             "I-WMR-080318-3000009296
                    ELSE.                                                     "I-WMR-080318-3000009296
                      "   1. Texto Comercial en Español
                      CLEAR: lt_lines, ls_thead, lw_text.
                      ls_thead-tdspras  = 'S'.
                      ls_thead-tdid     = '0001'.
                      ls_thead-tdobject = 'MVKE'.
                      CONCATENATE is_vbrp-matnr is_vbrp-vkorg is_vbrp-vtweg INTO ls_thead-tdname RESPECTING BLANKS.
                      get_text_lines( EXPORTING is_thead = ls_thead
                                      IMPORTING et_text  = lt_lines ).
                      IF lt_lines[] IS NOT INITIAL.
                        LOOP AT lt_lines INTO ls_lines.
                          IF lw_text IS INITIAL.
                            lw_text = ls_lines-tdline.
                          ELSE.
                            CONCATENATE lw_text ls_lines-tdline INTO lw_text SEPARATED BY space.
                          ENDIF.
                        ENDLOOP.
                        APPEND lw_text TO lt_texts.
                      ENDIF.
                    ENDIF.                                                    "I-WMR-080318-3000009296
*{  BEGIN OF REPLACE WMR-150617-3000007448
                    ""                    "   2. Texto Comercial en Inglés
                    ""                    CLEAR: lt_lines, ls_thead, lw_text.
                    ""                    ls_thead-tdspras  = 'E'.
                    ""                    ls_thead-tdid     = '0001'.
                    ""                    ls_thead-tdobject = 'MVKE'.
                    ""                    CONCATENATE is_vbrp-matnr is_vbrp-vkorg is_vbrp-vtweg INTO ls_thead-tdname RESPECTING BLANKS.
                    ""                    get_text_lines( EXPORTING is_thead = ls_thead
                    ""                                    IMPORTING et_text  = lt_lines ).
                    ""                    IF lt_lines[] IS NOT INITIAL.
                    ""                      LOOP AT lt_lines INTO ls_lines.
                    ""                        IF lw_text IS INITIAL.
                    ""                          lw_text = ls_lines-tdline.
                    ""                        ELSE.
                    ""                          CONCATENATE lw_text ls_lines-tdline INTO lw_text SEPARATED BY space.
                    ""                        ENDIF.
                    ""                      ENDLOOP.
                    ""                      APPEND lw_text TO lt_texts.
                    ""                    ENDIF.
                    ""                    "   3. Partida Arancelaria
                    ""                    IF is_vbrp-zz_part_ara IS NOT INITIAL.
                    ""                      CONCATENATE 'P.A.:' is_vbrp-zz_part_ara INTO lw_text SEPARATED BY space.
                    ""                      APPEND lw_text TO lt_texts.
                    ""                    ENDIF.
                    " 2. Código Armonizado (HTS) y Partida Arancelaria
                    IF is_vbrp-zz_codigo_hts IS NOT INITIAL
                    OR is_vbrp-zz_part_ara IS NOT INITIAL.
                      CLEAR lw_text.
                      IF is_vbrp-zz_codigo_hts IS NOT INITIAL.
                        CONCATENATE 'HTS:' is_vbrp-zz_codigo_hts INTO lw_text SEPARATED BY space.
                      ENDIF.
                      IF is_vbrp-zz_part_ara IS NOT INITIAL.
                        IF lw_text IS INITIAL.
                          CONCATENATE 'P.A.:' is_vbrp-zz_part_ara INTO lw_text SEPARATED BY space.
                        ELSE.
                          CONCATENATE lw_text '- P.A.:' is_vbrp-zz_part_ara INTO lw_text SEPARATED BY space.
                        ENDIF.
                      ENDIF.
                      APPEND lw_text TO lt_texts.
                    ENDIF.
*}  END OF REPLACE WMR-150617-3000007448

                  WHEN 'E'. " Idioma Inglés
                    IF ls_vbap-kdmat IS NOT INITIAL.                          "I-WMR-080318-3000009296
                      "   1. Texto material infocliente + texto breve material"I-WMR-080318-3000009296
                      CLEAR lw_text.                                          "I-WMR-080318-3000009296
                      CONCATENATE ls_vbap-kdmat is_vbrp-arktx                 "I-WMR-080318-3000009296
                                  INTO lw_text SEPARATED BY space.            "I-WMR-080318-3000009296
                      APPEND lw_text TO lt_texts.                             "I-WMR-080318-3000009296
                    ELSE.                                                     "I-WMR-080318-3000009296
                      "   1. Texto Comercial en Inglés
                      CLEAR: lt_lines, ls_thead, lw_text.
                      ls_thead-tdspras  = 'E'.
                      ls_thead-tdid     = '0001'.
                      ls_thead-tdobject = 'MVKE'.
                      CONCATENATE is_vbrp-matnr is_vbrp-vkorg is_vbrp-vtweg INTO ls_thead-tdname RESPECTING BLANKS.
                      get_text_lines( EXPORTING is_thead = ls_thead
                                      IMPORTING et_text  = lt_lines ).
                      IF lt_lines[] IS NOT INITIAL.
                        LOOP AT lt_lines INTO ls_lines.
                          IF lw_text IS INITIAL.
                            lw_text = ls_lines-tdline.
                          ELSE.
                            CONCATENATE lw_text ls_lines-tdline INTO lw_text SEPARATED BY space.
                          ENDIF.
                        ENDLOOP.
                        APPEND lw_text TO lt_texts.
                      ENDIF.
                    ENDIF.                                                    "I-WMR-080318-3000009296
                    "   2. Texto Comercial en Español
                    CLEAR: lt_lines, ls_thead, lw_text.
                    ls_thead-tdspras  = 'S'.
                    ls_thead-tdid     = '0001'.
                    ls_thead-tdobject = 'MVKE'.
                    CONCATENATE is_vbrp-matnr is_vbrp-vkorg is_vbrp-vtweg INTO ls_thead-tdname RESPECTING BLANKS.
                    get_text_lines( EXPORTING is_thead = ls_thead
                                    IMPORTING et_text  = lt_lines ).
                    IF lt_lines[] IS NOT INITIAL.
                      LOOP AT lt_lines INTO ls_lines.
                        IF lw_text IS INITIAL.
                          lw_text = ls_lines-tdline.
                        ELSE.
                          CONCATENATE lw_text ls_lines-tdline INTO lw_text SEPARATED BY space.
                        ENDIF.
                      ENDLOOP.
                      APPEND lw_text TO lt_texts.
                    ENDIF.
*{  BEGIN OF REPLACE WMR-180517-3000007316
                    ""                    "   3. Código Armonizado (HTS)
                    ""                    IF is_vbrp-zz_codigo_hts IS NOT INITIAL.
                    ""                      CONCATENATE 'HTS:' is_vbrp-zz_codigo_hts INTO lw_text SEPARATED BY space.
                    ""                      APPEND lw_text TO lt_texts.
                    ""                    ENDIF.
                    ""                    "   4. Partida Arancelaria
                    ""                    IF is_vbrp-zz_part_ara IS NOT INITIAL.
                    ""                      CONCATENATE 'P.A.:' is_vbrp-zz_part_ara INTO lw_text SEPARATED BY space.
                    ""                      APPEND lw_text TO lt_texts.
                    ""                    ENDIF.
                    " 3. Código Armonizado (HTS) y Partida Arancelaria
                    IF is_vbrp-zz_codigo_hts IS NOT INITIAL
                    OR is_vbrp-zz_part_ara IS NOT INITIAL.
                      CLEAR lw_text.
                      IF is_vbrp-zz_codigo_hts IS NOT INITIAL.
                        CONCATENATE 'HTS:' is_vbrp-zz_codigo_hts INTO lw_text SEPARATED BY space.
                      ENDIF.
                      IF is_vbrp-zz_part_ara IS NOT INITIAL.
                        IF lw_text IS INITIAL.
                          CONCATENATE 'P.A.:' is_vbrp-zz_part_ara INTO lw_text SEPARATED BY space.
                        ELSE.
                          CONCATENATE lw_text '- P.A.:' is_vbrp-zz_part_ara INTO lw_text SEPARATED BY space.
                        ENDIF.
                      ENDIF.
                      APPEND lw_text TO lt_texts.
                    ENDIF.
*}  END OF REPLACE WMR-180517-3000007316

                ENDCASE.
              ENDIF.
            ENDIF.

          ENDIF.

*{I-NTP111217-3000008768
        ELSE.
          "1. Texto Comercial en Español
          CLEAR: lt_lines, ls_thead, lw_text.
          ls_thead-tdspras  = 'S'.
          ls_thead-tdid     = '0001'.
          ls_thead-tdobject = 'MVKE'.
          CONCATENATE is_vbrp-matnr is_vbrp-vkorg is_vbrp-vtweg INTO ls_thead-tdname RESPECTING BLANKS.
          get_text_lines( EXPORTING is_thead = ls_thead
                          IMPORTING et_text  = lt_lines ).
          IF lt_lines[] IS NOT INITIAL.
            LOOP AT lt_lines INTO ls_lines.
              IF lw_text IS INITIAL.
                lw_text = ls_lines-tdline.
              ELSE.
                CONCATENATE lw_text ls_lines-tdline INTO lw_text SEPARATED BY space.
              ENDIF.
            ENDLOOP.
            APPEND lw_text TO lt_texts.
          ENDIF.

          "2. Si no tiene texto
          IF lt_texts IS INITIAL.
            lw_text = is_vbrp-arktx.
            APPEND lw_text TO lt_texts.
          ENDIF.
*}I-NTP111217-3000008768
        ENDIF.

*&========================================================================================&*
*&      FIN DANPER 3000006749
*&========================================================================================&*

    ENDCASE.

    LOOP AT lt_texts INTO ls_texts.
      IF r_text IS INITIAL.
        r_text = ls_texts.
      ELSE.
        CONCATENATE r_text ls_texts INTO r_text SEPARATED BY '#'.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.


  METHOD build_xml.

    DATA: ls_json    TYPE zosfetb_json,
          l_folder   TYPE c LENGTH 500,
          l_size     TYPE i,
          l_filename TYPE string,
          l_string   TYPE string,
          l_json     TYPE string.

    DATA: lo_reader TYPE REF TO if_sxml_reader,
          lo_writer TYPE REF TO cl_sxml_string_writer,
          l_xstring TYPE xstring,
          lo_xml    TYPE REF TO cl_xml_document.


* 1 get data
    SELECT SINGLE * INTO ls_json FROM zosfetb_json
      WHERE zzt_nrodocsap = i_nrodocsap
        AND zzt_numeracion = i_numeracion.
    IF sy-subrc <> 0.
      MESSAGE e000 WITH 'Documento no existe' i_nrodocsap i_numeracion RAISING error.
    ENDIF.

    "Concatenar todos los json
    l_string = xstring_to_string( ls_json-jsoncab ).
    CONCATENATE '{"cab":' l_string INTO l_json.
    IF ls_json-jsoncab_tc IS NOT INITIAL.
      l_string = xstring_to_string( ls_json-jsoncab_tc ).
      CONCATENATE l_json ',"cabtc":' l_string INTO l_json.
    ENDIF.
    IF ls_json-jsoncab_gr IS NOT INITIAL.
      l_string = xstring_to_string( ls_json-jsoncab_gr ).
      CONCATENATE l_json ',"cabgr":' l_string INTO l_json.
    ENDIF.
    IF ls_json-jsoncab_aa IS NOT INITIAL.
      l_string = xstring_to_string( ls_json-jsoncab_aa ).
      CONCATENATE l_json ',"cabaa":' l_string INTO l_json.
    ENDIF.
    IF ls_json-jsondet IS NOT INITIAL.
      l_string = xstring_to_string( ls_json-jsondet ).
      CONCATENATE l_json ',"det":' l_string INTO l_json.
    ENDIF.
    IF ls_json-jsoncli IS NOT INITIAL.
      l_string = xstring_to_string( ls_json-jsoncli ).
      CONCATENATE l_json ',"cli":' l_string INTO l_json.
    ENDIF.

    CONCATENATE l_json '}' INTO l_json.


* 2 construir xml
    lo_reader = cl_sxml_string_reader=>create( cl_abap_codepage=>convert_to( l_json ) ).
    lo_writer = cl_sxml_string_writer=>create( type = if_sxml=>co_xt_xml10 ).
    CREATE OBJECT lo_xml.

    TRY.
        lo_reader->next_node( ).
        lo_reader->skip_node( lo_writer ).
        l_xstring = lo_writer->get_output( ).
      CATCH cx_sxml_parse_error.
        MESSAGE e000 WITH 'Error al parsear xml' RAISING error.
    ENDTRY.

* 2.1 Mostrar
    IF i_show IS NOT INITIAL.
      lo_xml->parse_xstring( l_xstring ).
      lo_xml->display( ).
    ENDIF.

* 2.2 Descargar
    IF i_down IS NOT INITIAL.
      l_folder = i_folder.
      IF l_folder IS INITIAL.
        MESSAGE e000 WITH 'Falta folder' RAISING error.
      ENDIF.

      "Nombre del archivo
      CONCATENATE ls_json-zzt_nrodocsap ls_json-zzt_numeracion INTO l_filename SEPARATED BY '-'.
      CONCATENATE l_filename '.xml' INTO l_filename.

      "Folder
      l_size = strlen( l_folder ) - 1.
      IF l_folder+l_size(1) = '\'.
        CONCATENATE l_folder l_filename INTO l_filename.
      ELSE.
        CONCATENATE l_folder l_filename INTO l_filename SEPARATED BY '\'.
      ENDIF.

      cl_salv_data_services=>download_xml_to_file( filename = l_filename xcontent = l_xstring ).
    ENDIF.

  ENDMETHOD.


  METHOD call_ws_baj.

    DATA: input            TYPE zosfe_wsoscbj_documentos_reque,      "R-NTP-210416
          output           TYPE zosfe_wsoscbj_documentos_respo,      "R-NTP-210416
          lwa_d_bajaresume LIKE LINE OF input-d_com_baja_array-d_com_baja. "R-NTP-210416

    DATA: lw_idbaja        TYPE zosed_identifibaja.

    FIELD-SYMBOLS: <fs_bacab> LIKE LINE OF pi_bacab,
                   <fs_badet> LIKE LINE OF pi_badet.


*Carga valores
    LOOP AT pi_bacab ASSIGNING <fs_bacab>.
      lw_idbaja = <fs_bacab>-zz_identifibaja.
      input-user = gs_consextsun-zz_usuario_web.
      input-pass = gs_consextsun-zz_pass_web.
      input-bukrs = gs_consextsun-bukrs.                    "I-NTP-240616

      input-c_com_baja-ide_com_cbj = <fs_bacab>-zz_identifibaja.
      input-c_com_baja-nom_raz_cbj = <fs_bacab>-zz_nempresa.
      input-c_com_baja-num_ruc_cbj = <fs_bacab>-zz_nroruc.
      input-c_com_baja-fec_gen_cbj = <fs_bacab>-zz_femision.
      input-c_com_baja-fec_com_cbj = <fs_bacab>-zz_fgenerabaja.
      input-c_com_baja-fir_dig_cbj = <fs_bacab>-zz_firdigital.
      input-c_com_baja-ver_ubl_cbj = <fs_bacab>-zz_versiubl.
      input-c_com_baja-ver_est_cbj = <fs_bacab>-zz_versiestrudoc.
      input-c_com_baja-est_reg_cbj = gs_consextsun-zz_estaregdoc.

*   Campos adicionales
      input-c_com_baja-fec_reg_cbj = me->get_fec_reg( pi_datum = sy-datum
                                                      pi_uzeit = sy-uzeit ).
      input-c_com_baja-ley_rep_cbj  = text-j01.
      input-c_com_baja-ley_res_cbj  = get_sunat_resolution( gs_consextsun-bukrs ).
    ENDLOOP.
*
    LOOP AT pi_badet ASSIGNING <fs_badet>.
      CLEAR lwa_d_bajaresume.
      lwa_d_bajaresume-ide_com_cbj = <fs_badet>-zz_identifibaja.
      lwa_d_bajaresume-num_fil_cbj = <fs_badet>-zz_nrofila.
*{  BEGIN OF INSERT WMR-151117-3000008615
      SHIFT lwa_d_bajaresume-num_fil_cbj LEFT DELETING LEADING '0'.
*}  END OF INSERT WMR-151117-3000008615
      lwa_d_bajaresume-tip_doc_cbj = <fs_badet>-zz_tipodoc.
      lwa_d_bajaresume-ser_num_cbj = <fs_badet>-zz_serie.
      lwa_d_bajaresume-cor_num_cbj = <fs_badet>-zz_correlativo.
      lwa_d_bajaresume-mot_baj_cbj = <fs_badet>-zz_motivobaja.
      APPEND lwa_d_bajaresume TO input-d_com_baja_array-d_com_baja.
    ENDLOOP.

*   Llamar WebService
*BI-NTP-210416
    call_ws_main(
      EXPORTING
        pi_bukrs      = pi_bukrs
        pi_tipdoc     = gc_prefix_bj
        pi_fecfac     = pi_fecfac
        pi_input      = input
        pi_id         = lw_idbaja
      IMPORTING
        pe_output     = output
        pe_message    = pe_message
    ).
*EI-NTP-210416

  ENDMETHOD.                    "call_ws_baj


  METHOD call_ws_bl.

    DATA: input  TYPE zosfe_wsosblt_documentos_reque,  "Test,Homo,Prd
          output TYPE zosfe_wsosblt_documentos_respo.  "Test,Homo,Prd

    DATA: lwa_jsoncab   LIKE is_json_data-jsoncab,
          lwa_jsondet   LIKE LINE OF is_json_data-t_jsondet,
          ls_jsoncab_tc LIKE LINE OF is_json_data-t_jsoncab_tc,
          ls_jsoncab_gr LIKE LINE OF is_json_data-t_jsoncab_gr,
          ls_jsoncab_aa LIKE LINE OF is_json_data-t_jsoncab_aa,
          lwa_d_boletas LIKE LINE OF input-d_boleta_array-d_boleta.

*    LOOP AT is_json_data-t_jsoncab INTO lwa_jsoncab.                                   "E-NTP101218-3000009651
    lwa_jsoncab = is_json_data-jsoncab.                                                 "I-NTP101218-3000009651

    input-user = gs_consextsun-zz_usuario_web.
    input-pass = gs_consextsun-zz_pass_web.
    input-bukrs = gs_consextsun-bukrs.                    "I-NTP-240616

*     Datos de Cabecera
    input-c_boleta-ser_num_blt = lwa_jsoncab-zzt_numeracion.
    input-c_boleta-fec_emi_blt = lwa_jsoncab-zzt_femision.
    input-c_boleta-fir_dig_blt = lwa_jsoncab-zzt_fdigital.
    input-c_boleta-nom_raz_blt = lwa_jsoncab-zzt_nempresa.
    input-c_boleta-nom_com_blt = lwa_jsoncab-zzt_ncomercial.
    input-c_boleta-dom_fsc_blt = lwa_jsoncab-zzt_direccion.
    input-c_boleta-num_ruc_blt = lwa_jsoncab-zzt_nroruc.
    input-c_boleta-tdo_bol_blt = lwa_jsoncab-zzt_tipodoc.
    input-c_boleta-tnm_usu_blt = lwa_jsoncab-zzt_nrodociadq.
    input-c_boleta-nom_usu_blt = lwa_jsoncab-zzt_nombreraz.
    input-c_boleta-dir_usu_blt = lwa_jsoncab-zzt_dirpaisadq.                           "I-NTP201118-3000009651
    input-c_boleta-tot_gra_blt = lwa_jsoncab-zzt_totvvopgra.
    input-c_boleta-tot_ina_blt = lwa_jsoncab-zzt_totvvopinaf.
    input-c_boleta-tot_exo_blt = lwa_jsoncab-zzt_totvvopexo.
    input-c_boleta-sum_igv_blt = lwa_jsoncab-zzt_sumaigv.
    input-c_boleta-sum_isc_blt = lwa_jsoncab-zzt_sumaisc.
    input-c_boleta-sum_otr_blt = lwa_jsoncab-zzt_sumaotrtri.                           "I-NTP201118-3000009651
    input-c_boleta-sum_car_blt = lwa_jsoncab-zzt_sumaotrcargos.                        "I-NTP201118-3000009651
    input-c_boleta-tot_dsc_blt = lwa_jsoncab-zzt_desctot.
    input-c_boleta-tot_vta_blt = lwa_jsoncab-zzt_imptotvent.
    input-c_boleta-tip_mon_blt = lwa_jsoncab-zzt_moneda.

*      READ TABLE is_json_data-t_jsoncab INTO lwa_jsoncab WITH KEY zzt_nrodocsap  = lwa_jsoncab-zzt_nrodocsap     "E-NTP101218-3000009651
*                                                                zzt_numeracion = lwa_jsoncab-zzt_numeracion.     "E-NTP101218-3000009651
*      IF sy-subrc = 0.                                                                                           "E-NTP101218-3000009651
    ""        input-c_boleta-gui_rem_blt = lwa_jsoncab-zzt_gui_rem.            "Nuevo campo: Guias          "E-WMR-260117-3000006411
    input-c_boleta-tip_ope_blt = lwa_jsoncab-zzt_tip_ope.            "Tipo de Operacion (Anticipo)
    ""        input-c_boleta-mto_ant_blt = lwa_jsoncab-zzt_mto_ant.            "Monto Anticipo (Campo compuesto x mas de un campo)    "E-WMR-260117-3000006411
    input-c_boleta-tot_ant_blt = lwa_jsoncab-zzt_tot_ant.            "Total Anticipo
*{  BEGIN OF INSERT WMR-241115
    input-c_boleta-ema_des_blt = lwa_jsoncab-zzt_maildest.           " E-mail destino
*}  END OF INSERT WMR-241115
*{  BEGIN OF INSERT WMR-231215
    input-c_boleta-tip_mon_blt = lwa_jsoncab-zzt_moneda.
*}  END OF INSERT WMR-231215

    "Via de pago en idioma del solicitante
    input-c_boleta-tip_pag_blt = lwa_jsoncab-zzt_viapagodesc.  "I-NTP050917-3000008049 "CASE_AIB

*{  BEGIN OF INSERT WMR-241116-3000005346
    input-c_boleta-sed_pro_blt = lwa_jsoncab-zzt_dir_sdpr.            " Dirección de Sede Productiva
    input-c_boleta-lot_tex_blt = lwa_jsoncab-zzt_datexp2.             " Datos de Exportación - Parte 2
    input-c_boleta-dir_usu_blt = lwa_jsoncab-zzt_clie_dir.            " Dirección de Usuario o Adquiriente
    input-c_boleta-usu_doc_blt = lwa_jsoncab-zzt_ernam.               " Nombre del responsable del documento
    input-c_boleta-dsf_ref_blt = lwa_jsoncab-zzt_ref_sdfi.            " Referencia Documento SD/ Documento FI
    "input-c_boleta-igv_vta_blt = lwa_jsoncab-zzt_columns_igv.         "I-NTP310317-3000006891 CASE_BETA
*{  BEGIN OF INSERT WMR-220617-3000007448
    input-c_boleta-txt_obs_blt = lwa_jsoncab-zzt_text_obs.            " Observaciones
*}  END OF INSERT WMR-220617-3000007448
    input-c_boleta-txt_bnk_blt = lwa_jsoncab-zzt_text_ctabank.        " Cuenta bank    "I-NTP260318-3000009389
*      ENDIF.                                                                                                     "E-NTP101218-3000009651
*}  END OF INSERT WMR-241116-3000005346

    input-c_boleta-num_rel_blt = lwa_jsoncab-zzt_tipnumeotr.
    input-c_boleta-ley_bol_blt = lwa_jsoncab-zzt_leyendas.
    input-c_boleta-tot_per_blt = lwa_jsoncab-zzt_imporpermn_mtc.
    input-c_boleta-ver_ubl_blt = lwa_jsoncab-zzt_verubl.
    input-c_boleta-ver_est_blt = lwa_jsoncab-zzt_verestrdoc.
    input-c_boleta-est_reg_blt = lwa_jsoncab-zzt_estadoregis.            "I-NTP201118-3000009651
    input-c_boleta-val_gra_blt = lwa_jsoncab-zzt_totvalveno.             "I-NTP201118-3000009651
    input-c_boleta-imp_prc_blt = lwa_jsoncab-zzt_imporpermn.
    input-c_boleta-car_glb_blt = lwa_jsoncab-zzt_cargosglob.             "I-3000011712-NTP110419 "CARDES
    input-c_boleta-des_glb_blt = lwa_jsoncab-zzt_desctoglob.             "I-NTP201118-3000009651 "CARDES

*     Campos adicionales
*{  BEGIN OF DELETE WMR-241116-3000005346
    ""      input-c_boleta-dir_usu_blt = lwa_jsoncab-zzt_dir_usuad.                "Dirección de Usuario o Adquieriente
*{  BEGIN OF DELETE WMR-241116-3000005346
    input-c_boleta-dir_lle_blt  = ''.
    input-c_boleta-dsd_sap_blt  = lwa_jsoncab-zzt_dsd_sap.                 "Zona venta / Cod Cliente / Cod vendedor  "I-NTP201118-3000009651
    input-c_boleta-fec_reg_blt  = me->get_fec_reg( pi_datum = sy-datum   "Fecha de registro
                                                   pi_uzeit = sy-uzeit ).
    input-c_boleta-ley_rep_blt  = text-b01.
*{  BEGIN OF REPLACE WMR-020715
    input-c_boleta-ley_res_blt = get_sunat_resolution( gs_consextsun-bukrs ).
*}  END OF REPLACE WMR-020715
    input-c_boleta-mon_sap_blt  = ''.
******
    IF input-c_boleta-tot_vta_blt IS INITIAL.
      input-c_boleta-tot_vta_blt = '0.00'.
    ENDIF.
*{  BEGIN OF REPLACE WMR-110615
    ""      input-c_boleta-ref_sap_blt  = lwa_jsoncab-zzt_ref_sap_fct.
    input-c_boleta-ref_sap_blt  = lwa_jsoncab-zzt_refsapfct.
*}  END OF REPLACE WMR-110615
    input-c_boleta-cnd_sap_blt  = lwa_jsoncab-zzt_cnd_sap_fct.      "Campo nuevo se le agrego la Fec Vencimiento

*{  BEGIN OF INSERT WMR-230615
*{I-NTP111218-3000009651
    " Textos Adicionales
    LOOP AT is_json_data-t_jsoncab_tc INTO ls_jsoncab_tc.
      IF input-c_boleta-txt_adi_blt IS INITIAL.
        input-c_boleta-txt_adi_blt = ls_jsoncab_tc-zzt_text_head.
      ELSE.
        CONCATENATE input-c_boleta-txt_adi_blt ls_jsoncab_tc-zzt_text_head
               INTO input-c_boleta-txt_adi_blt SEPARATED BY '#'.
      ENDIF.
    ENDLOOP.

    "Asignación G/R a Documento
    LOOP AT is_json_data-t_jsoncab_gr INTO ls_jsoncab_gr.
      IF input-c_boleta-gui_rem_blt IS INITIAL.
        input-c_boleta-gui_rem_blt = ls_jsoncab_gr-zzt_grasociada.
      ELSE.
        CONCATENATE input-c_boleta-gui_rem_blt ls_jsoncab_gr-zzt_grasociada
               INTO input-c_boleta-gui_rem_blt SEPARATED BY ','.
      ENDIF.
    ENDLOOP.

    "Asignación Aplic.Anticipos a Docmto
    LOOP AT is_json_data-t_jsoncab_aa INTO ls_jsoncab_aa.
      IF input-c_boleta-mto_ant_blt IS INITIAL.
        input-c_boleta-mto_ant_blt = ls_jsoncab_aa-zzt_aaasociada.
      ELSE.
        CONCATENATE input-c_boleta-mto_ant_blt ls_jsoncab_aa-zzt_aaasociada
               INTO input-c_boleta-mto_ant_blt SEPARATED BY ','.
      ENDIF.

      IF input-c_boleta-num_rel_blt IS INITIAL.
        input-c_boleta-num_rel_blt = ls_jsoncab_aa-zzt_tipnumeotr.
      ELSE.
        CONCATENATE input-c_boleta-num_rel_blt ls_jsoncab_aa-zzt_tipnumeotr
               INTO input-c_boleta-num_rel_blt SEPARATED BY ','.
      ENDIF.
    ENDLOOP.
*}I-NTP111218-3000009651

    " Dirección Punto de Emisión
    input-c_boleta-dir_emi_blt = lwa_jsoncab-zzt_direcemis.
*}  END OF INSERT WMR-230615

*{  BEGIN OF INSERT WMR-080715
    " Totales Opcionales
    input-c_boleta-otr_mon_blt = lwa_jsoncab-zzt_tot_opt.
*}  END OF INSERT WMR-080715

*{  BEGIN OF INSERT WMR-140715
    " Código Formato PDF
    input-c_boleta-cod_for_blt = lwa_jsoncab-zzt_pdffrm.

    " Puerto Origen - Puerto Destino
    input-c_boleta-ori_des_blt = lwa_jsoncab-zzt_pue_orde.

    " Datos de Embarque
    input-c_boleta-dat_emb_blt = lwa_jsoncab-zzt_datembar.

    " Datos de Pesca
    input-c_boleta-dat_pes_blt = lwa_jsoncab-zzt_datpesca.
*}  END OF INSERT WMR-140715
    input-c_boleta-est_reg_blt = is_options-only_syncstat.                            "I-NTP260717-3000006468 Enviar status cdr de sap a web
*{  BEGIN OF INSERT WMR-150218-3000009072
    "input-c_boleta-doc_ocl_blt = lwa_jsoncab-zzt_bol_npnad. "CASE_BETA
*}  END OF INSERT WMR-150218-3000009072

*     Datos de Posición
    LOOP AT is_json_data-t_jsondet INTO lwa_jsondet.
      lwa_d_boletas-ser_num_blt = lwa_jsondet-zzt_numeracion.
      lwa_d_boletas-num_ord_blt = lwa_jsondet-zzt_nroposicion.
      lwa_d_boletas-uni_med_blt = lwa_jsondet-zzt_unimed.
      lwa_d_boletas-can_uni_blt = lwa_jsondet-zzt_cantidad.
      lwa_d_boletas-des_mat_blt = lwa_jsondet-zzt_descservicio.
      lwa_d_boletas-val_vta_blt = lwa_jsondet-zzt_valvenxite.
      lwa_d_boletas-pre_vta_blt = lwa_jsondet-zzt_precioventa.
      lwa_d_boletas-mon_igv_blt = lwa_jsondet-zzt_afectigv.
      lwa_d_boletas-mon_isc_blt = lwa_jsondet-zzt_tipisc.
      lwa_d_boletas-val_uni_blt = lwa_jsondet-zzt_valunitario.
      lwa_d_boletas-cod_pro_blt = lwa_jsondet-zzt_material.
      lwa_d_boletas-val_ref_blt = lwa_jsondet-zzt_valrefunit.
      lwa_d_boletas-car_itm_blt = lwa_jsondet-zzt_cargosxite.    " Cargos por Item        "I-3000011712-NTP110419
      lwa_d_boletas-dsc_itm_blt = lwa_jsondet-zzt_desctoxite.
      lwa_d_boletas-lot_mat_blt = lwa_jsondet-zzt_lot_mat.                "Nuevo campo Lote y su cantidad
*{  BEGIN OF INSERT WMR-170615
      lwa_d_boletas-esp_mat_blt = lwa_jsondet-zzt_text_pos.
*}  END OF INSERT WMR-170615
*{  BEGIN OF INSERT WMR-190615
      lwa_d_boletas-uni_sap_blt = lwa_jsondet-zzt_und_prnt.
*}  END OF INSERT WMR-190615
*{  BEGIN OF INSERT WMR-051016-3000005856
      lwa_d_boletas-trf_grt_blt = lwa_jsondet-zzt_columns_tg.
*}  END OF INSERT WMR-051016-3000005856
      "lwa_d_boletas-igv_grt_blt = lwa_jsondet-zzt_columns_igv.  "I-NTP310317-3000006891 CASE_BETA
      APPEND lwa_d_boletas TO input-d_boleta_array-d_boleta.
    ENDLOOP.
*    ENDLOOP. "E-NTP101218-3000009651

*   Cliente
*{I-NTP101218-3000009651
    input-d_empresa-ruc_emp     = is_json_data-jsoncli-zzt_ruc.
    input-d_empresa-raz_soc_emp = is_json_data-jsoncli-zzt_razon_social.
    input-d_empresa-dir_emp     = is_json_data-jsoncli-zzt_direccion.
    input-d_empresa-tel_emp     = is_json_data-jsoncli-zzt_telefono.
    input-d_empresa-con_emp     = is_json_data-jsoncli-zzt_email.
*}I-NTP101218-3000009651
*{E-NTP101218-3000009651
*    LOOP AT is_json_data-t_jsoncli INTO lwa_jsoncli.
*      input-d_empresa-ruc_emp     = lwa_jsoncli-ruc.
*      input-d_empresa-raz_soc_emp = lwa_jsoncli-razon_social.
*      input-d_empresa-dir_emp     = lwa_jsoncli-direccion.
*      input-d_empresa-tel_emp     = lwa_jsoncli-telefono.
*      input-d_empresa-con_emp     = lwa_jsoncli-email.
*    ENDLOOP.
*}E-NTP101218-3000009651

*BI-NTP-210416
*   Llamada la web services
    call_ws_main(
      EXPORTING
        pi_bukrs    = gs_consextsun-bukrs           "Sociedad
        pi_tipdoc   = gs_consextsun-zz_tdocboleta   "Tipo doc
        pi_fecfac   = sy-datum                      "Fecha Fac
        pi_input    = input                         "Input
        pi_vbeln    = lwa_jsoncab-zzt_nrodocsap       "Nro sap
*        pi_id       = lwa_jsoncab-zzt_numeracion(12)  "Nro sunat                    "E-WMR-011118-3000009765
        pi_id       = lwa_jsoncab-zzt_numeracion      "Nro sunat                    "I-WMR-011118-3000009765
        is_options  = is_options                                                    "+291222-NTP-3000020441
      IMPORTING
        pe_output   = output
        pe_message  = pe_message
    ).
*EI-NTP-210416

  ENDMETHOD.                    "set_ws_bl


  METHOD call_ws_fa.

    DATA: input  TYPE zosfe_wsosfct_documentos_reque,  "Test,Homo,Prd
          output TYPE zosfe_wsosfct_documentos_respo.  "Test,Homo,Prd

    DATA: lwa_jsoncab    LIKE is_json_data-jsoncab,
          lwa_jsondet    LIKE LINE OF is_json_data-t_jsondet,
          ls_jsoncab_tc  LIKE LINE OF is_json_data-t_jsoncab_tc,
          ls_jsoncab_gr  LIKE LINE OF is_json_data-t_jsoncab_gr,
          ls_jsoncab_aa  LIKE LINE OF is_json_data-t_jsoncab_aa,
          lwa_d_facturas LIKE LINE OF input-d_factura_array-d_factura.

    DATA: lw_dat_time TYPE xsddatetime_z.

*    LOOP AT is_json_data-t_jsoncab INTO lwa_jsoncab.                                   "E-NTP101218-3000009651
    lwa_jsoncab = is_json_data-jsoncab.                                                 "I-NTP101218-3000009651

    input-user = gs_consextsun-zz_usuario_web.
    input-pass = gs_consextsun-zz_pass_web.
    input-bukrs = gs_consextsun-bukrs.                    "I-NTP-240616

*     Datos de Cabecera
    input-c_factura-ser_num_fct = lwa_jsoncab-zzt_numeracion.
    input-c_factura-fec_emi_fct = lwa_jsoncab-zzt_femision.
    input-c_factura-fir_dig_fct = lwa_jsoncab-zzt_fdigital.
    input-c_factura-nom_raz_fct = lwa_jsoncab-zzt_nempresa.
    input-c_factura-nom_com_fct = lwa_jsoncab-zzt_ncomercial.
    input-c_factura-dom_fsc_fct = lwa_jsoncab-zzt_direccion.
    input-c_factura-num_ruc_fct = lwa_jsoncab-zzt_nroruc.
    input-c_factura-tdo_fac_fct = lwa_jsoncab-zzt_tipodoc.
    input-c_factura-tnm_usu_fct = lwa_jsoncab-zzt_nrodociadq.
    input-c_factura-nom_usu_fct = lwa_jsoncab-zzt_nombreraz.
    input-c_factura-tot_gra_fct = lwa_jsoncab-zzt_totvvopgra.
    input-c_factura-tot_ina_fct = lwa_jsoncab-zzt_totvvopinaf.
    input-c_factura-tot_exo_fct = lwa_jsoncab-zzt_totvvopexo.
    input-c_factura-sum_igv_fct = lwa_jsoncab-zzt_sumaigv.
    input-c_factura-sum_isc_fct = lwa_jsoncab-zzt_sumaisc.
    input-c_factura-sum_otr_fct = lwa_jsoncab-zzt_sumaotrtri.                          "I-NTP201118-3000009651
    input-c_factura-sum_car_fct = lwa_jsoncab-zzt_sumaotrcargos.                       "I-NTP201118-3000009651
    input-c_factura-tot_dsc_fct = lwa_jsoncab-zzt_desctot.
    input-c_factura-tot_vta_fct = lwa_jsoncab-zzt_imptotvent.
    input-c_factura-tip_mon_fct = lwa_jsoncab-zzt_moneda.

*      READ TABLE is_json_data-t_jsoncab INTO lwa_jsoncab WITH KEY zzt_nrodocsap  = lwa_jsoncab-zzt_nrodocsap "E-NTP101218-3000009651
*                                                                zzt_numeracion = lwa_jsoncab-zzt_numeracion. "E-NTP101218-3000009651
*      IF sy-subrc = 0.                                                                                       "E-NTP101218-3000009651
    ""        input-c_factura-gui_rem_fct = lwa_jsoncab-zzt_gui_rem.            "Nuevo campo: Guias          "E-WMR-260117-3000006411
    input-c_factura-tip_ope_fct = lwa_jsoncab-zzt_tip_ope.            "Tipo de Operacion
    ""        input-c_factura-mto_ant_fct = lwa_jsoncab-zzt_mto_ant.            "Monto Anticipo (Campo compuesto x mas de un campo)    "E-WMR-260117-3000006411
    input-c_factura-tot_ant_fct = lwa_jsoncab-zzt_tot_ant.            "Total Anticipo
*{  BEGIN OF INSERT WMR-281015
    input-c_factura-drc_vti_fct = lwa_jsoncab-zzt_dir_dp.
    input-c_factura-plc_vti_fct = lwa_jsoncab-zzt_placa.
*}  END OF INSERT WMR-281015
*{  BEGIN OF INSERT WMR-241115
    input-c_factura-ema_des_fct = lwa_jsoncab-zzt_maildest.           " E-mail destino
*}  END OF INSERT WMR-241115
*{  BEGIN OF INSERT WMR-171016-3000005361
    input-c_factura-pes_nbd_fct = lwa_jsoncab-zzt_weight.             " Pesos
    input-c_factura-fce_fda_fct = lwa_jsoncab-zzt_expcert.            " Certificados Exportación
*}  END OF INSERT WMR-171016-3000005361

    "Via de pago en idioma del solicitante
    input-c_factura-tip_pag_fct = lwa_jsoncab-zzt_viapagodesc.  "I-NTP050917-3000008049  "CASE_AIB

*{  BEGIN OF INSERT WMR-241116-3000005346
    input-c_factura-sed_pro_fct = lwa_jsoncab-zzt_dir_sdpr.            " Dirección de Sede Productiva
    input-c_factura-lot_tex_fct = lwa_jsoncab-zzt_datexp2.             " Datos de Exportación - Parte 2
    input-c_factura-not_tex_fct = lwa_jsoncab-zzt_notify.              " Notify
    input-c_factura-dir_usu_fct = lwa_jsoncab-zzt_clie_dir.            " Dirección de Usuario o Adquiriente
    input-c_factura-tex_det_fct = lwa_jsoncab-zzt_text_bep.            " Texto antes del final de posiciones
    input-c_factura-usu_doc_fct = lwa_jsoncab-zzt_ernam.               " Nombre del responsable del documento
    input-c_factura-dsf_ref_fct = lwa_jsoncab-zzt_ref_sdfi.            " Referencia Documento SD/ Documento FI
*{  BEGIN OF INSERT WMR-300317-3000006749
    input-c_factura-tip_env_fct = lwa_jsoncab-zzt_exp_tpenv.           " Exportación: Tipo de Envío
*}  END OF INSERT WMR-300317-3000006749
*{  BEGIN OF INSERT WMR-220617-3000007448
    input-c_factura-txt_obs_fct = lwa_jsoncab-zzt_text_obs.            " Observaciones
    input-c_factura-txt_bnk_fct = lwa_jsoncab-zzt_text_ctabank.        " Cuenta bank    "I-NTP260318-3000009389
*}  END OF INSERT WMR-220617-3000007448
    "input-c_factura-cab_pre_fct = lwa_jsoncab-zzt_data_mineria.        " Datos Minería  "I-WMR-191018-3000009765 "CASE_CMH
*      ENDIF.                                                                                                   "E-NTP101218-3000009651      ENDIF.
*}  END OF INSERT WMR-241116-3000005346

    input-c_factura-tnm_otr_fct = lwa_jsoncab-zzt_tipnumeotr.
    input-c_factura-ley_bol_fct = lwa_jsoncab-zzt_leyendas.
    input-c_factura-imp_prc_fct = lwa_jsoncab-zzt_imporpermn.
    input-c_factura-ver_ubl_fct = lwa_jsoncab-zzt_verubl.
    input-c_factura-ver_est_fct = lwa_jsoncab-zzt_verestrdoc.
    input-c_factura-val_trn_fct = lwa_jsoncab-zzt_valrefser.
    input-c_factura-nmt_emb_fct = lwa_jsoncab-zzt_nommatemn.
    input-c_factura-tcn_esp_fct = lwa_jsoncab-zzt_descrtcev.
    input-c_factura-lug_dsc_fct = lwa_jsoncab-zzt_lugdesc.
    input-c_factura-fec_dsc_fct = lwa_jsoncab-zzt_fecdescar.
    input-c_factura-reg_mtc_fct = lwa_jsoncab-zzt_numregist.
    input-c_factura-cnf_veh_fct = lwa_jsoncab-zzt_configveh.
    input-c_factura-pto_ori_fct = lwa_jsoncab-zzt_puntoorig.
    input-c_factura-pto_des_fct = lwa_jsoncab-zzt_puntdesti.
    input-c_factura-val_ref_fct = lwa_jsoncab-zzt_valrefpre.
    input-c_factura-fec_cos_fct = lwa_jsoncab-zzt_fechconsu.             "I-NTP201118-3000009651
    input-c_factura-tot_gta_fct = lwa_jsoncab-zzt_totvalveno.            "I-NTP201118-3000009651
    input-c_factura-gbl_car_fct = lwa_jsoncab-zzt_cargosglob.            "I-3000011712-NTP110419 "CARDES
    input-c_factura-gbl_dsc_fct = lwa_jsoncab-zzt_desctoglob.            "I-NTP201118-3000009651 "CARDES
    input-c_factura-est_reg_fct = lwa_jsoncab-zzt_estadoregis.           "I-NTP201118-3000009651

*     Campos adicionales
*{  BEGIN OF DELETE WMR-241116-3000005346
    ""      input-c_factura-dir_usu_fct  = lwa_jsoncab-zzt_dir_usuad.              "Dirección de Usuario o Adquieriente
*{  BEGIN OF DELETE WMR-241116-3000005346
    input-c_factura-dir_lle_fct  = ''.
    input-c_factura-dsd_sap_fct  = lwa_jsoncab-zzt_dsd_sap.                "Zona venta / Cod Cliente / Cod vendedor  "I-NTP201118-3000009651
    input-c_factura-fdo_inc_fct  = ''.
    input-c_factura-fec_reg_fct = me->get_fec_reg( pi_datum = sy-datum   "Fecha de registro
                                                   pi_uzeit = sy-uzeit ).
    input-c_factura-ley_rep_fct  = text-f01.
*{  BEGIN OF REPLACE WMR-020715
    input-c_factura-ley_res_fct = get_sunat_resolution( gs_consextsun-bukrs ).
*}  END OF REPLACE WMR-020715
    input-c_factura-mon_sap_fct  = ''.
    input-c_factura-mrc_plc_fct  = ''.
    input-c_factura-nom_trn_fct  = ''.
    input-c_factura-num_lic_fct  = ''.
    input-c_factura-ruc_trn_fct  = ''.
******
    IF input-c_factura-tot_vta_fct IS INITIAL.
      input-c_factura-tot_vta_fct = '0.00'.
    ENDIF.
    IF input-c_factura-gbl_dsc_fct IS INITIAL.
      input-c_factura-gbl_dsc_fct = '0.00'.
    ENDIF.
*{  BEGIN OF REPLACE WMR-110615
    ""      input-c_factura-ref_sap_fct = lwa_jsoncab-zzt_ref_sap_fct.
    input-c_factura-ref_sap_fct = lwa_jsoncab-zzt_refsapfct.
*}  END OF REPLACE WMR-110615
    input-c_factura-cnd_sap_fct = lwa_jsoncab-zzt_cnd_sap_fct.      "Campo nuevo se le agrego la Fec Vencimiento
    input-c_factura-inc_sap_fct = lwa_jsoncab-zzt_inc_sap_fct.                                                   "I-NTP201118-3000009651

*{  BEGIN OF INSERT WMR-230615
*{I-NTP111218-3000011059
    " Textos Adicionales
    LOOP AT is_json_data-t_jsoncab_tc INTO ls_jsoncab_tc WHERE zzt_nrodocsap  EQ lwa_jsoncab-zzt_nrodocsap
                                                           AND zzt_numeracion EQ lwa_jsoncab-zzt_numeracion.
      IF input-c_factura-txt_adi_fct IS INITIAL.
        input-c_factura-txt_adi_fct = ls_jsoncab_tc-zzt_text_head.
      ELSE.
        CONCATENATE input-c_factura-txt_adi_fct ls_jsoncab_tc-zzt_text_head
               INTO input-c_factura-txt_adi_fct SEPARATED BY '#'.
      ENDIF.
    ENDLOOP.

    "Asignación G/R a Documento
    LOOP AT is_json_data-t_jsoncab_gr INTO ls_jsoncab_gr.
      IF input-c_factura-gui_rem_fct IS INITIAL.
        input-c_factura-gui_rem_fct = ls_jsoncab_gr-zzt_grasociada.
      ELSE.
        CONCATENATE input-c_factura-gui_rem_fct ls_jsoncab_gr-zzt_grasociada
               INTO input-c_factura-gui_rem_fct SEPARATED BY ','.
      ENDIF.
    ENDLOOP.

    "Asignación Aplic.Anticipos a Docmto
    LOOP AT is_json_data-t_jsoncab_aa INTO ls_jsoncab_aa.
      IF input-c_factura-mto_ant_fct IS INITIAL.
        input-c_factura-mto_ant_fct = ls_jsoncab_aa-zzt_aaasociada.
      ELSE.
        CONCATENATE input-c_factura-mto_ant_fct ls_jsoncab_aa-zzt_aaasociada
               INTO input-c_factura-mto_ant_fct SEPARATED BY ','.
      ENDIF.

      IF input-c_factura-tnm_otr_fct IS INITIAL.
        input-c_factura-tnm_otr_fct = ls_jsoncab_aa-zzt_tipnumeotr.
      ELSE.
        CONCATENATE input-c_factura-tnm_otr_fct ls_jsoncab_aa-zzt_tipnumeotr
               INTO input-c_factura-tnm_otr_fct SEPARATED BY ','.
      ENDIF.
    ENDLOOP.
*}I-NTP111218-3000011059

    " Dirección Punto de Emisión
    input-c_factura-dir_emi_fct = lwa_jsoncab-zzt_direcemis.
*}  END OF INSERT WMR-230615

*{  BEGIN OF INSERT WMR-080715
    " Totales Opcionales
    input-c_factura-otr_mon_fct = lwa_jsoncab-zzt_tot_opt.
*}  END OF INSERT WMR-080715

*{  BEGIN OF INSERT WMR-140715
    " Código Formato PDF
    input-c_factura-cod_for_fct = lwa_jsoncab-zzt_pdffrm.

    " Puerto Origen - Puerto Destino
    input-c_factura-ori_des_fct = lwa_jsoncab-zzt_pue_orde.

    " Datos de Embarque
    input-c_factura-dat_emb_fct = lwa_jsoncab-zzt_datembar.

    " Datos de Pesca
    input-c_factura-dat_pes_fct = lwa_jsoncab-zzt_datpesca.
*}  END OF INSERT WMR-140715
    input-c_factura-est_reg_fct = is_options-only_syncstat.                           "I-NTP260717-3000006468 Enviar status cdr de sap a web

*     Datos de Posición
    LOOP AT is_json_data-t_jsondet INTO lwa_jsondet.
      lwa_d_facturas-ser_num_fct = lwa_jsondet-zzt_numeracion.
      lwa_d_facturas-num_itm_fct = lwa_jsondet-zzt_nroposicion.
      lwa_d_facturas-uni_med_fct = lwa_jsondet-zzt_unimed.
      lwa_d_facturas-can_uni_fct = lwa_jsondet-zzt_cantidad.
      lwa_d_facturas-des_mat_fct = lwa_jsondet-zzt_descservicio.
      lwa_d_facturas-vun_itm_fct = lwa_jsondet-zzt_valunitario.
      lwa_d_facturas-pun_itm_fct = lwa_jsondet-zzt_precioventa.
      lwa_d_facturas-imp_igv_fct = lwa_jsondet-zzt_afectigv.
      lwa_d_facturas-imp_isc_fct = lwa_jsondet-zzt_tipisc.
      lwa_d_facturas-vvt_itm_fct = lwa_jsondet-zzt_valvenxite.
      lwa_d_facturas-cod_pro_fct = lwa_jsondet-zzt_material.
      lwa_d_facturas-mon_ref_fct = lwa_jsondet-zzt_valrefunit.
      lwa_d_facturas-car_itm_fct = lwa_jsondet-zzt_cargosxite.    " Cargos por Item       "I-3000011712-NTP110419
      lwa_d_facturas-dsc_itm_fct = lwa_jsondet-zzt_desctoxite.
      lwa_d_facturas-lot_mat_fct = lwa_jsondet-zzt_lot_mat.       "Nuevo campo Lote y su cantidad
*{  BEGIN OF INSERT WMR-170615
      lwa_d_facturas-esp_mat_fct = lwa_jsondet-zzt_text_pos.
*}  END OF INSERT WMR-170615
*{  BEGIN OF INSERT WMR-190615
      lwa_d_facturas-uni_sap_fct = lwa_jsondet-zzt_und_prnt.
*}  END OF INSERT WMR-190615
      APPEND lwa_d_facturas TO input-d_factura_array-d_factura.
    ENDLOOP.
*    ENDLOOP. "E-NTP101218-3000009651

*   Cliente
*{I-NTP101218-3000009651
    input-d_empresa-ruc_emp     = is_json_data-jsoncli-zzt_ruc.
    input-d_empresa-raz_soc_emp = is_json_data-jsoncli-zzt_razon_social.
    input-d_empresa-dir_emp     = is_json_data-jsoncli-zzt_direccion.
    input-d_empresa-tel_emp     = is_json_data-jsoncli-zzt_telefono.
    input-d_empresa-con_emp     = is_json_data-jsoncli-zzt_email.
*}I-NTP101218-3000009651
*{E-NTP101218-3000009651
*    LOOP AT is_json_data-t_jsoncli INTO lwa_jsoncli.
*      input-d_empresa-ruc_emp     = lwa_jsoncli-ruc.
*      input-d_empresa-raz_soc_emp = lwa_jsoncli-razon_social.
*      input-d_empresa-dir_emp     = lwa_jsoncli-direccion.
*      input-d_empresa-tel_emp     = lwa_jsoncli-telefono.
*      input-d_empresa-con_emp     = lwa_jsoncli-email.
*    ENDLOOP.
*}E-NTP101218-3000009651

*BI-NTP-210416
*   Llamada la web services
    call_ws_main(
      EXPORTING
        pi_bukrs    = gs_consextsun-bukrs           "Sociedad
        pi_tipdoc   = gs_consextsun-zz_tdocfactura  "Tipo doc
        pi_fecfac   = sy-datum                      "Fecha Fac
        pi_input    = input                         "Input
        pi_vbeln    = lwa_jsoncab-zzt_nrodocsap       "Nro sap
*        pi_id       = lwa_jsoncab-zzt_numeracion(12)  "Nro sunat                    "E-WMR-011118-3000009765
        pi_id       = lwa_jsoncab-zzt_numeracion      "Nro sunat                    "I-WMR-011118-3000009765
        is_options  = is_options                                                    "+291222-NTP-3000020441
      IMPORTING
        pe_output   = output
        pe_message  = pe_message
    ).
*EI-NTP-210416

  ENDMETHOD.                    "set_ws_fa


  METHOD call_ws_main.

*   Llamada dinamica de webservices
    DATA: l_system       TYPE syst-host,
          l_test_act     TYPE xfeld,       "Indicador Sistema Test activo
          l_mandt_prd    TYPE symandt,     "Mandante Productivo Real.
          l_envsun       TYPE zostb_envwsfe-envsun,
          l_clase        TYPE string,
          l_metho        TYPE string,

          "WS
          lo_obj         TYPE REF TO object,
          lo_sys         TYPE REF TO cx_ai_system_fault,
          lo_app         TYPE REF TO cx_ai_application_fault,
          l_cx_system    TYPE string,
          l_sunat        TYPE string,

          "Const
          ls_const       LIKE LINE OF lt_const,
          ls_proxy       LIKE LINE OF lt_proxy,

          ls_felog_repro TYPE zostb_felog,                                    "I-WMR-040417-3000007000
          ls_docuinac    TYPE zosfetb_docuinac.                               "I-WMR-200219-3000011120

    CONSTANTS: lc_registrado TYPE c VALUE '2',                                "I-NTP260717-3000006468 "+291222-NTP-3000020441
               lc_cancelado  TYPE c VALUE '9'.                                "I-NTP260717-3000006468 "+291222-NTP-3000020441

    FIELD-SYMBOLS: <input>  TYPE any,
                   <output> TYPE any,
                   <fs>     TYPE any.

*   Lectura de resultado
    DATA: l_result   TYPE char1,
          lt_sunat   TYPE TABLE OF char256,
          ls_sunat   TYPE char256,

          lt_lineas  TYPE TABLE OF lty_lineas,
          ls_lineas  LIKE LINE OF lt_lineas,
          ls_message LIKE LINE OF pe_message,
          ls_felog   TYPE zostb_felog,
          ls_balog   TYPE zostb_balog,
          ls_rblog   TYPE zostb_rblog.

*{  BEGIN OF INSERT WMR-200219-3000011120
    " Si documento existe en la tabla de documentos inactivos no enviar a Sunat,
    " Enviar sólo en caso de Sincronización
    CASE gs_process-license.
      WHEN '0020886783'.  " Pedregal
        CASE gs_ubl-tpproc.
          WHEN gc_prefix_fc OR
               gc_prefix_bl OR
               gc_prefix_nc OR
               gc_prefix_nd.
            TRY .
                SELECT SINGLE * INTO ls_docuinac FROM zosfetb_docuinac
                  WHERE bukrs          = pi_bukrs
                    AND zzt_tipodoc    = pi_tipdoc
                    AND zzt_numeracion = pi_id
                    AND updkz          = 'I'.
                IF sy-subrc = 0.
                  " Mensaje en Popup
                  CLEAR ls_message.
                  ls_message-type     = 'S'.
                  ls_message-id       = '00'.
                  ls_message-number   = '398'.
                  ls_message-message  = TEXT-i01.
                  REPLACE '&1' INTO ls_message-message WITH pi_tipdoc.
                  REPLACE '&2' INTO ls_message-message WITH pi_id.
                  CONDENSE ls_message-message.
                  CALL FUNCTION 'CRM_MESSAGE_TEXT_SPLIT'
                    EXPORTING
                      iv_text    = ls_message-message
                    IMPORTING
                      ev_msgvar1 = ls_message-message_v1
                      ev_msgvar2 = ls_message-message_v2
                      ev_msgvar3 = ls_message-message_v3
                      ev_msgvar4 = ls_message-message_v4.
                  APPEND ls_message TO pe_message.

                  " Log de Factura Electrónica
                  CLEAR ls_felog.
                  ls_felog-zzt_nrodocsap  = pi_vbeln.
                  ls_felog-zzt_numeracion = pi_id.
                  ls_felog-zzt_correlativ = 1.
                  ls_felog-zzt_fcreacion  = sy-datum.
                  ls_felog-zzt_hcreacion  = sy-uzeit.
                  ls_felog-zzt_ucreacion  = sy-uname.
                  ls_felog-bukrs          = pi_bukrs.
                  ls_felog-zzt_tipodoc    = pi_tipdoc.
                  ls_felog-zzt_status_cdr = gc_statuscdr_0.
                  ls_felog-zzt_errorext   = ls_message-message.
                  MODIFY zostb_felog FROM ls_felog.

                  EXIT.
                ENDIF.
              CATCH cx_root.
            ENDTRY.
        ENDCASE.
    ENDCASE.
*}  END OF INSERT WMR-200219-3000011120

*   Lectura de constantes
    LOOP AT lt_const INTO ls_const.
      CASE ls_const-campo.
          "Test
        WHEN gc_campo_test_act.
          l_test_act = ls_const-valor1.

          "PRD
        WHEN gc_campo_mandt_prd.
          l_mandt_prd = ls_const-valor1.

          "Determinar ambiente QAS o PRD
        WHEN gc_campo_host.
          IF ls_const-valor1 = sy-host.
            l_system = ls_const-valor2.
          ENDIF.
      ENDCASE.
    ENDLOOP.


*   Segun Sistema - Identificar Modo TEST HOMO PRD
    CASE l_system.
        "QAS
      WHEN gc_system_qas.
        IF l_test_act EQ abap_on.
          l_envsun = gc_system_sunat_test.
        ELSE.
          l_envsun = gc_system_sunat_homo.
        ENDIF.
        "PRD
      WHEN gc_system_prd.
        IF sy-mandt EQ l_mandt_prd.
          l_envsun = gc_system_sunat_prod.
        ELSE.
          l_envsun = gc_system_sunat_test.
        ENDIF.
      WHEN OTHERS.
    ENDCASE.

*   Asignar input, output
    ASSIGN pi_input  TO <input>.
    ASSIGN pe_output TO <output>.


*   Determinar Clase y Metodo WS
    READ TABLE lt_proxy INTO ls_proxy WITH KEY bukrs   = pi_bukrs
                                               envsun  = l_envsun
                                               tpproc  = gs_ubl-tpproc.
    IF sy-subrc EQ 0.

*     Determina Versión de FE Activa
      CASE gs_ubl-zz_versivigen.
        WHEN gc_version_1.
          l_clase = ls_proxy-class.
          l_metho = ls_proxy-method.
        WHEN gc_version_2.
          l_clase = ls_proxy-class2.
          l_metho = ls_proxy-method2.
      ENDCASE.

*     Llamar Web Service
      TRY.
          CREATE OBJECT lo_obj TYPE (l_clase)
            EXPORTING
              logical_port_name = gs_consextsun-zz_proxy_name. "ZP01

          TRY.
              CALL METHOD lo_obj->(l_metho)
                EXPORTING
                  input  = <input>
                IMPORTING
                  output = <output>.
            CATCH cx_ai_system_fault      INTO lo_sys.  "#EC NO_HANDLER
            CATCH cx_ai_application_fault INTO lo_app.  "#EC NO_HANDLER
          ENDTRY.

        CATCH cx_ai_system_fault INTO lo_sys.          "#EC NO_HANDLER.
      ENDTRY.

      "Exception
      IF lo_sys IS BOUND.
        l_cx_system = lo_sys->get_text( ).
      ENDIF.

      "Resultado
      ASSIGN COMPONENT 'RESULTADO' OF STRUCTURE <output> TO <fs>.
      IF <fs> IS ASSIGNED.
        l_sunat = <fs>.
      ENDIF.
    ELSE.
      CONCATENATE 'No tiene clase-metodo configurado en ZOSTB_ENVWSFE'
                  'la FE de'
                  gs_ubl-tpproc
             INTO l_cx_system SEPARATED BY space.
    ENDIF.


**********************************************************************
*   Resultado
**********************************************************************
*   Excepción (error de conexión)
    IF l_cx_system IS NOT INITIAL.
      ls_message-type       = 'E'.
      ls_message-id         = '00'.
      ls_message-number     = '398'.
      ls_message-message_v1 = TEXT-e34.
      ls_message-message_v2 = TEXT-e35.
      CONCATENATE ls_message-message_v1
                  ls_message-message_v2
                  INTO ls_message-message SEPARATED BY space.
      APPEND ls_message TO pe_message.

    ELSE.

*   Leer resultado sunat
      CASE gs_ubl-tpproc.
        WHEN gc_prefix_fc OR
             gc_prefix_bl OR
             gc_prefix_nc OR
             gc_prefix_nd OR
             gc_prefix_bj OR
             gc_prefix_rb.

          SHIFT l_sunat BY 3 PLACES.                "Borrar los 3 primeros
          SPLIT l_sunat AT ';' INTO TABLE lt_sunat. "Mensajes separados
          LOOP AT lt_sunat INTO ls_sunat.
            ls_lineas-linea = ls_sunat+4.

*{I-NTP260717-3000006468
            CASE ls_sunat(3).
              WHEN '007'. "Mensaje de registrado
                l_result = lc_registrado.
                CONCATENATE pi_id ls_lineas-linea INTO ls_lineas-linea SEPARATED BY space.
              WHEN '009'. "Mensaje de cancelado
                l_result = lc_cancelado.
                CONCATENATE pi_id ls_lineas-linea INTO ls_lineas-linea SEPARATED BY space.
              WHEN OTHERS.
            ENDCASE.
*}I-NTP260717-3000006468

            APPEND ls_lineas TO lt_lineas.
          ENDLOOP.


          LOOP AT lt_lineas INTO ls_lineas.
*{I-NTP260717-3000006468
            IF l_result IS NOT INITIAL.
              ls_message-type = 'S'.
            ELSE.
              ls_message-type = 'E'.
            ENDIF.
*}I-NTP260717-3000006468

            ls_message-id       = '00'.
            ls_message-number   = '398'.
            ls_message-message  = ls_lineas-linea.
            CALL FUNCTION 'CRM_MESSAGE_TEXT_SPLIT'
              EXPORTING
                iv_text    = ls_lineas-linea
              IMPORTING
                ev_msgvar1 = ls_message-message_v1
                ev_msgvar2 = ls_message-message_v2
                ev_msgvar3 = ls_message-message_v3
                ev_msgvar4 = ls_message-message_v4.
            APPEND ls_message TO pe_message.
          ENDLOOP.
      ENDCASE.
    ENDIF.

    "Sincronizando documentos de sap a web
    CHECK is_options-only_syncstat = space OR is_options-only_syncstat = l_result. "+291222-NTP-3000020441

*   Actualiza Log
    CASE gs_ubl-tpproc.
      WHEN gc_prefix_fc OR
           gc_prefix_bl OR
           gc_prefix_nc OR
           gc_prefix_nd.

        " Viene de rutina SET_REPROCESO_SAP en programa ZOSFE_PRO_FEREPROCESO "I-WMR-040417-3000007000
        IMPORT felog_reproc = ls_felog_repro FROM MEMORY ID 'REPROCESO_FE'.   "I-WMR-040417-3000007000

*       Log de Factura Electrónica
        ls_felog-zzt_nrodocsap  = pi_vbeln.
        ls_felog-zzt_numeracion = pi_id.
        ls_felog-zzt_correlativ = 1.
        ls_felog-zzt_fcreacion  = sy-datum.
        ls_felog-zzt_hcreacion  = sy-uzeit.
        ls_felog-zzt_ucreacion  = sy-uname.
        ls_felog-bukrs          = pi_bukrs.
        ls_felog-zzt_tipodoc    = pi_tipdoc.
        IF l_cx_system IS NOT INITIAL.
          ls_felog-zzt_status_cdr = gc_statuscdr_7.
          ls_felog-zzt_errorext   = ls_message-message.
        ELSE.
*{I-NTP260717-3000006468
          CASE l_result.
            WHEN lc_cancelado.
              ls_felog-zzt_status_cdr = gc_statuscdr_9.
            WHEN lc_registrado.
              ls_felog-zzt_status_cdr = gc_statuscdr_2.
            WHEN OTHERS.
              ls_felog-zzt_status_cdr = gc_statuscdr_2.
              ls_felog-zzt_errorext   = ls_message-message.
          ENDCASE.
*}I-NTP260717-3000006468
        ENDIF.
        " Mantener ID Resumen de Boletas asignado originalmente               "I-WMR-040417-3000007000
        IF ls_felog_repro-zzt_identifiresu IS NOT INITIAL.                    "I-WMR-040417-3000007000
          ls_felog-zzt_identifiresu = ls_felog_repro-zzt_identifiresu.        "I-WMR-040417-3000007000
        ENDIF.                                                                "I-WMR-040417-3000007000
        " Mantener ID Comunicado de Bajas asignado originalmente              "I-WMR-040417-3000007000
        IF ls_felog_repro-zzt_identifibaja IS NOT INITIAL.                    "I-WMR-040417-3000007000
          ls_felog-zzt_identifibaja = ls_felog_repro-zzt_identifibaja.        "I-WMR-040417-3000007000
        ENDIF.                                                                "I-WMR-040417-3000007000
        MODIFY zostb_felog FROM ls_felog.

      WHEN gc_prefix_bj.
*   Log de Bajas
        DELETE FROM zostb_balog WHERE bukrs            = pi_bukrs
                                  AND zzt_identifibaja = pi_id.
        COMMIT WORK AND WAIT.             "I-NTP170418-3000009628

        ls_balog-bukrs            = pi_bukrs.
        ls_balog-zzt_identifibaja = pi_id.
        ls_balog-zzt_fcreacion    = sy-datum.
        ls_balog-zzt_hcreacion    = sy-uzeit.
        ls_balog-zzt_ucreacion    = sy-uname.
        ls_balog-zzt_femision     = pi_fecfac.
        IF l_cx_system IS NOT INITIAL.
          ls_balog-zzt_status_cdr   = gc_statuscdr_7.
          ls_balog-zzt_errorext     = ls_message-message.
        ELSE.
          ls_balog-zzt_status_cdr   = gc_statuscdr_2.
        ENDIF.

        MODIFY zostb_balog FROM ls_balog.
        COMMIT WORK AND WAIT.             "I-NTP170418-3000009628

      WHEN gc_prefix_rb.
*       Log Resumen de boletas
        DELETE FROM zostb_rblog WHERE bukrs             = pi_bukrs
                                  AND zzt_identifiresu  = pi_id.
        COMMIT WORK AND WAIT.             "I-NTP170418-3000009628

        ls_rblog-bukrs            = pi_bukrs.
        ls_rblog-zzt_identifiresu = pi_id.
        ls_rblog-zzt_fcreacion    = sy-datum.
        ls_rblog-zzt_hcreacion    = sy-uzeit.
        ls_rblog-zzt_ucreacion    = sy-uname.
        ls_rblog-zzt_femision     = pi_fecfac.
        IF l_cx_system IS NOT INITIAL.
          ls_rblog-zzt_status_cdr   = gc_statuscdr_7.
          ls_rblog-zzt_errorext     = ls_message-message.
        ELSE.
          ls_rblog-zzt_status_cdr   = gc_statuscdr_2.
        ENDIF.

        MODIFY zostb_rblog FROM ls_rblog.
        COMMIT WORK AND WAIT.             "I-NTP170418-3000009628
    ENDCASE.

  ENDMETHOD.                    "call_ws_res


  METHOD call_ws_nc.

    DATA: input  TYPE zosfe_wsosncr_documentos_reque,  "Test,Homo,Prd
          output TYPE zosfe_wsosncr_documentos_respo.  "Test,Homo,Prd

    DATA: lwa_jsoncab    LIKE is_json_data-jsoncab,
          lwa_jsondet    LIKE LINE OF is_json_data-t_jsondet,
          ls_jsoncab_tc  LIKE LINE OF is_json_data-t_jsoncab_tc,
          ls_jsoncab_gr  LIKE LINE OF is_json_data-t_jsoncab_gr,
          lwa_d_ncredito LIKE LINE OF input-d_nota_credito_array-d_nota_credito.

*    LOOP AT is_json_data-t_jsoncab INTO lwa_jsoncab.                                   "E-NTP101218-3000009651
    lwa_jsoncab = is_json_data-jsoncab.                                                 "I-NTP101218-3000009651

    input-user = gs_consextsun-zz_usuario_web.
    input-pass = gs_consextsun-zz_pass_web.
    input-bukrs = gs_consextsun-bukrs.                    "I-NTP-240616

*     Datos de Cabecera
    input-c_nota_credito-ser_num_ncr = lwa_jsoncab-zzt_numeracion.
    input-c_nota_credito-fec_emi_ncr = lwa_jsoncab-zzt_femision.
    input-c_nota_credito-fir_dig_ncr = lwa_jsoncab-zzt_fdigital.
    input-c_nota_credito-nom_raz_ncr = lwa_jsoncab-zzt_nempresa.
    input-c_nota_credito-nom_com_ncr = lwa_jsoncab-zzt_ncomercial.
    input-c_nota_credito-dom_fsc_ncr = lwa_jsoncab-zzt_direccion.
    input-c_nota_credito-num_ruc_ncr = lwa_jsoncab-zzt_nroruc.
    input-c_nota_credito-cod_ncr_ncr = lwa_jsoncab-zzt_codmotivo. " Serie y nro. de doc afectado ****  "I-NTP201118-3000009651
    input-c_nota_credito-nom_usu_ncr = lwa_jsoncab-zzt_nombreraz.
    input-c_nota_credito-tot_gra_ncr = lwa_jsoncab-zzt_totvvopgra.
    input-c_nota_credito-tot_ina_ncr = lwa_jsoncab-zzt_totvvopinaf.
    input-c_nota_credito-tot_exo_ncr = lwa_jsoncab-zzt_totvvopexo.
    input-c_nota_credito-sum_igv_ncr = lwa_jsoncab-zzt_sumaigv.
    input-c_nota_credito-sum_isc_ncr = lwa_jsoncab-zzt_sumaisc.
*    input-c_nota_credito-sum_otr_ncr = lwa_jsoncab-zzt_sumaotrtri.               "I-NTP201118-3000009651
*    input-c_nota_credito-sum_car_ncr = lwa_jsoncab-zzt_sumaotrcargos.            "I-NTP201118-3000009651
*    input-c_nota_credito-tot_dsc_ncr = lwa_jsoncab-zzt_desctot.
    input-c_nota_credito-sum_car_ncr = lwa_jsoncab-zzt_cargostot.                "I-221021-NTP-3000017358
    input-c_nota_credito-tot_dsc_ncr = lwa_jsoncab-zzt_desctotot.                "I-221021-NTP-3000017358
    input-c_nota_credito-tot_vta_ncr = lwa_jsoncab-zzt_imptotvent.
    input-c_nota_credito-tip_mon_ncr = lwa_jsoncab-zzt_moneda.
    input-c_nota_credito-ley_bol_ncr = lwa_jsoncab-zzt_leyendas.
    input-c_nota_credito-ver_ubl_ncr = lwa_jsoncab-zzt_verubl.
    input-c_nota_credito-ver_est_ncr = lwa_jsoncab-zzt_verestrdoc.
    input-c_nota_credito-tdo_ncr_ncr = lwa_jsoncab-zzt_tipodoc.
    input-c_nota_credito-ley_bol_ncr = lwa_jsoncab-zzt_leyendas.
    input-c_nota_credito-est_reg_ncr = lwa_jsoncab-zzt_estadoregis.                                                              "I-NTP201118-3000009651
    input-c_nota_credito-snm_mod_ncr = lwa_jsoncab-zzt_tipdocmodif.              " Tipo y Número del documento que modifica      "I-NTP201118-3000009651
    input-c_nota_credito-tip_mod_ncr = lwa_jsoncab-zzt_tipdocmodifho.            " Tipo del documento del Documento que modifica "I-NTP201118-3000009651
    input-c_nota_credito-tot_gta_ncr = lwa_jsoncab-zzt_totvalveno.              "I-WMR-08052020-3000014444

*      READ TABLE is_json_data-t_jsoncab INTO lwa_jsoncab WITH KEY zzt_nrodocsap  = lwa_jsoncab-zzt_nrodocsap "E-NTP101218-3000009651
*                                                                zzt_numeracion = lwa_jsoncab-zzt_numeracion. "E-NTP101218-3000009651
*      IF sy-subrc = 0.                                                                                       "E-NTP101218-3000009651
*{  BEGIN OF INSERT WMR-241116-3000005346
    input-c_nota_credito-tip_ope_ncr = lwa_jsoncab-zzt_tip_ope.             " Tipo de Operación
*}  END OF INSERT WMR-241116-3000005346
    ""        input-c_nota_credito-doc_ref_ncr = lwa_jsoncab-zzt_gui_rem.              " Nuevo campo Guias          "E-WMR-260117-3000006411
*{  BEGIN OF INSERT WMR-241115
    input-c_nota_credito-ema_des_ncr = lwa_jsoncab-zzt_maildest.           " E-mail destino
*}  END OF INSERT WMR-241115
*{  BEGIN OF INSERT WMR-231215
    input-c_nota_credito-tip_mon_ncr = lwa_jsoncab-zzt_moneda.
*}  END OF INSERT WMR-231215

    "Via de pago en idioma del solicitante
    input-c_nota_credito-tip_pag_ncr = lwa_jsoncab-zzt_viapagodesc.  "I-NTP050917-3000008049  "CASE_AIB

*{  BEGIN OF INSERT WMR-241116-3000005346
    input-c_nota_credito-sed_pro_ncr = lwa_jsoncab-zzt_dir_sdpr.            " Dirección de Sede Productiva
    input-c_nota_credito-lot_tex_ncr = lwa_jsoncab-zzt_datexp2.             " Datos de Exportación - Parte 2
    input-c_nota_credito-dir_usu_ncr = lwa_jsoncab-zzt_clie_dir.            " Dirección de Usuario o Adquiriente
    input-c_nota_credito-usu_doc_ncr = lwa_jsoncab-zzt_ernam.               " Nombre del responsable del documento
    input-c_nota_credito-dsf_ref_ncr = lwa_jsoncab-zzt_ref_sdfi.            " Referencia Documento SD/ Documento FI
**        input-c_nota_credito-igv_vta_ncr = lwa_jsoncab-zzt_columns_igv.         "I-NTP310317-3000006891
*{  BEGIN OF INSERT WMR-220617-3000007448
    input-c_nota_credito-txt_obs_ncr = lwa_jsoncab-zzt_text_obs.            " Observaciones
*}  END OF INSERT WMR-220617-3000007448
*      ENDIF.                                                                                                   "E-NTP101218-3000009651
*}  END OF INSERT WMR-241116-3000005346

    input-c_nota_credito-ndo_usu_ncr = lwa_jsoncab-zzt_nrodociadq.               " Tipo y nro. del documento usuario
    input-c_nota_credito-mot_ncr_ncr = lwa_jsoncab-zzt_motivosuste.              " Descricion del motivo                     "I-NTP201118-3000009651
    input-c_nota_credito-imp_prc_ncr = lwa_jsoncab-zzt_imporpermn.
*     Campos adicionales
*{  BEGIN OF DELETE WMR-241116-3000005346
    ""      input-c_nota_credito-dir_usu_ncr = lwa_jsoncab-zzt_dir_usuad.                "Dirección de Usuario o Adquieriente
*{  BEGIN OF DELETE WMR-241116-3000005346
    input-c_nota_credito-doc_mod_ncr  = ''.
    input-c_nota_credito-dsd_sap_ncr  = lwa_jsoncab-zzt_dsd_sap.                 "Zona venta / Cod Cliente / Cod vendedor    "I-NTP201118-3000009651
    input-c_nota_credito-fec_reg_ncr  = me->get_fec_reg( pi_datum = sy-datum   "Fecha de Registro
                                                         pi_uzeit = sy-uzeit ).
    input-c_nota_credito-ley_rep_ncr  = text-c01.
*{  BEGIN OF REPLACE WMR-020715
    input-c_nota_credito-ley_res_ncr = get_sunat_resolution( gs_consextsun-bukrs ).
*}  END OF REPLACE WMR-020715
    input-c_nota_credito-mon_sap_ncr  = ''.
******
    IF input-c_nota_credito-tot_vta_ncr IS INITIAL.
      input-c_nota_credito-tot_vta_ncr = '0.00'.
    ENDIF.
    IF input-c_nota_credito-gbl_dsc_ncr IS INITIAL.
      input-c_nota_credito-gbl_dsc_ncr = '0.00'.
    ENDIF.
*{  BEGIN OF REPLACE WMR-110615
    ""      input-c_nota_credito-ref_sap_ncr  = lwa_jsoncab-zzt_ref_sap_fct.
    input-c_nota_credito-ref_sap_ncr  = lwa_jsoncab-zzt_refsapfct.
*}  END OF REPLACE WMR-110615
    input-c_nota_credito-cnd_sap_ncr  = lwa_jsoncab-zzt_cnd_sap_fct.      "Campo nuevo se le agrego la Fec Vencimiento
    input-c_nota_credito-inc_sap_ncr  = lwa_jsoncab-zzt_inc_sap_fct.                                                   "I-WMR-12112021-3000009651

*{  BEGIN OF INSERT WMR-230615
*{I-NTP111218-3000011059
    " Textos Adicionales
    LOOP AT is_json_data-t_jsoncab_tc INTO ls_jsoncab_tc WHERE zzt_nrodocsap  EQ lwa_jsoncab-zzt_nrodocsap
                                                           AND zzt_numeracion EQ lwa_jsoncab-zzt_numeracion.
      IF input-c_nota_credito-txt_adi_ncr IS INITIAL.
        input-c_nota_credito-txt_adi_ncr = ls_jsoncab_tc-zzt_text_head.
      ELSE.
        CONCATENATE input-c_nota_credito-txt_adi_ncr ls_jsoncab_tc-zzt_text_head
          INTO input-c_nota_credito-txt_adi_ncr SEPARATED BY '#'.
      ENDIF.
    ENDLOOP.

    "Asignación G/R a Documento
    LOOP AT is_json_data-t_jsoncab_gr INTO ls_jsoncab_gr.
      IF input-c_nota_credito-doc_ref_ncr IS INITIAL.
        input-c_nota_credito-doc_ref_ncr = ls_jsoncab_gr-zzt_grasociada.
      ELSE.
        CONCATENATE input-c_nota_credito-doc_ref_ncr ls_jsoncab_gr-zzt_grasociada
               INTO input-c_nota_credito-doc_ref_ncr SEPARATED BY ','.
      ENDIF.
    ENDLOOP.
*}I-NTP111218-3000009651

    " Dirección Punto de Emisión
    input-c_nota_credito-dir_emi_ncr = lwa_jsoncab-zzt_direcemis.
*}  END OF INSERT WMR-230615

*{  BEGIN OF INSERT WMR-080715
    " Totales Opcionales
    input-c_nota_credito-otr_mon_ncr = lwa_jsoncab-zzt_tot_opt.
*}  END OF INSERT WMR-080715

*{  BEGIN OF INSERT WMR-130715
    " Fecha de documento del documento que se modifica
    input-c_nota_credito-fec_mod_ncr = lwa_jsoncab-zzt_fecdocmodif.
*}  END OF INSERT WMR-130715

*{  BEGIN OF INSERT WMR-140715
    " Código Formato PDF
    input-c_nota_credito-cod_for_ncr = lwa_jsoncab-zzt_pdffrm.

    " Puerto Origen - Puerto Destino
    input-c_nota_credito-ori_des_ncr = lwa_jsoncab-zzt_pue_orde.

    " Datos de Embarque
    input-c_nota_credito-dat_emb_ncr = lwa_jsoncab-zzt_datembar.

    " Datos de Pesca
    input-c_nota_credito-dat_pes_ncr = lwa_jsoncab-zzt_datpesca.
*}  END OF INSERT WMR-140715
    input-c_nota_credito-est_reg_ncr = is_options-only_syncstat.                      "I-NTP260717-3000006468 Enviar status cdr de sap a web
*{  BEGIN OF INSERT WMR-150218-3000009072
    "input-c_nota_credito-doc_ocl_ncr = lwa_jsoncab-zzt_bol_npnad.   "CASE_BETA
*}  END OF INSERT WMR-150218-3000009072


*     Datos de Posición
    LOOP AT is_json_data-t_jsondet INTO lwa_jsondet.
      lwa_d_ncredito-ser_num_ncr = lwa_jsondet-zzt_numeracion.
      lwa_d_ncredito-num_itm_ncr = lwa_jsondet-zzt_nroposicion.
      lwa_d_ncredito-uni_med_ncr = lwa_jsondet-zzt_unimed.
      lwa_d_ncredito-can_uni_ncr = lwa_jsondet-zzt_cantidad.
      lwa_d_ncredito-des_itm_ncr = lwa_jsondet-zzt_descservicio.
      lwa_d_ncredito-vun_itm_ncr = lwa_jsondet-zzt_valunitario.
      lwa_d_ncredito-pun_itm_ncr = lwa_jsondet-zzt_precioventa.
      lwa_d_ncredito-imp_igv_ncr = lwa_jsondet-zzt_afectigv.
      lwa_d_ncredito-imp_isc_ncr = lwa_jsondet-zzt_tipisc.
      lwa_d_ncredito-vvt_itm_ncr = lwa_jsondet-zzt_valvenxite.
      lwa_d_ncredito-cod_pro_ncr = lwa_jsondet-zzt_material.
      lwa_d_ncredito-val_ref_ncr = lwa_jsondet-zzt_valrefunit.
      lwa_d_ncredito-dsc_itm_ncr = lwa_jsondet-zzt_desctoxite.
      lwa_d_ncredito-lot_mat_ncr = lwa_jsondet-zzt_lot_mat.                     "Nuevo campo Lote y su cantidad
      IF lwa_d_ncredito-vvt_itm_ncr IS INITIAL.
        lwa_d_ncredito-vvt_itm_ncr = '0.00'.
      ENDIF.
*{  BEGIN OF INSERT WMR-170615
      lwa_d_ncredito-esp_mat_ncr = lwa_jsondet-zzt_text_pos.
*}  END OF INSERT WMR-170615
*{  BEGIN OF INSERT WMR-190615
      lwa_d_ncredito-uni_sap_ncr = lwa_jsondet-zzt_und_prnt.
*}  END OF INSERT WMR-190615
*{  BEGIN OF INSERT WMR-051016-3000005856
      lwa_d_ncredito-trf_grt_ncr = lwa_jsondet-zzt_columns_tg.
*}  END OF INSERT WMR-051016-3000005856
**        lwa_d_ncredito-igv_grt_ncr = lwa_jsondet-zzt_columns_igv.             "I-NTP310317-3000006891
      lwa_d_ncredito-des_itm_pdf_ncr = lwa_jsondet-zzt_dessrv_alt.                  "I-WMR-20042020-3000014097
      lwa_d_ncredito-esp_mat_pdf_ncr = lwa_jsondet-zzt_txtpos_alt.                  "I-WMR-20042020-3000014097
      APPEND lwa_d_ncredito TO input-d_nota_credito_array-d_nota_credito.
    ENDLOOP.
*    ENDLOOP. "E-NTP101218-3000009651

*   Cliente
*{I-NTP101218-3000009651
    input-d_empresa-ruc_emp     = is_json_data-jsoncli-zzt_ruc.
    input-d_empresa-raz_soc_emp = is_json_data-jsoncli-zzt_razon_social.
    input-d_empresa-dir_emp     = is_json_data-jsoncli-zzt_direccion.
    input-d_empresa-tel_emp     = is_json_data-jsoncli-zzt_telefono.
    input-d_empresa-con_emp     = is_json_data-jsoncli-zzt_email.
*}I-NTP101218-3000009651
*{E-NTP101218-3000009651
*    LOOP AT is_json_data-t_jsoncli INTO lwa_jsoncli.
*      input-d_empresa-ruc_emp     = lwa_jsoncli-ruc.
*      input-d_empresa-raz_soc_emp = lwa_jsoncli-razon_social.
*      input-d_empresa-dir_emp     = lwa_jsoncli-direccion.
*      input-d_empresa-tel_emp     = lwa_jsoncli-telefono.
*      input-d_empresa-con_emp     = lwa_jsoncli-email.
*    ENDLOOP.
*}E-NTP101218-3000009651

*BI-NTP-210416
*   Llamada la web services
    call_ws_main(
      EXPORTING
        pi_bukrs    = gs_consextsun-bukrs           "Sociedad
        pi_tipdoc   = gs_consextsun-zz_tdocnotacre  "Tipo doc
        pi_fecfac   = sy-datum                      "Fecha Fac
        pi_input    = input                         "Input
        pi_vbeln    = lwa_jsoncab-zzt_nrodocsap       "Nro sap
*        pi_id       = lwa_jsoncab-zzt_numeracion(12)  "Nro sunat                    "E-WMR-011118-3000009765
        pi_id       = lwa_jsoncab-zzt_numeracion      "Nro sunat                    "I-WMR-011118-3000009765
        is_options  = is_options                                                    "+291222-NTP-3000020441
      IMPORTING
        pe_output   = output
        pe_message  = pe_message
    ).
*EI-NTP-210416

  ENDMETHOD.                    "set_ws_nc


  METHOD call_ws_nd.

    DATA: input  TYPE zosfe_wsosndb_documentos_reque,  "Test,Homo,Prd
          output TYPE zosfe_wsosndb_documentos_respo.  "Test,Homo,Prd

    DATA: lwa_jsoncab   LIKE is_json_data-jsoncab,
          lwa_jsondet   LIKE LINE OF is_json_data-t_jsondet,
          ls_jsoncab_tc LIKE LINE OF is_json_data-t_jsoncab_tc,
          ls_jsoncab_gr LIKE LINE OF is_json_data-t_jsoncab_gr,
          lwa_d_ndebito LIKE LINE OF input-d_nota_debito_array-d_nota_debito.

*    LOOP AT is_json_data-t_jsoncab INTO lwa_jsoncab. "E-NTP101218-3000009651
    lwa_jsoncab = is_json_data-jsoncab.                                                 "I-NTP101218-3000009651

    input-user = gs_consextsun-zz_usuario_web.
    input-pass = gs_consextsun-zz_pass_web.
    input-bukrs = gs_consextsun-bukrs.                    "I-NTP-240616

*     Datos de Cabecera
    input-c_nota_debito-ser_num_ndb = lwa_jsoncab-zzt_numeracion.
    input-c_nota_debito-fec_emi_ndb = lwa_jsoncab-zzt_femision.
    input-c_nota_debito-fir_dig_ndb = lwa_jsoncab-zzt_fdigital.
    input-c_nota_debito-nom_raz_ndb = lwa_jsoncab-zzt_nempresa.
    input-c_nota_debito-nom_com_ndb = lwa_jsoncab-zzt_ncomercial.
    input-c_nota_debito-dom_fsc_ndb = lwa_jsoncab-zzt_direccion.
    input-c_nota_debito-num_ruc_ndb = lwa_jsoncab-zzt_nroruc.
    input-c_nota_debito-cod_ndb_ndb = lwa_jsoncab-zzt_codmotivo.    " Serie y nro. de doc afectado "I-NTP201118-3000009651
    input-c_nota_debito-tdo_ndb_ndb = lwa_jsoncab-zzt_tipodoc.
    input-c_nota_debito-nom_usu_ndb = lwa_jsoncab-zzt_nombreraz.
    input-c_nota_debito-tot_gra_ndb = lwa_jsoncab-zzt_totvvopgra.
    input-c_nota_debito-tot_ina_ndb = lwa_jsoncab-zzt_totvvopinaf.
    input-c_nota_debito-tot_exo_ndb = lwa_jsoncab-zzt_totvvopexo.
    input-c_nota_debito-sum_igv_ndb = lwa_jsoncab-zzt_sumaigv.
    input-c_nota_debito-sum_isc_ndb = lwa_jsoncab-zzt_sumaisc.
*    input-c_nota_debito-sum_otr_ndb = lwa_jsoncab-zzt_sumaotrtri.              "I-NTP201118-3000009651
*    input-c_nota_debito-sum_car_ndb = lwa_jsoncab-zzt_sumaotrcargos.           "I-NTP201118-3000009651
*    input-c_nota_debito-tot_dsc_ndb = lwa_jsoncab-zzt_desctot.
    input-c_nota_debito-sum_car_ndb = lwa_jsoncab-zzt_cargostot.                "I-221021-NTP-3000017358
    input-c_nota_debito-tot_dsc_ndb = lwa_jsoncab-zzt_desctotot.                "I-221021-NTP-3000017358
    input-c_nota_debito-tot_vta_ndb = lwa_jsoncab-zzt_imptotvent.
    input-c_nota_debito-tip_mon_ndb = lwa_jsoncab-zzt_moneda.
    input-c_nota_debito-ley_bol_ndb = lwa_jsoncab-zzt_leyendas.
    input-c_nota_debito-est_reg_ndb = lwa_jsoncab-zzt_estadoregis.             "I-NTP201118-3000009651
    input-c_nota_debito-ver_ubl_ndb = lwa_jsoncab-zzt_verubl.
    input-c_nota_debito-ver_est_ndb = lwa_jsoncab-zzt_verestrdoc.
    input-c_nota_debito-ndo_usu_ndb = lwa_jsoncab-zzt_nrodociadq.                " Tipo y nro. del documento usuario
    input-c_nota_debito-mot_ndb_ndb = lwa_jsoncab-zzt_motivosuste.               " Descricion del motivo               "I-NTP201118-3000009651

*      READ TABLE is_json_data-t_jsoncab INTO lwa_jsoncab WITH KEY zzt_nrodocsap  = lwa_jsoncab-zzt_nrodocsap  "E-NTP101218-3000009651
*                                                                zzt_numeracion = lwa_jsoncab-zzt_numeracion.  "E-NTP101218-3000009651
*      IF sy-subrc = 0.                                                                                        "E-NTP101218-3000009651
*{  BEGIN OF INSERT WMR-241116-3000005346
    input-c_nota_debito-tip_ope_ndb = lwa_jsoncab-zzt_tip_ope.             " Tipo de Operación
*}  END OF INSERT WMR-241116-3000005346
    ""        input-c_nota_debito-doc_ref_ndb = lwa_jsoncab-zzt_gui_rem.               " Nuevo campo: Guias          "E-WMR-260117-3000006411
*{  BEGIN OF INSERT WMR-241115
    input-c_nota_debito-ema_des_ndb = lwa_jsoncab-zzt_maildest.           " E-mail destino
*}  END OF INSERT WMR-241115
*{  BEGIN OF INSERT WMR-231215
    input-c_nota_debito-tip_mon_ndb = lwa_jsoncab-zzt_moneda.
*}  END OF INSERT WMR-231215

    "Via de pago en idioma del solicitante
    input-c_nota_debito-tip_pag_ndb = lwa_jsoncab-zzt_viapagodesc.  "I-NTP050917-3000008049  "CASE_AIB

*{  BEGIN OF INSERT WMR-241116-3000005346
    input-c_nota_debito-sed_pro_ndb = lwa_jsoncab-zzt_dir_sdpr.            " Dirección de Sede Productiva
    input-c_nota_debito-lot_tex_ndb = lwa_jsoncab-zzt_datexp2.             " Datos de Exportación - Parte 2
    input-c_nota_debito-dir_usu_ndb = lwa_jsoncab-zzt_clie_dir.            " Dirección de Usuario o Adquiriente
    input-c_nota_debito-usu_doc_ndb = lwa_jsoncab-zzt_ernam.               " Nombre del responsable del documento
    input-c_nota_debito-dsf_ref_ndb = lwa_jsoncab-zzt_ref_sdfi.            " Referencia Documento SD/ Documento FI
    "input-c_nota_debito-igv_vta_ndb = lwa_jsoncab-zzt_columns_igv.         "I-NTP310317-3000006891  CASE_BETA
*{  BEGIN OF INSERT WMR-220617-3000007448
    input-c_nota_debito-txt_obs_ndb = lwa_jsoncab-zzt_text_obs.            " Observaciones
*}  END OF INSERT WMR-220617-3000007448
*      ENDIF.                                                                                                   "E-NTP101218-3000009651
*}  END OF INSERT WMR-241116-3000005346

    input-c_nota_debito-imp_prc_ndb = lwa_jsoncab-zzt_imporpermn.
    input-c_nota_debito-snm_mod_ndb = lwa_jsoncab-zzt_tipdocmodif.           "I-NTP201118-3000009651
    input-c_nota_debito-tip_mod_ndb = lwa_jsoncab-zzt_tipdocmodifho.         "I-NTP201118-3000009651
*     Campos adicionales
*{  BEGIN OF DELETE WMR-241116-3000005346
    ""      input-c_nota_debito-dir_usu_ndb = lwa_jsoncab-zzt_dir_usuad.                 "Dirección de Usuario o Adquieriente
*{  BEGIN OF DELETE WMR-241116-3000005346
    input-c_nota_debito-doc_mod_ndb  = ''.
    input-c_nota_debito-dsd_sap_ndb  = lwa_jsoncab-zzt_dsd_sap.                  "Zona venta / Cod Cliente / Cod vendedor  "I-NTP201118-3000009651
    input-c_nota_debito-fec_reg_ndb  = me->get_fec_reg( pi_datum = sy-datum    "Fecha de Registro
                                                        pi_uzeit = sy-uzeit ).
    input-c_nota_debito-ley_rep_ndb  = text-d01.
*{  BEGIN OF REPLACE WMR-020715
    input-c_nota_debito-ley_res_ndb = get_sunat_resolution( gs_consextsun-bukrs ).
*}  END OF REPLACE WMR-020715
    input-c_nota_debito-mon_sap_ndb  = ''.
******
    IF input-c_nota_debito-tot_vta_ndb IS INITIAL.
      input-c_nota_debito-tot_vta_ndb = '0.00'.
    ENDIF.
    IF input-c_nota_debito-gbl_dsc_ndb IS INITIAL.
      input-c_nota_debito-gbl_dsc_ndb = '0.00'.
    ENDIF.
*{  BEGIN OF REPLACE WMR-110615
    ""      input-c_nota_debito-ref_sap_ndb  = lwa_jsoncab-zzt_ref_sap_fct.
    input-c_nota_debito-ref_sap_ndb  = lwa_jsoncab-zzt_refsapfct.
*}  END OF REPLACE WMR-110615
    input-c_nota_debito-cnd_sap_ndb  = lwa_jsoncab-zzt_cnd_sap_fct.      "Campo nuevo se le agrego la Fec Vencimiento
    input-c_nota_debito-inc_sap_ndb  = lwa_jsoncab-zzt_inc_sap_fct.                                                   "I-WMR-12112021-3000009651

*{  BEGIN OF INSERT WMR-230615
*{I-NTP111218-3000011059
    " Textos Adicionales
    LOOP AT is_json_data-t_jsoncab_tc INTO ls_jsoncab_tc WHERE zzt_nrodocsap  EQ lwa_jsoncab-zzt_nrodocsap
                                                           AND zzt_numeracion EQ lwa_jsoncab-zzt_numeracion.
      IF input-c_nota_debito-txt_adi_ndb IS INITIAL.
        input-c_nota_debito-txt_adi_ndb = ls_jsoncab_tc-zzt_text_head.
      ELSE.
        CONCATENATE input-c_nota_debito-txt_adi_ndb ls_jsoncab_tc-zzt_text_head
          INTO input-c_nota_debito-txt_adi_ndb SEPARATED BY '#'.
      ENDIF.
    ENDLOOP.

    "Asignación G/R a Documento
    LOOP AT is_json_data-t_jsoncab_gr INTO ls_jsoncab_gr.
      IF input-c_nota_debito-doc_ref_ndb IS INITIAL.
        input-c_nota_debito-doc_ref_ndb = ls_jsoncab_gr-zzt_grasociada.
      ELSE.
        CONCATENATE input-c_nota_debito-doc_ref_ndb ls_jsoncab_gr-zzt_grasociada
               INTO input-c_nota_debito-doc_ref_ndb SEPARATED BY ','.
      ENDIF.
    ENDLOOP.
*}I-NTP111218-3000009651

    " Dirección Punto de Emisión
    input-c_nota_debito-dir_emi_ndb = lwa_jsoncab-zzt_direcemis.
*}  END OF INSERT WMR-230615

*{  BEGIN OF INSERT WMR-080715
    " Totales Opcionales
    input-c_nota_debito-otr_mon_ndb = lwa_jsoncab-zzt_tot_opt.
*}  END OF INSERT WMR-080715

*{  BEGIN OF INSERT WMR-130715
    " Fecha de documento del documento que se modifica
    input-c_nota_debito-fec_mod_ndb = lwa_jsoncab-zzt_fecdocmodif.
*}  END OF INSERT WMR-130715

*{  BEGIN OF INSERT WMR-140715
    " Código Formato PDF
    input-c_nota_debito-cod_for_ndb = lwa_jsoncab-zzt_pdffrm.

    " Puerto Origen - Puerto Destino
    input-c_nota_debito-ori_des_ndb = lwa_jsoncab-zzt_pue_orde.

    " Datos de Embarque
    input-c_nota_debito-dat_emb_ndb = lwa_jsoncab-zzt_datembar.

    " Datos de Pesca
    input-c_nota_debito-dat_pes_ndb = lwa_jsoncab-zzt_datpesca.
*}  END OF INSERT WMR-140715
    input-c_nota_debito-est_reg_ndb = is_options-only_syncstat.                       "I-NTP260717-3000006468 Enviar status cdr de sap a web
*{  BEGIN OF INSERT WMR-150218-3000009072
    "input-c_nota_debito-doc_ocl_ndb = lwa_jsoncab-zzt_bol_npnad.  "CASE_BETA
*}  END OF INSERT WMR-150218-3000009072

*     Datos de Posición
    LOOP AT is_json_data-t_jsondet INTO lwa_jsondet.
      lwa_d_ndebito-ser_num_ndb = lwa_jsondet-zzt_numeracion.
      lwa_d_ndebito-num_itm_ndb = lwa_jsondet-zzt_nroposicion.
      lwa_d_ndebito-uni_med_ndb = lwa_jsondet-zzt_unimed.
      lwa_d_ndebito-can_uni_ndb = lwa_jsondet-zzt_cantidad.
      lwa_d_ndebito-des_itm_ndb = lwa_jsondet-zzt_descservicio.
      lwa_d_ndebito-vun_itm_ndb = lwa_jsondet-zzt_valunitario.
      lwa_d_ndebito-pun_itm_ndb = lwa_jsondet-zzt_precioventa.
      lwa_d_ndebito-imp_igv_ndb = lwa_jsondet-zzt_afectigv.
      lwa_d_ndebito-imp_isc_ndb = lwa_jsondet-zzt_tipisc.
      lwa_d_ndebito-vvt_itm_ndb = lwa_jsondet-zzt_valvenxite.
      lwa_d_ndebito-cod_pro_ndb = lwa_jsondet-zzt_material.
      lwa_d_ndebito-dsc_itm_ndb = lwa_jsondet-zzt_desctoxite.
*        lwa_d_ndebito-imp_isc_ndb = lwa_jsondet-zzt_sumaisc.                 "E-NTP230618-3000009651 No se usa
      lwa_d_ndebito-lot_mat_ndb = lwa_jsondet-zzt_lot_mat.                     "Nuevo campo Lote y su cantidad
      IF lwa_d_ndebito-vvt_itm_ndb IS INITIAL.
        lwa_d_ndebito-vvt_itm_ndb = '0.00'.
      ENDIF.
*{  BEGIN OF INSERT WMR-170615
      lwa_d_ndebito-esp_mat_ndb = lwa_jsondet-zzt_text_pos.
*}  END OF INSERT WMR-170615
*{  BEGIN OF INSERT WMR-190615
      lwa_d_ndebito-uni_sap_ndb = lwa_jsondet-zzt_und_prnt.
*}  END OF INSERT WMR-190615
*{  BEGIN OF INSERT WMR-051016-3000005856
      lwa_d_ndebito-trf_grt_ndb = lwa_jsondet-zzt_columns_tg.
*}  END OF INSERT WMR-051016-3000005856
      "lwa_d_ndebito-igv_grt_ndb = lwa_jsondet-zzt_columns_igv.            "I-NTP310317-3000006891 CASE_BETA
      lwa_d_ndebito-des_itm_pdf_ndb = lwa_jsondet-zzt_dessrv_alt.                   "I-WMR-20042020-3000014097
      lwa_d_ndebito-esp_mat_pdf_ndb = lwa_jsondet-zzt_txtpos_alt.                   "I-WMR-20042020-3000014097
      APPEND lwa_d_ndebito TO input-d_nota_debito_array-d_nota_debito.
    ENDLOOP.
*    ENDLOOP. "E-NTP101218-3000009651

*   Cliente
*{I-NTP101218-3000009651
    input-d_empresa-ruc_emp     = is_json_data-jsoncli-zzt_ruc.
    input-d_empresa-raz_soc_emp = is_json_data-jsoncli-zzt_razon_social.
    input-d_empresa-dir_emp     = is_json_data-jsoncli-zzt_direccion.
    input-d_empresa-tel_emp     = is_json_data-jsoncli-zzt_telefono.
    input-d_empresa-con_emp     = is_json_data-jsoncli-zzt_email.
*}I-NTP101218-3000009651
*{E-NTP101218-3000009651
*    LOOP AT is_json_data-t_jsoncli INTO lwa_jsoncli.
*      input-d_empresa-ruc_emp     = lwa_jsoncli-ruc.
*      input-d_empresa-raz_soc_emp = lwa_jsoncli-razon_social.
*      input-d_empresa-dir_emp     = lwa_jsoncli-direccion.
*      input-d_empresa-tel_emp     = lwa_jsoncli-telefono.
*      input-d_empresa-con_emp     = lwa_jsoncli-email.
*    ENDLOOP.
*}E-NTP101218-3000009651

*BI-NTP-210416
*   Llamada la web services
    call_ws_main(
      EXPORTING
        pi_bukrs    = gs_consextsun-bukrs           "Sociedad
        pi_tipdoc   = gs_consextsun-zz_tdocnotadeb  "Tipo doc
        pi_fecfac   = sy-datum                      "Fecha Fac
        pi_input    = input                         "Input
        pi_vbeln    = lwa_jsoncab-zzt_nrodocsap       "Nro sap
*        pi_id       = lwa_jsoncab-zzt_numeracion(12)  "Nro sunat                    "E-WMR-011118-3000009765
        pi_id       = lwa_jsoncab-zzt_numeracion      "Nro sunat                    "I-WMR-011118-3000009765
        is_options  = is_options                                                    "+291222-NTP-3000020441
      IMPORTING
        pe_output   = output
        pe_message  = pe_message
    ).
*EI-NTP-210416

  ENDMETHOD.                    "set_ws_nd


  METHOD call_ws_res.

    DATA: input           TYPE zosfe_wsosrbl_documentos_reque,      "R-NTP-210416
          output          TYPE zosfe_wsosrbl_documentos_respo,      "R-NTP-210416
          lwa_d_bolresume LIKE LINE OF input-drs_boleta_array-drs_boleta. "R-NTP-210416

    DATA: lw_id           TYPE zosed_identifiresu.

    FIELD-SYMBOLS: <fs_rbcab> LIKE LINE OF pi_cab,
                   <fs_rbdet> LIKE LINE OF pi_det.

    CHECK lines( pi_cab ) > 0.

*   Cabecera
    LOOP AT pi_cab ASSIGNING <fs_rbcab>.
      lw_id = <fs_rbcab>-zz_identifiresu.
      input-user = gs_consextsun-zz_usuario_web.
      input-pass = gs_consextsun-zz_pass_web.                 "'305e12072a704a5dcc93fd61bd8768c0c3b88b3fb15b705301e1e8a527659d3b'.
      input-bukrs = gs_consextsun-bukrs.                    "I-NTP-240616

      input-crs_boleta-ide_rsm_rbl = <fs_rbcab>-zz_identifiresu.
      input-crs_boleta-nom_raz_rbl = <fs_rbcab>-zz_nempresa.
      input-crs_boleta-num_ruc_rbl = <fs_rbcab>-zz_nroruc.
      input-crs_boleta-fec_emi_rbl = <fs_rbcab>-zz_femision.
      input-crs_boleta-fec_gen_rbl = <fs_rbcab>-zz_fecgenresume.
      input-crs_boleta-fir_dig_rbl = <fs_rbcab>-zz_firdigital. "TEMPORAL MIENTRAS SE ASIGNA FIRMA DIGITAL
      input-crs_boleta-ver_ubl_rbl = <fs_rbcab>-zz_versiubl.
      input-crs_boleta-ver_est_rbl = <fs_rbcab>-zz_versiestrudoc.
      input-crs_boleta-est_reg_rbl = gs_consextsun-zz_estaregdoc.

*   Campos adicionales
      input-crs_boleta-fec_reg_rbl = me->get_fec_reg( pi_datum = sy-datum
                                                      pi_uzeit = sy-uzeit ).
      input-crs_boleta-ley_rep_rbl  = text-r01.
      input-crs_boleta-ley_res_rbl  = get_sunat_resolution( gs_consextsun-bukrs ).
*{  BEGIN OF INSERT WMR-180216
      " Versión de Resumen de Boletas
      input-crs_boleta-tip_vrs_rbl  = '00'.
*}  END OF INSERT WMR-180216
    ENDLOOP.

*   Detalle
    LOOP AT pi_det ASSIGNING <fs_rbdet>.
      lwa_d_bolresume-ide_rsm_rbl  = <fs_rbdet>-zz_identifiresu.
      lwa_d_bolresume-num_fil_rbl  = <fs_rbdet>-zz_nrofila.
*{  BEGIN OF INSERT WMR-151117-3000008615
      SHIFT lwa_d_bolresume-num_fil_rbl LEFT DELETING LEADING '0'.
*}  END OF INSERT WMR-151117-3000008615
      lwa_d_bolresume-tdo_doc_rbl  = <fs_rbdet>-zz_tipodoc.
      lwa_d_bolresume-ser_num_rbl  = <fs_rbdet>-zz_serie.
      lwa_d_bolresume-cor_ini_rbl  = <fs_rbdet>-zz_correla_low.
      lwa_d_bolresume-cor_fin_rbl  = <fs_rbdet>-zz_correla_high.
      lwa_d_bolresume-tot_gra_rbl  = <fs_rbdet>-zz_totvvopgra.
      lwa_d_bolresume-tot_exo_rbl  = <fs_rbdet>-zz_totvvopexo.
      lwa_d_bolresume-tot_ina_rbl  = <fs_rbdet>-zz_totvvopinaf.
      lwa_d_bolresume-sum_sot_rbl  = <fs_rbdet>-zz_sumaotrcargos.
      lwa_d_bolresume-tot_isc_rbl  = <fs_rbdet>-zz_sumaisc.
      lwa_d_bolresume-tot_igv_rbl  = <fs_rbdet>-zz_sumaigv.
      lwa_d_bolresume-tot_otr_rbl  = <fs_rbdet>-zz_sumaotrtri.
      lwa_d_bolresume-imp_tot_rbl  = <fs_rbdet>-zz_imptotvent.
      lwa_d_bolresume-tip_mon_rbl  = <fs_rbdet>-zz_waerk.
      lwa_d_bolresume-tip_mon_rbl  = <fs_rbdet>-zz_moneda.                      "I-WMR-070116
      lwa_d_bolresume-tot_gta_rbl  = <fs_rbdet>-zz_totvvopgrat.
      APPEND lwa_d_bolresume TO input-drs_boleta_array-drs_boleta.
    ENDLOOP.

*   Llamar Web Service
*BI-NTP-210416
    call_ws_main(
      EXPORTING
        pi_bukrs      = pi_bukrs
        pi_tipdoc     = gc_prefix_rb
        pi_fecfac     = pi_fecfac
        pi_input      = input
        pi_id         = lw_id
      IMPORTING
        pe_output     = output
        pe_message    = pe_message
    ).
*EI-NTP-210416

  ENDMETHOD.                    "call_ws_res


  METHOD call_ws_res_v2.

    DATA: input  TYPE zosfe_wsosrbl_documentos_reque, "Test,Homo,Prd
          output TYPE zosfe_wsosrbl_documentos_respo. "Test,Homo,Prd

    DATA: ls_cab  LIKE LINE OF pi_cab,
          ls_det  LIKE LINE OF pi_det,
          ls_log  LIKE LINE OF lt_rblog,
          ls_item LIKE LINE OF input-drs_boleta_array-drs_boleta.

    DATA: lw_id           TYPE zosed_identifiresu.

    FIELD-SYMBOLS: <fs> TYPE any.

    CHECK lines( pi_cab ) > 0.

*   Cabecera
    LOOP AT pi_cab INTO ls_cab.
      lw_id = ls_cab-zz_identifiresu.
      input-user = gs_consextsun-zz_usuario_web.
      input-pass = gs_consextsun-zz_pass_web.    "'305e12072a704a5dcc93fd61bd8768c0c3b88b3fb15b705301e1e8a527659d3b'.
      input-bukrs = gs_consextsun-bukrs.                    "I-NTP-240616

      input-crs_boleta-ide_rsm_rbl = ls_cab-zz_identifiresu.
      input-crs_boleta-nom_raz_rbl = ls_cab-zz_nempresa.
      input-crs_boleta-num_ruc_rbl = ls_cab-zz_nroruc.
      input-crs_boleta-fec_emi_rbl = ls_cab-zz_femision.
      input-crs_boleta-fec_gen_rbl = ls_cab-zz_fecgenresume.
      input-crs_boleta-fir_dig_rbl = ls_cab-zz_firdigital. " TEMPORAL MIENTRAS SE ASIGNA FIRMA DIGITAL
      input-crs_boleta-ver_ubl_rbl = ls_cab-zz_versiubl.
      input-crs_boleta-ver_est_rbl = ls_cab-zz_versiestrudoc.
*      input-crs_boleta-vlr_rsm_rbl = ' '.
      input-crs_boleta-est_reg_rbl = gs_consextsun-zz_estaregdoc.
      input-crs_boleta-ley_rep_rbl = TEXT-r01.
      input-crs_boleta-ley_res_rbl = get_sunat_resolution( gs_consextsun-bukrs ).
*{  BEGIN OF INSERT WMR-180216
      " Versión de Resumen de Boletas
      input-crs_boleta-tip_vrs_rbl  = '01'.
*}  END OF INSERT WMR-180216
    ENDLOOP.

*   Detalle
    LOOP AT pi_det INTO ls_det.
      ls_item-ide_rsm_rbl  = ls_det-zz_identifiresu.
      ls_item-num_fil_rbl  = ls_det-zz_nrofila.
*{  BEGIN OF INSERT WMR-151117-3000008615
      SHIFT ls_item-num_fil_rbl LEFT DELETING LEADING '0'.
*}  END OF INSERT WMR-151117-3000008615
      ls_item-tdo_doc_rbl  = ls_det-zz_tipodoc.
      ""      ls_item-ser_num_rbl  = ls_det-zz_serie.                         "E-WMR-040118-3000008865
      ls_item-tot_gra_rbl  = ls_det-zz_totvvopgra.
      ls_item-tot_exo_rbl  = ls_det-zz_totvvopexo.
      ls_item-tot_ina_rbl  = ls_det-zz_totvvopinaf.
      ls_item-sum_sot_rbl  = ls_det-zz_sumaotrcargos.
      ls_item-tot_isc_rbl  = ls_det-zz_sumaisc.
      ls_item-tot_igv_rbl  = ls_det-zz_sumaigv.
      ls_item-tot_otr_rbl  = ls_det-zz_sumaotrtri.
      ls_item-imp_tot_rbl  = ls_det-zz_imptotvent.
      ""      ls_item-tip_mon_rbl  = ls_det-zz_waerk.
      ls_item-tip_mon_rbl  = ls_det-zz_moneda.                                "I-WMR-040118-3000008865
      ls_item-tot_gta_rbl  = ls_det-zz_totvalveno.                            "I-WMR-040118-3000008865
      ls_item-nms_doc_rbl  = ls_det-zz_serie.                                 "I-WMR-040118-3000008865
      ls_item-ndt_adq_rbl  = ls_det-zz_nrodociadq.                            "I-WMR-040118-3000008865
      ls_item-nst_mod_rbl  = ls_det-zz_nrodocmodif.                           "I-WMR-040118-3000008865
      ls_item-est_itm_rbl  = ls_det-zz_estadoitem.                            "I-WMR-040118-3000008865
*{  BEGIN OF INSERT WMR-150218-3000009072: No pintar N°doc identidad adquirente
      ASSIGN COMPONENT 'DOC_OCL_RBL' OF STRUCTURE ls_item TO <fs>.
      IF <fs> IS ASSIGNED. <fs> = ls_det-zz_bol_npnad. ENDIF.
*}  END OF INSERT WMR-150218-3000009072: No pintar N°doc identidad adquirente
      APPEND ls_item TO input-drs_boleta_array-drs_boleta.
    ENDLOOP.

*   Llamar Web Service
*BI-NTP-210416
    call_ws_main(
      EXPORTING
        pi_bukrs      = pi_bukrs
        pi_tipdoc     = gc_prefix_rb
        pi_fecfac     = pi_fecfac
        pi_input      = input
        pi_id         = lw_id
      IMPORTING
        pe_output     = output
        pe_message    = pe_message
    ).
*EI-NTP-210416

  ENDMETHOD.                    "call_ws_res


  METHOD check_field.

    DATA: ls_badet LIKE LINE OF pi_badet,
          ls_balog LIKE LINE OF pe_balog.

    DATA: lw_correl   TYPE zosed_correlativ.

    REFRESH pe_balog.
    LOOP AT pi_badet INTO ls_badet.
      IF ls_badet-zz_motivobaja IS INITIAL.
        ADD 1 TO lw_correl.

*{  BEGIN OF INSERT WMR-200715
        ls_balog-bukrs            = ls_badet-bukrs.
*}  END OF INSERT WMR-200715
        ls_balog-zzt_identifibaja = ls_badet-zz_identifibaja.
        ls_balog-zzt_correlativ   = lw_correl.
        ls_balog-zzt_status_cdr   = gc_statuscdr_0.
        ls_balog-zzt_fcreacion    = sy-datum.
        ls_balog-zzt_hcreacion    = sy-uzeit.
        ls_balog-zzt_ucreacion    = sy-uname.
        ls_balog-zzt_femision     = pi_fecfac.
        CONCATENATE text-e22 ls_badet-zz_serie ls_badet-zz_correlativo INTO ls_balog-zzt_errorext SEPARATED BY space.

        APPEND ls_balog TO pe_balog.
        pe_error = '2'.
      ENDIF.
    ENDLOOP.
    IF pe_balog[] IS NOT INITIAL.
      MODIFY zostb_balog FROM TABLE pe_balog.
    ENDIF.

  ENDMETHOD.                    "check_field


  METHOD check_field_res.

    DATA: ls_cab   LIKE LINE OF pi_cab,
          ls_rblog LIKE LINE OF pe_rblog.

    DATA: lw_correl   TYPE zosed_correlativ.

    LOOP AT pi_cab INTO ls_cab .
      IF ls_cab-zz_nempresa IS INITIAL .
        ADD 1 TO lw_correl.
*{  BEGIN OF INSERT WMR-200715
        ls_rblog-bukrs            = ls_cab-bukrs.
*}  END OF INSERT WMR-200715
        ls_rblog-zzt_identifiresu = ls_cab-zz_identifiresu.
        ls_rblog-zzt_correlativ   = lw_correl.
        ls_rblog-zzt_status_cdr   = gc_statuscdr_0.
        ls_rblog-zzt_fcreacion    = sy-datum.
        ls_rblog-zzt_hcreacion    = sy-uzeit.
        ls_rblog-zzt_ucreacion    = sy-uname.
        ls_rblog-zzt_femision     = pi_fecfac.
        CONCATENATE text-e23 ls_cab-zz_numeracion INTO ls_rblog-zzt_errorext SEPARATED BY space.
        APPEND ls_rblog TO pe_rblog.
        pe_error = '2'.
      ELSEIF ls_cab-zz_nroruc IS INITIAL.
        ADD 1 TO lw_correl.
*{  BEGIN OF INSERT WMR-200715
        ls_rblog-bukrs            = ls_cab-bukrs.
*}  END OF INSERT WMR-200715
        ls_rblog-zzt_identifiresu = ls_cab-zz_identifiresu.
        ls_rblog-zzt_correlativ   = lw_correl.
        ls_rblog-zzt_status_cdr   = gc_statuscdr_0.
        ls_rblog-zzt_fcreacion    = sy-datum.
        ls_rblog-zzt_hcreacion    = sy-uzeit.
        ls_rblog-zzt_ucreacion    = sy-uname.
        ls_rblog-zzt_femision     = pi_fecfac.
        CONCATENATE text-e24 ls_cab-zz_numeracion INTO ls_rblog-zzt_errorext SEPARATED BY space.
        APPEND ls_rblog TO pe_rblog.
        pe_error = '2'.
      ELSEIF ls_cab-zz_nroruchomo IS INITIAL.
        ADD 1 TO lw_correl.
*{  BEGIN OF INSERT WMR-200715
        ls_rblog-bukrs            = ls_cab-bukrs.
*}  END OF INSERT WMR-200715
        ls_rblog-zzt_identifiresu = ls_cab-zz_identifiresu.
        ls_rblog-zzt_correlativ   = lw_correl.
        ls_rblog-zzt_status_cdr   = gc_statuscdr_0.
        ls_rblog-zzt_fcreacion    = sy-datum.
        ls_rblog-zzt_hcreacion    = sy-uzeit.
        ls_rblog-zzt_ucreacion    = sy-uname.
        ls_rblog-zzt_femision     = pi_fecfac.
        CONCATENATE text-e25 ls_cab-zz_numeracion INTO ls_rblog-zzt_errorext SEPARATED BY space.
        APPEND ls_rblog TO pe_rblog.
        pe_error = '2'.
      ENDIF.
    ENDLOOP.

* Actualziar tabla Z
    IF pe_rblog[] IS NOT INITIAL.
      MODIFY zostb_rblog FROM TABLE pe_rblog.
    ENDIF.

  ENDMETHOD.                    "check_field_res


  METHOD check_field_res_v2.

    DATA: ls_cab LIKE LINE OF pi_cab,
          lt_log TYPE TABLE OF zostb_rblog,
          ls_log LIKE LINE OF pe_rblog.

    DATA: lw_correl TYPE zosed_correlativ.

    LOOP AT pi_cab INTO ls_cab .
      IF ls_cab-zz_nempresa IS INITIAL .
        ADD 1 TO lw_correl.
        ls_log-bukrs            = ls_cab-bukrs.
        ls_log-zzt_identifiresu = ls_cab-zz_identifiresu.
        ls_log-zzt_correlativ   = lw_correl.
        ls_log-zzt_status_cdr   = gc_statuscdr_0.
        ls_log-zzt_fcreacion    = sy-datum.
        ls_log-zzt_hcreacion    = sy-uzeit.
        ls_log-zzt_ucreacion    = sy-uname.
        ls_log-zzt_femision     = pi_fecfac.
        CONCATENATE text-e23 ls_cab-zz_identifiresu INTO ls_log-zzt_errorext SEPARATED BY space.
        APPEND ls_log TO lt_log.
      ELSEIF ls_cab-zz_nroruc IS INITIAL.
        ADD 1 TO lw_correl.
        ls_log-bukrs            = ls_cab-bukrs.
        ls_log-zzt_identifiresu = ls_cab-zz_identifiresu.
        ls_log-zzt_correlativ   = lw_correl.
        ls_log-zzt_status_cdr   = gc_statuscdr_0.
        ls_log-zzt_fcreacion    = sy-datum.
        ls_log-zzt_hcreacion    = sy-uzeit.
        ls_log-zzt_ucreacion    = sy-uname.
        ls_log-zzt_femision     = pi_fecfac.
        CONCATENATE text-e24 ls_cab-zz_identifiresu INTO ls_log-zzt_errorext SEPARATED BY space.
        APPEND ls_log TO lt_log.
      ELSEIF ls_cab-zz_nroruc_h IS INITIAL.
        ADD 1 TO lw_correl.
        ls_log-bukrs            = ls_cab-bukrs.
        ls_log-zzt_identifiresu = ls_cab-zz_identifiresu.
        ls_log-zzt_correlativ   = lw_correl.
        ls_log-zzt_status_cdr   = gc_statuscdr_0.
        ls_log-zzt_fcreacion    = sy-datum.
        ls_log-zzt_hcreacion    = sy-uzeit.
        ls_log-zzt_ucreacion    = sy-uname.
        ls_log-zzt_femision     = pi_fecfac.
        CONCATENATE text-e25 ls_cab-zz_identifiresu INTO ls_log-zzt_errorext SEPARATED BY space.
        APPEND ls_log TO lt_log.
      ENDIF.
    ENDLOOP.

* Actualziar tabla Z
    IF lt_log[] IS NOT INITIAL.
      MODIFY zostb_rblog FROM TABLE lt_log.
      MESSAGE text-e36 TYPE 'E' RAISING error.             "M LJG-21.05.2018
    ENDIF.

  ENDMETHOD.                    "check_field_res


  METHOD check_homo.

    DATA: lr_motsref  TYPE RANGE OF char02,                                         "I-WMR-110419-3000011736
          lwa_message LIKE LINE OF pe_message,
          lwa_felog   LIKE LINE OF lt_felog,
          ls_motsref  LIKE LINE OF lr_motsref,                                      "I-WMR-110419-3000011736
          ls_const    LIKE LINE OF lt_const,                                        "I-WMR-110419-3000011736
          ls_vbrk     LIKE LINE OF it_vbrk,               "I-PBM250721-3000017358
          lw_pos      TYPE         char15,
          lw_correl   TYPE         zosed_correlativ,
          l_invalid	  TYPE string,                        "I-PBM250721-3000017358
          l_errtxt    TYPE string,                        "I-PBM250721-3000017358
          l_value     TYPE string.                        "I-PBM250721-3000017358

    FIELD-SYMBOLS: <fs_cabsal> LIKE LINE OF is_data-t_header,
                   <fs_cabsa2> LIKE LINE OF is_data-t_header2,                            "I-WMR-070319-3000010823
                   <fs_detsal> LIKE LINE OF is_data-t_detail,
                   <fs_cardes> LIKE LINE OF is_data-t_cardes.                             "I-3000011712-NTP110419
*{  BEGIN OF INSERT WMR-110419-3000011736
    " Motivo ND sin referencia documento que modifica
    LOOP AT lt_const INTO ls_const.
      CASE ls_const-campo.
        WHEN 'MOTNDSRE'.
          CLEAR ls_motsref.
          ls_motsref-sign   = ls_const-signo.
          ls_motsref-option = ls_const-opcion.
          ls_motsref-low    = ls_const-valor1.
          ls_motsref-high   = ls_const-valor2.
          APPEND ls_motsref TO lr_motsref.
      ENDCASE.
    ENDLOOP.
*}  END OF INSERT WMR-110419-3000011736

* Errores cabecera
    LOOP AT is_data-t_header ASSIGNING <fs_cabsal>.
      READ TABLE is_data-t_header2 ASSIGNING <fs_cabsa2>                                  "I-WMR-070319-3000010823
           WITH KEY bukrs         = <fs_cabsal>-bukrs                                     "I-WMR-070319-3000010823
                    zz_nrodocsap  = <fs_cabsal>-zz_nrodocsap                              "I-WMR-070319-3000010823
                    zz_numeracion = <fs_cabsal>-zz_numeracion.                            "I-WMR-070319-3000010823
      CLEAR lwa_felog.
      lwa_felog-zzt_nrodocsap  = <fs_cabsal>-zz_nrodocsap.
      lwa_felog-zzt_numeracion = <fs_cabsal>-zz_numeracion.
      lwa_felog-zzt_status_cdr = gc_statuscdr_0.
      lwa_felog-zzt_fcreacion  = sy-datum.
      lwa_felog-zzt_hcreacion  = sy-uzeit.
      lwa_felog-zzt_ucreacion  = sy-uname.
*{  BEGIN OF INSERT WMR-200715
      lwa_felog-bukrs          = <fs_cabsal>-bukrs.
*}  END OF INSERT WMR-200715
*{  BEGIN OF INSERT WMR-170915
      lwa_felog-zzt_tipodoc    = <fs_cabsal>-zz_tipodoc.
*}  END OF INSERT WMR-170915
      IF <fs_cabsal>-zz_nroruc IS NOT INITIAL AND
         <fs_cabsal>-zz_nroruchomo IS INITIAL.
        ADD 1 TO lw_correl.
        lwa_felog-zzt_correlativ = lw_correl.
        lwa_felog-zzt_errorext = text-e01.
        APPEND lwa_felog TO lt_felog.
        pe_error = abap_true.
      ENDIF.
      IF <fs_cabsal>-zz_totvvopgra IS NOT INITIAL AND
         <fs_cabsal>-zz_opergravhomo IS INITIAL.
        ADD 1 TO lw_correl.
        lwa_felog-zzt_correlativ = lw_correl.
        lwa_felog-zzt_errorext = text-e02.
        APPEND lwa_felog TO lt_felog.
        pe_error = abap_true.
      ENDIF.
      IF <fs_cabsal>-zz_totvvopinaf IS NOT INITIAL AND
         <fs_cabsal>-zz_operinafhomo IS INITIAL.
        ADD 1 TO lw_correl.
        lwa_felog-zzt_correlativ = lw_correl.
        lwa_felog-zzt_errorext = text-e03.
        APPEND lwa_felog TO lt_felog.
        pe_error = abap_true.
      ENDIF.
      IF <fs_cabsal>-zz_totvvopexo IS NOT INITIAL AND
         <fs_cabsal>-zz_operexohomo IS INITIAL.
        ADD 1 TO lw_correl.
        lwa_felog-zzt_correlativ = lw_correl.
        lwa_felog-zzt_errorext = text-e04.
        APPEND lwa_felog TO lt_felog.
        pe_error = abap_true.
      ENDIF.
      IF <fs_cabsal>-zz_sumaigv IS NOT INITIAL AND
         ( <fs_cabsal>-zz_sumaigvhom03 IS INITIAL OR
           <fs_cabsal>-zz_sumaigvhom04 IS INITIAL OR
           <fs_cabsal>-zz_sumaigvhom05 IS INITIAL OR
           <fs_cabsal>-zz_sumaigvhom06 IS INITIAL ).
        ADD 1 TO lw_correl.
        lwa_felog-zzt_correlativ = lw_correl.
        lwa_felog-zzt_errorext = text-e05.
        APPEND lwa_felog TO lt_felog.
        pe_error = abap_true.
      ENDIF.
      IF <fs_cabsal>-zz_sumaisc IS NOT INITIAL AND
         ( <fs_cabsal>-zz_sumaischom03 IS INITIAL OR
           <fs_cabsal>-zz_sumaischom04 IS INITIAL OR
           <fs_cabsal>-zz_sumaischom05 IS INITIAL ).
        ADD 1 TO lw_correl.
        lwa_felog-zzt_correlativ = lw_correl.
        lwa_felog-zzt_errorext = text-e06.
        APPEND lwa_felog TO lt_felog.
        pe_error = abap_true.
      ENDIF.
*{E-3000011712-NTP110419
*      IF <fs_cabsal>-zz_desctot IS NOT INITIAL AND
*         <fs_cabsal>-zz_desctothomo IS INITIAL.
*        ADD 1 TO lw_correl.
*        lwa_felog-zzt_correlativ = lw_correl.
*        lwa_felog-zzt_errorext = text-e07.
*        APPEND lwa_felog TO lt_felog.
*        pe_error = abap_true.
*      ENDIF.
*}E-3000011712-NTP110419
      IF ( <fs_cabsal>-zz_leyendas   IS NOT INITIAL AND <fs_cabsal>-zz_leyendashomo  IS INITIAL ) OR
         ( <fs_cabsal>-zz_leyendas02 IS NOT INITIAL AND <fs_cabsal>-zz_leyendashom02 IS INITIAL ) OR
         ( <fs_cabsal>-zz_leyendas03 IS NOT INITIAL AND <fs_cabsal>-zz_leyendashom03 IS INITIAL ) OR
         ( <fs_cabsa2>-zz_leyendas04 IS NOT INITIAL AND <fs_cabsa2>-zz_leyendashom04 IS INITIAL ).  "I-WMR-070319-3000010823
        ADD 1 TO lw_correl.
        lwa_felog-zzt_correlativ = lw_correl.
        lwa_felog-zzt_errorext = text-e08.
        APPEND lwa_felog TO lt_felog.
        pe_error = abap_true.
      ENDIF.
      IF <fs_cabsal>-zz_tipnumeotr IS NOT INITIAL AND
         <fs_cabsal>-zz_tipnumothomo IS INITIAL.
        ADD 1 TO lw_correl.
        lwa_felog-zzt_correlativ = lw_correl.
        lwa_felog-zzt_errorext = text-e09.
        APPEND lwa_felog TO lt_felog.
        pe_error = abap_true.
      ENDIF.
      IF <fs_cabsal>-zz_totvalveno IS NOT INITIAL AND
         <fs_cabsal>-zz_totvalvenoh IS INITIAL.
        ADD 1 TO lw_correl.
        lwa_felog-zzt_correlativ = lw_correl.
        CONCATENATE text-e10 text-e11 INTO lwa_felog-zzt_errorext SEPARATED BY space.
        APPEND lwa_felog TO lt_felog.
        pe_error = abap_true.
      ENDIF.

      IF <fs_cabsal>-zz_nrodociadq IS NOT INITIAL AND
         <fs_cabsal>-zz_tipdociadq IS INITIAL.
        ADD 1 TO lw_correl.
        lwa_felog-zzt_correlativ = lw_correl.
        CONCATENATE text-e14 text-e15 INTO lwa_felog-zzt_errorext SEPARATED BY space.
        APPEND lwa_felog TO lt_felog.
        pe_error = abap_true.
      ENDIF.
*{I-PBM250721-3000017358
      "Validar Formato OC caracteres permitidos
      IF <fs_cabsal>-zz_tipodoc EQ gc_tipdoc_fa.
        CLEAR: l_invalid,l_errtxt.
        l_value = <fs_cabsal>-zz_bstkd.
        CALL FUNCTION 'HR_GB_XML_PATTERN_CHECK'
          EXPORTING
            i_string  = l_value
          IMPORTING
            e_invalid = l_invalid
            e_errtxt  = l_errtxt.

        IF ( strlen( <fs_cabsal>-zz_bstkd ) GT 20 ) OR
           ( l_invalid IS NOT INITIAL ) OR
           ( l_errtxt IS NOT INITIAL ).
          ADD 1 TO lw_correl.
          lwa_felog-zzt_correlativ = lw_correl.
          lwa_felog-zzt_errorext = text-e47.
          APPEND lwa_felog TO lt_felog.
          pe_error = abap_true.
        ENDIF.
      ENDIF.
*}I-PBM250721-3000017358
*{  BEGIN OF INSERT WMR-110915
      " Validación para NC y ND, tipo de documento que se modifica completo
      CASE <fs_cabsal>-zz_tipodoc.
        WHEN gc_tipdoc_nc OR gc_tipdoc_nd.
          CASE <fs_cabsal>-zz_verubl.                                               "I-WMR-110419-3000011736
            WHEN gc_verubl-ubl2_0.                                                  "I-WMR-110419-3000011736
              IF gw_license = '0020729594'. "Austral                                "I-PBM260419-3000010993
                "--                                                                 "I-PBM260419-3000010993
              ELSE.                                                                 "I-PBM260419-3000010993
                IF <fs_cabsal>-zz_tipdocmodifho IS INITIAL
                OR <fs_cabsal>-zz_tipdocmodif   IS INITIAL
                OR <fs_cabsal>-zz_codmotivo     IS INITIAL.
                  ADD 1 TO lw_correl.
                  lwa_felog-zzt_correlativ = lw_correl.
                  lwa_felog-zzt_errorext = text-e27.
                  APPEND lwa_felog TO lt_felog.
                  pe_error = abap_true.
                ENDIF.
              ENDIF.                                                                "I-PBM260419-3000010993
*{  BEGIN OF INSERT WMR-110419-3000011736
            WHEN gc_verubl-ubl2_1.
              IF ( <fs_cabsal>-zz_tipodoc = gc_tipdoc_nd AND
                 ( <fs_cabsal>-zz_codmotivo IN lr_motsref AND lr_motsref[] IS NOT INITIAL ) ).
                " En caso de ND por Penalidad no debe validar referencia
              ELSE.
                IF <fs_cabsal>-zz_tipdocmodifho IS INITIAL
                OR <fs_cabsal>-zz_tipdocmodif   IS INITIAL
                OR <fs_cabsal>-zz_codmotivo     IS INITIAL.
                  ADD 1 TO lw_correl.
                  lwa_felog-zzt_correlativ = lw_correl.
                  lwa_felog-zzt_errorext = text-e27.
                  APPEND lwa_felog TO lt_felog.
                  pe_error = abap_true.
                ENDIF.
              ENDIF.
          ENDCASE.
*}  END OF INSERT WMR-110419-3000011736
*{I-PBM250721-3000017358
          READ TABLE it_vbrk INTO ls_vbrk WITH KEY vbeln = <fs_cabsal>-zz_nrodocsap.
          IF sy-subrc = 0.
            "Validar moneda origen y moneda actual
            IF ls_vbrk-vbtyp EQ gc_charo OR ls_vbrk-vbtyp EQ gc_charp.
              READ TABLE lt_const INTO ls_const WITH KEY campo = 'NCND_WAERK'
                                                         valor1 = <fs_cabsal>-zz_tipdocmodifho.
              IF sy-subrc = 0.
                IF <fs_cabsal>-zz_moneda NE ls_vbrk-zz_sdreferwaerk.
                  ADD 1 TO lw_correl.
                  lwa_felog-zzt_correlativ = lw_correl.
                  lwa_felog-zzt_errorext = text-e45.
                  APPEND lwa_felog TO lt_felog.
                  pe_error = abap_true.
                ENDIF.
              ENDIF.
            ENDIF.

            "Validar tipo documento no permitido para NC
            IF <fs_cabsal>-zz_tipodoc EQ gc_tipdoc_nc AND <fs_cabsal>-zz_tipdocmodifho EQ gc_tipdoc_bl.     "I-PBM060821-3000017486
              READ TABLE lt_const INTO ls_const WITH KEY campo = 'NCBL_CAT09'
                                                         valor1 = <fs_cabsal>-zz_codmotivo.                 "I-PBM060821-3000017486
              IF sy-subrc = 0.
                ADD 1 TO lw_correl.
                lwa_felog-zzt_correlativ = lw_correl.
                lwa_felog-zzt_errorext = text-e46.
                APPEND lwa_felog TO lt_felog.
                pe_error = abap_true.
              ENDIF.
            ENDIF.
          ENDIF.

          "Valida NC / Motiv.13 / Importe total venta
          IF <fs_cabsal>-zz_tipodoc EQ gc_tipdoc_nc AND <fs_cabsal>-zz_imptotvent <> 0.
            READ TABLE lt_const INTO ls_const WITH KEY campo = 'MOTNC_AJFP'
                                                       valor1 = <fs_cabsal>-zz_codmotivo.
            IF sy-subrc = 0.
              ADD 1 TO lw_correl.
              lwa_felog-zzt_correlativ = lw_correl.
              lwa_felog-zzt_errorext = TEXT-e48.
              APPEND lwa_felog TO lt_felog.
              pe_error = abap_true.
            ENDIF.
          ENDIF.
*}I-PBM250721-3000017358
      ENDCASE.
*}  END OF INSERT WMR-110915
    ENDLOOP.

* Errores Detalle
    LOOP AT is_data-t_detail ASSIGNING <fs_detsal>.
      CLEAR lwa_felog.
      CONCATENATE 'Pos.' <fs_detsal>-zz_nroposicion ':' INTO lw_pos SEPARATED BY space.
      lwa_felog-zzt_nrodocsap  = <fs_detsal>-zz_nrodocsap.
      lwa_felog-zzt_numeracion = <fs_detsal>-zz_numeracion.
      lwa_felog-zzt_status_cdr = gc_statuscdr_0.
      lwa_felog-zzt_fcreacion  = sy-datum.
      lwa_felog-zzt_hcreacion  = sy-uzeit.
      lwa_felog-zzt_ucreacion  = sy-uname.
*{  BEGIN OF INSERT WMR-200715
      READ TABLE is_data-t_header ASSIGNING <fs_cabsal>
           WITH KEY zz_nrodocsap  = <fs_detsal>-zz_nrodocsap
                    zz_numeracion = <fs_detsal>-zz_numeracion.
      IF sy-subrc EQ 0.
        lwa_felog-bukrs        = <fs_cabsal>-bukrs.
*{  BEGIN OF INSERT WMR-170915
        lwa_felog-zzt_tipodoc  = <fs_cabsal>-zz_tipodoc.
*}  END OF INSERT WMR-170915
      ENDIF.
*}  END OF INSERT WMR-200715
      IF <fs_detsal>-zz_precioventa IS NOT INITIAL AND
         <fs_detsal>-zz_precioventaho IS INITIAL.
        ADD 1 TO lw_correl.
        lwa_felog-zzt_correlativ = lw_correl.
        CONCATENATE lw_pos text-e16 INTO lwa_felog-zzt_errorext SEPARATED BY space.
        APPEND lwa_felog TO lt_felog.
        pe_error = abap_true.
      ENDIF.
      IF <fs_detsal>-zz_afectigv0102 IS NOT INITIAL AND
         ( <fs_detsal>-zz_afectigv03 IS INITIAL OR
           <fs_detsal>-zz_afectigv04 IS INITIAL OR
           <fs_detsal>-zz_afectigv05 IS INITIAL OR
           <fs_detsal>-zz_afectigv06 IS INITIAL ).
        ADD 1 TO lw_correl.
        lwa_felog-zzt_correlativ = lw_correl.
        CONCATENATE lw_pos text-e17 INTO lwa_felog-zzt_errorext SEPARATED BY space.
        APPEND lwa_felog TO lt_felog.
        pe_error = abap_true.
      ENDIF.
      IF <fs_detsal>-zz_tipisc0102 IS NOT INITIAL AND
         ( <fs_detsal>-zz_tipisc03 IS INITIAL OR
           <fs_detsal>-zz_tipisc04 IS INITIAL OR
           <fs_detsal>-zz_tipisc05 IS INITIAL OR
           <fs_detsal>-zz_tipisc06 IS INITIAL ).
        ADD 1 TO lw_correl.
        lwa_felog-zzt_correlativ = lw_correl.
        CONCATENATE lw_pos text-e18 INTO lwa_felog-zzt_errorext SEPARATED BY space.
        APPEND lwa_felog TO lt_felog.
        pe_error = abap_true.
      ENDIF.
      IF <fs_detsal>-zz_valrefunit IS NOT INITIAL AND
         <fs_detsal>-zz_valrefunithom IS INITIAL.
        ADD 1 TO lw_correl.
        lwa_felog-zzt_correlativ = lw_correl.
        CONCATENATE lw_pos text-e19 INTO lwa_felog-zzt_errorext SEPARATED BY space.
        APPEND lwa_felog TO lt_felog.
        pe_error = abap_true.
      ENDIF.
*{E-3000011712-NTP100419
*      IF <fs_detsal>-zz_desctoxite IS NOT INITIAL AND
*         <fs_detsal>-zz_desctoxitehom IS INITIAL.
*        ADD 1 TO lw_correl.
*        lwa_felog-zzt_correlativ = lw_correl.
*        CONCATENATE lw_pos text-e20 INTO lwa_felog-zzt_errorext SEPARATED BY space.
*        APPEND lwa_felog TO lt_felog.
*        pe_error = abap_true.
*      ENDIF.
*}E-3000011712-NTP100419
      IF <fs_detsal>-zz_unimed IS NOT INITIAL AND
         <fs_detsal>-zz_unimedhom IS INITIAL.
        ADD 1 TO lw_correl.
        lwa_felog-zzt_correlativ = lw_correl.
        CONCATENATE lw_pos text-e21 INTO lwa_felog-zzt_errorext SEPARATED BY space.
        APPEND lwa_felog TO lt_felog.
        pe_error = abap_true.
      ENDIF.
*{I-3000011120-NTP310119
      IF <fs_detsal>-zz_material_sunat IS INITIAL AND <fs_cabsal>-zz_femision >= zconst-cubso_f_active.
        ADD 1 TO lw_correl.
        lwa_felog-zzt_correlativ = lw_correl.
        CONCATENATE lw_pos text-e38 INTO lwa_felog-zzt_errorext SEPARATED BY space.
        APPEND lwa_felog TO lt_felog.
        pe_error = abap_true.
      ENDIF.
*}I-3000011120-NTP310119
    ENDLOOP.

*{I-3000011712-NTP210419
    LOOP AT is_data-t_cardes ASSIGNING <fs_cardes>.
      IF <fs_cardes>-zz_dscto IS NOT INITIAL AND <fs_cardes>-zz_dscto_com IS INITIAL.
        IF <fs_cardes>-zz_nroposicion IS INITIAL.
          CONCATENATE lw_pos text-e07 INTO lwa_felog-zzt_errorext SEPARATED BY space.
        ELSE.
          CONCATENATE lw_pos text-e20 INTO lwa_felog-zzt_errorext SEPARATED BY space.
        ENDIF.

        ADD 1 TO lw_correl.
        lwa_felog-zzt_correlativ = lw_correl.
        APPEND lwa_felog TO lt_felog.
        pe_error = abap_true.
      ENDIF.

      IF <fs_cardes>-zz_cargo IS NOT INITIAL AND <fs_cardes>-zz_cargo_com IS INITIAL.
        IF <fs_cardes>-zz_nroposicion IS INITIAL.
          CONCATENATE lw_pos text-e39 INTO lwa_felog-zzt_errorext SEPARATED BY space.
        ELSE.
          CONCATENATE lw_pos text-e40 INTO lwa_felog-zzt_errorext SEPARATED BY space.
        ENDIF.

        ADD 1 TO lw_correl.
        lwa_felog-zzt_correlativ = lw_correl.
        APPEND lwa_felog TO lt_felog.
        pe_error = abap_true.
      ENDIF.
    ENDLOOP.
*}I-3000011712-NTP210419

* Actualizar tabla de log
    IF lt_felog[] IS NOT INITIAL.
      MODIFY zostb_felog FROM TABLE lt_felog.
    ENDIF.

* Pasar error a parámetro de Retorno (Error Genérico de Homologación)
    IF lt_felog[] IS NOT INITIAL.
      CLEAR lwa_message.
      lwa_message-type       = 'E'.
      lwa_message-id         = '00'.
      lwa_message-number     = '368'.
      lwa_message-message_v1 = text-e28.        "M LJG-21.05.2018
      lwa_message-message_v2 = text-e29.        "M LJG-21.05.2018
      lwa_message-row        = 1.
      CONCATENATE lwa_message-message_v1
                  lwa_message-message_v2
                  lwa_message-message_v3
                  lwa_message-message_v4
                  INTO lwa_message-message SEPARATED BY space.
      APPEND lwa_message TO pe_message.
    ENDIF.

  ENDMETHOD.                    "check_homo


  METHOD concatenate_json.

    DATA: l_value TYPE string.

    l_value = serialize_json_replace( id0 ).
    CONCATENATE '{"0":"'  l_value INTO r_json.
    IF id1 IS SUPPLIED.
      l_value = serialize_json_replace( id1 ).
      CONCATENATE r_json '","1":"'  l_value INTO r_json.
    ENDIF.
    IF id2 IS SUPPLIED.
      l_value = serialize_json_replace( id2 ).
      CONCATENATE r_json '","2":"'  l_value INTO r_json.
    ENDIF.
    IF id3 IS SUPPLIED.
      l_value = serialize_json_replace( id3 ).
      CONCATENATE r_json '","3":"'  l_value INTO r_json.
    ENDIF.
    IF id4 IS SUPPLIED.
      l_value = serialize_json_replace( id4 ).
      CONCATENATE r_json '","4":"'  l_value INTO r_json.
    ENDIF.
    IF id5 IS SUPPLIED.
      l_value = serialize_json_replace( id5 ).
      CONCATENATE r_json '","5":"'  l_value INTO r_json.
    ENDIF.
    IF id6 IS SUPPLIED.
      l_value = serialize_json_replace( id6 ).
      CONCATENATE r_json '","6":"'  l_value INTO r_json.
    ENDIF.
    IF id7 IS SUPPLIED.
      l_value = serialize_json_replace( id7 ).
      CONCATENATE r_json '","7":"'  l_value INTO r_json.
    ENDIF.
    IF id8 IS SUPPLIED.
      l_value = serialize_json_replace( id8 ).
      CONCATENATE r_json '","8":"'  l_value INTO r_json.
    ENDIF.
    IF id9 IS SUPPLIED.
      l_value = serialize_json_replace( id9 ).
      CONCATENATE r_json '","9":"'  l_value INTO r_json.
    ENDIF.
    IF id10 IS SUPPLIED.
      l_value = serialize_json_replace( id10 ).
      CONCATENATE r_json '","10":"'  l_value INTO r_json.
    ENDIF.

    CONCATENATE r_json '"}' INTO r_json.

  ENDMETHOD.


  METHOD convert_to_local_currency.

    DATA: l_tcambio TYPE string.

* 1. Monedas iguales
    IF i_waers_f = i_waers_l OR i_monto IS INITIAL.
      e_tcambio = 1.
      e_monto   = i_monto.
      RETURN.
    ENDIF.

* 2. Monedas distintas
    CALL FUNCTION 'CONVERT_TO_LOCAL_CURRENCY'
      EXPORTING
        date             = i_date
        foreign_amount   = i_monto
        foreign_currency = i_waers_f
        local_currency   = i_waers_l
        type_of_rate     = gc_charm
      IMPORTING
        exchange_rate    = l_tcambio
      EXCEPTIONS
        no_rate_found    = 1
        overflow         = 2
        no_factors_found = 3
        no_spread_found  = 4
        derived_2_times  = 5
        OTHERS           = 6.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

*   Negativo
    IF l_tcambio < 0.
      l_tcambio = 1 / abs( l_tcambio ).
    ENDIF.

*   Tipo de Cambio y conversion del monto
    e_tcambio = l_tcambio.
    e_monto   = i_monto * l_tcambio.

  ENDMETHOD.


  METHOD determinar_afectacion_igv.
    DATA:
      lr_taxm1   TYPE RANGE OF vbrp-taxm1,
      lr_mwskz   TYPE RANGE OF konv-mwsk1,                            "I-WMR-060117-3000006260
      ls_taxm1   LIKE LINE OF lr_taxm1,
      ls_mwskz   LIKE LINE OF lr_mwskz,                               "I-WMR-060117-3000006260
      ls_const   LIKE LINE OF lt_const,
      ls_matexon TYPE  zostb_matexon,
      lr_taxk1   TYPE RANGE OF vbrk-taxk1,                            "I-3000010993-NTP050419
      ls_taxk1   LIKE LINE OF lr_taxk1,                               "I-3000010993-NTP050419
      ls_vbrk    LIKE LINE OF it_vbrk,                                "I-3000010993-NTP050419
      lw_inde1   TYPE  numc10.

    FIELD-SYMBOLS:
          <fs_vbrp>   TYPE  lty_vbrp.

    " Indicador Fiscal de Material Exonerados
    LOOP AT lt_const INTO ls_const.
      CASE ls_const-campo.
        WHEN 'TAXM1EX'.
          CLEAR ls_taxm1.
          ls_taxm1-sign   = ls_const-signo.
          ls_taxm1-option = ls_const-opcion.
          ls_taxm1-low    = ls_const-valor1.
          ls_taxm1-high   = ls_const-valor2.
          APPEND ls_taxm1 TO lr_taxm1.
*{I-3000010993-NTP050419
        WHEN 'TAXK1EX'.
          ls_taxk1-sign   = ls_const-signo.
          ls_taxk1-option = ls_const-opcion.
          ls_taxk1-low    = ls_const-valor1.
          ls_taxk1-high   = ls_const-valor2.
          APPEND ls_taxk1 TO lr_taxk1.
*}I-3000010993-NTP050419
      ENDCASE.
    ENDLOOP.

*{  BEGIN OF INSERT WMR-060117-3000006260
    " Clase de Condición de Impuestos
    CLEAR ltr_kschl.
    LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 EQ '8' AND zz_opcion02 EQ space.
      lwa_kschl-low     = lwa_constakonv-kschl.
      lwa_kschl-sign    = 'I'.
      lwa_kschl-option  = 'EQ'.
      APPEND lwa_kschl TO ltr_kschl.
    ENDLOOP.

    " Indicador de Impuestos para Ventas Exoneradas
    LOOP AT lt_const INTO ls_const.
      CASE ls_const-campo.
        WHEN 'MWSKZEX'.
          CLEAR ls_mwskz.
          ls_mwskz-sign   = ls_const-signo.
          ls_mwskz-option = ls_const-opcion.
          ls_mwskz-low    = ls_const-valor1.
          ls_mwskz-high   = ls_const-valor2.
          APPEND ls_mwskz TO lr_mwskz.
      ENDCASE.
    ENDLOOP.
*}  END OF INSERT WMR-060117-3000006260

    READ TABLE it_vbrk INTO ls_vbrk INDEX 1.  "I-3000010993-NTP050419

    lw_inde1 = 1.
    DO.
      READ TABLE ct_vbrp ASSIGNING <fs_vbrp> INDEX lw_inde1.
      IF sy-subrc NE 0. EXIT. ENDIF.
      ADD 1 TO lw_inde1.

      IF <fs_vbrp>-mwsbp EQ 0.
*{  BEGIN OF REPLACE WMR-060117-3000006260
        ""        SELECT SINGLE mandt vkorg vtweg matnr datab datbi
        ""          INTO ls_matexon
        ""          FROM zostb_matexon
        ""          WHERE vkorg EQ <fs_vbrp>-vkorg
        ""            AND vtweg EQ <fs_vbrp>-vtweg
        ""            AND matnr EQ <fs_vbrp>-matnr
        ""            AND datab LE <fs_vbrp>-fkdat
        ""            AND datbi GE <fs_vbrp>-fkdat.
        ""        IF sy-subrc NE 0.
        ""          SELECT SINGLE mandt vkorg vtweg matnr datab datbi
        ""            INTO ls_matexon
        ""            FROM zostb_matexon
        ""            WHERE vtweg EQ <fs_vbrp>-vtweg
        ""              AND matnr EQ <fs_vbrp>-matnr
        ""              AND datab LE <fs_vbrp>-fkdat
        ""              AND datbi GE <fs_vbrp>-fkdat.
        ""          IF sy-subrc NE 0.
        ""            SELECT SINGLE mandt vkorg vtweg matnr datab datbi
        ""              INTO ls_matexon
        ""              FROM zostb_matexon
        ""              WHERE matnr EQ <fs_vbrp>-matnr
        ""                AND datab LE <fs_vbrp>-fkdat
        ""                AND datbi GE <fs_vbrp>-fkdat.
        ""          ENDIF.
        ""        ENDIF.

        ""        IF ls_matexon IS NOT INITIAL
        ""        OR ( <fs_vbrp>-taxm1 IN lr_taxm1 AND lr_taxm1[] IS NOT INITIAL ).
        ""          <fs_vbrp>-afect_igv = gc_exoner_igv.  " Exonerado del IGV
        ""        ELSE.
        ""          <fs_vbrp>-afect_igv = gc_inafec_igv.  " Inafecto al IGV
        ""        ENDIF.

        " 01 - Por Indicador de IGV Exonerado
        IF ( ltr_kschl[] IS NOT INITIAL AND lr_mwskz[] IS NOT INITIAL ).
          LOOP AT lt_konvv INTO lwa_konv WHERE knumv EQ <fs_vbrp>-knumv
                                           AND kposn EQ <fs_vbrp>-posnr
                                           AND kschl IN ltr_kschl         " Condición de Impuestos  MWST
                                           AND mwsk1 IN lr_mwskz          " Indicador IGV Exonerado
                                           AND kstat EQ abap_false        " No Estadístico
                                           AND kinak EQ abap_false.       " Condición Activa
            EXIT.
          ENDLOOP.
          IF sy-subrc EQ 0.
            <fs_vbrp>-afect_igv = gc_exoner_igv.  " Exonerado del IGV
          ENDIF.
        ENDIF.

        " 02 - Por Clasificación Fiscal del Material
        IF ( <fs_vbrp>-taxm1 IN lr_taxm1 AND lr_taxm1[] IS NOT INITIAL ). " 0 = Exonerado
          IF ls_vbrk-taxk1 IN lr_taxk1[].                                 " 1 = Nacional  "I-3000010993-NTP050419
            <fs_vbrp>-afect_igv = gc_exoner_igv.  " Exonerado del IGV
          ENDIF.
        ENDIF.

        " 03 - Por Material inscrito en Tabla Z de materiales Exonerados al IGV
        CLEAR ls_matexon.
        SELECT SINGLE mandt vkorg vtweg matnr datab datbi
          INTO ls_matexon
          FROM zostb_matexon
          WHERE vkorg EQ <fs_vbrp>-vkorg
            AND vtweg EQ <fs_vbrp>-vtweg
            AND matnr EQ <fs_vbrp>-matnr
            AND datab LE <fs_vbrp>-fkdat
            AND datbi GE <fs_vbrp>-fkdat.
        IF sy-subrc NE 0.
          SELECT SINGLE mandt vkorg vtweg matnr datab datbi
            INTO ls_matexon
            FROM zostb_matexon
            WHERE vtweg EQ <fs_vbrp>-vtweg
              AND matnr EQ <fs_vbrp>-matnr
              AND datab LE <fs_vbrp>-fkdat
              AND datbi GE <fs_vbrp>-fkdat.
          IF sy-subrc NE 0.
            SELECT SINGLE mandt vkorg vtweg matnr datab datbi
              INTO ls_matexon
              FROM zostb_matexon
              WHERE matnr EQ <fs_vbrp>-matnr
                AND datab LE <fs_vbrp>-fkdat
                AND datbi GE <fs_vbrp>-fkdat.
          ENDIF.
        ENDIF.

        IF ls_matexon IS NOT INITIAL.
          <fs_vbrp>-afect_igv = gc_exoner_igv.  " Exonerado del IGV
        ENDIF.

*{I-190321-SVM-3000016390: 13: NC por Ajustes - Montos y/o fechas de pago
        IF ls_vbrk-zz_fp_nc_ajuste IS NOT INITIAL.                          "I-040521-NTP-3000016917
          IF ( ltr_kschl[] IS NOT INITIAL ).
            LOOP AT lt_konvv INTO lwa_konv WHERE knumv EQ <fs_vbrp>-knumv
                                             AND kposn EQ <fs_vbrp>-posnr
                                             AND kschl IN ltr_kschl         " Condición de Impuestos  MWST
                                             AND kstat EQ abap_false        " No Estadístico
                                             AND kinak EQ abap_false.       " Condición Activa
              EXIT.
            ENDLOOP.
            IF sy-subrc EQ 0.
              <fs_vbrp>-afect_igv = gc_afecto_igv.  " Afecto al IGV
            ENDIF.
          ENDIF.
        ENDIF.
*}I-190321-SVM-3000016390

        " Si No se cumple al menos una condición anterior, es Inafecto al IGV
        IF <fs_vbrp>-afect_igv IS INITIAL.
          <fs_vbrp>-afect_igv = gc_inafec_igv.  " Inafecto al IGV
        ENDIF.
*}  END OF REPLACE WMR-060117-3000006260

      ELSE.
        <fs_vbrp>-afect_igv = gc_afecto_igv.  " Afecto al IGV
      ENDIF.
    ENDDO.

  ENDMETHOD.


  METHOD determinar_boleta_rebate.

    DATA: lr_matnr TYPE RANGE OF mara-matnr,
          ls_matnr LIKE LINE OF lr_matnr,
          ls_const LIKE LINE OF lt_const.

    FIELD-SYMBOLS: <fs_kna1> LIKE LINE OF lt_kna1,
                   <fs_vbrp> LIKE LINE OF it_vbrp.

    r_bolreb = abap_false.

    CASE gw_license.
      WHEN '0020673876'.  " BETA

        " Motivos de Pedido para Ventas Itinerantes
        LOOP AT lt_const INTO ls_const.
          CASE ls_const-campo.
            WHEN 'MATNR_REBA'.  " Material Rebate
              CLEAR ls_matnr.
              ls_matnr-sign   = ls_const-signo.
              ls_matnr-option = ls_const-opcion.
              IF ls_const-valor1 IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
                  EXPORTING
                    input        = ls_const-valor1
                  IMPORTING
                    output       = ls_matnr-low
                  EXCEPTIONS
                    length_error = 1
                    OTHERS       = 2.
              ENDIF.
              IF ls_const-valor2 IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
                  EXPORTING
                    input        = ls_const-valor2
                  IMPORTING
                    output       = ls_matnr-high
                  EXCEPTIONS
                    length_error = 1
                    OTHERS       = 2.
              ENDIF.
              APPEND ls_matnr TO lr_matnr.
          ENDCASE.
        ENDLOOP.

        CHECK lr_matnr[] IS NOT INITIAL.

        IF is_vbrk-tfact = gc_tipdoc_bl           " Boleta
        OR is_vbrk-tipdocmodifho = gc_tipdoc_bl.  " NC/ND referido a Boleta

          " Validar Solicitante extranjero
          READ TABLE lt_kna1 ASSIGNING <fs_kna1>
               WITH KEY kunnr = is_vbrk-kunag.
          IF sy-subrc = 0.
            CHECK <fs_kna1>-land1 <> gc_peru.
          ELSE.
            EXIT.
          ENDIF.

          " Validar Destinatario Mcías Nacional
          READ TABLE lt_kna1 ASSIGNING <fs_kna1>
               WITH KEY kunnr = is_vbrk-kunwe.
          IF sy-subrc = 0.
            CHECK <fs_kna1>-land1 = gc_peru.
          ELSE.
            EXIT.
          ENDIF.

          " Validar si tiene Material Rebate
          LOOP AT it_vbrp ASSIGNING <fs_vbrp> WHERE matnr IN lr_matnr.
            EXIT.
          ENDLOOP.

          IF sy-subrc = 0.
            r_bolreb = abap_true.
          ENDIF.

        ENDIF.

    ENDCASE.

  ENDMETHOD.


  METHOD determinar_venta_anticipos.

    DATA: lr_fkart      TYPE RANGE OF vbrk-fkart,
          ls_constfkart LIKE LINE OF lt_constfkart.

    r_vtaant = abap_false.

    " Cargamos Parametros para Tipo de Operacion (Anticipos, Exportacion, Venta Interna)
    LOOP AT lt_constfkart INTO ls_constfkart WHERE zz_opcion01 = '6' AND zz_opcion02 = '1'.
      lwa_fkart-low    = ls_constfkart-fkart.
      lwa_fkart-sign   = 'I'.
      lwa_fkart-option = 'EQ'.
      APPEND lwa_fkart TO lr_fkart.
    ENDLOOP.

    IF is_vbrk-fkart IN lr_fkart AND lr_fkart[] IS NOT INITIAL.
      r_vtaant = abap_true.
    ENDIF.

  ENDMETHOD.


  METHOD determinar_venta_itinerante.

    DATA: lr_augru TYPE RANGE OF vbrp-augru_auft,
          ls_augru LIKE LINE OF lr_augru,
          ls_const LIKE LINE OF lt_const,
          ls_vbrp  LIKE LINE OF it_vbrp.

    r_vtaiti = abap_false.

    CHECK is_vbrk-tfact EQ gc_tipdoc_fa OR
          is_vbrk-tfact EQ gc_tipdoc_bl.

    " Motivos de Pedido para Ventas Itinerantes
    LOOP AT lt_const INTO ls_const.
      CASE ls_const-campo.
        WHEN 'AUGRU_VI'.
          CLEAR ls_augru.
          ls_augru-sign   = ls_const-signo.
          ls_augru-option = ls_const-opcion.
          ls_augru-low    = ls_const-valor1.
          ls_augru-high   = ls_const-valor2.
          APPEND ls_augru TO lr_augru.
      ENDCASE.
    ENDLOOP.

    CHECK lr_augru[] IS NOT INITIAL.

    " Determinar Venta Itinerante
    LOOP AT it_vbrp INTO ls_vbrp WHERE augru_auft IN lr_augru.
      EXIT.
    ENDLOOP.
    IF sy-subrc EQ 0.
      r_vtaiti = abap_true.
    ENDIF.

  ENDMETHOD.


  METHOD determinar_venta_servicios.

    TYPES: BEGIN OF lty_mara,
             matnr TYPE mara-matnr,
             matkl TYPE mara-matkl,
           END OF lty_mara.

    DATA: lt_vbrp  TYPE ltt_vbrp,
          lt_mara  TYPE STANDARD TABLE OF lty_mara,
          lr_matkl TYPE RANGE OF mara-matkl,

          ls_mara  TYPE lty_mara,
          ls_matkl LIKE LINE OF lr_matkl,
          ls_const LIKE LINE OF lt_const,
          ls_vbrp  LIKE LINE OF it_vbrp.

    r_vtasrv = abap_false.

    CHECK is_vbrk-tfact EQ gc_tipdoc_fa.

    " Grupo de Artículos para Venta de Servicios
    LOOP AT lt_const INTO ls_const.
      CASE ls_const-campo.
        WHEN 'MATKLSRV'.
          CLEAR ls_matkl.
          ls_matkl-sign   = ls_const-signo.
          ls_matkl-option = ls_const-opcion.
          ls_matkl-low    = ls_const-valor1.
          ls_matkl-high   = ls_const-valor2.
          APPEND ls_matkl TO lr_matkl.
      ENDCASE.
    ENDLOOP.

    CHECK lr_matkl[] IS NOT INITIAL.

    " Determinar Venta de Servicios
    lt_vbrp[] = it_vbrp[].
    SORT lt_vbrp BY matnr ASCENDING.
    DELETE ADJACENT DUPLICATES FROM lt_vbrp COMPARING matnr.

    IF lt_vbrp[] IS NOT INITIAL.
      SELECT matnr matkl
        INTO TABLE lt_mara
        FROM mara
        FOR ALL ENTRIES IN lt_vbrp
        WHERE matnr EQ lt_vbrp-matnr.
    ENDIF.

    LOOP AT lt_mara INTO ls_mara WHERE matkl IN lr_matkl.
      EXIT.
    ENDLOOP.
    IF sy-subrc EQ 0.
      r_vtasrv = abap_true.
    ENDIF.

  ENDMETHOD.


  METHOD determine_free_transfer.
    DATA: lr_fkart      TYPE RANGE OF vbrk-fkart,
          lr_augru      TYPE RANGE OF vbrp-augru_auft,
          ls_constfkart LIKE LINE OF lt_constfkart,
          ls_fkart      LIKE LINE OF lr_fkart,
          ls_augru      LIKE LINE OF lr_augru,
          ls_const      LIKE LINE OF lt_const,
          ls_vbrp       LIKE LINE OF it_vbrp.

    er_istg = abap_false.

    " Clases de Factura para Transferencias Gratuitas
    LOOP AT lt_constfkart INTO ls_constfkart WHERE zz_opcion01 = '2' AND zz_opcion02 = ' '.
      CLEAR ls_fkart.
      ls_fkart-low    = ls_constfkart-fkart.
      ls_fkart-sign   = 'I'.
      ls_fkart-option = 'EQ'.
      APPEND ls_fkart TO lr_fkart.
    ENDLOOP.

    " Motivos de Pedido para Transferencias Gratuitas
    LOOP AT lt_const INTO ls_const.
      CASE ls_const-campo.
        WHEN 'MOTIVOTG'.
          CLEAR ls_augru.
          ls_augru-sign   = ls_const-signo.
          ls_augru-option = ls_const-opcion.
          ls_augru-low    = ls_const-valor1.
          ls_augru-high   = ls_const-valor2.
          APPEND ls_augru TO lr_augru.
      ENDCASE.
    ENDLOOP.

    " Determinación por Clase de Factura
    IF is_vbrk-fkart IN lr_fkart AND lr_fkart[] IS NOT INITIAL.
      er_istg = abap_true.
      EXIT.
    ENDIF.

    " Determinación por Motivo de Pedido
    IF lr_augru[] IS NOT INITIAL.
      LOOP AT it_vbrp INTO ls_vbrp WHERE augru_auft IN lr_augru.
        EXIT.
      ENDLOOP.
      IF sy-subrc EQ 0.
        er_istg = abap_true.
        EXIT.
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD determine_mass_export.

    DATA: "ls_kna1  TYPE ty_kna1,
          lw_inde1 TYPE numc10.

    FIELD-SYMBOLS: <fs_vbrk> TYPE lty_vbrk.

    lw_inde1 = 1.
    DO.
      READ TABLE ct_vbrk ASSIGNING <fs_vbrk> INDEX lw_inde1.
      IF sy-subrc NE 0. EXIT. ENDIF.
      ADD 1 TO lw_inde1.

      <fs_vbrk>-zz_check_expor = determine_single_export( <fs_vbrk> ).

**      READ TABLE lt_kna1 INTO ls_kna1
**           WITH KEY kunnr = <fs_vbrk>-kunrg.
**      CHECK sy-subrc EQ 0.
**
**      IF ( <fs_vbrk>-land1_vbrk NE <fs_vbrk>-landtx_vbrk )
**      OR ( ls_kna1-land1 NE gc_peru ).
**        <fs_vbrk>-zz_check_expor = abap_true.
**      ENDIF.
    ENDDO.

  ENDMETHOD.


  METHOD determine_single_export.

*{I-3000010993-NTP261218
    CASE gw_license.
      WHEN '0020729594'. "Austral
        IF is_vbrk-kalsm IN ltr_kalsm_e.
          er_isexp = abap_true.
        ENDIF.

        READ TABLE lt_constfkart WITH KEY fkart = is_vbrk-fkart
                                          zz_opcion01 = 1
                                          zz_opcion02 = 0 TRANSPORTING NO FIELDS.
        IF sy-subrc = 0.
          er_isexp = abap_true.
        ENDIF.
      WHEN OTHERS.
*}I-3000010993-NTP261218

        DATA: ls_kna1 TYPE ty_kna1.

        READ TABLE lt_kna1 INTO ls_kna1
             WITH KEY kunnr = is_vbrk-kunrg.
        CHECK sy-subrc EQ 0.

        IF ( is_vbrk-land1_vbrk NE is_vbrk-landtx_vbrk )
        OR ( ls_kna1-land1 NE gc_peru ).
          er_isexp = abap_true.
        ENDIF.

    ENDCASE.

  ENDMETHOD.


  METHOD es_posicion_bonificada.

    r_bonif = abap_false.

    " Tipos de posición Bonificados
    CLEAR ltr_pstyv.
    LOOP AT lt_constpstyv INTO lwa_constpstyv WHERE zz_opcion01 EQ 'B'.
      lwa_pstyv-low     = lwa_constpstyv-pstyv.
      lwa_pstyv-sign    = 'I'.
      lwa_pstyv-option  = 'EQ'.
      APPEND lwa_pstyv TO ltr_pstyv.
    ENDLOOP.

    IF ltr_pstyv[] IS NOT INITIAL.
      IF is_vbrp-pstyv IN ltr_pstyv AND is_vbrp-netwr EQ 0.
        r_bonif = abap_true.
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD extrae_data_bo.

    DATA: lt_vbrk        TYPE TABLE OF lty_vbrk,
          lt_vbrp        TYPE TABLE OF lty_vbrp,

          ls_nojson_data TYPE gty_nojson_data,
          ls_json_data   TYPE gty_json_data,

          lv_tipdoc      TYPE doccls.

*****************************************************************
*   EXTRACCIÓN DE DATOS                                         *
*****************************************************************

*   Limpiar variables globales
    free_data( ).

*   Inicializar valores
    lv_tipdoc = gc_tipdoc_bl.
    gw_vbeln = p_vbeln.

*   Obtener valores constantes y catálogos
    get_constants( i_vbeln = p_vbeln
                   i_tpproc = gc_prefix_bl ).

*   Obtener Cabecera de Factura
    get_data( EXPORTING pi_tipdoc = lv_tipdoc
                        is_options = is_options           "WMR-121016-3000005779
              IMPORTING pe_vbrk   = lt_vbrk
                        pe_vbrp   = lt_vbrp
                        pe_error  = p_error ).

    CHECK p_error IS INITIAL.

*   Actualizar datos VBRK
    upd_vbrk( EXPORTING pi_tipdoc = lv_tipdoc
                        pi_vbrp   = lt_vbrp
                        is_options = is_options "I-080720-NTP-3000014674
               CHANGING pe_vbrk   = lt_vbrk ).

*   Extrae Guias
    extrae_guias( EXPORTING pi_vbrk = lt_vbrk
                            pi_vbrp = lt_vbrp
                  IMPORTING pe_likp = lt_likp ).

*   Actualizar datos VBRP
    upd_vbrp( EXPORTING pi_tipdoc = lv_tipdoc
              CHANGING  pe_vbrp   = lt_vbrp
                        pe_vbrk   = lt_vbrk ).

*****************************************************************
*   HOMOLOGAR TABLAS                                            *
*****************************************************************

*   Formar Datos Cabecera
    set_homo_cab( EXPORTING pi_tipdoc = lv_tipdoc
                  IMPORTING es_cab    = ls_nojson_data
                  CHANGING  pe_vbrk   = lt_vbrk
                            pi_vbrp   = lt_vbrp ).

*   Formar Datos Detalle
    set_homo_det( EXPORTING pi_tipdoc = lv_tipdoc
                            pi_vbrp   = lt_vbrp
                  IMPORTING es_det    = ls_nojson_data
                  CHANGING pi_vbrk   = lt_vbrk ).

*   Formar Datos Cliente
    set_homo_cli( EXPORTING pi_vbrk   = lt_vbrk
                  IMPORTING es_cli    = ls_nojson_data
                  CHANGING  cs_cab    = ls_nojson_data ).

*{  BEGIN OF INSERT WMR-230615
    " Textos de Cabecera
    set_header_texts( EXPORTING it_vbrk     = lt_vbrk
                                it_vbrp     = lt_vbrp
                                is_options = is_options "I-080720-NTP-3000014674
                      IMPORTING es_head_txt = ls_nojson_data ).
*}  END OF INSERT WMR-230615

*{  BEGIN OF INSERT WMR-121016-3000005779
    IF is_options-only_datanojs EQ abap_true.
      es_datanojson = ls_nojson_data.
      EXIT.
    ENDIF.
*}  END OF INSERT WMR-121016-3000005779

*****************************************************************
*   VERIFICAR ERROR DE HOMOLOGACIÓN                             *
*****************************************************************

    check_homo( EXPORTING is_data     = ls_nojson_data
                          it_vbrk     = lt_vbrk                 "I-290721-NTP-3000017358
                CHANGING  pe_error    = p_error
                          pe_message  = p_message ).

*****************************************************************
*   SETEAR VALORES JEISON                                       *
*****************************************************************

    IF p_error IS INITIAL.

*     JSon Cabecera
      set_json_cab_main( EXPORTING i_tipdoc  = lv_tipdoc
                                   is_data   = ls_nojson_data
                                   it_vbrk   = lt_vbrk
                         IMPORTING es_jsoncab = ls_json_data-jsoncab
                                   et_jsoncab_tc = ls_json_data-t_jsoncab_tc
                                   et_jsoncab_gr = ls_json_data-t_jsoncab_gr
                                   et_jsoncab_aa = ls_json_data-t_jsoncab_aa ).

*     JSon Detalle
      set_json_det_main( EXPORTING i_tipdoc  = lv_tipdoc
                                   is_data   = ls_nojson_data
                                   it_vbrk   = lt_vbrk
                                   it_vbrp   = lt_vbrp
                         IMPORTING et_jsondet = ls_json_data-t_jsondet ).

*     JSon Cliente
      set_json_cli( EXPORTING is_data    = ls_nojson_data
                    IMPORTING es_jsoncli = ls_json_data-jsoncli ).

    ENDIF.

*****************************************************************
*   ACTUALIZAR TABLAS Z                                         *
*****************************************************************

    upd_tables( EXPORTING pi_error        = p_error
                          is_nojson_data  = ls_nojson_data
                          is_options      = is_options      "I-NTP260717-3000006468
                          is_json_data    = ls_json_data ).

*****************************************************************
*   CONSUMO DE SERVICIO WEB                                     *
*****************************************************************

    CHECK p_error IS INITIAL.

*BI-NTP-210416
    call_ws_bl( EXPORTING is_nojson_data  = ls_nojson_data
                          is_json_data    = ls_json_data
                          is_options      = is_options      "I-NTP260717-3000006468
                IMPORTING pe_message      = p_message ).
*EI-NTP-210416
*{I-3000010823-NTP210119
    DATA: lo_feis TYPE REF TO object,
          lo_root TYPE REF TO cx_root.

    TRY.
        CREATE OBJECT lo_feis TYPE (gc_feis_class).
        CALL METHOD lo_feis->('CALL_EFACT_BO')
          EXPORTING
            is_nojson_data = ls_nojson_data
          IMPORTING
            e_message      = p_message.
      CATCH cx_root INTO lo_root.
    ENDTRY.
*}I-3000010823-NTP210119

  ENDMETHOD.                    "extrae_data_boletas


  METHOD extrae_data_boletas_res.

    DATA: lt_vbrk              TYPE TABLE OF lty_vbrk,
          lt_vbrp              TYPE TABLE OF lty_vbrp,
          lt_cabecera_salida   TYPE TABLE OF lty_cabecera_salida2,
          lt_detalle_salida    TYPE TABLE OF lty_detalle_salida2,
          lt_cabecera_salida_r TYPE TABLE OF lty_cabecera_salida2,
          lt_detalle_salida_r  TYPE TABLE OF lty_detalle_salida2,
          lt_rbcab             TYPE TABLE OF zostb_rbcab,
          lt_rbdet             TYPE TABLE OF zostb_rbdet,
          lt_rblog             TYPE TABLE OF zostb_rblog.

*{E-NTP-221215
**   Limpiar variables globales
**    me->free_data( ).

**   Obtener valores constantes y catálogos
*    me->get_constants( ).
*}E-NTP-221215

*   Obtener datos de Cabecera de Facturas RES
    me->get_data_res( EXPORTING pi_bukrs  = p_bukrs                             "I-WMR-200715
                                pi_fecfac = p_fecfac
                      IMPORTING pe_vbrk   = lt_vbrk
                                pe_vbrp   = lt_vbrp
                                pe_error  = p_error ).

    IF p_error IS NOT INITIAL.                                          "I-NTP-221215
      MESSAGE text-e32 TYPE 'E' RAISING error.  "I-NTP-221215      "M LJG-21.05.2018
    ENDIF.                                                              "I-NTP-221215
    CHECK p_error IS INITIAL.

*   Formar Cabecera y Detalle
    me->set_cabdet_res( EXPORTING pi_vbrk   = lt_vbrk
                                  pi_vbrp   = lt_vbrp
                                  pi_repro  = p_repro
                                  pi_fecfac = p_fecfac
                        IMPORTING pe_cab    = lt_cabecera_salida
                                  pe_det    = lt_detalle_salida ).

*{  BEGIN OF INSERT WMR-040416
    IF lt_cabecera_salida[] IS INITIAL
    OR lt_detalle_salida[] IS INITIAL.
      p_error = '1'.
      MESSAGE text-e32 TYPE 'E' RAISING error.                 "M LJG-21.05.2018
    ENDIF.
    CHECK p_error IS INITIAL.
*}  END OF INSERT WMR-040416

*   Formar Cabecera y Detalle Finales
    me->set_homo_res( EXPORTING pi_cab  = lt_cabecera_salida
                                pi_det  = lt_detalle_salida
                      IMPORTING pe_cab  = lt_cabecera_salida_r
                                pe_det  = lt_detalle_salida_r ).

*{  BEGIN OF INSERT WMR-040416
    IF lt_cabecera_salida_r[] IS INITIAL
    OR lt_detalle_salida_r[] IS INITIAL.
      p_error = '1'.
      MESSAGE text-e32 TYPE 'E' RAISING error.                  "M LJG-21.05.2018
    ENDIF.
    CHECK p_error IS INITIAL.
*}  END OF INSERT WMR-040416

*   Verificar campos obligatorios
    me->check_field_res( EXPORTING pi_cab    = lt_cabecera_salida_r
                                   pi_det    = lt_detalle_salida_r
                                   pi_fecfac = p_fecfac
                         IMPORTING pe_error  = p_error
                                   pe_rblog  = lt_rblog ).

    IF p_error IS NOT INITIAL.                                                          "I-NTP-221215
      MESSAGE text-e33 TYPE 'E' RAISING error.  "I-NTP-221215   "M LJG-21.05.2018
    ENDIF.                                                                              "I-NTP-221215
    CHECK p_error  IS INITIAL.

*   Setear Valores Jeison (actualiza además las tablas de log de envío del WS)
    me->set_jeison_res( EXPORTING pi_cab   = lt_cabecera_salida_r
                                  pi_det   = lt_detalle_salida_r
                        IMPORTING pe_rbcab = lt_rbcab
                                  pe_rbdet = lt_rbdet ).

*   Actualizar tablas Z
    me->upd_tabla_res( EXPORTING pi_repro = p_repro
                                 pi_cab   = lt_rbcab
                                 pi_det   = lt_rbdet ).

*   Llama WS Resúmen
    me->call_ws_res( EXPORTING pi_bukrs   = p_bukrs                             "I-WMR-200715
                               pi_cab     = lt_rbcab
                               pi_det     = lt_rbdet
                               pi_fecfac  = p_fecfac
                    IMPORTING  pe_error   = p_error
                               pe_message = p_message ).

*   Actualizar Identificador Resúmen
    IF p_error IS INITIAL.
      me->upd_identi_res( EXPORTING pi_det = lt_detalle_salida ).
    ENDIF.

  ENDMETHOD.                    "extrae_data_boletas_res


  METHOD extrae_data_boletas_res_v2.

    DATA: lt_cab      TYPE ltt_rbcab,
          lt_det      TYPE ltt_rbdet_v2,
          lt_det_proc TYPE ltt_rbdet_v2,                                      "I-WMR-100118-3000008865
          lt_det_all  TYPE ltt_rbdet_v2,                                      "I-WMR-100118-3000008865

          lt_cab_json TYPE ltt_rbcab_json,
          lt_det_json TYPE ltt_rbdet_v2_json,

          ls_return   TYPE bapiret2,
          ls_det_proc TYPE zostb_rbdet_v2,                                    "I-WMR-100118-3000008865
          ls_cab      TYPE zostb_rbcab,                                       "I-WMR-100118-3000008865
          ls_det      TYPE zostb_rbdet_v2,                                    "I-WMR-100118-3000008865

          l_error     TYPE xfeld.                                             "I-WMR-100118-3000008865


* Obtener data y construir data para resumen de boletas
    set_cabdet_res_v2( EXPORTING pi_bukrs = i_bukrs
                                 pi_fkdat = i_fkdat
                       IMPORTING pe_cab = lt_cab
                                 pe_det = lt_det
                       EXCEPTIONS error = 1 ).
    IF sy-subrc <> 0.
      ls_return = sy_to_ret( ).
      APPEND ls_return TO et_return. RAISE error.
      ""      APPEND sy_to_ret( ) TO et_return. RAISE error.
    ENDIF.

* Formar cabecera y detalle finales
    set_homo_res_v2( CHANGING pc_cab = lt_cab
                              pc_det = lt_det ).

    " Formar Resumen de Boletas por Aceptar y Dar de baja
    lt_det_all[] = lt_det_proc[] = lt_det[].                                  "I-WMR-100118-3000008865
    SORT lt_det_proc BY zz_estadoitem ASCENDING.                              "I-WMR-100118-3000008865
    DELETE ADJACENT DUPLICATES FROM lt_det_proc COMPARING zz_estadoitem.      "I-WMR-100118-3000008865

    LOOP AT lt_det_proc INTO ls_det_proc.                                     "I-WMR-100118-3000008865
      CLEAR: lt_det, lt_cab_json, lt_det_json, l_error.                       "I-WMR-100118-3000008865

      READ TABLE lt_cab INTO ls_cab INDEX 1.                                  "I-WMR-100118-3000008865
      IF sy-subrc EQ 0.                                                       "I-WMR-100118-3000008865
        ls_cab-zz_identifiresu = set_new_id( i_bukrs = ls_cab-bukrs           "I-WMR-100118-3000008865
                                             i_datum = sy-datum               "I-WMR-100118-3000008865
                                             i_typid = gc_prefix_rb ).        "I-WMR-100118-3000008865
        MODIFY lt_cab FROM ls_cab INDEX 1.                                    "I-WMR-100118-3000008865
      ENDIF.                                                                  "I-WMR-100118-3000008865

      LOOP AT lt_det_all INTO ls_det                                          "I-WMR-100118-3000008865
                         WHERE zz_estadoitem = ls_det_proc-zz_estadoitem.     "I-WMR-100118-3000008865
        ls_det-zz_identifiresu = ls_cab-zz_identifiresu.                      "I-WMR-100118-3000008865
        APPEND ls_det TO lt_det.                                              "I-WMR-100118-3000008865
      ENDLOOP.                                                                "I-WMR-100118-3000008865

* Verificar campos obligatorios
      check_field_res_v2( EXPORTING pi_cab    = lt_cab
                                    pi_det    = lt_det
                                    pi_fecfac = i_fkdat
                          EXCEPTIONS error     = 1 ).
      IF sy-subrc <> 0.
        ""        APPEND sy_to_ret( ) TO et_return. RAISE error.              "E-WMR-100118-3000008865
        l_error = abap_true.                                                  "I-WMR-100118-3000008865
        APPEND sy_to_ret( ) TO et_return. CONTINUE.                           "I-WMR-100118-3000008865
        ""      APPEND sy_to_ret( ) TO et_return. RAISE error.
      ENDIF.

* Actualizar tablas Z
*{I-NTP170418-3000009628
*      upd_tabla_res_v2( pi_cab   = lt_cab
*                        pi_det   = lt_det ).
      upd_tabla_res_v2( EXPORTING pi_cab   = lt_cab
                                  pi_det   = lt_det
                        EXCEPTIONS error = 1 ).
      IF sy-subrc <> 0.
        APPEND sy_to_ret( ) TO et_return. CONTINUE.
      ENDIF.
*}I-NTP170418-3000009628

* Setear Valores Jeison (actualiza además las tablas de log de envío del WS)
      set_json_res_v2( EXPORTING pi_cab = lt_cab
                                 pi_det = lt_det
                       IMPORTING pe_cab_json = lt_cab_json
                                 pe_det_json = lt_det_json ).

* Llama WS Resúmen
      call_ws_res_v2( EXPORTING pi_bukrs   = i_bukrs
                                pi_cab     = lt_cab_json
                                pi_det     = lt_det_json
                                pi_fecfac  = i_fkdat
                      IMPORTING pe_message = et_return
                      EXCEPTIONS error = 1 ).

* Actualizar Identificador Resúmen
      IF sy-subrc = 0.
        upd_identi_res_v2( EXPORTING pi_det = lt_det ).
      ELSE.
        ""        RAISE error.                                                "E-WMR-100118-3000008865
        l_error = abap_true.                                                  "I-WMR-100118-3000008865
        APPEND sy_to_ret( ) TO et_return. CONTINUE.                           "I-WMR-100118-3000008865
      ENDIF.

      COMMIT WORK.                                                            "I-WMR-100118-3000008865
    ENDLOOP.                                                                  "I-WMR-100118-3000008865

  ENDMETHOD.                    "extrae_data_boletas_res_v2


  METHOD extrae_data_comunicado_bajas.

    DATA: lw_identicomun TYPE zosed_identicomun.

    DATA: lt_vbrk  TYPE TABLE OF lty_vbrk,
          lt_vbrk1 TYPE TABLE OF lty_vbrk,                                      "I-WMR-240815
          lt_vbrk2 TYPE TABLE OF lty_vbrk,                                      "I-WMR-240815
          lt_msg   TYPE BAPIRETTAB,                                            "I-WMR-240815
          ls_vbrk1 TYPE lty_vbrk,                                               "I-WMR-240815
          ls_vbrk2 TYPE lty_vbrk,                                               "I-WMR-240815
          ls_msg   TYPE bapiret2,                                               "I-WMR-240815
          lw_error TYPE char01,                                                 "I-WMR-240815
          lw_text  TYPE char100,                                                "I-WMR-240815
          lt_bacab TYPE TABLE OF zostb_bacab,
          lt_badet TYPE TABLE OF zostb_badet.

    DATA: l_system    TYPE syst-host,                                           "I-WMR-070716
          l_test_act  TYPE xfeld,       "Indicador Sistema Test activo          "I-WMR-070716
          l_mandt_prd TYPE symandt,     "Mandante Productivo Real.              "I-WMR-070716
          l_envsun    TYPE zostb_envwsfe-envsun,                                "I-WMR-070716
          ls_const    LIKE LINE OF lt_const.                                    "I-WMR-070716

*   Limpiar variables globales
    me->free_data( ).

*   Obtener valores constantes y catálogos
    me->get_constants( i_bukrs = p_bukrs
                       i_tpproc = gc_prefix_bj
                       i_date   = p_fecfac ).

*   Obtener datos de Cabecera de Bajas
    me->get_data_baj( EXPORTING pi_bukrs   = p_bukrs                             "I-WMR-200715
                                pi_fecfac  = p_fecfac
                                pi_getfdoc = p_getfdoc                          "I-WMR-281016-3000005971
                                pi_getffo  = p_getffo                           "I-WMR-070417-3000007034
                      IMPORTING pe_vbrk    = lt_vbrk
                                "pe_error   = p_error ).                        "E-3000011744-NTP300419
                      EXCEPTIONS error      = 1 ).                              "I-3000011744-NTP300419

*{I-3000011744-NTP300419
*    CHECK p_error  IS INITIAL.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 RAISING error.
    ENDIF.
*}I-3000011744-NTP300419

*{  BEGIN OF REPLACE WMR-240815
    ""*   Setear Jeison (adicional actualiza tablas Z)
    ""    me->set_jeison_baj( EXPORTING pi_vbrk        = lt_vbrk
    ""                                  pi_fecfac      = p_fecfac
    ""                                  pi_repro       = p_repro
    ""                        IMPORTING pe_bacab       = lt_bacab
    ""                                  pe_badet       = lt_badet
    ""                                  pe_identicomun = lw_identicomun ).

    ""*   Verificar campos obligatorios
    ""    me->check_field( EXPORTING pi_badet  = lt_badet
    ""                               pi_fecfac = p_fecfac
    ""                     IMPORTING pe_error  = p_error
    ""                               pe_balog  = lt_balogg_aux  ).

    ""*   Actualizar tablas Z
    ""    me->upd_tabla_bajas( pi_repro = p_repro
    ""                         pi_balog = lt_balogg_aux
    ""                         pi_bacab = lt_bacab
    ""                         pi_badet = lt_badet ).

    ""    CHECK p_error  IS INITIAL.

    ""*   Llama WS Bajas
    ""    me->call_ws_baj( EXPORTING pi_bukrs   = p_bukrs                             "I-WMR-200715
    ""                               pi_bacab   = lt_bacab
    ""                               pi_badet   = lt_badet
    ""                               pi_fecfac  = p_fecfac
    ""                     IMPORTING pe_error   = p_error
    ""                               pe_message = p_message ).

    ""*   Actualizar Identificador bajas
    ""    IF p_error IS INITIAL.
    ""      me->upd_identi_baj( EXPORTING pi_vbrk        = lt_vbrk
    ""                                    pi_identicomun = lw_identicomun ).
    ""    ENDIF.

*   Lectura de constantes
    LOOP AT lt_const INTO ls_const.
      CASE ls_const-campo.
          "Test
        WHEN gc_campo_test_act.
          l_test_act = ls_const-valor1.

          "PRD
        WHEN gc_campo_mandt_prd.
          l_mandt_prd = ls_const-valor1.

          "Determinar nombre del sistema
        WHEN gc_campo_host.
          IF ls_const-valor1 = sy-host.
            l_system = ls_const-valor2.
          ENDIF.
      ENDCASE.
    ENDLOOP.

*   Segun Sistema - Identificar Modo TEST HOMO PRD
    CASE l_system.
        "QAS
      WHEN gc_system_qas.
        IF l_test_act EQ abap_on.
          l_envsun = gc_system_sunat_test.
        ELSE.
          l_envsun = gc_system_sunat_homo.
        ENDIF.
        "PRD
      WHEN gc_system_prd.
        IF sy-mandt EQ l_mandt_prd.
          l_envsun = gc_system_sunat_prod.
        ELSE.
          l_envsun = gc_system_sunat_test.
        ENDIF.
      WHEN OTHERS.
    ENDCASE.

    " Se enviarán a Sunat por quiebre de Fechas de Factura
    lt_vbrk2[] = lt_vbrk1[] = lt_vbrk[].
    SORT lt_vbrk1 BY fkdat ASCENDING.
    DELETE ADJACENT DUPLICATES FROM lt_vbrk1 COMPARING fkdat.

    LOOP AT lt_vbrk1 INTO ls_vbrk1.
      CLEAR: lt_vbrk, lt_bacab, lt_badet, lt_balogg_aux,
             lw_identicomun, lw_error, lt_msg.

*{  BEGIN OF INSERT WMR-260216
      " Verificar si existen envíos sin Status actualizado en Sap sólo en Sistema Productivo Sunat
      CASE l_envsun.
        WHEN gc_system_prd.
          CLEAR lt_balog.
          SELECT *
            INTO TABLE lt_balog
            FROM zostb_balog
            WHERE bukrs           EQ ls_vbrk1-bukrs
              AND zzt_status_cdr  EQ gc_statuscdr_2
              AND zzt_femision    EQ ls_vbrk1-fkdat.

          IF lt_balog[] IS NOT INITIAL.
            lw_error = '3'.
            CLEAR lw_text.
            WRITE ls_vbrk1-fkdat TO lw_text.
            CONCATENATE 'Existe al menos un comunicado de bajas con fecha'
                        lw_text
                        'pendientes de Sincronización de Status'
                        INTO lw_text SEPARATED BY space.
            CLEAR ls_msg.
            ls_msg-type       = 'E'.
            ls_msg-id         = '00'.
            ls_msg-number     = '398'.
            ls_msg-row        = lines( p_message ) + 1.
            CALL FUNCTION 'CRM_MESSAGE_TEXT_SPLIT'
              EXPORTING
                iv_text    = lw_text
              IMPORTING
                ev_msgvar1 = ls_msg-message_v1
                ev_msgvar2 = ls_msg-message_v2
                ev_msgvar3 = ls_msg-message_v3
                ev_msgvar4 = ls_msg-message_v4.
            APPEND ls_msg TO p_message.
          ENDIF.

          CHECK lw_error IS INITIAL.
      ENDCASE.
*}  END OF INSERT WMR-260216

      LOOP AT lt_vbrk2 INTO ls_vbrk2 WHERE fkdat EQ ls_vbrk1-fkdat.
        APPEND ls_vbrk2 TO lt_vbrk.
      ENDLOOP.

      " Setear JSon (adicional actualiza tablas Z)
      set_jeison_baj( EXPORTING pi_vbrk        = lt_vbrk
                                pi_fecfac      = ls_vbrk1-fkdat
                                pi_repro       = p_repro
                      IMPORTING pe_bacab       = lt_bacab
                                pe_badet       = lt_badet
                                pe_identicomun = lw_identicomun ).

      " Verificar campos obligatorios
      check_field( EXPORTING pi_badet  = lt_badet
                             pi_fecfac = ls_vbrk1-fkdat
                   IMPORTING pe_error  = lw_error
                             pe_balog  = lt_balogg_aux  ).

      " Actualizar tablas Z
      upd_tabla_bajas( pi_repro = p_repro
                       pi_balog = lt_balogg_aux
                       pi_bacab = lt_bacab
                       pi_badet = lt_badet ).

      IF lw_error IS NOT INITIAL.
        CONCATENATE 'El comunicado de bajas'
                    lw_identicomun
                    'tiene errores de homologación'
                    INTO lw_text SEPARATED BY space.
        CLEAR ls_msg.
        ls_msg-type       = 'E'.
        ls_msg-id         = '00'.
        ls_msg-number     = '398'.
        ls_msg-row        = lines( p_message ) + 1.
        CALL FUNCTION 'CRM_MESSAGE_TEXT_SPLIT'
          EXPORTING
            iv_text    = lw_text
          IMPORTING
            ev_msgvar1 = ls_msg-message_v1
            ev_msgvar2 = ls_msg-message_v2
            ev_msgvar3 = ls_msg-message_v3
            ev_msgvar4 = ls_msg-message_v4.
        APPEND ls_msg TO p_message.
        CONTINUE.
      ENDIF.

      " Llama WS Bajas
      call_ws_baj( EXPORTING pi_bukrs   = p_bukrs
                             pi_bacab   = lt_bacab
                             pi_badet   = lt_badet
                             pi_fecfac  = ls_vbrk1-fkdat
                   IMPORTING pe_error   = lw_error
                             pe_message = lt_msg ).

      APPEND LINES OF lt_msg TO p_message.

      " Actualizar Identificador bajas
      IF lw_error IS INITIAL.
        upd_identi_baj( pi_vbrk        = lt_vbrk
                        pi_identicomun = lw_identicomun ).
      ENDIF.

      COMMIT WORK.
    ENDLOOP.
*}  END OF REPLACE WMR-240815

  ENDMETHOD.                    "extrae_data_documentos_baj


  METHOD extrae_data_fa.

    DATA: lt_vbrk        TYPE TABLE OF lty_vbrk,
          lt_vbrp        TYPE TABLE OF lty_vbrp,

          ls_nojson_data TYPE gty_nojson_data,
          ls_json_data   TYPE gty_json_data,

          lv_tipdoc      TYPE doccls.

*****************************************************************
*   EXTRACCIÓN DE DATOS                                         *
*****************************************************************

*   Limpiar variables globales
    free_data( ).

*   Inicializar valores
    lv_tipdoc = gc_tipdoc_fa.
    gw_vbeln = p_vbeln.

*   Obtener valores constantes y catálogos
    get_constants( i_vbeln = p_vbeln
                   i_tpproc = gc_prefix_fc ).

*   Obtener Cabecera de Factura
    get_data( EXPORTING pi_tipdoc = lv_tipdoc
                        is_options = is_options           "WMR-121016-3000005779
              IMPORTING pe_vbrk   = lt_vbrk
                        pe_vbrp   = lt_vbrp
                        pe_error  = p_error ).

    CHECK p_error IS INITIAL.

*   Actualizar datos VBRK
    upd_vbrk( EXPORTING pi_tipdoc = lv_tipdoc
                        pi_vbrp   = lt_vbrp
                        is_options = is_options "I-080720-NTP-3000014674
               CHANGING pe_vbrk   = lt_vbrk ).

*   Extrae Guias
    extrae_guias( EXPORTING pi_vbrk = lt_vbrk
                            pi_vbrp = lt_vbrp
                  IMPORTING pe_likp = lt_likp ).

*   Actualizar datos VBRP
    upd_vbrp( EXPORTING pi_tipdoc = lv_tipdoc
              CHANGING  pe_vbrp   = lt_vbrp
                        pe_vbrk   = lt_vbrk ).

*****************************************************************
*   HOMOLOGAR TABLAS                                            *
*****************************************************************

*   Formar Datos Cabecera
    set_homo_cab( EXPORTING pi_tipdoc = lv_tipdoc
                  IMPORTING es_cab    = ls_nojson_data
                  CHANGING  pe_vbrk   = lt_vbrk
                            pi_vbrp   = lt_vbrp ).

*   Formar Datos Detalle
    set_homo_det( EXPORTING pi_tipdoc = lv_tipdoc
                            pi_vbrp   = lt_vbrp
                  IMPORTING es_det    = ls_nojson_data
                  CHANGING pi_vbrk   = lt_vbrk ).

*   Formar Datos Cliente
    set_homo_cli( EXPORTING pi_vbrk   = lt_vbrk
                  IMPORTING es_cli    = ls_nojson_data
                  CHANGING  cs_cab    = ls_nojson_data ).

*{  BEGIN OF INSERT WMR-230615
    " Textos de Cabecera
    set_header_texts( EXPORTING it_vbrk     = lt_vbrk
                                it_vbrp     = lt_vbrp
                                is_options  = is_options "I-080720-NTP-3000014674
                      IMPORTING es_head_txt = ls_nojson_data ).
*}  END OF INSERT WMR-230615

*{  BEGIN OF INSERT WMR-121016-3000005779
    IF is_options-only_datanojs EQ abap_true.
      es_datanojson = ls_nojson_data.
      EXIT.
    ENDIF.
*}  END OF INSERT WMR-121016-3000005779

*****************************************************************
*   VERIFICAR ERROR DE HOMOLOGACIÓN                             *
*****************************************************************

    check_homo( EXPORTING is_data     = ls_nojson_data
                          it_vbrk     = lt_vbrk                 "I-290721-NTP-3000017358
                CHANGING  pe_error    = p_error
                          pe_message  = p_message ).

*****************************************************************
*   SETEAR VALORES JEISON                                       *
*****************************************************************

    IF p_error IS INITIAL.

*     JSon Cabecera
      set_json_cab_main( EXPORTING i_tipdoc  = lv_tipdoc
                                   is_data   = ls_nojson_data
                                   it_vbrk   = lt_vbrk
                         IMPORTING es_jsoncab = ls_json_data-jsoncab
                                   et_jsoncab_tc = ls_json_data-t_jsoncab_tc
                                   et_jsoncab_gr = ls_json_data-t_jsoncab_gr
                                   et_jsoncab_aa = ls_json_data-t_jsoncab_aa ).

*     JSon Detalle
      set_json_det_main( EXPORTING i_tipdoc  = lv_tipdoc
                                   is_data   = ls_nojson_data
                                   it_vbrk   = lt_vbrk
                                   it_vbrp   = lt_vbrp
                         IMPORTING et_jsondet = ls_json_data-t_jsondet ).

*     JSon Cliente
      set_json_cli( EXPORTING is_data     = ls_nojson_data
                    IMPORTING es_jsoncli  = ls_json_data-jsoncli ).

    ENDIF.

*****************************************************************
*   ACTUALIZAR TABLAS Z                                         *
*****************************************************************

    upd_tables( EXPORTING pi_error        = p_error
                          is_nojson_data  = ls_nojson_data
                          is_options      = is_options      "I-NTP260717-3000006468
                          is_json_data    = ls_json_data ).

*****************************************************************
*   CONSUMO DE SERVICIO WEB                                     *
*****************************************************************

    CHECK p_error IS INITIAL.

*BI-NTP-210416
    call_ws_fa( EXPORTING is_nojson_data  = ls_nojson_data
                          is_json_data    = ls_json_data
                          is_options      = is_options    "I-NTP260717-3000006468
                IMPORTING pe_message      = p_message ).
*EI-NTP-210416
*{I-3000010823-NTP210119
    DATA: lo_feis TYPE REF TO object,
          lo_root TYPE REF TO cx_root.

    TRY.
        CREATE OBJECT lo_feis TYPE (gc_feis_class).
        CALL METHOD lo_feis->('CALL_EFACT_FA')
          EXPORTING
            is_nojson_data = ls_nojson_data
          IMPORTING
            e_message      = p_message.
      CATCH cx_root INTO lo_root.
    ENDTRY.
*}I-3000010823-NTP210119

  ENDMETHOD.                    "extrae_data_facturas


  METHOD extrae_data_nc.

    DATA: lt_vbrk        TYPE TABLE OF lty_vbrk,
          lt_vbrp        TYPE TABLE OF lty_vbrp,

          ls_nojson_data TYPE gty_nojson_data,
          ls_json_data   TYPE gty_json_data,

          lv_tipdoc      TYPE doccls.

*****************************************************************
*   EXTRACCIÓN DE DATOS                                         *
*****************************************************************

*   Limpiar variables globales
    free_data( ).

*   Inicializar valores
    lv_tipdoc = gc_tipdoc_nc.
    gw_vbeln = p_vbeln.

*   Obtener valores constantes y catálogos
    get_constants( i_vbeln = p_vbeln
                   i_tpproc = gc_prefix_nc ).

*   Obtener Cabecera de NC
    get_data( EXPORTING pi_tipdoc = lv_tipdoc
                        is_options = is_options           "WMR-121016-3000005779
              IMPORTING pe_vbrk   = lt_vbrk
                        pe_vbrp   = lt_vbrp
                        pe_error  = p_error ).

    CHECK p_error IS INITIAL.

*   Actualizar datos VBRK
    upd_vbrk( EXPORTING pi_tipdoc = lv_tipdoc
                        pi_vbrp   = lt_vbrp
                        is_options = is_options "I-080720-NTP-3000014674
               CHANGING pe_vbrk   = lt_vbrk ).

*   Actualizar datos VBRP
    upd_vbrp( EXPORTING pi_tipdoc = lv_tipdoc
              CHANGING  pe_vbrp   = lt_vbrp
                        pe_vbrk   = lt_vbrk ).

*****************************************************************
*   HOMOLOGAR TABLAS                                            *
*****************************************************************

*   Formar Datos Cabecera
    set_homo_cab( EXPORTING pi_tipdoc = lv_tipdoc
                  IMPORTING es_cab    = ls_nojson_data
                  CHANGING  pe_vbrk   = lt_vbrk
                            pi_vbrp   = lt_vbrp ).

*   Formar Datos Detalle
    set_homo_det( EXPORTING pi_tipdoc = lv_tipdoc
                            pi_vbrp   = lt_vbrp
                  IMPORTING es_det    = ls_nojson_data
                  CHANGING pi_vbrk   = lt_vbrk ).

*   Formar Datos Cliente
    set_homo_cli( EXPORTING pi_vbrk   = lt_vbrk
                  IMPORTING es_cli    = ls_nojson_data
                  CHANGING  cs_cab    = ls_nojson_data ).

*{  BEGIN OF INSERT WMR-230615
    " Textos de Cabecera
    set_header_texts( EXPORTING it_vbrk     = lt_vbrk
                                it_vbrp     = lt_vbrp
                                is_options  = is_options "I-080720-NTP-3000014674
                      IMPORTING es_head_txt = ls_nojson_data ).
*}  END OF INSERT WMR-230615

*{  BEGIN OF INSERT WMR-121016-3000005779
    IF is_options-only_datanojs EQ abap_true.
      es_datanojson = ls_nojson_data.
      EXIT.
    ENDIF.
*}  END OF INSERT WMR-121016-3000005779

*****************************************************************
*   VERIFICAR ERROR DE HOMOLOGACIÓN                             *
*****************************************************************

    check_homo( EXPORTING is_data     = ls_nojson_data
                          it_vbrk     = lt_vbrk                 "I-290721-NTP-3000017358
                CHANGING  pe_error    = p_error
                          pe_message  = p_message ).

*****************************************************************
*   SETEAR VALORES JEISON                                       *
*****************************************************************

    IF p_error IS INITIAL.

*     JSon Cabecera
      set_json_cab_main( EXPORTING i_tipdoc  = lv_tipdoc
                                   is_data   = ls_nojson_data
                                   it_vbrk   = lt_vbrk
                         IMPORTING es_jsoncab = ls_json_data-jsoncab
                                   et_jsoncab_tc = ls_json_data-t_jsoncab_tc
                                   et_jsoncab_gr = ls_json_data-t_jsoncab_gr
                                   et_jsoncab_aa = ls_json_data-t_jsoncab_aa ).

*     JSon Detalle
      set_json_det_main( EXPORTING i_tipdoc  = lv_tipdoc
                                   is_data   = ls_nojson_data
                                   it_vbrk   = lt_vbrk
                                   it_vbrp   = lt_vbrp
                         IMPORTING et_jsondet = ls_json_data-t_jsondet ).

*     JSon Cliente
      set_json_cli( EXPORTING is_data     = ls_nojson_data
                    IMPORTING es_jsoncli  = ls_json_data-jsoncli ).

    ENDIF.

*****************************************************************
*   ACTUALIZAR TABLAS Z                                         *
*****************************************************************

    upd_tables( EXPORTING pi_error        = p_error
                          is_nojson_data  = ls_nojson_data
                          is_options      = is_options      "I-NTP260717-3000006468
                          is_json_data    = ls_json_data ).

*****************************************************************
*   CONSUMO DE SERVICIO WEB                                     *
*****************************************************************

    CHECK p_error IS INITIAL.

*BI-NTP-210416
    call_ws_nc( EXPORTING is_nojson_data  = ls_nojson_data
                          is_json_data    = ls_json_data
                          is_options      = is_options    "I-NTP260717-3000006468
                IMPORTING pe_message      = p_message ).
*EI-NTP-210416
*{I-3000010823-NTP210119
    DATA: lo_feis TYPE REF TO object,
          lo_root TYPE REF TO cx_root.

    TRY.
        CREATE OBJECT lo_feis TYPE (gc_feis_class).

        CALL METHOD lo_feis->('CALL_EFACT_NC')
          EXPORTING
            is_nojson_data = ls_nojson_data
          IMPORTING
            e_message      = p_message.
      CATCH cx_root INTO lo_root.
    ENDTRY.
*}I-3000010823-NTP210119

  ENDMETHOD.                    "extrae_data_nc


  METHOD extrae_data_nd.

    DATA: lt_vbrk        TYPE TABLE OF lty_vbrk,
          lt_vbrp        TYPE TABLE OF lty_vbrp,

          ls_nojson_data TYPE gty_nojson_data,
          ls_json_data   TYPE gty_json_data,

          lv_tipdoc      TYPE doccls.

*****************************************************************
*   EXTRACCIÓN DE DATOS                                         *
*****************************************************************

*   Limpiar variables globales
    free_data( ).

*   Inicializar valores
    lv_tipdoc = gc_tipdoc_nd.
    gw_vbeln = p_vbeln.

*   Obtener valores constantes y catálogos
    get_constants( i_vbeln = p_vbeln
                   i_tpproc = gc_prefix_nd ).

*   Obtener Cabecera de NC
    get_data( EXPORTING pi_tipdoc = lv_tipdoc
                        is_options = is_options           "WMR-121016-3000005779
              IMPORTING pe_vbrk   = lt_vbrk
                        pe_vbrp   = lt_vbrp
                        pe_error  = p_error ).

    CHECK p_error IS INITIAL.

*   Actualizar datos VBRK
    upd_vbrk( EXPORTING pi_tipdoc = lv_tipdoc
                        pi_vbrp   = lt_vbrp
                        is_options = is_options "I-080720-NTP-3000014674
               CHANGING pe_vbrk   = lt_vbrk ).

*   Actualizar datos VBRP
    upd_vbrp( EXPORTING pi_tipdoc = lv_tipdoc
              CHANGING  pe_vbrp   = lt_vbrp
                        pe_vbrk   = lt_vbrk ).

*****************************************************************
*   HOMOLOGAR TABLAS                                            *
*****************************************************************

*   Formar Datos Cabecera
    set_homo_cab( EXPORTING pi_tipdoc = lv_tipdoc
                  IMPORTING es_cab    = ls_nojson_data
                  CHANGING  pe_vbrk   = lt_vbrk
                            pi_vbrp   = lt_vbrp ).

*   Formar Datos Detalle
    set_homo_det( EXPORTING pi_tipdoc = lv_tipdoc
                            pi_vbrp   = lt_vbrp
                  IMPORTING es_det    = ls_nojson_data
                  CHANGING pi_vbrk   = lt_vbrk ).

*   Formar Datos Cliente
    set_homo_cli( EXPORTING pi_vbrk   = lt_vbrk
                  IMPORTING es_cli    = ls_nojson_data
                  CHANGING  cs_cab    = ls_nojson_data ).

*{  BEGIN OF INSERT WMR-230615
    " Textos de Cabecera
    set_header_texts( EXPORTING it_vbrk     = lt_vbrk
                                it_vbrp     = lt_vbrp
                                is_options  = is_options "I-080720-NTP-3000014674
                      IMPORTING es_head_txt = ls_nojson_data ).
*}  END OF INSERT WMR-230615

*{  BEGIN OF INSERT WMR-121016-3000005779
    IF is_options-only_datanojs EQ abap_true.
      es_datanojson = ls_nojson_data.
      EXIT.
    ENDIF.
*}  END OF INSERT WMR-121016-3000005779

*****************************************************************
*   VERIFICAR ERROR DE HOMOLOGACIÓN                             *
*****************************************************************

    check_homo( EXPORTING is_data     = ls_nojson_data
                          it_vbrk     = lt_vbrk                 "I-290721-NTP-3000017358
                CHANGING  pe_error    = p_error
                          pe_message  = p_message ).

*****************************************************************
*   SETEAR VALORES JEISON                                       *
*****************************************************************

    IF p_error IS INITIAL.

*     JSon Cabecera
      set_json_cab_main( EXPORTING i_tipdoc  = lv_tipdoc
                                   is_data   = ls_nojson_data
                                   it_vbrk   = lt_vbrk
                         IMPORTING es_jsoncab   = ls_json_data-jsoncab
                                   et_jsoncab_tc = ls_json_data-t_jsoncab_tc
                                   et_jsoncab_gr = ls_json_data-t_jsoncab_gr
                                   et_jsoncab_aa = ls_json_data-t_jsoncab_aa ).

*     JSon Detalle
      set_json_det_main( EXPORTING i_tipdoc  = lv_tipdoc
                                   is_data   = ls_nojson_data
                                   it_vbrk   = lt_vbrk
                                   it_vbrp   = lt_vbrp
                         IMPORTING et_jsondet = ls_json_data-t_jsondet ).

*     JSon Cliente
      set_json_cli( EXPORTING is_data     = ls_nojson_data
                    IMPORTING es_jsoncli  = ls_json_data-jsoncli ).

    ENDIF.

*****************************************************************
*   ACTUALIZAR TABLAS Z                                         *
*****************************************************************

    upd_tables( EXPORTING pi_error        = p_error
                          is_nojson_data  = ls_nojson_data
                          is_options      = is_options      "I-NTP260717-3000006468
                          is_json_data    = ls_json_data ).

*****************************************************************
*   CONSUMO DE SERVICIO WEB                                     *
*****************************************************************

    CHECK p_error IS INITIAL.

*BI-NTP-210416
    call_ws_nd( EXPORTING is_nojson_data  = ls_nojson_data
                          is_json_data    = ls_json_data
                          is_options      = is_options      "I-NTP260717-3000006468
                IMPORTING pe_message      = p_message ).
*EI-NTP-210416
*{I-3000010823-NTP210119
    DATA: lo_feis TYPE REF TO object,
          lo_root TYPE REF TO cx_root.

    TRY.
        CREATE OBJECT lo_feis TYPE (gc_feis_class).
        CALL METHOD lo_feis->('CALL_EFACT_ND')
          EXPORTING
            is_nojson_data = ls_nojson_data
          IMPORTING
            e_message      = p_message.
      CATCH cx_root INTO lo_root.
    ENDTRY.
*}I-3000010823-NTP210119

  ENDMETHOD.                    "extrae_data_nd


  METHOD extrae_data_resumen_boletas.

* Limpiar variables globales
    me->free_data( ).

* Obtener valores constantes y catálogos
    me->get_constants( i_bukrs = i_bukrs
                       i_tpproc = gc_prefix_rb
                       i_date   = i_fkdat ).

* Evalua version
    IF gs_ubl IS NOT INITIAL.
      CASE gs_ubl-zz_versivigen.
        WHEN gc_version_1.
          extrae_data_boletas_res( EXPORTING p_bukrs   = i_bukrs
                                             p_fecfac  = i_fkdat
                                             p_repro   = i_repro
                                   IMPORTING p_message = et_return
                                   EXCEPTIONS error     = 1 ).
          IF sy-subrc <> 0.
            DATA ls_return TYPE bapiret2.
            ls_return = sy_to_ret( ).
            APPEND ls_return TO et_return. RAISE error.
            ""            APPEND sy_to_ret( ) TO et_return. RAISE error.
          ENDIF.

        WHEN gc_version_2.
          extrae_data_boletas_res_v2( EXPORTING i_bukrs = i_bukrs
                                                i_fkdat = i_fkdat
                                      IMPORTING et_return = et_return
                                      EXCEPTIONS error   = 1 ).
          IF sy-subrc <> 0.
            RAISE error.
          ENDIF.

        WHEN OTHERS.
          MESSAGE text-e37 TYPE 'E' RAISING error.               "M LJG-21.05.2018
      ENDCASE.
    ENDIF.

  ENDMETHOD.                    "extrae_data_boletas_res_chk_v


  METHOD extrae_guias.

    DATA: lt_vbap     TYPE HASHED TABLE OF ty_vbap
                      WITH UNIQUE KEY vbeln posnr,
          lt_vbap1    TYPE STANDARD TABLE OF ty_vbap,                           "I-WMR-161216-3000005346
          lt_vbrk_fex TYPE TABLE OF        lty_vbrk,
          lt_vbrp_fex TYPE TABLE OF        lty_vbrp,
          lt_vbrk     TYPE TABLE OF        lty_vbrk,
          lt_vbrp     TYPE TABLE OF        lty_vbrp,
          lt_likps    TYPE SORTED TABLE OF ty_likps
                      WITH NON-UNIQUE KEY vgbel vgpos.

    DATA: ls_vbrk_fex TYPE         lty_vbrk,
          ls_vbrp_fex TYPE         lty_vbrp,
          ls_likp     LIKE LINE OF pe_likp.

    FIELD-SYMBOLS: <fs_vbap>  LIKE LINE OF lt_vbap,
                   <fs_likps> LIKE LINE OF lt_likps.

    lt_vbrk[] = lt_vbrk_fex[] = pi_vbrk[].
    lt_vbrp[] = lt_vbrp_fex[] = pi_vbrp[].

*   Identifico Facturas de Exportación
*{I-NTP211218-3000009571
    CASE gw_license.
      WHEN '0020729594'. "Austral
        DELETE lt_vbrk_fex WHERE kalsm NOT IN ltr_kalsm_e.
    ENDCASE.
*}I-NTP211218-3000009571
    LOOP AT lt_vbrp_fex INTO ls_vbrp_fex.
      READ TABLE lt_vbrk_fex INTO ls_vbrk_fex WITH KEY vbeln = ls_vbrp_fex-vbeln.
      IF sy-subrc <> 0.
        DELETE lt_vbrp_fex WHERE vbeln = ls_vbrp_fex-vbeln.
      ENDIF.
    ENDLOOP.

*   Identifica Facturas Nacionales
    CLEAR:ls_vbrp_fex,ls_vbrk_fex.
*{I-NTP211218-3000009571
    CASE gw_license.
      WHEN '0020729594'. "Austral
        DELETE lt_vbrk WHERE kalsm IN ltr_kalsm_e.
    ENDCASE.
*}I-NTP211218-3000009571
    LOOP AT lt_vbrp INTO ls_vbrp_fex.
      READ TABLE lt_vbrk INTO ls_vbrk_fex WITH KEY vbeln = ls_vbrp_fex-vbeln.
      IF sy-subrc <> 0.
        DELETE lt_vbrp WHERE vbeln = ls_vbrp_fex-vbeln.
      ENDIF.
    ENDLOOP.

*   Carga Facturas Nacionales
    IF lt_vbrp[] IS NOT INITIAL.
      SELECT vbeln xblnr wadat_ist
*{  BEGIN OF INSERT WMR-171016-3000005361
             kunnr route btgew gewei
*}  END OF INSERT WMR-171016-3000005361
             anzpk                                                        "I-WMR-231116-3000005346
      INTO TABLE pe_likp
      FROM likp
      FOR ALL ENTRIES IN lt_vbrp
      WHERE vbeln = lt_vbrp-vgbel.
    ENDIF.

*   Carga Facturas de Exportación
    IF lt_vbrp_fex[] IS NOT INITIAL.

*     Obtener Pedido de Envío a puerto
      SELECT vbeln posnr vgbel vgpos
      FROM vbap
      INTO TABLE lt_vbap
      FOR ALL ENTRIES IN lt_vbrp_fex
      WHERE vbeln EQ lt_vbrp_fex-aubel
        AND posnr EQ lt_vbrp_fex-aupos.

      CHECK sy-subrc EQ 0.

*     Obtener Entregas
*{  BEGIN OF REPLACE WMR-161216-3000005346
      ""      SELECT b~vgbel b~vgpos a~vbeln a~xblnr a~wadat_ist
      ""      FROM likp AS a INNER JOIN lips AS b ON b~mandt EQ a~mandt
      ""                                         AND b~vbeln EQ a~vbeln
      ""                                         AND b~uecha EQ space
      ""      INTO TABLE lt_likps
      ""      FOR ALL ENTRIES IN lt_vbap
      ""      WHERE b~vgbel EQ lt_vbap-vgbel
      ""        AND b~vgpos EQ lt_vbap-vgpos.

      lt_vbap1[] = lt_vbap[].
      DELETE lt_vbap1 WHERE vgbel IS INITIAL.
      SORT lt_vbap1 BY vgbel ASCENDING vgpos ASCENDING.
      DELETE ADJACENT DUPLICATES FROM lt_vbap1 COMPARING vgbel vgpos.

      IF lt_vbap1[] IS NOT INITIAL.
        SELECT b~vgbel b~vgpos a~vbeln a~xblnr a~wadat_ist
          INTO TABLE lt_likps
          FROM likp AS a INNER JOIN lips AS b ON b~mandt EQ a~mandt
                                             AND b~vbeln EQ a~vbeln
                                             AND b~uecha EQ space
          FOR ALL ENTRIES IN lt_vbap1
          WHERE b~vgbel EQ lt_vbap1-vgbel
            AND b~vgpos EQ lt_vbap1-vgpos.
      ENDIF.
      FREE lt_vbap1.
*}  END OF REPLACE WMR-161216-3000005346

*     Formar tablas de Guias y Notas
      LOOP AT lt_vbrp_fex INTO ls_vbrp_fex.
        READ TABLE lt_vbap ASSIGNING <fs_vbap>
                   WITH TABLE KEY vbeln = ls_vbrp_fex-aubel
                                  posnr = ls_vbrp_fex-aupos.
        IF sy-subrc EQ 0.
          LOOP AT lt_likps ASSIGNING <fs_likps>
                  WHERE vgbel = <fs_vbap>-vgbel
                    AND vgpos = <fs_vbap>-vgpos.
            CHECK <fs_likps>-xblnr IS NOT INITIAL.
            ls_likp-vbeln     = ls_vbrp_fex-vbeln.
            ls_likp-xblnr     = <fs_likps>-xblnr.
            ls_likp-wadat_ist = <fs_likps>-wadat_ist.
            APPEND ls_likp TO pe_likp.
          ENDLOOP.
        ENDIF.
      ENDLOOP.

    ENDIF.

*   Ordenar datos
    SORT pe_likp.
    DELETE ADJACENT DUPLICATES FROM  pe_likp.

  ENDMETHOD.                    "extrae_guias


  METHOD format_charac_type_paragraph.

    DATA: func      TYPE string VALUE 'ZSD_MF_FACTURAS_CARACTERISTICA',
          ptab      TYPE abap_func_parmbind_tab,
          ptab_line TYPE abap_func_parmbind,
          etab      TYPE abap_func_excpbind_tab,
          etab_line TYPE abap_func_excpbind.

    DATA: lt_columns   TYPE  lvc_t_fcat,
          lo_pos_table TYPE REF TO data,
          lo_pos_line  TYPE REF TO data,
          lo_eti_table TYPE REF TO data,
          lo_eti_line  TYPE REF TO data,
          lo_error     TYPE REF TO cx_root,
          lw_message   TYPE string,
          lw_line      TYPE string,
          lw_sortfield TYPE string  VALUE 'NORDEN'.

    FIELD-SYMBOLS:
      <fs_pos_table>  TYPE ANY TABLE,
      <fs_pos_line>   TYPE any,
      <fs_eti_table>  TYPE ANY TABLE,
      <fs_eti_line>   TYPE any,
      <fs_zdeti>      TYPE any,
      <fs_char_value> TYPE any.

    " Crear Tabla interna de Posiciones
    CLEAR lt_columns.
    CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
      EXPORTING
        i_structure_name       = 'ZEST_F_POSICION'
        i_client_never_display = abap_true
        i_bypassing_buffer     = abap_true
      CHANGING
        ct_fieldcat            = lt_columns
      EXCEPTIONS
        inconsistent_interface = 1
        program_error          = 2
        OTHERS                 = 3.
    IF sy-subrc NE 0
    OR lt_columns[] IS INITIAL.
      EXIT.
    ENDIF.

    CALL METHOD cl_alv_table_create=>create_dynamic_table
      EXPORTING
        it_fieldcatalog           = lt_columns
      IMPORTING
        ep_table                  = lo_pos_table
      EXCEPTIONS
        generate_subpool_dir_full = 1
        OTHERS                    = 2.

    IF sy-subrc NE 0
    OR lo_pos_table IS INITIAL.
      EXIT.
    ENDIF.

    ASSIGN lo_pos_table->* TO <fs_pos_table>.
    CREATE DATA lo_pos_line LIKE LINE OF <fs_pos_table>.
    ASSIGN lo_pos_line->* TO <fs_pos_line>.

    " Crear Tabla interna de Etiquetas
    CLEAR lt_columns.
    CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
      EXPORTING
        i_structure_name       = 'ZEST_F_ETIQUETA'
        i_client_never_display = abap_true
        i_bypassing_buffer     = abap_true
      CHANGING
        ct_fieldcat            = lt_columns
      EXCEPTIONS
        inconsistent_interface = 1
        program_error          = 2
        OTHERS                 = 3.
    IF sy-subrc NE 0
    OR lt_columns[] IS INITIAL.
      EXIT.
    ENDIF.

    CALL METHOD cl_alv_table_create=>create_dynamic_table
      EXPORTING
        it_fieldcatalog           = lt_columns
      IMPORTING
        ep_table                  = lo_eti_table
      EXCEPTIONS
        generate_subpool_dir_full = 1
        OTHERS                    = 2.

    IF sy-subrc NE 0
    OR lo_eti_table IS INITIAL.
      EXIT.
    ENDIF.

    ASSIGN lo_eti_table->* TO <fs_eti_table>.
    CREATE DATA lo_eti_line LIKE LINE OF <fs_eti_table>.
    ASSIGN lo_eti_line->* TO <fs_eti_line>.

    CLEAR ptab_line.
    ptab_line-name = 'VBELN'.
    ptab_line-kind = abap_func_exporting.
    GET REFERENCE OF is_vbrp-vbeln INTO ptab_line-value.
    INSERT ptab_line INTO TABLE ptab.

    CLEAR ptab_line.
    ptab_line-name = 'POSNR'.
    ptab_line-kind = abap_func_exporting.
    GET REFERENCE OF is_vbrp-posnr INTO ptab_line-value.
    INSERT ptab_line INTO TABLE ptab.

    CLEAR ptab_line.
    ptab_line-name = 'POSICION'.
    ptab_line-kind = abap_func_tables.
    GET REFERENCE OF <fs_pos_table> INTO ptab_line-value.
    INSERT ptab_line INTO TABLE ptab.

    CLEAR ptab_line.
    ptab_line-name = 'CARACTERISTICA'.
    ptab_line-kind = abap_func_tables.
    GET REFERENCE OF <fs_eti_table> INTO ptab_line-value.
    INSERT ptab_line INTO TABLE ptab.

    TRY .
        CALL FUNCTION func
          PARAMETER-TABLE ptab.

      CATCH cx_root INTO lo_error.                       "#EC CATCH_ALL
        lw_message = lo_error->get_text( ).
        EXIT.
    ENDTRY.

    TRY .
        SORT <fs_eti_table> BY (lw_sortfield) ASCENDING.

      CATCH cx_root INTO lo_error.                       "#EC CATCH_ALL
        lw_message = lo_error->get_text( ).
        EXIT.
    ENDTRY.

    LOOP AT <fs_eti_table> ASSIGNING <fs_eti_line>.
      UNASSIGN: <fs_zdeti>, <fs_char_value>.

      ASSIGN COMPONENT 'ZDETI' OF STRUCTURE <fs_eti_line> TO <fs_zdeti>.
      CHECK <fs_zdeti> IS ASSIGNED.

      ASSIGN COMPONENT 'CHAR_VALUE' OF STRUCTURE <fs_eti_line> TO <fs_char_value>.
      CHECK <fs_char_value> IS ASSIGNED.

      CLEAR lw_line.
      CONCATENATE <fs_zdeti> <fs_char_value> INTO lw_line SEPARATED BY '~'.
      IF r_text IS INITIAL.
        r_text = lw_line.
      ELSE.
        CONCATENATE r_text lw_line INTO r_text SEPARATED BY '#'.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.


  METHOD format_idtext_type_paragraph.

    DATA:
      lt_text   TYPE TABLE OF lty_text,
      lt_stream TYPE TABLE OF tdline,
      lt_lines  TYPE TABLE OF lty_text,
      ls_stream LIKE LINE OF lt_stream,
      ls_lines  TYPE  lty_text.

    FIELD-SYMBOLS <fs_text> LIKE LINE OF lt_text.

    CALL FUNCTION 'READ_TEXT'
      EXPORTING
        id                      = is_thead-tdid
        language                = sy-langu
        name                    = is_thead-tdname
        object                  = is_thead-tdobject
      TABLES
        lines                   = lt_text
      EXCEPTIONS
        id                      = 1
        language                = 2
        name                    = 3
        not_found               = 4
        object                  = 5
        reference_check         = 6
        wrong_access_to_archive = 7
        OTHERS                  = 8.
    IF sy-subrc EQ 0.
      " Convertir texto con caracteres especiales a texto original
      LOOP AT lt_text ASSIGNING <fs_text>.
        REPLACE ALL OCCURRENCES OF ',,' IN <fs_text>-tdline WITH '~'.  " Separador de Tab
        CLEAR: lt_lines, ls_lines, lt_stream.
        ls_lines = <fs_text>.
        APPEND ls_lines TO lt_lines.
        CALL FUNCTION 'CONVERT_ITF_TO_STREAM_TEXT'
          TABLES
            itf_text    = lt_lines
            text_stream = lt_stream.

        READ TABLE lt_stream INTO ls_stream INDEX 1.
        IF sy-subrc EQ 0.
          <fs_text>-tdline = ls_stream.
        ENDIF.
      ENDLOOP.

      LOOP AT lt_text ASSIGNING <fs_text>.
        REPLACE ALL OCCURRENCES OF ',,' IN <fs_text>-tdline WITH '~'.  " Separador de Tab
        CASE sy-tabix.
          WHEN 1.
            r_text = <fs_text>-tdline.
          WHEN OTHERS.
            CONCATENATE r_text <fs_text>-tdline INTO r_text SEPARATED BY '#'.
        ENDCASE.
        ""        IF r_text IS INITIAL.
        ""          r_text = <fs_text>-tdline.
        ""        ELSE.
        ""          CONCATENATE r_text <fs_text>-tdline '#' INTO r_text.
        ""          CONCATENATE r_text <fs_text>-tdline INTO r_text SEPARATED BY '#'.
        ""        ENDIF.
      ENDLOOP.
    ENDIF.

  ENDMETHOD.


  METHOD free_data.

    REFRESH: lt_catahomo06,
             lt_catahomo07,
             lt_catahomo08,
             lt_catahomo09,
             lt_catahomo10,
             lt_catahomo12,
             lt_catahomo15,                                             "I-WMR-020715
             lth_asgtnhr,                                                         "I-WMR-121018-3000009765
             lt_cata01,
             lt_cata03,
             lt_cata05,
             lt_cata07, "I-NTP191118-3000009651
             lt_cata14,
             lt_cata15,
             lt_cata16,
             lt_cata52, "I-NTP230618-3000009651
             lt_vbpa,
             lt_adrc,
             lt_t005u,
             lt_t001z,
             lt_marc,
             lt_konv,
             lt_konvv,
             lt_t001w,
             lt_likp,
             lt_guiremi,
             lt_adrc_aux,
             lt_adrc_ct,
             lt_constakonv,
             lt_constpstyv,
             lt_constfkart,
             lt_constkdgrp,
             lt_constauart,
             lt_aubel,
             lt_vbak,
             lt_vbrk_ref,
             lt_vbrp_ref,
             lt_tvaut,
             lt_vbap_07,
             lt_vbrp_0701,
             lt_vbrk_07,
             lt_t052u,
             lt_t006,
             lt_felog,
             lt_rblog,
             lt_balog,
             lt_aplica_anticipo,                                          "I-WMR-080715
             lt_proxy.                                                    "I-WMR-200715

    REFRESH: ltr_fecfac,
             ltr_vbeln,
             ltr_numer,
             ltr_exonera,
             ltr_kschl,
             ltr_fkart,
             ltr_pstyv,
             ltr_fkart3,
             ltr_fkart7,
             ltr_fkart8,
             ltr_kalsm_e.

    CLEAR: lwa_catahomo06,
           lwa_catahomo07,
           lwa_catahomo08,
           lwa_catahomo12,
           lwa_catahomo15,                                              "I-WMR-020715
           lwa_cata01,
           lwa_cata03,
           lwa_cata05,
           lwa_cata11,
           lwa_cata14,
           lwa_cata15,
           lwa_cata16,
           lwa_constakonv,
           lwa_constpstyv,
           lwa_constfkart,
           lwa_constkdgrp,
           lwa_constauart,
           lwa_kschl,
           lwa_fkart,
           lwa_pstyv,
           lwa_adrc,
           lwa_t005u,
           lwa_t001z,
           lwa_marc,
           lwa_vbpa,
           lwa_konv,
           lwa_guiremi,
           lwa_likp,
           lwa_t006,
           gs_consextsun,
           gw_vbeln,
           gs_process.                                                            "I-WMR-190918-3000009765

  ENDMETHOD.                    "free_data


  METHOD get_address_data.

    TYPES:
      BEGIN OF ty_adrc,
        adrnr      TYPE  adrc-addrnumber,
        country    TYPE  adrc-country,      "Pais
        region     TYPE  adrc-region,       "Departamento
        street     TYPE  adrc-street,       "Dirección
        house_num1 TYPE  adrc-house_num1,   "Dirección
        str_suppl1 TYPE  adrc-str_suppl1,   "Dirección
        city1      TYPE  adrc-city1,        "Provincia
        city2      TYPE  adrc-city2,        "Distrito
        location   TYPE  adrc-location,     "Urbanización
        cityp_code TYPE  adrc-cityp_code,   "Ubigeo
*{  BEGIN OF INSERT WMR-010716
        city_code  TYPE  adrc-city_code,   " Codificación de Provincia
*}  END OF INSERT WMR-010716
        taxjurcode TYPE adrc-taxjurcode,    "Codigo "I-3000010993-NTP070119
      END OF ty_adrc .
    TYPES:
      BEGIN OF ty_t005u,
        land1 TYPE  t005u-land1,      " Clave de país
        bland TYPE  t005u-bland,      " Departamento
        bezei TYPE  t005u-bezei,      " Denominación
      END OF ty_t005u .

    DATA:
      lt_adrc      TYPE TABLE OF ty_adrc,
      lt_adrc1     TYPE TABLE OF ty_adrc,
      lt_t005u     TYPE HASHED TABLE OF ty_t005u WITH UNIQUE KEY land1 bland,
*{  BEGIN OF INSERT WMR-010716
      lr_city_code TYPE RANGE OF adrcityt-city_code,
      lt_split     TYPE TABLE OF string,
*}  END OF INSERT WMR-010716

      ls_adrc      TYPE ty_adrc,
      ls_t005u     TYPE ty_t005u,
*{  BEGIN OF INSERT WMR-010716
      ls_city_code LIKE LINE OF lr_city_code,
      ls_split     LIKE LINE OF lt_split.
*}  END OF INSERT WMR-010716

    SELECT addrnumber country region street house_num1
           str_suppl1 city1 city2 location cityp_code
*{  BEGIN OF INSERT WMR-010716
           city_code
*}  END OF INSERT WMR-010716
           taxjurcode                                 "I-3000010993-NTP070119
      FROM adrc
      INTO TABLE lt_adrc
        WHERE addrnumber EQ i_adrnr
          AND date_from  EQ '00010101'
          AND nation     IS NOT NULL.

    IF lt_adrc[] IS NOT INITIAL.
      SORT lt_adrc BY adrnr ASCENDING.

      lt_adrc1[] = lt_adrc[].
      SORT lt_adrc1 BY country ASCENDING region ASCENDING.
      DELETE ADJACENT DUPLICATES FROM lt_adrc1 COMPARING country region.
      IF lt_adrc1[] IS NOT INITIAL.
        SELECT land1 bland bezei
          INTO TABLE lt_t005u
          FROM t005u
          FOR ALL ENTRIES IN lt_adrc1
          WHERE spras EQ sy-langu
            AND land1 EQ lt_adrc1-country
            AND bland EQ lt_adrc1-region.
      ENDIF.

      LOOP AT lt_adrc INTO ls_adrc.
        CLEAR es_address.
        es_address-adrnr  = ls_adrc-adrnr.

        " Nombre de Avenida/ Calle/ Jirón
        es_address-street = ls_adrc-street.
        " Número
        es_address-stnumb = ls_adrc-house_num1.
        es_address-str_suppl1 = ls_adrc-str_suppl1.
        " País
        es_address-pais   = ls_adrc-country.
        " Departamento
        READ TABLE lt_t005u INTO ls_t005u
                   WITH TABLE KEY land1 = ls_adrc-country
                                  bland = ls_adrc-region.
        IF sy-subrc EQ 0.
          es_address-depmto = ls_t005u-bezei.
        ENDIF.
        " Provincia
        es_address-provin = ls_adrc-city1.
        " Distrito
        es_address-distri = ls_adrc-city2.
*{  BEGIN OF INSERT WMR-010716
        IF ls_adrc-cityp_code IS INITIAL.
          CLEAR: lr_city_code, lt_split.
          IF ls_adrc-city_code IS INITIAL.
            CASE gw_license.
              WHEN '0020241712' OR '0020673876'.  " Beta
                SPLIT ls_adrc-city1 AT ' - ' INTO TABLE lt_split.
                IF lines( lt_split ) EQ 3.
                  " Leer Departamento
                  READ TABLE lt_split INTO ls_split INDEX 2.
                  IF sy-subrc EQ 0.
                    TRANSLATE ls_split TO UPPER CASE.
                    SELECT city_code AS low
                      INTO CORRESPONDING FIELDS OF TABLE lr_city_code
                      FROM adrcityt
                      WHERE langu     EQ sy-langu
                        AND country   EQ ls_adrc-country
                        AND city_name EQ ls_split.
                    IF lr_city_code[] IS NOT INITIAL.
                      LOOP AT lt_split INTO ls_split.
                        TRANSLATE ls_split TO UPPER CASE.
                        CASE sy-tabix.
                          WHEN 2.
                            " Provincia
                            es_address-provin = ls_adrc-city1 = ls_split.
                          WHEN 3.
                            " Distrito
                            es_address-distri = ls_adrc-city2 = ls_split.
                        ENDCASE.
                      ENDLOOP.
                    ENDIF.
                  ENDIF.
                ELSE.

                  " Obtener Códigos de Provincia
                  TRANSLATE ls_adrc-city1 TO UPPER CASE.
                  SELECT city_code AS low
                    INTO CORRESPONDING FIELDS OF TABLE lr_city_code
                    FROM adrcityt
                    WHERE langu     EQ sy-langu
                      AND country   EQ ls_adrc-country
                      AND city_name EQ ls_adrc-city1.
                ENDIF.

              WHEN OTHERS.
                " Obtener Códigos de Provincia
                TRANSLATE ls_adrc-city1 TO UPPER CASE.
                SELECT city_code AS low
                  INTO CORRESPONDING FIELDS OF TABLE lr_city_code
                  FROM adrcityt
                  WHERE langu     EQ sy-langu
                    AND country   EQ ls_adrc-country
                    AND city_name EQ ls_adrc-city1.
            ENDCASE.

            LOOP AT lr_city_code INTO ls_city_code.
              ls_city_code-sign = 'I'. ls_city_code-option = 'EQ'.
              MODIFY lr_city_code FROM ls_city_code INDEX sy-tabix.
            ENDLOOP.
          ELSE.
            CONCATENATE 'IEQ' ls_adrc-city_code INTO ls_city_code.
            APPEND ls_city_code TO lr_city_code.
          ENDIF.
          IF lr_city_code[] IS NOT INITIAL.
            " Buscar en código postales de Distritos
            TRANSLATE ls_adrc-city2 TO UPPER CASE.
            SELECT SINGLE cityp_code
              INTO ls_adrc-cityp_code
              FROM adrcityprt
              WHERE country   EQ ls_adrc-country
                AND city_code IN lr_city_code
                AND city_part EQ ls_adrc-city2.
          ENDIF.
        ENDIF.
*}  END OF INSERT WMR-010716
        " Ubigeo
        es_address-ubigeo = ls_adrc-cityp_code.
        " Codigo
        es_address-taxjurcode = ls_adrc-taxjurcode.               "I-3000010993-NTP070119
        EXIT.
      ENDLOOP.
    ENDIF.

  ENDMETHOD.


  METHOD get_adquir_header.

    DATA: lwa_kna1  LIKE LINE OF lt_kna1,
          ls_vbpa3  TYPE         lty_vbpa3,                                 "I-WMR-030216
          ls_but000 TYPE         ty_but000,                                 "I-WMR-111218-3000009765
          lv_length TYPE         i,
          lv_name   TYPE         thead-tdname,
          lv_texto  TYPE         string,
          lv_lcnum  TYPE         vbkd-lcnum.

*{  BEGIN OF DELETE WMR-090715
    ""*   Rango Facturas de Exportación
    ""    REFRESH ltr_fkart.
    ""    LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '1' AND zz_opcion02 = '0' .
    ""      lwa_fkart-low = lwa_constfkart-fkart.
    ""      lwa_fkart-sign = 'I'.
    ""      lwa_fkart-option = 'EQ'.
    ""      APPEND lwa_fkart TO ltr_fkart.
    ""    ENDLOOP.
*}  END OF DELETE WMR-090715

*   Apellidos y nombres, denominación o razón social del adquiriente o usuario
*{  BEGIN OF REPLACE WMR-121015
    ""    READ TABLE lt_vbpa INTO lwa_vbpa WITH KEY vbeln = pi_vbrk-vbeln
    ""                                              parvw = 'RE'.
    CASE gw_license.
      WHEN '0020744072'   " Medrock
        OR '0020895037'.  " Promelsa
        SELECT SINGLE vbeln posnr parvw stcdt stcd1 stkzn                   "I-WMR-030216
          INTO ls_vbpa3                                                     "I-WMR-030216
          FROM vbpa3                                                        "I-WMR-030216
          WHERE vbeln EQ pi_vbrk-vbeln                                      "I-WMR-030216
            AND posnr EQ 0                                                  "I-WMR-030216
            AND parvw EQ gc_parvw_rg.                                       "I-WMR-030216

        READ TABLE lt_vbpa INTO lwa_vbpa
             WITH KEY vbeln = pi_vbrk-vbeln
                      parvw = gc_parvw_rg.
      WHEN OTHERS.
        SELECT SINGLE vbeln posnr parvw stcdt stcd1 stkzn                   "I-WMR-030216
          INTO ls_vbpa3                                                     "I-WMR-030216
          FROM vbpa3                                                        "I-WMR-030216
          WHERE vbeln EQ pi_vbrk-vbeln                                      "I-WMR-030216
            AND posnr EQ 0                                                  "I-WMR-030216
            AND parvw EQ gc_parvw_re.                                       "I-WMR-030216

        READ TABLE lt_vbpa INTO lwa_vbpa
             WITH KEY vbeln = pi_vbrk-vbeln
                      parvw = gc_parvw_re.
    ENDCASE.
*}  END OF REPLACE WMR-121015

*{  BEGIN OF REPLACE WMR-210116
    ""    READ TABLE lt_kna1 INTO lwa_kna1 WITH KEY kunnr = lwa_vbpa-kunnr.
    ""    CONCATENATE lwa_vbpa-name1 lwa_vbpa-name2 INTO pe_name12.

    ""    SELECT SINGLE name3 name4 INTO (lwa_kna1-name3, lwa_kna1-name4 )
    ""      FROM adrc
    ""      WHERE addrnumber = lwa_kna1-adrnr.
    READ TABLE lt_kna1 INTO lwa_kna1 WITH KEY kunnr = lwa_vbpa-kunnr.

    IF lwa_vbpa-adrnr IS NOT INITIAL.
      " Tomar de datos del documento actual
      SELECT SINGLE name1 name2 name3 name4
        INTO CORRESPONDING FIELDS OF lwa_kna1
        FROM adrc
        WHERE addrnumber EQ lwa_vbpa-adrnr.
    ENDIF.

*{  BEGIN OF INSERT WMR-111218-3000009765
    CASE gs_process-license.
      WHEN '0021061097'.  " CMH
        IF gs_process-s4core = abap_on.
          SELECT SINGLE l~customer b~partner b~type b~name_org1 b~name_org2 b~name_org3 b~name_org4
            INTO CORRESPONDING FIELDS OF ls_but000
            FROM cvi_cust_link AS l
            INNER JOIN but000 AS b ON ( l~partner_guid = b~partner_guid )
            WHERE l~customer = lwa_vbpa-kunnr
              AND b~type = '2'. " Organización
          IF sy-subrc = 0.
            lwa_kna1-name1 = ls_but000-name_org1.
            lwa_kna1-name2 = ls_but000-name_org2.
            lwa_kna1-name3 = ls_but000-name_org3.
            lwa_kna1-name4 = ls_but000-name_org4.
          ENDIF.
        ENDIF.
    ENDCASE.
*}  END OF INSERT WMR-111218-3000009765

    CONCATENATE lwa_kna1-name1 lwa_kna1-name2 INTO pe_name12.
*}  END OF REPLACE WMR-210116

    IF lwa_kna1-ktokd = gc_ktokd. "ZEMP
      CONCATENATE lwa_kna1-name2 lwa_kna1-name3 lwa_kna1-name4 INTO pe_name12 SEPARATED BY space.
    ELSE.
      CONCATENATE lwa_kna1-name1 lwa_kna1-name2 lwa_kna1-name3 lwa_kna1-name4 INTO pe_name12 SEPARATED BY space.
    ENDIF.

*{  BEGIN OF INSERT WMR-150915
    " En caso de persona física, concatenar los campos de nombres
    IF lwa_kna1-stkzn EQ abap_true
    OR ls_vbpa3-stkzn EQ abap_true.                                         "I-WMR-030216
*{  BEGIN OF REPLACE WMR-070217-3000006563
      ""      CASE gw_license.
      ""        WHEN '0020879177'   " Petramás
      ""          OR '0020886783'   " Pedregal
      ""          OR '0020886706'   " Pirámide
      ""          OR '0020758614'   " LSA
      ""          OR '0020744072'   " Medrock
      ""          OR '0020895037'.  " Promelsa
      ""          " NAME1 = Nombres y Apellidos Completos (si es que es suficiente el espacio)
      ""          " NAME2 = Apellidos Paternos
      ""          " NAME3 = Apellidos Maternos
      ""          " NAME4 = Nombres
      ""          IF ( lwa_kna1-name2 IS INITIAL OR lwa_kna1-name3 IS INITIAL OR lwa_kna1-name4 IS INITIAL ).
      ""            pe_name12 = lwa_kna1-name1.
      ""          ELSE.
      ""            CONCATENATE lwa_kna1-name2 lwa_kna1-name3 lwa_kna1-name4
      ""              INTO pe_name12 SEPARATED BY space.
      ""          ENDIF.
      ""      ENDCASE.

      " NAME1 = Nombres y Apellidos Completos (si es que es suficiente el espacio)
      " NAME2 = Apellidos Paternos
      " NAME3 = Apellidos Maternos
      " NAME4 = Nombres
      IF ( lwa_kna1-name2 IS INITIAL OR lwa_kna1-name3 IS INITIAL OR lwa_kna1-name4 IS INITIAL ).
        pe_name12 = lwa_kna1-name1.
      ELSE.
        CONCATENATE lwa_kna1-name2 lwa_kna1-name3 lwa_kna1-name4
          INTO pe_name12 SEPARATED BY space.
      ENDIF.
*}  END OF REPLACE WMR-070217-3000006563
    ENDIF.
*}  END OF INSERT WMR-150915

*{  BEGIN OF REPLACE WMR-090715
    ""    IF pi_vbrk-fkart IN ltr_fkart.
    IF pi_vbrk-zz_check_expor EQ abap_true.
*}  END OF REPLACE WMR-090715
      SELECT SINGLE lcnum
      FROM vbkd
      INTO lv_lcnum
      WHERE vbeln EQ pi_vbrk-zz_vbeln.
      IF sy-subrc EQ 0.
        lv_name = lv_lcnum.
        lv_texto = me->get_text( pi_name   = lv_name
                                 pi_id     = 'Z13'
                                 pi_object = 'AKKP' ).
        IF lv_texto IS NOT INITIAL.
          CONDENSE lv_texto.
          pe_name12 = lv_texto.
        ENDIF.
      ENDIF.
    ENDIF.

*   Tipo y número de documento de identidad del adquiriente o usuario
    "Si es una cuenta de prodiverso
    IF lwa_kna1-xcpdk = abap_true.
      IF ls_vbpa3-stcd1 IS NOT INITIAL                                      "I-WMR-030216
      OR ls_vbpa3-stcdt IS NOT INITIAL.                                     "I-WMR-030216
        pe_stcd1  = ls_vbpa3-stcd1.                                         "I-WMR-030216
        pe_stcdt  = ls_vbpa3-stcdt.                                         "I-WMR-030216
      ELSE.                                                                 "I-WMR-030216
        pe_stcd1  = '99999999'.
        pe_stcdt  = '1'.
      ENDIF.                                                                "I-WMR-030216
    ELSE.
*{I-3000010993-NTP020119
      "Si es exportación y austral
      IF pi_vbrk-zz_check_expor EQ abap_true AND gw_license = '0020729594'.  "Austral
        pe_stcd1  = lwa_kna1-kunnr.
        pe_stcdt  = lwa_kna1-stcdt.
      ELSE.
*}I-3000010993-NTP020119
        "Si es persona fisica
        pe_stcd1  = lwa_kna1-stcd1.
        pe_stcdt  = lwa_kna1-stcdt.
      ENDIF.
*{  BEGIN OF REPLACE WMR-090715
      ""      IF pe_stcdt = 0.
      ""        pe_stcd1  = lwa_vbpa-kunnr.      "Para exportaciones
      ""        pe_stcdt  = gc_char0.
      ""      ENDIF.
      " Si no tiene Identificación Fiscal y es Exportación, colocar "-"
      IF  pe_stcd1 IS INITIAL
      AND pi_vbrk-zz_check_expor EQ abap_true.
        pe_stcd1  = abap_undefined.
*{I-3000011108-NTP230219
        " Si tiene Identificacion Fiscal y es Exportación, colocar "B"
      ELSEIF pe_stcd1 IS NOT INITIAL
      AND pi_vbrk-zz_check_expor EQ abap_true
      AND pi_vbrk-zz_check_anticp EQ abap_true.
        pe_stcdt = 'B'.
*}I-3000011108-NTP230219
      ENDIF.
*}  END OF REPLACE WMR-090715
    ENDIF.

*{  BEGIN OF DELETE WMR-040815
    ""*{  BEGIN OF INSERT WMR-150715
    ""    " Para Transferencia Gratuita de Exportación
    ""    " enviar '-' en Tipo y Número documento del Cliente
    ""    IF  pi_vbrk-zz_check_expor  EQ abap_true
    ""    AND pi_vbrk-zz_check_tg     EQ abap_true.
    ""      pe_stcd1  = abap_undefined.
    ""      pe_stcdt  = abap_undefined.
    ""    ENDIF.
    ""*}  END OF INSERT WMR-150715
*}  END OF DELETE WMR-040815

*CASO AUSTRAL
*    IF lwa_kna1-xcpdk = abap_true.
*      pe_stcd1  = '99999999'.
*      pe_stcdt  = '1'.
*    ELSEIF pi_vbrk-kalsm IN ltr_kalsm_e.
*      pe_stcd1  = lwa_vbpa-kunnr.      "Para exportaciones
*      pe_stcdt  = gc_char0.
*    ELSE.
*      pe_stcd1  = lwa_kna1-stcd1.
*      pe_stcdt  = lwa_kna1-stcdt.
*    ENDIF.

*   Dirección en el país del adquiriente o lugar de destino
    IF pi_tipdoc = gc_tipdoc_bl.
      READ TABLE lt_adrc INTO lwa_adrc WITH KEY addrnumber = lwa_vbpa-adrnr.
      IF sy-subrc = 0.
        CONCATENATE lwa_adrc-street
                    lwa_adrc-house_num1
                    lwa_adrc-str_suppl1
                    lwa_adrc-city1
                    lwa_adrc-bezei
                    lwa_adrc-city2
                   INTO pe_dirpaisadq SEPARATED BY '-'.
        CONDENSE pe_dirpaisadq.
        TRANSLATE pe_dirpaisadq TO UPPER CASE.
        REPLACE ALL OCCURRENCES OF REGEX '----' IN pe_dirpaisadq WITH '-'.
        REPLACE ALL OCCURRENCES OF REGEX '---' IN pe_dirpaisadq WITH '-'.
        REPLACE ALL OCCURRENCES OF REGEX '--' IN pe_dirpaisadq WITH '-'.
        lv_length = strlen( pe_dirpaisadq ).
        lv_length = lv_length - 1.
        IF pe_dirpaisadq+lv_length(1) = '-'.
          pe_dirpaisadq = pe_dirpaisadq(lv_length).
        ENDIF.
      ENDIF.
    ENDIF.

    IF gs_process-license EQ '0020316164'. "Modasa                "I-PBM090419-3000011108
      IF pe_name12(1) = space.                                    "I-PBM090419-3000011108
        pe_name12 = pe_name12+1.                                  "I-PBM090419-3000011108
      ENDIF.                                                      "I-PBM090419-3000011108
    ENDIF.                                                        "I-PBM090419-3000011108

  ENDMETHOD.                    "get_adquir_header


  METHOD get_afecigv_item.

    TYPES: BEGIN OF ly_vbrk,
             vbeln  TYPE vbeln_vf,
             fkart  TYPE fkart,
             kunrg  TYPE vbrk-kunrg,                                      "I-WMR-300615
             land1  TYPE vbrk-land1,                                      "I-WMR-300615
             landtx TYPE vbrk-landtx,                                     "I-WMR-300615
           END OF   ly_vbrk.

    DATA: ls_kna1t      TYPE         ty_kna1,
          ls_vbak       TYPE         lty_vbak,
          ls_vbak_01    TYPE         lty_vbak,
          ls_vbap       TYPE         ty_vbap,
          ls_vbrk       TYPE         ly_vbrk,
          ls_vbrk_ref   TYPE LINE OF ltt_vbrk,                            "I-WMR-300615
          ls_catahomo07 LIKE LINE OF lt_catahomo07,
          lw_factu      TYPE         vbeln.

******************************
*   Carga datos
******************************

*   Ubicamos Grupo de ctas.deudor
    SELECT SINGLE kunnr ktokd stcdt
      INTO CORRESPONDING FIELDS OF ls_kna1t
      FROM kna1
      WHERE kunnr = pi_vbrk-kunrg.

*   Ubica AUGRU
*{  BEGIN OF REPLACE WMR-230218-3000009148
    ""    SELECT SINGLE vbeln augru xblnr zuonr
    ""    INTO ls_vbak
    SELECT SINGLE vbeln augru xblnr zuonr auart bukrs_vf
                  vgtyp vgbel                                         "I-PBM 300620-3000014304
      INTO CORRESPONDING FIELDS OF ls_vbak
*}  END OF REPLACE WMR-230218-3000009148
    FROM vbak
    WHERE vbeln = pi_vbrp-aubel.

*   Ubica Factura
    SELECT SINGLE vbeln posnr vgbel vgpos
    INTO ls_vbap
    FROM vbap
    WHERE vbeln = pi_vbrp-aubel.
    IF sy-subrc = 0.
*{  BEGIN OF REPLACE WMR-300615
      ""      SELECT SINGLE vbeln fkart
      ""      INTO ls_vbrk
      ""      FROM vbrk
      ""      WHERE vbeln = ls_vbap-vgbel.
      ""      IF sy-subrc <> 0.
      ""        SELECT SINGLE vbeln fkart
      ""        FROM vbrk
      ""        INTO ls_vbrk
      ""        WHERE xblnr = ls_vbak-xblnr.
      ""      ENDIF.

      SELECT SINGLE vbeln fkart kunrg land1 AS land1_vbrk landtx AS landtx_vbrk
        INTO CORRESPONDING FIELDS OF ls_vbrk_ref
        FROM vbrk
        WHERE vbeln EQ ls_vbap-vgbel.
      IF sy-subrc NE 0.
        SELECT SINGLE vbeln fkart kunrg land1 AS land1_vbrk landtx AS landtx_vbrk
          INTO CORRESPONDING FIELDS OF ls_vbrk_ref
          FROM vbrk
          WHERE xblnr EQ ls_vbak-xblnr
            AND bukrs EQ ls_vbak-bukrs_vf.                                    "I-WMR-230218-3000009148
      ENDIF.
      IF sy-subrc EQ 0.
        ls_vbrk_ref-zz_check_expor = determine_single_export( ls_vbrk_ref ).
      ENDIF.
*}  END OF REPLACE WMR-300615
    ENDIF.

*   Rango Clases de Factura Exportacion
    REFRESH ltr_fkart.
    LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '1' AND zz_opcion02 = '0'.
      lwa_fkart-low = lwa_constfkart-fkart.
      lwa_fkart-sign = 'I'.
      lwa_fkart-option = 'EQ'.
      APPEND lwa_fkart TO ltr_fkart.
    ENDLOOP.

******************************
*   Validaciones para Facturas
******************************

*   Validar si es Factura Exportacion
    IF pi_tipdoc = gc_tipdoc_fa.
*{  BEGIN OF REPLACE WMR-300615
      ""      IF ( pi_vbrk-fkart IN ltr_fkart[] ) AND ( ltr_fkart[] IS NOT INITIAL ) AND ( ls_kna1t-stcdt = 0 ).
      IF pi_vbrk-zz_check_expor EQ abap_true.
*}  END OF REPLACE WMR-300615
*{I-290120-NTP-3000013748
        READ TABLE lt_catahomo07 INTO ls_catahomo07
             WITH TABLE KEY taxm1 = pi_vbrp-taxm1
                            augru = ls_vbak-augru.
        IF sy-subrc = 0.
          pe_afigv = ls_catahomo07-zz_codigo_sunat.
        ELSE.
*}I-290120-NTP-3000013748
          pe_afigv = gc_codafec3. "'40'.
        ENDIF.
      ENDIF.
    ENDIF.

*   Cuando es Factura o Boleta Local
    IF pi_tipdoc = gc_tipdoc_fa OR pi_tipdoc = gc_tipdoc_bl.
*   Caso Transferencia gratuita
*{  BEGIN OF REPLACE WMR-050615
      ""      REFRESH ltr_fkart.
      ""      LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '2' AND zz_opcion02 = ' '.
      ""        lwa_fkart-low = lwa_constfkart-fkart.
      ""        lwa_fkart-sign = 'I'.
      ""        lwa_fkart-option = 'EQ'.
      ""        APPEND lwa_fkart TO ltr_fkart.
      ""      ENDLOOP.
      ""      IF ( pi_vbrk-fkart IN ltr_fkart[] ) AND ltr_fkart[] IS NOT INITIAL.
      IF pi_vbrk-zz_check_tg EQ abap_true.
*}  END OF REPLACE WMR-050615
*{  BEGIN OF REPLACE WMR-061216-3000005346
        ""        READ TABLE lt_catahomo07 INTO ls_catahomo07 WITH KEY augru = ls_vbak-augru.
        READ TABLE lt_catahomo07 INTO ls_catahomo07
             WITH TABLE KEY taxm1 = pi_vbrp-taxm1
                            augru = ls_vbak-augru.
*}  END OF REPLACE WMR-061216-3000005346
*{I-3000010993-NTP050419
        IF sy-subrc <> 0.
          READ TABLE lt_catahomo07 INTO ls_catahomo07 WITH TABLE KEY taxm1 = space
                                                                     augru = ls_vbak-augru.
        ENDIF.
*}I-3000010993-NTP050419
        IF sy-subrc = 0.
          pe_afigv = ls_catahomo07-zz_codigo_sunat.
        ENDIF.
      ENDIF.
*{  BEGIN OF INSERT WMR-240615
      " Caso Facturacion IGV Exonerado
      IF pi_vbrp-afect_igv EQ gc_exoner_igv AND pe_afigv IS INITIAL.
        pe_afigv = gc_codafec4.
      ENDIF.
*}  END OF INSERT WMR-240615
*     Caso Facturacion IGV Inafecto
*{  BEGIN OF REPLACE WMR-080615
      ""      IF pi_vbrp-taxm1 = '0' AND pe_afigv IS INITIAL.
      IF pi_vbrp-afect_igv EQ gc_inafec_igv AND pe_afigv IS INITIAL.
*}  END OF REPLACE WMR-080615
        pe_afigv = gc_codafec2. "'30'.  "ACFARMA
*{  BEGIN OF INSERT WMR-240915
        " Si es posición bonificada
        IF pi_vbrp-zz_check_bonif EQ abap_true.
          pe_afigv = gc_codafec31.
        ENDIF.
*}  END OF INSERT WMR-240915
      ENDIF.
*     Si no cumple con ninguna valiacion
      IF pe_afigv IS INITIAL.
        pe_afigv = gc_codafec1. "'10'.
*{  BEGIN OF INSERT WMR-240915
        " Si es posición bonificada
        IF pi_vbrp-zz_check_bonif EQ abap_true.
          pe_afigv = gc_codafec15.
        ENDIF.
*}  END OF INSERT WMR-240915
      ENDIF.
    ENDIF.

******************************
*   Validaciones para NC y ND
******************************

    IF pi_tipdoc = gc_tipdoc_nc OR pi_tipdoc = gc_tipdoc_nd.
**{I-PBM190620-3000014304
      DATA: lw_augru TYPE vbak-augru.
      DATA: ls_vbrp TYPE vbrp.
      CASE gs_process-license.
        WHEN '0021131379'. " RESEMIN
          IF ls_vbak-vgtyp EQ 'M'.
            SELECT SINGLE * FROM vbrp
            INTO ls_vbrp
            WHERE vbeln EQ ls_vbak-vgbel.
            IF sy-subrc = 0.
              lw_augru = ls_vbrp-augru_auft.
            ENDIF.
          ENDIF.
        WHEN OTHERS.
          lw_augru = ls_vbak-augru.
      ENDCASE.
**}I-PBM190620-3000014304
*     NC, ND son de Facturas de Exportacion
*{  BEGIN OF REPLACE WMR-300615
      ""      IF ( ls_vbrk-fkart IN ltr_fkart[] ) AND ( ltr_fkart[] IS NOT INITIAL ) AND ( ls_kna1t-stcdt = 0 ).
      IF pi_vbrk-zz_check_expor EQ abap_true.
*}  END OF REPLACE WMR-300615
*{I-150620-NTP-3000014304
        READ TABLE lt_catahomo07 INTO ls_catahomo07
             WITH TABLE KEY taxm1 = pi_vbrp-taxm1
*                            augru = ls_vbak-augru.                           "D-PBM190620-3000014304
                            augru = lw_augru.                                 "I-PBM190620-3000014304
        IF sy-subrc = 0.
          pe_afigv = ls_catahomo07-zz_codigo_sunat.
        ELSE.
*}I-150620-NTP-3000014304
          pe_afigv = gc_codafec3. "'40'.
        ENDIF.
      ENDIF.
*     Cuando las NC, ND son de Boletas
      REFRESH ltr_fkart.
      LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '9' AND zz_opcion02 = '4'.
        lwa_fkart-low = lwa_constfkart-fkart.
        lwa_fkart-sign = 'I'.
        lwa_fkart-option = 'EQ'.
        APPEND lwa_fkart TO ltr_fkart.
      ENDLOOP.

*{I-070521-NTP-3000016455
      IF gw_license = '0020262397'. "Artesco
        IF pi_vbrk-zz_check_tg EQ abap_true.
          READ TABLE lt_catahomo07 INTO ls_catahomo07
               WITH TABLE KEY taxm1 = pi_vbrp-taxm1
                              augru = ls_vbak-augru.
          IF sy-subrc = 0.
            pe_afigv = ls_catahomo07-zz_codigo_sunat.
          ENDIF.
        ENDIF.
      ENDIF.
*}I-070521-NTP-3000016455

*     Exonerados
*{  BEGIN OF INSERT WMR-240615
      " Caso Facturacion IGV Exonerado
      IF pi_vbrp-afect_igv EQ gc_exoner_igv AND pe_afigv IS INITIAL.
        pe_afigv = gc_codafec4.
      ENDIF.
*}  END OF INSERT WMR-240615
*{  BEGIN OF REPLACE WMR-080615
      ""      IF pi_vbrp-taxm1 = '0' AND pe_afigv IS INITIAL.
      IF pi_vbrp-afect_igv EQ gc_inafec_igv AND pe_afigv IS INITIAL.
*}  END OF REPLACE WMR-080615
        pe_afigv = gc_codafec2."'30'.
*{  BEGIN OF INSERT WMR-240915
        " Si es posición bonificada
        IF pi_vbrp-zz_check_bonif EQ abap_true.
          pe_afigv = gc_codafec31.
        ENDIF.
*}  END OF INSERT WMR-240915
      ENDIF.
*     Otros
      IF pe_afigv IS INITIAL.
        pe_afigv = gc_codafec1."'10'.
*{  BEGIN OF INSERT WMR-240915
        " Si es posición bonificada
        IF pi_vbrp-zz_check_bonif EQ abap_true.
          pe_afigv = gc_codafec15.
        ENDIF.
*}  END OF INSERT WMR-240915
      ENDIF.
    ENDIF.

*{I-100920-NTP-3000014481
      CASE gs_ubl-zz_verubl.
        WHEN gc_verubl-ubl2_0.
          READ TABLE lt_cata05 INTO lwa_cata05 WITH KEY zz_opcion01 = '1'.
          IF sy-subrc = 0.
            pe_tributo = lwa_cata05-zz_codigo_sunat.
          ENDIF.
        WHEN gc_verubl-ubl2_1.
          READ TABLE lt_catahomo07 INTO lwa_catahomo07 WITH KEY taxm1 = pi_vbrp-taxm1
                                                                augru = pi_vbrp-augru_auft
                                                                zz_codigo_sunat = pe_afigv.
          IF lwa_catahomo07-zz_tributo IS NOT INITIAL.
            lwa_cata07-zz_tributo = lwa_catahomo07-zz_tributo.
          ELSE.
            READ TABLE lt_cata07 INTO lwa_cata07 WITH KEY zz_codigo_sunat = pe_afigv.
          ENDIF.
          IF sy-subrc = 0.
            pe_tributo = lwa_cata07-zz_tributo.
          ENDIF.
      ENDCASE.
*}I-100920-NTP-3000014481
  ENDMETHOD.                    "get_afecigv_item


  METHOD get_badi_object.
    DATA: l_classname TYPE string,
          l_badi      TYPE string,
          lo_obj      TYPE REF TO object.

    IMPORT l_badi = l_badi FROM MEMORY ID 'BADI'.
    IF l_badi IS INITIAL.
      SELECT SINGLE valor1 INTO l_badi FROM zostb_const_fe WHERE campo = 'BADI'.
      EXPORT l_badi = l_badi TO MEMORY ID 'BADI'.
    ENDIF.

    CONCATENATE i_classname '_' l_badi INTO l_classname.
    SELECT COUNT(*) FROM seoclass WHERE clsname = l_classname.
    IF sy-subrc = 0.
      CREATE OBJECT lo_obj TYPE (l_classname).
      co_obj ?= lo_obj.
    ELSE.
      CREATE OBJECT co_obj TYPE (i_classname).
    ENDIF.
  ENDMETHOD.


  METHOD get_cardes_val_condition.

    TYPES: BEGIN OF ty_cardes_glob,
             import TYPE zostb_docexposcd-zz_cargo,
             _base  TYPE zostb_docexposcd-zz_cargo_base,
**             _pct   TYPE char6,                                                     "E-WMR-03092021-3000017707
             _pct   TYPE zostb_docexposcd-zz_cargo_pct,                             "I-WMR-03092021-3000017707
             _com   TYPE zostb_docexposcd-zz_cargo_com,
             _nabi  TYPE zostb_docexposcd-zz_nabi,                                  "I-280921-NTP-3000017358
           END OF ty_cardes_glob .

    DATA: lr_krech_pct TYPE RANGE OF konv-krech,
          lr_kherk     TYPE RANGE OF konv-kherk,
          ls_krech     LIKE LINE OF lr_krech_pct,
          ls_kherk     LIKE LINE OF lr_kherk.
    DATA: lt_cardes_i   TYPE ltt_cardes_val,
          lt_cardes_g   TYPE TABLE OF ty_cardes_glob,
          ls_cardes_g   LIKE LINE OF lt_cardes_g,
          ls_cardes_val LIKE LINE OF et_cardes_val.

    DATA: l_montobase    TYPE netwr,
          l_nivel_cardes TYPE char01,                                               "I-WMR-270619-3000012056
          l_nivel_cant   TYPE i.                                                    "I-280521-NTP-3000017101

    FIELD-SYMBOLS: <fs_cardes_val> LIKE LINE OF et_cardes_val.

*{I-080921-NTP-3000017358
    " En caso de NC/ND no se deben informar descuentos
    CASE i_tipdoc.
      WHEN gc_tipdoc_nc
        OR gc_tipdoc_nd.
        EXIT.
    ENDCASE.
*}I-080921-NTP-3000017358

    "Origen Posición
    IF i_global = abap_off.
      CONCATENATE 'EEQ' gc_chard INTO ls_krech. APPEND ls_krech TO lr_kherk.
      CONCATENATE 'EEQ' gc_charg INTO ls_krech. APPEND ls_krech TO lr_kherk.

      "Validación de incongruencia
    ELSE.
      "Origen Cabecera
      CONCATENATE 'IEQ' gc_chard INTO ls_krech. APPEND ls_krech TO lr_kherk.
      CONCATENATE 'IEQ' gc_charg INTO ls_krech. APPEND ls_krech TO lr_kherk.
    ENDIF.

*{  BEGIN OF DELETE WMR-270619-3000012056
**    "Validación de incongruencia
**    LOOP AT lt_konvv INTO lwa_konv WHERE knumv EQ i_knumv
**                                     AND kposn EQ i_posnr
**                                     AND kherk NOT IN lr_kherk
**                                     AND kschl IN ltr_kschl
**                                     AND kstat EQ space.
**      MESSAGE e000 WITH 'Validar, Error de aplicación de clase de condición'.
**    ENDLOOP.
*}  END OF DELETE WMR-270619-3000012056

*{  BEGIN OF INSERT WMR-270619-3000012056
    " Nivel de Cargo/ Descuento
    IF i_global = abap_off.
      l_nivel_cardes = gc_chari.  " Item
    ELSE.
      l_nivel_cardes = gc_charg.  " Global
    ENDIF.
*}  END OF INSERT WMR-270619-3000012056

    "Regla de calculo - Porcentaje
    CONCATENATE 'IEQ' gc_chara INTO ls_krech. APPEND ls_krech TO lr_krech_pct.


    LOOP AT lt_konvv INTO lwa_konv WHERE knumv EQ i_knumv
                                     AND kposn EQ i_posnr
*                                     AND kherk IN lr_kherk   "E-280521-NTP-3000017101
                                     AND kschl IN ltr_kschl
                                     AND kstat EQ space.

      CHECK lwa_konv-kwert IS NOT INITIAL.

*{I-280521-NTP-3000017101
      "Validar nivel
      CLEAR l_nivel_cant.
      LOOP AT lt_catahomo53 INTO lwa_catahomo53 WHERE kschl = lwa_konv-kschl.
        ADD 1 TO l_nivel_cant.
      ENDLOOP.
      IF l_nivel_cant = 1 AND lwa_catahomo53-zz_nivel IS NOT INITIAL.
        CHECK lwa_catahomo53-zz_nivel EQ l_nivel_cardes.
      ELSE.
        CHECK lwa_konv-kherk IN lr_kherk.
      ENDIF.
*}I-280521-NTP-3000017101

      "Importe y CodSunat
      ls_cardes_val-import = abs( lwa_konv-kwert ).                                     "Importe
      CLEAR lwa_catahomo53.
      READ TABLE lt_catahomo53 INTO lwa_catahomo53 WITH KEY kschl = lwa_konv-kschl
                                                            zz_nivel = l_nivel_cardes.  "I-WMR-270619-3000012056
      IF sy-subrc <> 0.                                                                 "I-WMR-270619-3000012056
        READ TABLE lt_catahomo53 INTO lwa_catahomo53 WITH KEY kschl = lwa_konv-kschl    "I-WMR-270619-3000012056
                                                              zz_nivel = space.         "I-WMR-270619-3000012056
      ENDIF.                                                                            "I-WMR-270619-3000012056
      IF sy-subrc = 0.
        ls_cardes_val-_com = lwa_catahomo53-zz_codigo_sunat.                            "CodSunat
*{I-020920-NTP-3000014481
        READ TABLE lt_cata53 INTO ls_cata53 WITH KEY zz_codigo_sunat = lwa_catahomo53-zz_codigo_sunat.
        IF sy-subrc = 0.
          ls_cardes_val-_nabi = ls_cata53-zz_nabi.
        ENDIF.
*}I-020920-NTP-3000014481
      ENDIF.

*{  BEGIN OF DELETE WMR-160819-3000010823
**      "Tipo de descuento por %
**      IF lwa_konv-krech IN lr_krech_pct.
**        l_montobase = lwa_konv-kawrt.                                                   "Base
**        ls_cardes_val-_pct = abs( lwa_konv-kbetr ) / 10.                                "Porcentaje
**      ENDIF.
*}  END OF DELETE WMR-160819-3000010823
*{I-100921-NTP-3000017750
      IF ( gw_license = '0020311006' OR "AIB
           gw_license = '0020863116' )  "AIB CLOUD
        AND i_global IS NOT INITIAL AND i_check_expor IS NOT INITIAL.
        READ TABLE lt_cardes_g WITH KEY _com = ls_cardes_val-_com TRANSPORTING NO FIELDS.
        IF sy-subrc <> 0.
          ls_cardes_val-_base = i_kzwi1.
        ENDIF.
      ELSE.
*}I-100921-NTP-3000017750
*{I-020921-NTP-3000017358
        CASE lwa_konv-krech.
          WHEN 'C'  "Base es cantidad
            OR 'E'  " Peso                                                                    "I-WMR-07092021-3000016539
            OR 'B'. " Importe fijo                                                            "I-280921-NTP-3000017358
            " Base: Neto +- cardes, TODO
            IF lwa_catahomo53-zz_cargo_check IS NOT INITIAL.
              ls_cardes_val-_base = i_netwr - ls_cardes_val-import.
            ELSE.
              ls_cardes_val-_base = i_netwr + ls_cardes_val-import.
            ENDIF.
          WHEN OTHERS.
*}I-020921-NTP-3000017358
            " Base: Se informa la base así el tipo de descuento no sea %                      "I-WMR-160819-3000010823
            ls_cardes_val-_base = abs( lwa_konv-kawrt ).                                      "I-WMR-160819-3000010823
        ENDCASE.
      ENDIF.

      IF i_global = abap_off.
        " Base: Caso varios cardes se toma la base del primer cardes                      "I-170921-NTP-3000017358
        READ TABLE lt_cardes_i WITH KEY _com = ls_cardes_val-_com TRANSPORTING NO FIELDS. "I-170921-NTP-3000017358
        IF sy-subrc = 0. CLEAR ls_cardes_val-_base. ENDIF.                                "I-170921-NTP-3000017358
        COLLECT ls_cardes_val INTO lt_cardes_i.
      ELSE.
        " Base: Caso varios cardes se toma la base del primer cardes                      "I-170921-NTP-3000017358
        READ TABLE lt_cardes_g WITH KEY _com = ls_cardes_val-_com TRANSPORTING NO FIELDS. "I-170921-NTP-3000017358
        IF sy-subrc = 0. CLEAR ls_cardes_val-_base. ENDIF.                                "I-170921-NTP-3000017358
        MOVE-CORRESPONDING ls_cardes_val TO ls_cardes_g.
        COLLECT ls_cardes_g INTO lt_cardes_g.
      ENDIF.

      CLEAR ls_cardes_val.
    ENDLOOP.


    "Totalizar
    LOOP AT lt_cardes_i INTO ls_cardes_val.
      APPEND ls_cardes_val TO et_cardes_val.
    ENDLOOP.
    LOOP AT lt_cardes_g INTO ls_cardes_g.
      MOVE-CORRESPONDING ls_cardes_g TO ls_cardes_val.
      APPEND ls_cardes_val TO et_cardes_val.
    ENDLOOP.


*{  BEGIN OF DELETE WMR-160819-3000010823
**    "Actualizar monto base descuentos de %
**    LOOP AT et_cardes_val ASSIGNING <fs_cardes_val> WHERE _pct IS NOT INITIAL.
**      <fs_cardes_val>-_base = l_montobase.
**    ENDLOOP.
*}  END OF DELETE WMR-160819-3000010823

    " Actualizar Porcentaje a informar: Importe / Base                                  "I-WMR-160819-3000010823
    LOOP AT et_cardes_val ASSIGNING <fs_cardes_val> WHERE _base <> 0.                   "I-WMR-160819-3000010823
      IF i_global = abap_off.                                                           "I-130720-NTP-3000014590
        <fs_cardes_val>-_pct = <fs_cardes_val>-import / <fs_cardes_val>-_base.          "I-WMR-160819-3000010823
      ENDIF.
    ENDLOOP.                                                                            "I-WMR-160819-3000010823

  ENDMETHOD.


  METHOD get_cargoglo_item.

    DATA: lr_excl  TYPE RANGE OF konv-kschl,
          ls_const LIKE LINE OF lt_const.

    DATA: lt_cardes_val TYPE ltt_cardes_val,
          ls_cardes_val LIKE LINE OF lt_cardes_val,
          ls_cardes     LIKE LINE OF et_cardes,
          l_global      TYPE xfeld.

    l_global = abap_on.

    REFRESH ltr_kschl.
    LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '4' AND zz_opcion02 = ''.
      lwa_kschl-low = lwa_constakonv-kschl.
      lwa_kschl-sign = 'I'.
      lwa_kschl-option = 'EQ'.
      APPEND lwa_kschl TO ltr_kschl.
    ENDLOOP.

    CASE gs_process-license.
      WHEN '0020316164'.  " Modasa
        " Para Ventas Nacionales no tomar Flete
        IF is_vbrk-zz_tip_ope EQ gc_tipop_01
        OR is_vbrk-zz_tip_ope EQ gc_tipop_0101. " En UBL 2.1
          " Clases de condición a excluir de Fletes
          LOOP AT lt_const INTO ls_const.
            CASE ls_const-campo.
              WHEN 'VTANACEC'.
                CLEAR lwa_kschl.
                lwa_kschl-sign   = ls_const-signo.
                lwa_kschl-option = ls_const-opcion.
                lwa_kschl-low    = ls_const-valor1.
                lwa_kschl-high   = ls_const-valor2.
                APPEND lwa_kschl TO lr_excl.
            ENDCASE.
          ENDLOOP.
          IF lr_excl[] IS NOT INITIAL.
            DELETE ltr_kschl WHERE low IN lr_excl.
          ENDIF.
        ENDIF.
    ENDCASE.

    IF ltr_kschl[] IS NOT INITIAL. "I-140521-NTP-3000016163

      get_cardes_val_condition(
        EXPORTING
          i_knumv = is_vbrk-knumv
          i_posnr = ip_posnr
          i_global = l_global
          i_tipdoc = i_tipdoc                       "I-080921-NTP-3000017358
          i_netwr = i_netwr                         "I-020921-NTP-3000017358
          i_kzwi1 = i_kzwi1                         "I-100921-NTP-3000017750
          i_check_expor = i_check_expor             "I-100921-NTP-3000017750
        IMPORTING
          et_cardes_val = lt_cardes_val ).

      LOOP AT lt_cardes_val INTO ls_cardes_val.
*{+010922-NTP-3000019741
        IF i_check_tg = abap_on OR i_check_bonif = abap_on.
          ADD ls_cardes_val-import TO e_tcargo_gratuito.
        ELSE.
*}+010922-NTP-3000019741
          ls_cardes-cargo = ls_cardes_val-import.
          ls_cardes-cargo_com = ls_cardes_val-_com.
          ls_cardes-cargo_pct = ls_cardes_val-_pct.
          ls_cardes-cargo_base = ls_cardes_val-_base.
*{I-020920-NTP-3000014481
          ls_cardes-nabi       = ls_cardes_val-_nabi.

          IF ls_cardes-nabi = abap_on.
            ADD ls_cardes-cargo TO e_cargosglob_nabi.
          ELSE.
            ADD ls_cardes-cargo TO e_cargosglob_sabi.
          ENDIF.
*}I-020920-NTP-3000014481
          APPEND ls_cardes TO et_cardes.
        ENDIF.
      ENDLOOP.
    ENDIF.

  ENDMETHOD.


  METHOD get_cargos_item. "CARDES "get_cargos_item

    DATA: lr_excl  TYPE RANGE OF konv-kschl,                                 "I-WMR-020217-3000006528
          ls_const LIKE LINE OF lt_const.                                    "I-WMR-020217-3000006528

    "CLEAR pe_cargostot_nabi.                   "E-070920-NTP-3000014481
    CLEAR: e_cargosxite_sabi, e_cargosxite_nabi. "I-070920-NTP-3000014481

* Armar rango
    REFRESH ltr_kschl.
    LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '4' AND zz_opcion02 = ''.
      lwa_kschl-low = lwa_constakonv-kschl.
      lwa_kschl-sign = 'I'.
      lwa_kschl-option = 'EQ'.
      APPEND lwa_kschl TO ltr_kschl.
    ENDLOOP.

    CASE gw_license.                                                          "I-WMR-020217-3000006528
      WHEN '0020316164'.  " Modasa                                            "I-WMR-020217-3000006528
        " Para Ventas Nacionales no tomar Flete                               "I-WMR-020217-3000006528
        IF is_vbrk-zz_tip_ope EQ gc_tipop_01                                  "I-WMR-020217-3000006528
        OR is_vbrk-zz_tip_ope EQ gc_tipop_0101. " En UBL 2.1                  "I-WMR-040419-3000011108
          " Clases de condición a excluir de Fletes                           "I-WMR-020217-3000006528
          LOOP AT lt_const INTO ls_const.                                     "I-WMR-020217-3000006528
            CASE ls_const-campo.                                              "I-WMR-020217-3000006528
              WHEN 'VTANACEC'.                                                "I-WMR-020217-3000006528
                CLEAR lwa_kschl.                                              "I-WMR-020217-3000006528
                lwa_kschl-sign   = ls_const-signo.                            "I-WMR-020217-3000006528
                lwa_kschl-option = ls_const-opcion.                           "I-WMR-020217-3000006528
                lwa_kschl-low    = ls_const-valor1.                           "I-WMR-020217-3000006528
                lwa_kschl-high   = ls_const-valor2.                           "I-WMR-020217-3000006528
                APPEND lwa_kschl TO lr_excl.                                  "I-WMR-020217-3000006528
            ENDCASE.                                                          "I-WMR-020217-3000006528
          ENDLOOP.                                                            "I-WMR-020217-3000006528
          IF lr_excl[] IS NOT INITIAL.                                        "I-WMR-020217-3000006528
            DELETE ltr_kschl WHERE low IN lr_excl.                            "I-WMR-020217-3000006528
          ENDIF.                                                              "I-WMR-020217-3000006528
        ENDIF.                                                                "I-WMR-020217-3000006528
    ENDCASE.                                                                  "I-WMR-020217-3000006528

* Calcular valor
    IF ltr_kschl[] IS NOT INITIAL.
**{E-3000011712-NTP030519: temporal hasta que se defina cargos y descuentos
*      LOOP AT lt_konvv INTO lwa_konv WHERE knumv EQ pi_knumv
*                                       AND kposn EQ pi_posnr
**{  BEGIN OF INSERT WMR-070319-3000010823
**                                       AND ( kherk NE gc_chard AND kherk NE gc_charg )  " Excluir Cargos de Cabecera
**}  END OF INSERT WMR-070319-3000010823
*                                       AND kschl IN ltr_kschl
*                                       AND kstat EQ space.                            "I-WMR-200417-3000007094
*        pe_cargostot_nabi = pe_cargostot_nabi + lwa_konv-kwert.
*      ENDLOOP.
**}E-3000011712-NTP030519

*{I-3000011712-NTP170419
      DATA: lt_cardes_val TYPE ltt_cardes_val,
            ls_cardes_val LIKE LINE OF lt_cardes_val,
            ls_cardes     LIKE LINE OF et_cardes.

      get_cardes_val_condition(
        EXPORTING
          i_knumv = pi_knumv
          i_posnr = pi_posnr
          i_tipdoc = i_tipdoc                       "I-080921-NTP-3000017358
          i_netwr = i_netwr                         "I-020921-NTP-3000017358
          i_kzwi1 = i_kzwi1                         "I-100921-NTP-3000017750
          i_check_expor = i_check_expor             "I-100921-NTP-3000017750
        IMPORTING
          et_cardes_val = lt_cardes_val ).

      LOOP AT lt_cardes_val INTO ls_cardes_val.
*{+010922-NTP-3000019741
        IF i_check_tg = abap_on OR i_check_bonif = abap_on.
          ADD ls_cardes_val-import TO e_tcargo_gratuito.
        ELSE.
*}+010922-NTP-3000019741
          "pe_cargostot_nabi = pe_cargostot_nabi + ls_cardes_val-import. "E-070920-NTP-3000014481
          ls_cardes-cargo = ls_cardes_val-import.
          ls_cardes-cargo_com = ls_cardes_val-_com.
          ls_cardes-cargo_pct = ls_cardes_val-_pct.
          ls_cardes-cargo_base = ls_cardes_val-_base.
*{I-020920-NTP-3000014481
          ls_cardes-nabi       = ls_cardes_val-_nabi.

          IF ls_cardes-nabi = abap_on.
            ADD ls_cardes-cargo TO e_cargosxite_nabi.
          ELSE.
            ADD ls_cardes-cargo TO e_cargosxite_sabi.
          ENDIF.
*}I-020920-NTP-3000014481
          APPEND ls_cardes TO et_cardes.
        ENDIF.
      ENDLOOP.
*}I-3000011712-NTP170419
    ENDIF.

  ENDMETHOD.                    "get_cargos_item


  METHOD get_certificates_export_by_pos.

    DATA: l_length  TYPE i,
*{  BEGIN OF REPLACE WMR-280417-3000007140
          ""          l_len_hts TYPE i  VALUE 6.
          l_len_hts TYPE i  VALUE 7.
*}  END OF REPLACE WMR-280417-3000007140

    CHECK is_vbrk-zz_check_expor EQ abap_true.

    " SID Number y Descripción
    get_sid_number( EXPORTING is_vbrp      = cs_vbrp
                    IMPORTING e_sid_number = cs_vbrp-zz_sid_number
                              e_sid_descr  = cs_vbrp-zz_sid_descr ).

    " FCE y FDA
    get_position_expcertif( EXPORTING is_vbrk = is_vbrk
                            CHANGING  cs_vbrp = cs_vbrp ).

    " Partida Arancelaria
    cs_vbrp-zz_part_ara   = get_partida_arancelaria( is_vbrk = is_vbrk
                                                     is_vbrp = cs_vbrp ).

    " Código Armonizado (HTS)
    l_length = strlen( cs_vbrp-zz_part_ara ).
    IF l_length GE l_len_hts.
      cs_vbrp-zz_codigo_hts = cs_vbrp-zz_part_ara(l_len_hts).
    ENDIF.

  ENDMETHOD.


  METHOD get_codigo_estab_sunat.

    DATA: select   TYPE TABLE OF edpline,
          sublist  TYPE edpline,
          from     TYPE string,
          where    TYPE string,

          ls_vbrp  LIKE LINE OF it_vbrp,                                            "I-WMR-180219-3000009765
          ls_const LIKE LINE OF lt_const,                                           "I-WMR-270319-3000010823

          lo_error TYPE REF TO cx_root.

    CLEAR r_taxjurcode2_ho.
    CLEAR: select, from, where.

    CASE gs_process-license.                                                        "I-PBM220119-3000011120
*{  BEGIN OF INSERT PBM220119-3000011120
      WHEN '0020886783' OR  "Pedregal                                               "I-PBM220119-3000011120
           '0020886706'.    "Piramide
        "De pila
        " 1.- SELECT
        CLEAR select. sublist = 'CODES'.
        APPEND sublist TO select.
        " 2.- FROM
        from = 'ZOSTB_CATALO_CE2'.
        " 3.- WHERE
        CONCATENATE 'BUKRS EQ IS_VBRK-BUKRS    AND'
                    'RGTNO EQ IS_VBRK-ZZ_RGTNO AND'
                    'INVTP EQ IS_VBRK-TFACT'
                    INTO where SEPARATED BY space.
*}  END OF INSERT PBM220119-3000011120

*{  BEGIN OF INSERT WMR-120219-3000011108
      WHEN '0020316164'. " Modasa
        "De canal de distribución
        " 1.- SELECT
        CLEAR select. sublist = 'CODES'.
        APPEND sublist TO select.
        " 2.- FROM
        from = 'ZOSFETB_ASGCODES'.
        " 3.- WHERE
        where = 'VTWEG EQ IS_VBRK-VTWEG'.
*}  END OF INSERT WMR-120219-3000011108

*{  BEGIN OF INSERT WMR-140219-3000009765
      WHEN '0021061097' " CMH
        OR '0020744072' " Medrock                        "I-PBM060319-3000011406
        OR '0020311006' " AIB                            "I-PBM070319-3000011466
        OR '0020863116'." AIB CLOUD
        READ TABLE it_vbrp INTO ls_vbrp INDEX 1.
        IF sy-subrc = 0.
          " 1- SELECT
          CLEAR select. sublist = 'ZZ_CODIGO_SUNAT'.
          APPEND sublist TO select.
          " 2.- FROM
          from = 'ZOSFETB_ASGCODES'.
          " 3.- WHERE
          where = 'WERKS EQ LS_VBRP-WERKS'.
        ENDIF.
*}  END OF INSERT WMR-140219-3000009765
      WHEN '0020673876'. "Beta
        "Del pto de expedición
        READ TABLE it_vbrp INTO ls_vbrp INDEX 1.
        IF sy-subrc = 0.
          SELECT SINGLE b~taxjurcode INTO r_taxjurcode2_ho
            FROM tvst AS a INNER JOIN adrc AS b ON a~adrnr = b~addrnumber
            WHERE a~vstel = ls_vbrp-vstel.
        ENDIF.

      WHEN '0020729594'. "Austral
        r_taxjurcode2_ho = is_cabsal-zz_taxjurcode2.

*{  BEGIN OF INSERT NTP220119-3000010993
      WHEN OTHERS.
        " 1.- SELECT
        CLEAR select. sublist = 'ZZ_CODIGO_SUNAT'.
        APPEND sublist TO select.
        " 2.- FROM
        from = 'ZOSTB_CATALO_CES'.
        " 3.- WHERE
        where = 'TAXJURCODE EQ IS_CABSAL-ZZ_TAXJURCODE2'.
*}  END OF INSERT NTP220119-3000010993
    ENDCASE.                                                                        "I-PBM220119-3000011120

*    CHECK select[] IS NOT INITIAL AND from IS NOT INITIAL AND where IS NOT INITIAL. "E-WMR-270319-3000010823
    IF ( select[] IS NOT INITIAL AND from IS NOT INITIAL AND where IS NOT INITIAL )."I-WMR-270319-3000010823
      TRY .
          SELECT SINGLE (select) INTO r_taxjurcode2_ho
            FROM (from)
            WHERE (where).
        CATCH cx_root INTO lo_error.
      ENDTRY.
    ENDIF.                                                                          "I-WMR-270319-3000010823

    " Tomar Código Establecimiento Sunat por defecto                                "I-WMR-270319-3000010823
    IF r_taxjurcode2_ho IS INITIAL.                                                 "I-WMR-270319-3000010823
      READ TABLE lt_const INTO ls_const WITH KEY campo = 'CES_DEFAUL'.              "I-WMR-270319-3000010823
      IF sy-subrc = 0.                                                              "I-WMR-270319-3000010823
        r_taxjurcode2_ho = ls_const-valor1.                                         "I-WMR-270319-3000010823
      ENDIF.                                                                        "I-WMR-270319-3000010823
    ENDIF.                                                                          "I-WMR-270319-3000010823

  ENDMETHOD.


  METHOD get_constants.

    DATA: lw_bukrs TYPE vbrk-bukrs,
          lw_fkdat TYPE vbrk-fkdat.
    DATA: ls_const      LIKE LINE OF lt_const,
          ls_cvers      TYPE cvers,                                                    "I-WMR-190918-3000009765
          ls_kalsm      LIKE LINE OF ltr_kalsm_e,                                      "I-NTP261218-3000010993
          l_active   TYPE datum.                                                    "I-270421-NTP-3000016091

    FIELD-SYMBOLS: <fs_const> LIKE LINE OF lt_const.                              "I-110620-NTP-300001460

*   Constantes
*{  BEGIN OF REPLACE WMR-231215
    SELECT SINGLE bukrs fkdat INTO (lw_bukrs, lw_fkdat)
      FROM vbrk
      WHERE vbeln = i_vbeln.
    IF lw_bukrs IS INITIAL.                                         "I-NTP-280416
      lw_bukrs = i_bukrs.                                           "I-NTP-280416
    ENDIF.                                                          "I-NTP-280416
    IF lw_bukrs IS NOT INITIAL.
      SELECT SINGLE * INTO gs_consextsun FROM zostb_consextsun WHERE bukrs = lw_bukrs.

*{  BEGIN OF INSERT WMR-080816-3000005361
      IF gs_consextsun-zz_paramruc IS INITIAL.  gs_consextsun-zz_paramruc = gc_party. ENDIF.
*}  END OF INSERT WMR-080816-3000005361

      SELECT * INTO TABLE lt_proxy FROM zostb_envwsfe WHERE bukrs = lw_bukrs.
    ENDIF.
*}  END OF REPLACE WMR-231215

*   Constantes por Campo
    SELECT *
    INTO TABLE lt_constfkart
    FROM zostb_constfkart.
    SELECT *
    INTO TABLE lt_constakonv
    FROM zostb_constakonv.
    SELECT *
    INTO TABLE lt_constpstyv
    FROM zostb_constpstyv.
    SELECT *
    INTO TABLE lt_constkdgrp
    FROM zostb_constkdgrp.
    SELECT *
    INTO TABLE lt_constauart
    FROM zostb_constauart.

*   Obtener tablas de catálogos
    SELECT *
    INTO CORRESPONDING FIELDS OF TABLE lt_cata01
    FROM zostb_catalogo01.
    SELECT msehi isocode
    INTO CORRESPONDING FIELDS OF TABLE lt_cata03
    FROM t006.
    SELECT *
    INTO CORRESPONDING FIELDS OF TABLE lt_cata05
    FROM zostb_catalogo05.
    SELECT *
    INTO CORRESPONDING FIELDS OF TABLE lt_catahomo06
    FROM zostb_catahomo06.

    SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_cata07 FROM zostb_catalogo07. "I-NTP191118-3000009651

    SELECT *
    INTO CORRESPONDING FIELDS OF TABLE lt_catahomo07
    FROM zostb_catahomo07.

    SELECT *
    INTO CORRESPONDING FIELDS OF TABLE lt_catahomo08
    FROM zostb_catahomo08.

    SELECT *
    INTO CORRESPONDING FIELDS OF TABLE lt_catahomo09
    FROM zostb_catahomo09.

    SELECT *
    INTO CORRESPONDING FIELDS OF TABLE lt_catahomo10
    FROM zostb_catahomo10.

    SELECT *
    INTO CORRESPONDING FIELDS OF TABLE lt_catahomo12
    FROM zostb_catahomo12.

    SELECT *                                                                  "I-WMR-020715
    INTO CORRESPONDING FIELDS OF TABLE lt_catahomo15                          "I-WMR-020715
    FROM zostb_catahomo15.                                                    "I-WMR-020715

    SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_catahomo51 FROM zostb_catahomo51.  " "I-WMR-070319-3000010853
    SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_catahomo53 FROM zostb_catahomo53.  " "I-WMR-070319-3000010853
    SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_catahomo54 FROM zostb_catahomo54.  " "I-WMR-070319-3000010853
    SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_catahomo59 FROM zostb_catahomo59.  " "I-WMR-260819-3000010853

    SELECT * INTO TABLE lth_asgtnhr                                               "I-WMR-121018-3000009765
      FROM zosfetb_asgtnhr.                                                       "I-WMR-121018-3000009765

    SELECT *
    INTO CORRESPONDING FIELDS OF TABLE lt_cata11
    FROM zostb_catalogo11.
    SELECT *
    INTO CORRESPONDING FIELDS OF TABLE lt_cata14
    FROM zostb_catalogo14.
    SELECT *
    INTO CORRESPONDING FIELDS OF TABLE lt_cata15
    FROM zostb_catalogo15.
    SELECT *
    INTO CORRESPONDING FIELDS OF TABLE lt_cata16
    FROM zostb_catalogo16.
    SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_cata17 FROM zostb_catalogo17.  "I-NTP230618-3000009651
    SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_cata52 FROM zostb_catalogo52.  "I-NTP230618-3000009651
    SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_cata53 FROM zostb_catalogo53.  "I-NTP230618-3000009651

    SELECT *                                                                  "I-WMR-200715
      INTO TABLE lt_proxy                                                     "I-WMR-200715
      FROM zostb_envwsfe.                                                     "I-WMR-200715

    SELECT * INTO TABLE lt_const
      FROM zostb_const_fe
    WHERE aplicacion EQ gc_aplic
      AND programa   EQ gc_prog.

    LOOP AT lt_const INTO ls_const.
      CASE ls_const-campo.
        WHEN 'LABOR'.
          gw_labor = ls_const-valor1.
        WHEN 'MATCTL'.
          gw_ctrol = ls_const-valor1.
        WHEN 'IGVP'.
          gw_igvporcent = ls_const-valor1.
        WHEN 'SINGRPOS'.                                                      "I-WMR-290515
          gw_sin_agrup_pos = ls_const-valor1.                                 "I-WMR-290515
        WHEN 'UNMEDSAP'.                                                      "I-WMR-190615
          gw_und_prnt_sap  = ls_const-valor1.                                 "I-WMR-190615
        WHEN 'PARVW_VEND'.                                                    "I-WMR-020216
          gw_parvw_ve   = ls_const-valor1.                                    "I-WMR-020216
        WHEN 'IMP_BOTG'.                                                      "I-WMR-051016-3000005856
          gw_imp_botg   = ls_const-valor1.                                    "I-WMR-051016-3000005856
        WHEN 'IMP_BOIGV'.                                                     "I-NTP051016-3000006891
          gw_imp_boigv  = ls_const-valor1.                                    "I-NTP051016-3000006891
*{I-3000010993-NTP261218
        WHEN 'KALSM_E'. "Esquema de Cálculo
          ls_kalsm-sign = ls_const-signo.
          ls_kalsm-option = ls_const-opcion.
          ls_kalsm-low = ls_const-valor1.
          ls_kalsm-high = ls_const-valor2.
          APPEND ls_kalsm TO ltr_kalsm_e.
*}I-3000010993-NTP261218
*{I-3000011120-NTP210219
        WHEN 'CUBSO_ACTI'.
          CONCATENATE ls_const-valor1+6(4)
                      ls_const-valor1+3(2)
                      ls_const-valor1+0(2) INTO zconst-cubso_f_active.
*}I-3000011120-NTP210219
*{I-270421-NTP-3000016091
        WHEN 'FPAGO_ACTI'.
          CONCATENATE ls_const-valor1+6(4)
                      ls_const-valor1+3(2)
                      ls_const-valor1+0(2) INTO l_active.
          IF sy-datum >= l_active.
            zconst-formapago_isactive = abap_on.
          ENDIF.
*}I-270421-NTP-3000016091
      ENDCASE.
    ENDLOOP.

*Rangos
    rs_status-sign   = 'I'.
    rs_status-option = 'EQ'.
    rs_status-low    = gc_statuscdr_0.
    APPEND rs_status TO ltr_status.

    rs_status-sign   = 'I'.
    rs_status-option = 'EQ'.
    rs_status-low    = gc_statuscdr_5.
    APPEND rs_status TO ltr_status.

    rs_status-sign   = 'I'.
    rs_status-option = 'EQ'.
    rs_status-low    = gc_statuscdr_6.
    APPEND rs_status TO ltr_status.

    rs_status-sign   = 'I'.
    rs_status-option = 'EQ'.
    rs_status-low    = gc_statuscdr_7.
    APPEND rs_status TO ltr_status.

    " Nro. Instalación Sap
    CALL FUNCTION 'SLIC_GET_LICENCE_NUMBER'
      IMPORTING
        license_number = gw_license.

*{I-NTP220618-3000009651
    SELECT * INTO TABLE lt_catacons FROM zosfetb_catacons.
    "Falta delimitar por fecha TODO
*}I-NTP220618-3000009651

*{I-3000010993-NTP271218
    IF lw_fkdat IS INITIAL.
      lw_fkdat = i_date.
    ENDIF.
    SELECT SINGLE * INTO gs_ubl
      FROM zosfetb_ubl
      WHERE tpproc EQ i_tpproc
        AND begda  LE lw_fkdat
        AND endda  GE lw_fkdat.
*}I-3000010993-NTP271218

*{  BEGIN OF INSERT WMR-190918-3000009765
    " N° Instalación Sap
    gs_process-license = gw_license.
    " Tabla Condiciones de Precios por Default: KONV
    gs_process-table_condpre = gc_tabname_konv.
    " Verificar sistema S/4 Hana
    SELECT SINGLE component release extrelease comp_type
      INTO CORRESPONDING FIELDS OF ls_cvers
      FROM cvers
      WHERE component = gc_component_s4core.
    IF sy-subrc = 0.
      gs_process-s4core = abap_on.
      " Tabla Condiciones de Precios para S/4 Hana: PRCD_ELEMENTS
      gs_process-table_condpre = gc_tabname_prcd_elements.
    ENDIF.
*}  END OF INSERT WMR-190918-3000009765

  ENDMETHOD.                    "get_constants


  METHOD get_custom_fields_to_vbrp.

    TYPES: BEGIN OF ty_vbrp_ci,
             vbeln        TYPE vbrp-vbeln,
             posnr        TYPE vbrp-posnr,
             zzkdmat_auft TYPE vbap-kdmat,
           END OF ty_vbrp_ci.

    DATA: lt_vbrp_or TYPE ltt_vbrp,
          lt_vbrp_ci TYPE HASHED TABLE OF ty_vbrp_ci WITH UNIQUE KEY vbeln posnr,
          ls_vbrp_ci TYPE ty_vbrp_ci,
          select     TYPE TABLE OF edpline,
          sublist    TYPE edpline,
          lo_error   TYPE REF TO cx_root.

    FIELD-SYMBOLS:
          <fs_vbrp>  TYPE lty_vbrp.

    lt_vbrp_or[] = ct_vbrp[].
    SORT lt_vbrp_or BY vbeln ASCENDING posnr ASCENDING.
    DELETE ADJACENT DUPLICATES FROM lt_vbrp_or COMPARING vbeln posnr.

    CHECK lt_vbrp_or[] IS NOT INITIAL.

    CLEAR select.
    sublist = 'VBELN'.
    APPEND sublist TO select.
    sublist = 'POSNR'.
    APPEND sublist TO select.

    CASE gw_license.
      WHEN '0020886783'.  "Pedregal
        sublist = 'ZZKDMAT_AUFT AS ZZKDMAT_AUFT'.
        APPEND sublist TO select.
        TRY .
            SELECT (select)
              INTO CORRESPONDING FIELDS OF TABLE lt_vbrp_ci
              FROM vbrp
              FOR ALL ENTRIES IN lt_vbrp_or
              WHERE vbeln EQ lt_vbrp_or-vbeln
                AND posnr EQ lt_vbrp_or-posnr.

          CATCH cx_root INTO lo_error.                   "#EC CATCH_ALL
            EXIT.
        ENDTRY.

        LOOP AT ct_vbrp ASSIGNING <fs_vbrp>.
          READ TABLE lt_vbrp_ci INTO ls_vbrp_ci
               WITH TABLE KEY vbeln = <fs_vbrp>-vbeln
                              posnr = <fs_vbrp>-posnr.
          IF sy-subrc EQ 0.
            MOVE-CORRESPONDING ls_vbrp_ci TO <fs_vbrp>.
          ENDIF.
        ENDLOOP.

    ENDCASE.

  ENDMETHOD.


  METHOD get_data.

    DATA: lt_lotno    TYPE HASHED TABLE OF   lty_lotno
                      WITH UNIQUE KEY lotno,
          lt_vbrp_dr  TYPE TABLE OF          lty_vbrp,
          lt_vbpa_aux TYPE STANDARD TABLE OF lty_vbpa,
          lwa_lotno   LIKE LINE OF           lt_lotno,
          lwa_vbrk    LIKE LINE OF           pe_vbrk,
          lwa_vbrp    TYPE                   lty_vbrp,
          lt_vbrp_aux TYPE STANDARD TABLE OF lty_vbrp.

    DATA: lw_lines TYPE i,
          lw_leng  TYPE i,
          lw_char  TYPE c,
          lw_letr  TYPE char36 VALUE '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'.

    DATA: lt_lips_aux  TYPE STANDARD TABLE OF lty_lips,
          lt_lips_02   TYPE STANDARD TABLE OF lty_lips,
          lt_likp_aux  TYPE STANDARD TABLE OF lty_likp,
          lt_kna1_aux  TYPE STANDARD TABLE OF ty_kna1,
          lt_t005u_aux TYPE STANDARD TABLE OF lty_t005u,
          lt_konv_aux  TYPE STANDARD TABLE OF lty_konv,
          lt_vbfa      TYPE STANDARD TABLE OF lty_xvbfa,                        "I-WMR-170815
          lt_vbrk1     TYPE STANDARD TABLE OF lty_vbrk,                         "I-WMR-170815
          lt_felog     TYPE STANDARD TABLE OF zostb_felog,                      "I-WMR-170815
          ls_idcn_loma TYPE idcn_loma,                                          "I-PBM230119-3000011120
          ls_felog     TYPE zostb_felog.                                        "I-WMR-170815

    DATA: ls_vbak LIKE LINE OF lt_vbak.
    DATA: ls_adr6 LIKE LINE OF lt_adr6.
    DATA: ls_t052 TYPE lty_t052.
    DATA: ls_likp TYPE lty_likp.
    DATA: ls_kna1 TYPE ty_kna1.
    DATA: ls_t005u TYPE lty_t005u.
    DATA: ls_lips_aux LIKE LINE OF lt_lips,
          ls_konv     TYPE         lty_konv,
          ls_matrix   TYPE         lty_matrix,
          ls_conkonv  LIKE LINE OF lt_constakonv.

    DATA: l_tipo   TYPE string,                                                   "I-WMR-190918-3000009765
          l_serie  TYPE string,                                                   "I-WMR-190918-3000009765
          l_sercor TYPE zostb_felog-zzt_numeracion.                               "I-WMR-190918-3000009765

    FIELD-SYMBOLS: <lfs_vbrk> LIKE LINE OF pe_vbrk.
    FIELD-SYMBOLS: <fs_kna1> LIKE LINE OF lt_kna1.
    FIELD-SYMBOLS: <fs_lips> LIKE LINE OF lt_lips.
    FIELD-SYMBOLS: <fs_vbrp> LIKE LINE OF pe_vbrp.

    DATA: lr_kschl TYPE RANGE OF kschl,
          rs_kschl LIKE LINE OF  lr_kschl.

*************************************************************************
*   Cabecera de Factura                                                 *
*************************************************************************

*   Datos VBRK
    SELECT a~bukrs a~vbeln a~fktyp a~fkart a~bukrs a~fkdat a~knumv a~taxk1 a~kunag a~netwr a~waerk a~kdgrp a~mwsbk a~spart
           a~zterm a~kalsm a~kunrg a~inco1 a~ktgrd b~butxt b~adrnr a~xblnr a~vkorg a~vtweg
           c~name1 c~name2 c~name3 c~cityp_code c~street c~house_num1 c~str_suppl1 c~city1 c~city2 c~tel_number c~country c~region
           AS zz_numeracion
*{  BEGIN OF INSERT WMR-261016-3000005766
           a~vbtyp
*}  END OF INSERT WMR-261016-3000005766
           a~land1  AS land1_vbrk                                                 "I-WMR-300615
           a~landtx AS landtx_vbrk                                                "I-WMR-300615
           a~inco2                                                                "I-WMR-100715
           a~exnum                                                                "I-WMR-230915
           a~bzirk                                                                "I-WMR-020216
           a~ernam                                                                "I-WMR-241116-3000005346
           a~zlsch                                                                "I-WMR-280417-3000007140
    INTO CORRESPONDING FIELDS OF TABLE pe_vbrk
    FROM ( vbrk AS a INNER JOIN t001 AS b ON a~bukrs = b~bukrs )
                LEFT OUTER JOIN adrc AS c ON b~adrnr = c~addrnumber
    WHERE vbeln EQ gw_vbeln.
    IF sy-subrc NE 0.
      pe_error = abap_true.
      EXIT.
    ENDIF.

    IF is_options-noverif_xblnr EQ abap_false.                                "I-WMR-121016-3000003932
*     Filtro por Lotno
      SELECT lotno
      INTO TABLE lt_lotno
      FROM zostb_lotno.
      LOOP AT pe_vbrk ASSIGNING <lfs_vbrk>.
*        READ TABLE lt_lotno INTO lwa_lotno WITH TABLE KEY lotno = <lfs_vbrk>-xblnr+4(4).  "E-WMR-190918-3000009765
        split_xblnr( EXPORTING i_xblnr  = <lfs_vbrk>-xblnr                        "I-WMR-190918-3000009765
                     IMPORTING e_serie  = l_serie                                 "I-WMR-190918-3000009765
                               e_sercor = l_sercor ).                             "I-WMR-190918-3000009765
        READ TABLE lt_lotno INTO lwa_lotno WITH TABLE KEY lotno = l_serie.        "I-WMR-190918-3000009765
        IF sy-subrc NE 0.
          CLEAR <lfs_vbrk>-vbeln.
        ELSE.
          IF is_options-zzt_numeracion IS NOT INITIAL.                        "I-3000011995-NTP200519
            <lfs_vbrk>-zz_numeracion = is_options-zzt_numeracion.             "I-3000011995-NTP200519
          ELSE.
*            <lfs_vbrk>-zz_numeracion = <lfs_vbrk>-xblnr+4(12).                    "E-WMR-190918-3000009765
            <lfs_vbrk>-zz_numeracion = l_sercor.                                  "I-WMR-190918-3000009765
          ENDIF.
        ENDIF.
      ENDLOOP.
      DELETE pe_vbrk WHERE vbeln EQ space.
      IF lines( pe_vbrk ) < 1.
        pe_error = abap_true.
        EXIT.
      ENDIF.
    ENDIF.                                                                    "I-WMR-121016-3000003932

*   Interlocutores
*{  BEGIN OF REPLACE WMR-210116
    ""    SELECT a~vbeln a~posnr a~kunnr a~parvw b~stcd1 b~stcdt b~stkzn b~name1 b~name2 b~regio b~adrnr
    SELECT a~vbeln a~posnr a~kunnr a~parvw b~stcd1 b~stcdt b~stkzn b~name1 b~name2 b~regio a~adrnr
           a~land1                                                                "I-WMR-070217-3000006563
*}  END OF REPLACE WMR-210116
    INTO CORRESPONDING FIELDS OF TABLE lt_vbpa
    FROM ( vbpa AS a INNER JOIN kna1 AS b ON a~kunnr = b~kunnr )
    FOR ALL ENTRIES IN pe_vbrk
    WHERE a~vbeln EQ pe_vbrk-vbeln.
    IF sy-subrc = 0.
      IF pi_tipdoc = gc_tipdoc_bl.
        SELECT a~addrnumber a~street a~house_num1 a~str_suppl1 a~city1 a~region b~bezei a~city2
        INTO CORRESPONDING FIELDS OF TABLE lt_adrc
        FROM adrc AS a LEFT OUTER JOIN t005u AS b ON a~country = b~land1
                                                 AND a~region  = b~bland
        FOR ALL ENTRIES IN lt_vbpa
        WHERE a~addrnumber = lt_vbpa-adrnr.
      ENDIF.

      " Actualizar Destinatario de Factura                                    "I-WMR-290515
      LOOP AT pe_vbrk ASSIGNING <lfs_vbrk>.                                   "I-WMR-290515
        READ TABLE lt_vbpa INTO lwa_vbpa                                      "I-WMR-290515
             WITH KEY vbeln = <lfs_vbrk>-vbeln                                "I-WMR-290515
                      parvw = gc_parvw_re.                                    "I-WMR-290515
        IF sy-subrc EQ 0.                                                     "I-WMR-290515
          <lfs_vbrk>-kunre    = lwa_vbpa-kunnr.                               "I-WMR-290515
          <lfs_vbrk>-adrnr_re = lwa_vbpa-adrnr.                               "I-WMR-290515
        ENDIF.                                                                "I-WMR-290515
        READ TABLE lt_vbpa INTO lwa_vbpa                                      "I-WMR-091015
             WITH KEY vbeln = <lfs_vbrk>-vbeln                                "I-WMR-091015
                      parvw = gc_parvw_rg.                                    "I-WMR-091015
        IF sy-subrc EQ 0.                                                     "I-WMR-091015
          <lfs_vbrk>-adrnr_rg = lwa_vbpa-adrnr.                               "I-WMR-091015
        ENDIF.                                                                "I-WMR-091015
        READ TABLE lt_vbpa INTO lwa_vbpa                                      "I-WMR-150218-3000009072
             WITH KEY vbeln = <lfs_vbrk>-vbeln                                "I-WMR-150218-3000009072
                      parvw = gc_parvw_we.                                    "I-WMR-150218-3000009072
        IF sy-subrc EQ 0.                                                     "I-WMR-150218-3000009072
          <lfs_vbrk>-kunwe    = lwa_vbpa-kunnr.                               "I-WMR-150218-3000009072
          <lfs_vbrk>-adrnr_we = lwa_vbpa-adrnr.                               "I-WMR-150218-3000009072
        ENDIF.                                                                "I-WMR-150218-3000009072
      ENDLOOP.                                                                "I-WMR-290515
    ENDIF.

*   Carga informacion para Clientes esporadicos
    lt_vbpa_aux[] = lt_vbpa[].
    SORT lt_vbpa_aux BY kunnr.
    DELETE ADJACENT DUPLICATES FROM lt_vbpa_aux COMPARING kunnr.
    IF lt_vbpa_aux[] IS NOT INITIAL.
      SELECT kunnr name1 name2 name3 ktokd xcpdk stcdt stcd1 adrnr name4
             land1                                                                "I-WMR-300615
             stkzn                                                                "I-WMR-150915
             spras                                                                "I-NTP050917-3000008049
        INTO CORRESPONDING FIELDS OF TABLE lt_kna1
        FROM kna1
        FOR ALL ENTRIES IN lt_vbpa_aux
        WHERE kunnr = lt_vbpa_aux-kunnr.

      s4_completar_datos_nif( CHANGING ct_kna1 =  lt_kna1 ).                      "I-WMR-121018-3000009765
    ENDIF.

*Correo electronico
    IF lt_kna1[] IS NOT INITIAL.

      SELECT addrnumber persnumber smtp_addr
        INTO TABLE lt_adr6
        FROM adr6
        FOR ALL ENTRIES IN lt_kna1
        WHERE addrnumber = lt_kna1-adrnr AND
              persnumber = space.

      LOOP AT lt_kna1 ASSIGNING <fs_kna1>.
        READ TABLE lt_adr6 INTO ls_adr6 WITH KEY addrnumber = <fs_kna1>-adrnr.
        IF sy-subrc = 0.
          <fs_kna1>-smtp_addr = ls_adr6-smtp_addr.
        ENDIF.

      ENDLOOP.
    ENDIF.

*{  BEGIN OF INSERT WMR-300615
    " Determinar Exportación
    determine_mass_export( CHANGING ct_vbrk = pe_vbrk ).
*}  END OF INSERT WMR-300615

*   Datos País
    SELECT land1 bland bezei
    INTO CORRESPONDING FIELDS OF TABLE lt_t005u
    FROM t005u
    FOR ALL ENTRIES IN pe_vbrk
    WHERE spras = sy-langu
      AND land1 = pe_vbrk-country
      AND bland = pe_vbrk-region.

*   Datos Sociedad
*{  BEGIN OF REPLACE WMR-080816-3000005361
    ""    SELECT bukrs paval
    ""    INTO CORRESPONDING FIELDS OF TABLE lt_t001z
    ""    FROM t001z
    ""    FOR ALL ENTRIES IN pe_vbrk
    ""    WHERE bukrs = pe_vbrk-bukrs
    ""      AND party = gc_party.
    SELECT bukrs paval
      INTO CORRESPONDING FIELDS OF TABLE lt_t001z
      FROM t001z
      FOR ALL ENTRIES IN pe_vbrk
      WHERE bukrs = pe_vbrk-bukrs
        AND party = gs_consextsun-zz_paramruc.
*}  END OF REPLACE WMR-080816-3000005361

*   Datos Descripción de Forma de Pago
    SELECT *
    INTO TABLE lt_t052u
    FROM t052u
    FOR ALL ENTRIES IN pe_vbrk
**    WHERE spras EQ sy-langu                                                               "E-WMR-250919-3000010823
    WHERE spras EQ 'S'  " Siempre en español                                              "I-WMR-250919-3000010823
      AND zterm EQ pe_vbrk-zterm.

*{I-NTP050917-3000008049: get
*   Via de pago
    SELECT * INTO TABLE lt_t042z
      FROM t042z
      FOR ALL ENTRIES IN pe_vbrk
      WHERE zlsch = pe_vbrk-zlsch.
*}I-NTP050917-3000008049

**************************************************************
*   Posiciones de Factura                                    *
**************************************************************

*   Datos VBRP
    SELECT b~knumv a~vbeln a~posnr a~vgbel a~vrkme a~fkimg a~arktx a~netwr a~mwsbp a~vgtyp
           a~autyp a~taxm1 a~aubel a~aupos a~pstyv a~matnr a~umvkz a~kzwi1 a~werks a~meins a~vkbur a~vgpos
           a~augru_auft                                                           "I-WMR-050615
           b~vkorg b~vtweg b~fkdat                                                "I-WMR-080615
           a~kvgr1                                                                "I-WMR-180615
           a~charg                                                                "I-WMR-010915
           a~ntgew a~brgew a~gewei a~lgort                                        "I-WMR-171016-3000005361
           a~matkl                                                                "I-WMR-231116-3000005346
           a~uecha                                                                "I-WMR-221216-3000006249
           a~mvgr5                                                                "I-WMR-290317-3000006749
           a~vstel                                                                "I-WMR-180918-3000010497
           a~kzwi3                                                                "I-130120-NTP-3000013600
    INTO CORRESPONDING FIELDS OF TABLE pe_vbrp
    FROM vbrp AS a INNER JOIN vbrk AS b ON b~vbeln = a~vbeln
    FOR ALL ENTRIES IN pe_vbrk
    WHERE a~vbeln = pe_vbrk-vbeln.
*{  BEGIN OF REPLACE WMR-210815
    ""    IF sy-subrc NE 0.
    DELETE pe_vbrp WHERE fkimg EQ 0.  " Eliminar posiciones sin cantidad facturada
    IF pe_vbrp[] IS INITIAL.
*}  END OF REPLACE WMR-210815
      pe_error = abap_true.
      EXIT.
    ENDIF.

*{  BEGIN OF INSERT WMR-010915
    " Obtener campos de cliente en VBRP
    get_custom_fields_to_vbrp( CHANGING ct_vbrp = pe_vbrp ).
*}  END OF INSERT WMR-010915

*   Datos MARC
    SELECT matnr werks stawn
    INTO TABLE lt_marc
    FROM marc
    FOR ALL ENTRIES IN pe_vbrp
    WHERE matnr = pe_vbrp-matnr
      AND werks = pe_vbrp-werks.

*   Unidad de Medida
    SELECT *
    FROM t006
    INTO TABLE lt_t006
    FOR ALL ENTRIES IN pe_vbrp
    WHERE msehi EQ pe_vbrp-vrkme.

**************************************************************
*   Datos de Condiciones                                     *
**************************************************************

    DATA: lw_exp TYPE char1.
    READ TABLE pe_vbrk ASSIGNING <lfs_vbrk> INDEX 1.
*{  BEGIN OF REPLACE WMR-300615
    ""    IF sy-subrc = 0 AND <lfs_vbrk>-kalsm IN ltr_kalsm_e.
    IF sy-subrc EQ 0 AND <lfs_vbrk>-zz_check_expor EQ abap_true.
*}  END OF REPLACE WMR-300615
      lw_exp = abap_true.
    ENDIF.

*   Leer condiciones 1
    SELECT knumv kposn kschl kwert kbetr kstat kinak koaid kmein kumza kumne
           mwsk1                                                                  "I-WMR-060117-3000006260
           mwsk2                                                                  "I-WMR-161017-3000008124
           kawrt                                                                  "I-3000011712-NTP150419
           krech                                                                  "I-3000011712-NTP150419
    INTO CORRESPONDING FIELDS OF TABLE lt_konv
*    FROM konv                                                                     "E-WMR-190918-3000009765
    FROM (gs_process-table_condpre)                                               "I-WMR-190918-3000009765
    FOR ALL ENTRIES IN pe_vbrp
    WHERE knumv EQ pe_vbrp-knumv
      AND kposn EQ pe_vbrp-posnr.
*{  BEGIN OF REPLACE WMR-070416
    ""    IF lw_exp NE abap_true.
    ""      DELETE lt_konv WHERE kinak NE space.
    ""    ENDIF.
    DELETE lt_konv WHERE kinak NE space.
*}  END OF REPLACE WMR-070416

*   Leer condiciones 2
    LOOP AT lt_constakonv INTO lwa_constakonv.
      lwa_kschl-low = lwa_constakonv-kschl.
      lwa_kschl-sign = 'I'.
      lwa_kschl-option = 'EQ'.
      APPEND lwa_kschl TO ltr_kschl.
    ENDLOOP.
    SELECT knumv kposn kschl kwert kbetr kstat kinak koaid kmein kumza kumne kpein kherk
           mwsk1                                                                  "I-WMR-060117-3000006260
           mwsk2                                                                  "I-WMR-161017-3000008124
           kawrt                                                                  "I-3000011712-NTP150419
           krech                                                                  "I-3000011712-NTP150419
    INTO CORRESPONDING FIELDS OF TABLE lt_konvv
*    FROM konv                                                                     "E-WMR-190918-3000009765
    FROM (gs_process-table_condpre)                                               "I-WMR-190918-3000009765
    FOR ALL ENTRIES IN pe_vbrp
    WHERE knumv EQ pe_vbrp-knumv
      AND kposn EQ pe_vbrp-posnr
      AND kschl IN ltr_kschl.
*{  BEGIN OF REPLACE WMR-070416
    ""    IF lw_exp NE abap_true.
    ""      DELETE lt_konvv WHERE kinak NE space.
    ""    ENDIF.
    DELETE lt_konvv WHERE kinak NE space.
*}  END OF REPLACE WMR-070416

**************************************************************
*   Arma Dirección Centro                                    *
**************************************************************

    lt_vbrp_dr[] = pe_vbrp[].
    SORT lt_vbrp_dr BY werks.
    DELETE ADJACENT DUPLICATES FROM lt_vbrp_dr COMPARING werks.
    IF lt_vbrp_dr[] IS NOT INITIAL.
      SELECT werks name2 adrnr INTO TABLE lt_t001w  "Centros/Sucursales
      FROM t001w
      FOR ALL ENTRIES IN lt_vbrp_dr
      WHERE werks = lt_vbrp_dr-werks.
      IF sy-subrc = 0.
        SELECT addrnumber cityp_code street house_num1 str_suppl1 city1 city2 country region tel_number fax_number
        INTO TABLE lt_adrc_ct
        FROM adrc
        FOR ALL ENTRIES IN lt_t001w
        WHERE addrnumber = lt_t001w-adrnr.
      ENDIF.
    ENDIF.

*   Datos adicionales para Pedido
    SORT pe_vbrp BY vbeln posnr.
    LOOP AT pe_vbrk INTO lwa_vbrk.
      READ TABLE pe_vbrp INTO lwa_vbrp WITH KEY vbeln = lwa_vbrk-vbeln.
      IF sy-subrc = 0.
        MOVE lwa_vbrp-vbeln TO lwa_aubel-vbeln.
        MOVE lwa_vbrp-aubel TO lwa_aubel-aubel.
        APPEND lwa_aubel TO lt_aubel.
      ENDIF.
    ENDLOOP.
    SELECT vbeln augru xblnr zuonr xblnr AS xblnr1 auart
    INTO TABLE lt_vbak
    FROM vbak
    FOR ALL ENTRIES IN lt_aubel
    WHERE vbeln = lt_aubel-aubel.

*   Última Factura SUNAT anulada /
*{  BEGIN OF REPLACE WMR-170815
    ""    READ TABLE lt_vbak INTO ls_vbak INDEX 1.
    ""    SELECT SINGLE vgbel INTO gw_vgbel
    ""      FROM vbap
    ""      WHERE vbeln = ls_vbak-vbeln.
    ""    IF ls_vbak-auart = gc_auart_3 OR ls_vbak-auart = gc_auart_4.
    ""      SELECT SINGLE vbeln INTO gw_xblnr
    ""        FROM vbrk
    ""        WHERE vbeln = gw_vgbel.

    "    ENDIF.
    IF lt_vbak[] IS NOT INITIAL.
      SELECT vbelv posnv vbeln posnn vbtyp_n vbtyp_v
        INTO CORRESPONDING FIELDS OF TABLE lt_vbfa
        FROM vbfa
        FOR ALL ENTRIES IN lt_vbak
        WHERE vbelv EQ lt_vbak-vbeln
          AND ( vbtyp_n EQ gc_charm OR      " Factura
                vbtyp_n EQ gc_charo OR      " NC
                vbtyp_n EQ gc_charp )       " ND
          AND ( vbtyp_v EQ gc_charc OR      " Pedido
                vbtyp_v EQ gc_charh OR      " Devolución
                vbtyp_v EQ gc_chark OR      " Solicitud NC
                vbtyp_v EQ gc_charl ).      " Solicitud ND

      DELETE lt_vbfa WHERE vbeln EQ gw_vbeln.
      SORT lt_vbfa BY vbeln ASCENDING.
      DELETE ADJACENT DUPLICATES FROM lt_vbfa COMPARING vbeln.

      IF lt_vbfa[] IS NOT INITIAL.
        SELECT vbeln
          INTO CORRESPONDING FIELDS OF TABLE lt_vbrk1
          FROM vbrk
          FOR ALL ENTRIES IN lt_vbfa
          WHERE vbeln EQ lt_vbfa-vbeln.

        SELECT zzt_nrodocsap zzt_numeracion zzt_correlativ zzt_status_cdr zzt_idcdr zzt_fecrec zzt_horrec
          INTO CORRESPONDING FIELDS OF TABLE lt_felog
          FROM zostb_felog
          FOR ALL ENTRIES IN lt_vbrk1
          WHERE zzt_nrodocsap   EQ lt_vbrk1-vbeln
            AND ( zzt_status_cdr  EQ gc_statuscdr_1 OR    " Aceptado
                  zzt_status_cdr  EQ gc_statuscdr_4 OR    " Aceptado con Observaciones
                  zzt_status_cdr  EQ gc_statuscdr_8 ).    " Baja

        SORT lt_felog BY zzt_fecrec DESCENDING zzt_horrec DESCENDING.
        READ TABLE lt_felog INTO ls_felog INDEX 1.
        IF sy-subrc EQ 0.
          gw_xblnr = ls_felog-zzt_numeracion.
        ENDIF.
      ENDIF.
    ENDIF.
*}  END OF REPLACE WMR-170815

* Datos adicionales Zona de Venta (bzirk): DSD_SAP_FCT
    READ TABLE pe_vbrk INTO lwa_vbrk INDEX 1.
    SELECT kunnr vkorg vtweg spart bzirk
      INTO TABLE lt_knvv
      FROM knvv
      WHERE kunnr = lwa_vbrk-kunrg AND
            vkorg = lwa_vbrk-vkorg AND
            vtweg = lwa_vbrk-vtweg AND
            spart = lwa_vbrk-spart.

* Datos adicionales Código de Vendedor
    CLEAR: gw_sw_pernr.
    SELECT SINGLE pernr INTO gw_pernr
      FROM vbpa
      WHERE vbeln  = lwa_vbrk-vbeln AND
*{  BEGIN OF REPLACE WMR-020216
""            parvw  = 'VE'.
            parvw  EQ gw_parvw_ve.
*}  END OF REPLACE WMR-020216
    IF sy-subrc <> 0.
      gw_sw_pernr = 1.
    ENDIF.

****************************************************************
* Lote y Cantidad x Lote Posición
****************************************************************
    READ TABLE pe_vbrk INTO lwa_vbrk INDEX 1.
*    me->get_lote_cant( EXPORTING pi_vbrk     = lwa_vbrk
*                                 pi_vbrp     = pe_vbrp
*                       CHANGING  pe_lips     = lt_lips
*                                 pe_matrix   = lt_matrix ).

    SELECT vbeln posnr uecha charg lfimg
      INTO TABLE lt_lips
      FROM lips
      FOR ALL ENTRIES IN pe_vbrp
      WHERE vbeln = pe_vbrp-vgbel AND
            posnr = pe_vbrp-vgpos.
    IF sy-subrc = 0.                                                            "Actualizamos Matrial y Pos para poder agrupar y tomar el menor Posnr(Texto de materiales)
      LOOP AT lt_lips ASSIGNING <fs_lips>.
        IF <fs_lips>-charg IS NOT INITIAL.                                      "Elimina los caracteres <> a 0123456789
          CLEAR: lw_leng.
          CONDENSE <fs_lips>-charg NO-GAPS.
          lw_leng = strlen( <fs_lips>-charg ).
          lw_leng = lw_leng - 1.
          lw_char = <fs_lips>-charg+lw_leng(1).                                 "Ubicar el ultimo caracter para validar si es <> de 0123456789 A-Z
          IF lw_char CA lw_letr.
          ELSE.
            <fs_lips>-charg = <fs_lips>-charg+0(lw_leng).
          ENDIF.

        ENDIF.
        <fs_lips>-vkorg = lwa_vbrk-vkorg.                                       "Organizacion de Venta AC01,AC02
        <fs_lips>-knumv = lwa_vbrk-knumv.                                       "Registro de COndicion
        READ TABLE pe_vbrp INTO lwa_vbrp WITH KEY vgbel = <fs_lips>-vbeln
                                                  vgpos = <fs_lips>-posnr.
        IF sy-subrc = 0.
          <fs_lips>-matnr =  lwa_vbrp-matnr.
          <fs_lips>-posmt =  lwa_vbrp-posnr.
        ENDIF.
      ENDLOOP.
    ENDIF.

*Validamos si el campo CHARG esta en blanco
    lt_lips_aux[] = lt_lips[].
    DELETE lt_lips_aux WHERE charg IS NOT INITIAL.
    DELETE lt_lips     WHERE charg IS INITIAL.

    IF lt_lips_aux[] IS NOT INITIAL.
      SELECT vbeln posnr uecha charg lfimg
        INTO TABLE lt_lips_02
        FROM lips
        FOR ALL ENTRIES IN lt_lips_aux
        WHERE vbeln = lt_lips_aux-vbeln AND
              uecha = lt_lips_aux-posnr.
      IF sy-subrc = 0.                                                              "Actualizamos Material y Posnr
        LOOP AT lt_lips_02 ASSIGNING <fs_lips>.
          IF <fs_lips>-charg IS NOT INITIAL.                                        "Elimina los caracteres <> a 0123456789
            CLEAR: lw_leng.
            CONDENSE <fs_lips>-charg NO-GAPS.
            lw_leng = strlen( <fs_lips>-charg ).
            lw_leng = lw_leng - 1.
            lw_char = <fs_lips>-charg+lw_leng(1).
            IF lw_char CA lw_letr.
            ELSE.
              <fs_lips>-charg = <fs_lips>-charg+0(lw_leng).
            ENDIF.
          ENDIF.
          <fs_lips>-vkorg = lwa_vbrk-vkorg.
          <fs_lips>-knumv = lwa_vbrk-knumv.
          READ TABLE lt_lips_aux INTO ls_lips_aux WITH KEY vbeln = <fs_lips>-vbeln
                                                           posnr = <fs_lips>-uecha.
          IF sy-subrc = 0.
            <fs_lips>-matnr = ls_lips_aux-matnr.
            <fs_lips>-posmt = ls_lips_aux-posmt.
          ENDIF.
        ENDLOOP.
        APPEND LINES OF  lt_lips_02 TO lt_lips.
      ENDIF.
    ENDIF.
    LOOP AT lt_lips ASSIGNING <fs_lips>.
      IF <fs_lips>-uecha IS NOT INITIAL.
        <fs_lips>-posnr = <fs_lips>-uecha.
      ENDIF.
    ENDLOOP.
    SORT lt_lips BY vbeln posnr.

*Extraccion del KONV
*    LOOP AT lt_constakonv INTO ls_conkonv WHERE zz_opcion01 = 1 AND zz_opcion01 = 2.
    LOOP AT lt_constakonv INTO ls_conkonv WHERE zz_opcion01 = 1 OR zz_opcion01 = 2.         "LJG-21.05.2018
      rs_kschl-sign   = 'I'.
      rs_kschl-option = 'EQ'.
      rs_kschl-low    = ls_conkonv-kschl.
      APPEND rs_kschl TO lr_kschl.
    ENDLOOP.
    IF lt_lips[] IS NOT INITIAL.
      SELECT knumv kposn kschl kbetr
        INTO CORRESPONDING FIELDS OF TABLE lt_konv_aux
*        FROM konv                                                                 "E-WMR-190918-3000009765
        FROM (gs_process-table_condpre)                                           "I-WMR-190918-3000009765
        FOR ALL ENTRIES IN lt_lips
        WHERE knumv = lt_lips-knumv AND
              kposn = lt_lips-posmt AND
              kschl IN lr_kschl.
    ENDIF.

*Arma Matrix
    LOOP AT lt_lips INTO ls_lips_aux .
      LOOP AT lt_konv_aux INTO ls_konv WHERE  knumv = ls_lips_aux-knumv AND
                                              kposn = ls_lips_aux-posmt.

        ls_matrix-posmt  = ls_lips_aux-posmt.
        ls_matrix-matnr  = ls_lips_aux-matnr.
        ls_matrix-charg  = ls_lips_aux-charg.
        ls_matrix-lfimg  = ls_lips_aux-lfimg.
        IF  ls_konv-kschl = 'ZDSA'.
          ls_matrix-kschl  = ls_konv-kschl.
          ls_matrix-kbetr  = abs( ls_konv-kbetr / 10 ).
        ENDIF.
        IF  ls_konv-kschl = 'ZDSP'.
          ls_matrix-kschl1 = ls_konv-kschl.
          ls_matrix-kbetr1 = abs( ls_konv-kbetr / 10 ).
        ENDIF.
        ls_matrix-vkorg = ls_lips_aux-vkorg.
      ENDLOOP.
      READ TABLE pe_vbrp ASSIGNING <fs_vbrp> WITH KEY vgbel = ls_lips_aux-vbeln
                                                      vgpos = ls_lips_aux-posnr.
      IF sy-subrc = 0.
        ls_matrix-netwr = <fs_vbrp>-netwr.
      ENDIF.
      APPEND ls_matrix TO lt_matrix.
    ENDLOOP.

    prorrateo_neto_lotes( EXPORTING it_vbrp   = pe_vbrp
                          CHANGING  ct_matrix = lt_matrix ).
*********************************************************************************

*Fecha de Vencimiento
    IF pe_vbrk[] IS NOT INITIAL.
      SELECT zterm ztag1
             ztag2 ztag3 xsplt        "I-100321-NTP-3000016017
        INTO TABLE gt_t052
        FROM t052.
*        FOR ALL ENTRIES IN pe_vbrk   "E-110321-NTP-3000016017
*        WHERE zterm = pe_vbrk-zterm. "E-110321-NTP-3000016017
    ENDIF.
* Punto de llegada
    IF pe_vbrp[] IS NOT INITIAL.
      SELECT vbeln xblnr wadat_ist kunnr
        INTO  TABLE lt_likp_aux
        FROM likp
        FOR ALL ENTRIES IN pe_vbrp
        WHERE vbeln = pe_vbrp-vgbel.
    ENDIF.
    SORT  lt_likp_aux BY kunnr.
    DELETE ADJACENT DUPLICATES FROM  lt_likp_aux COMPARING kunnr.
    DESCRIBE TABLE lt_likp_aux LINES lw_lines.
    IF ( lw_lines = 1 ) AND ( lt_likp_aux[] IS NOT INITIAL ).
      SELECT kunnr ort01 regio stras
        INTO CORRESPONDING FIELDS OF TABLE lt_kna1_aux
        FROM kna1
        FOR ALL ENTRIES IN lt_likp_aux
        WHERE kunnr = lt_likp_aux-kunnr.

      IF sy-subrc = 0.
        SELECT land1 bland bezei
          INTO TABLE lt_t005u_aux
          FROM t005u
          FOR ALL ENTRIES IN lt_kna1_aux
          WHERE land1 = 'PE'              AND
                bland = lt_kna1_aux-regio AND
                spras = sy-langu.
      ENDIF.
      READ TABLE lt_kna1_aux INTO ls_kna1 INDEX 1.
      IF sy-subrc = 0.
        READ TABLE lt_t005u_aux INTO ls_t005u WITH KEY bland = ls_kna1-regio.
        IF sy-subrc = 0.
          CONCATENATE ls_kna1-stras ls_kna1-ort01 ls_t005u-bezei ls_kna1-ort01 INTO gw_dir_lle SEPARATED BY space.
        ENDIF.
      ENDIF.
    ENDIF.

*Material Controlado
    lt_vbrp_aux[] = pe_vbrp[].
    DELETE ADJACENT DUPLICATES FROM lt_vbrp_aux COMPARING matnr.
    IF lt_vbrp_aux[] IS NOT INITIAL.
      SELECT matnr labor
        INTO TABLE gt_mara
        FROM mara
        FOR ALL ENTRIES IN lt_vbrp_aux
        WHERE matnr = lt_vbrp_aux-matnr.
    ENDIF.
**************************************************************
*   Datos adicionales NC y ND                                *
**************************************************************

    IF pi_tipdoc = gc_tipdoc_nc OR pi_tipdoc = gc_tipdoc_nd.
      IF lt_vbak[] IS NOT INITIAL.
        SELECT vbeln xblnr fkart taxk1
        INTO TABLE lt_vbrk_ref
        FROM vbrk
        FOR ALL ENTRIES IN lt_vbak
        WHERE vbeln = lt_vbak-zuonr.
        IF sy-subrc = 0.
          SELECT vbeln posnr taxm1 autyp aubel
          INTO TABLE lt_vbrp_ref
          FROM vbrp
          FOR ALL ENTRIES IN lt_vbrk_ref
          WHERE vbeln = lt_vbrk_ref-vbeln.
        ENDIF.
        SELECT augru bezei
        INTO TABLE lt_tvaut
        FROM tvaut
        FOR ALL ENTRIES IN lt_vbak
        WHERE spras = sy-langu
          AND augru = lt_vbak-augru.
      ENDIF.
    ENDIF.

*{  BEGIN OF INSERT WMR-080615
    " Determinar Afectación del IGV
    determinar_afectacion_igv( EXPORTING it_vbrk = pe_vbrk CHANGING  ct_vbrp = pe_vbrp ).
*}  END OF INSERT WMR-080615

*{I-PBM230119-3000011120
    " Validar que exista N°Pila Oficial en el standard
    CASE gs_process-license.
      WHEN '0020886783' OR  "Pedregal
           '0020886706'     "Piramide
        OR '0020299975'.    " ACFARMA                                                     "I-WMR-200619-3000012056
        LOOP AT pe_vbrk ASSIGNING <lfs_vbrk>.
          CLEAR: l_tipo, l_serie, l_sercor.
          SPLIT <lfs_vbrk>-xblnr AT abap_undefined
            INTO l_tipo l_serie l_sercor.
          SELECT SINGLE * INTO ls_idcn_loma FROM idcn_loma
            WHERE bukrs = <lfs_vbrk>-bukrs
              AND invtp = l_tipo
              AND rgtno = l_serie.
          IF sy-subrc = 0.
            <lfs_vbrk>-zz_rgtno = ls_idcn_loma-rgtno.
          ENDIF.
        ENDLOOP.
      WHEN OTHERS.
    ENDCASE.
*  }I-PBM230119-3000011120

  ENDMETHOD.                    "get_vbrk


  METHOD get_data_baj.

    DATA: lt_vbrk      TYPE STANDARD TABLE OF lty_vbrk,
          ls_vbrk      LIKE LINE OF           pe_vbrk,
          ls_felog     LIKE LINE OF           lt_felog,
          lw_serie     TYPE                   zostb_badet-zz_serie,
          lw_correl    TYPE                   zostb_badet-zz_correlativo,
          lw_idbaja    TYPE                   zostb_badet-zz_identifibaja,
          lw_status    TYPE                   zostb_balog-zzt_status_cdr,
*{  BEGIN OF INSERT WMR-011215
          lw_maxbaj    TYPE                   int4,
*}  END OF INSERT WMR-011215
          lt_vbrk_aux  TYPE STANDARD TABLE OF lty_vbrk,
*{  BEGIN OF INSERT WMR-130815
          lt_vbrk1     TYPE STANDARD TABLE OF lty_vbrk,
          lt_vbrk_ori  TYPE HASHED TABLE OF   lty_vbrk WITH UNIQUE KEY vbeln,
          ls_vbrk_ori  TYPE                   lty_vbrk,
          lw_tabix     TYPE                   sytabix,
*}  END OF INSERT WMR-130815
          ls_vbrk_aux  LIKE LINE OF           pe_vbrk,
*{  BEGIN OF INSERT WMR-300715
          lr_fkdat     TYPE RANGE OF          vbrk-fkdat,
          ls_fkdat     LIKE LINE OF           lr_fkdat,
*}  END OF INSERT WMR-300715
*{  BEGIN OF INSERT WMR-011215
          ls_const     LIKE LINE OF lt_const,
          l_versivigen TYPE zosfetb_ubl-zz_versivigen.     "I-NTP271218-3000010993
*}  END OF INSERT WMR-011215

    DATA: l_tipo        TYPE string,                                                   "I-WMR-190918-3000009765
          l_serie       TYPE string,                                                   "I-WMR-190918-3000009765
          l_corre       TYPE string,                                                   "I-WMR-190918-3000009765
          l_sercor      TYPE zostb_felog-zzt_numeracion,                               "I-WMR-190918-3000009765
          l_fechalimite TYPE datum.                                               "I-3000011744-NTP300419

    FIELD-SYMBOLS: <lfs_vbrk> LIKE LINE OF pe_vbrk.

    DATA: lr_xblnr TYPE RANGE OF vbrk-xblnr,
          ls_xblnr LIKE LINE OF  lr_xblnr.

*{  BEGIN OF INSERT WMR-011215
    LOOP AT lt_const INTO ls_const.
      CASE ls_const-campo.
        WHEN 'FECBAJ'.
          TRY .
              lw_maxbaj = ls_const-valor1.
              l_fechalimite = sy-datum - ls_const-valor1.       "I-3000011744-NTP300419
            CATCH cx_root.                                      "#EC CATCH_ALL
              lw_maxbaj = '7'.
              l_fechalimite = sy-datum - 7.                     "I-3000011744-NTP300419
          ENDTRY.
      ENDCASE.
    ENDLOOP.

*{I-3000011744-NTP300419
    IF pi_fecfac < l_fechalimite.
      MESSAGE e000 WITH text-e41 RAISING error.
    ENDIF.
*}I-3000011744-NTP300419
*}  END OF INSERT WMR-011215

*{  BEGIN OF INSERT WMR-300715
    CLEAR ls_fkdat.
    ls_fkdat-sign   = 'I'.
    ls_fkdat-option = 'BT'.
    CALL FUNCTION 'TV_GO_BACK_N_DAYS'
      EXPORTING
        start_date = pi_fecfac
*{  BEGIN OF REPLACE WMR-011215
        ""        n_days     = '7'
        n_days     = lw_maxbaj
*}  END OF REPLACE WMR-011215
      IMPORTING
        hist_date  = ls_fkdat-low.
    ls_fkdat-high   = pi_fecfac.
    APPEND ls_fkdat TO lr_fkdat.
*}  END OF INSERT WMR-300715

* Rango de documentos facturas, boletas, NC y ND
    ls_xblnr-sign = 'I'.
    ls_xblnr-option = 'CP'.
    ls_xblnr-low = '01*'.
    APPEND ls_xblnr TO lr_xblnr.
    ls_xblnr-low = '03*'.
    APPEND ls_xblnr TO lr_xblnr.
    ls_xblnr-low = '07*'.
    APPEND ls_xblnr TO lr_xblnr.
    ls_xblnr-low = '08*'.
    APPEND ls_xblnr TO lr_xblnr.

* Carga de documentos sin flujo (Documentos que nunca se emitieron - Insertar en PE_BADET)
    REFRESH lt_idcn_excp.
    SELECT bukrs lotno bokno invno xblnr issdt excif bllnr
      INTO TABLE lt_idcn_excp
      FROM idcn_excp
      WHERE bukrs EQ pi_bukrs                                                   "I-WMR-200715
        AND issdt <= pi_fecfac.
    DELETE lt_idcn_excp WHERE xblnr NOT IN lr_xblnr.
    IF lt_idcn_excp[] IS NOT INITIAL.
      SELECT bukrs lotno invtp
        INTO TABLE lt_idcn_loma
        FROM idcn_loma
        FOR ALL ENTRIES IN lt_idcn_excp
        WHERE bukrs = lt_idcn_excp-bukrs AND
              lotno = lt_idcn_excp-lotno.

*{  BEGIN OF REPLACE WMR-281016-3000005971
      ""      SELECT  vbeln fkart fkdat
      ""        APPENDING CORRESPONDING FIELDS OF TABLE lt_vbrk_aux
      ""        FROM vbrk
      ""        FOR ALL ENTRIES IN  lt_idcn_excp
      ""        WHERE vbeln = lt_idcn_excp-bllnr AND
      ""*{  BEGIN OF REPLACE WMR-300715
      """"              fkdat = pi_fecfac.
      ""              erdat EQ pi_fecfac.
      ""      DELETE lt_vbrk_aux WHERE fkdat NOT IN lr_fkdat.
      ""*}  END OF REPLACE WMR-300715

      IF pi_getfdoc EQ abap_false. " Por Fecha de creación de anulaciones (Por Default)
        SELECT vbeln fkart fkdat
          APPENDING CORRESPONDING FIELDS OF TABLE lt_vbrk_aux
          FROM vbrk
          FOR ALL ENTRIES IN lt_idcn_excp
          WHERE vbeln EQ lt_idcn_excp-bllnr
            AND erdat EQ pi_fecfac.
      ELSE. " Por Fecha de Factura de anulaciones (Opcional)
        SELECT vbeln fkart fkdat
          APPENDING CORRESPONDING FIELDS OF TABLE lt_vbrk_aux
          FROM vbrk
          FOR ALL ENTRIES IN lt_idcn_excp
          WHERE vbeln EQ lt_idcn_excp-bllnr
            AND fkdat EQ pi_fecfac.
      ENDIF.
      DELETE lt_vbrk_aux WHERE fkdat NOT IN lr_fkdat.
*}  END OF REPLACE WMR-281016-3000005971
    ENDIF.
* Depurar lt_idcn_excp segun  lt_vbrk_aux
    LOOP AT lt_idcn_excp INTO ls_idcn_excp.
      READ TABLE lt_vbrk_aux INTO ls_vbrk WITH KEY  vbeln = ls_idcn_excp-bllnr.
      IF sy-subrc <> 0.
        DELETE lt_idcn_excp.
      ENDIF.
    ENDLOOP.

* Agregamos registro a la PE_VBRK
    LOOP AT lt_idcn_excp INTO ls_idcn_excp.
      CLEAR: ls_vbrk.
      ls_vbrk-bukrs = ls_idcn_excp-bukrs.
      ls_vbrk-vbeln = gc_vbeln.
      ls_vbrk-sfakn = ls_idcn_excp-bllnr.                                           "I-WMR-200815
      ls_vbrk-mwsbk = 0.
      ls_vbrk-rfbsk = 'C'.
      ls_vbrk-xblnr = ls_idcn_excp-xblnr.
      READ TABLE lt_vbrk_aux INTO ls_vbrk_aux WITH KEY  vbeln = ls_idcn_excp-bllnr.
      IF sy-subrc = 0.
        ls_vbrk-fkdat = ls_vbrk_aux-fkdat.
*        ls_vbrk-fkdat = ls_idcn_excp-issdt.
      ENDIF.
      READ TABLE lt_idcn_loma INTO ls_idcn_loma WITH KEY bukrs = ls_idcn_excp-bukrs
                                                         lotno = ls_idcn_excp-lotno.
      IF sy-subrc = 0.
        ls_vbrk-fkart = ls_idcn_loma-invtp.
      ENDIF.
      APPEND ls_vbrk TO pe_vbrk.
    ENDLOOP.
    CLEAR: ls_vbrk.

**************************************************************************
*   CASO I CON CDR                                                       *
**************************************************************************

*{  BEGIN OF REPLACE WMR-281016-3000005971
    ""    SELECT bukrs vbeln fktyp fkart bukrs fkdat knumv taxk1
    ""           kunag netwr waerk kdgrp mwsbk rfbsk xblnr fksto
    ""           sfakn                                                                "I-WMR-100815
    ""    APPENDING CORRESPONDING FIELDS OF TABLE pe_vbrk
    ""    FROM vbrk
    ""*{  BEGIN OF REPLACE WMR-300715
    """"    WHERE fkdat EQ pi_fecfac
    ""    WHERE erdat EQ pi_fecfac
    ""*}  END OF REPLACE WMR-300715
    ""*{  BEGIN OF REPLACE WMR-100815
    """"      AND fksto EQ abap_true
    ""      AND ( vbtyp EQ gc_charn OR vbtyp EQ gc_chars )
    ""      AND sfakn NE space
    ""*}  END OF REPLACE WMR-100815
    ""      AND bukrs EQ pi_bukrs.                                                    "I-WMR-200715

    IF pi_getfdoc EQ abap_false. " Por Fecha de creación de anulaciones (Por Default)
      SELECT bukrs vbeln fktyp fkart bukrs fkdat knumv taxk1
             kunag netwr waerk kdgrp mwsbk rfbsk xblnr fksto
             sfakn
        APPENDING CORRESPONDING FIELDS OF TABLE pe_vbrk
        FROM vbrk
        WHERE erdat EQ pi_fecfac
          AND ( vbtyp EQ gc_charn OR vbtyp EQ gc_chars )
          AND sfakn NE space
          AND bukrs EQ pi_bukrs.
    ELSE. " Por Fecha de Factura de anulaciones (Opcional)
      SELECT bukrs vbeln fktyp fkart bukrs fkdat knumv taxk1
             kunag netwr waerk kdgrp mwsbk rfbsk xblnr fksto
             sfakn
        APPENDING CORRESPONDING FIELDS OF TABLE pe_vbrk
        FROM vbrk
        WHERE fkdat EQ pi_fecfac
          AND ( vbtyp EQ gc_charn OR vbtyp EQ gc_chars )
          AND sfakn NE space
          AND bukrs EQ pi_bukrs.
    ENDIF.
*}  END OF REPLACE WMR-281016-3000005971

*{  BEGIN OF INSERT WMR-070417-3000007034
    " Tomar Fecha Factura de documento original
    IF pi_getffo EQ abap_true.
      CLEAR: lt_vbrk1, lt_vbrk_ori.
      lt_vbrk1[] = pe_vbrk[].
      DELETE lt_vbrk1 WHERE vbeln EQ gc_vbeln.  " No aplica para documentos que vienen de IDDH
      SORT lt_vbrk1 BY sfakn ASCENDING.
      DELETE ADJACENT DUPLICATES FROM lt_vbrk1 COMPARING sfakn.
      IF lt_vbrk1[] IS NOT INITIAL.
        " Obtener Fecha Factura de documento original
        SELECT  vbeln fkdat
          INTO CORRESPONDING FIELDS OF TABLE lt_vbrk_ori
          FROM vbrk
          FOR ALL ENTRIES IN lt_vbrk1
          WHERE vbeln EQ lt_vbrk1-sfakn.
        IF lt_vbrk_ori[] IS NOT INITIAL.
          " Asignar Fecha Factura de documento original
          LOOP AT pe_vbrk ASSIGNING <lfs_vbrk>.
            READ TABLE lt_vbrk_ori INTO ls_vbrk_ori
                 WITH TABLE KEY vbeln = <lfs_vbrk>-sfakn.
            IF sy-subrc EQ 0.
              <lfs_vbrk>-fkdat = ls_vbrk_ori-fkdat.
            ENDIF.
          ENDLOOP.
        ENDIF.
      ENDIF.
    ENDIF.
    FREE: lt_vbrk1, lt_vbrk_ori.
*}  END OF INSERT WMR-070417-3000007034

*{  BEGIN OF REPLACE WMR-300715
    ""    IF sy-subrc = 0.
    DELETE pe_vbrk WHERE fkdat NOT IN lr_fkdat.

*{  BEGIN OF INSERT WMR-130815
    " No consideran anulaciones de documentos internos
    REFRESH ltr_fkart.
    LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '4' AND zz_opcion02 = '4'.
      lwa_fkart-low     = lwa_constfkart-fkart.
      lwa_fkart-sign    = 'I'.
      lwa_fkart-option  = 'EQ'.
      APPEND lwa_fkart TO ltr_fkart.
    ENDLOOP.

    IF ltr_fkart[] IS NOT INITIAL.
      lt_vbrk1[] = pe_vbrk[].
      SORT lt_vbrk1 BY sfakn ASCENDING.
      DELETE ADJACENT DUPLICATES FROM lt_vbrk1 COMPARING sfakn.
      IF lt_vbrk1[] IS NOT INITIAL.
        SELECT  vbeln fkart
          INTO CORRESPONDING FIELDS OF TABLE lt_vbrk_ori
          FROM vbrk
          FOR ALL ENTRIES IN lt_vbrk1
          WHERE vbeln EQ lt_vbrk1-sfakn
            AND fkart IN ltr_fkart.
      ENDIF.
      FREE lt_vbrk1.

      LOOP AT pe_vbrk INTO ls_vbrk.
        lw_tabix = sy-tabix.
        READ TABLE lt_vbrk_ori TRANSPORTING NO FIELDS
             WITH TABLE KEY vbeln = ls_vbrk-sfakn.
        IF sy-subrc EQ 0.
          DELETE pe_vbrk INDEX lw_tabix.
          CONTINUE.
        ENDIF.
      ENDLOOP.
      FREE lt_vbrk_ori.
    ENDIF.
*}  END OF INSERT WMR-130815

    IF pe_vbrk[] IS NOT INITIAL.
*}  END OF INSERT WMR-300715
      LOOP AT pe_vbrk ASSIGNING  <lfs_vbrk>.
*        <lfs_vbrk>-zzt_numeracion = <lfs_vbrk>-xblnr+4(12).                       "E-WMR-190918-3000009765
        split_xblnr( EXPORTING i_xblnr  = <lfs_vbrk>-xblnr                        "I-WMR-190918-3000009765
                     IMPORTING e_sercor = l_sercor ).                             "I-WMR-190918-3000009765
        <lfs_vbrk>-zzt_numeracion = l_sercor.                                     "I-WMR-190918-3000009765
      ENDLOOP.
      SELECT *
      INTO TABLE lt_felog
      FROM zostb_felog
      FOR ALL ENTRIES IN pe_vbrk
*{  BEGIN OF REPLACE WMR-100815
""      WHERE zzt_nrodocsap  EQ pe_vbrk-vbeln
      WHERE zzt_nrodocsap  EQ pe_vbrk-sfakn
*}  END OF REPLACE WMR-100815
        AND zzt_numeracion EQ pe_vbrk-zzt_numeracion
        AND bukrs          EQ pe_vbrk-bukrs                                     "I-WMR-200715
        AND zzt_tipodoc    EQ pe_vbrk-xblnr(2).                                 "I-WMR-170915
      LOOP AT pe_vbrk INTO ls_vbrk .
        lw_tabix = sy-tabix.                                                    "I-WMR-100118-3000008865
        split_xblnr( EXPORTING i_xblnr  = ls_vbrk-xblnr                           "I-WMR-190918-3000009765
                     IMPORTING e_sercor = l_sercor ).                             "I-WMR-190918-3000009765
*        IF ls_vbrk-xblnr+4(1) = 'B'.                                              "E-WMR-190918-3000009765
        IF l_sercor(1) = 'B'.                                                     "I-WMR-190918-3000009765
*{  BEGIN OF INSERT WMR-100118-3000008865
          CASE gs_ubl-zz_versivigen.
            WHEN gc_version_1.
*}  END OF INSERT WMR-100118-3000008865
*              READ TABLE lt_felog INTO ls_felog WITH KEY zzt_numeracion = ls_vbrk-xblnr+4(12).  "E-WMR-190918-3000009765
              READ TABLE lt_felog INTO ls_felog WITH KEY zzt_numeracion = l_sercor. "I-WMR-190918-3000009765
              IF sy-subrc <> 0.
                DELETE pe_vbrk INDEX lw_tabix.                                  "M-WMR-100118-3000008865
                CONTINUE.                                                       "I-WMR-100118-3000008865
              ENDIF.
*{  BEGIN OF INSERT WMR-100118-3000008865
            WHEN gc_version_2.
              DELETE pe_vbrk INDEX lw_tabix.
              CONTINUE.
          ENDCASE.
*}  END OF INSERT WMR-100118-3000008865
        ELSE.
*          LOOP AT lt_felog INTO ls_felog WHERE zzt_numeracion EQ ls_vbrk-xblnr+4(12)  "E-WMR-190918-3000009765
          LOOP AT lt_felog INTO ls_felog WHERE zzt_numeracion EQ l_sercor         "I-WMR-190918-3000009765
                                           AND ( zzt_status_cdr EQ gc_statuscdr_1 OR
                                                 zzt_status_cdr EQ gc_statuscdr_4 ).
            ""                                                 zzt_status_cdr EQ gc_statuscdr_8 ).  "E-WMR-021115
*{I-3000011744-NTP300419
            "Validar si el documneto tiene (7) días de aceptados
            IF gs_process-license = '0021061097'. "Cmh
              IF ls_felog-zzt_fecres < l_fechalimite.
                DELETE pe_vbrk.
              ENDIF.
            ENDIF.
*}I-3000011744-NTP300419
          ENDLOOP.
*{  BEGIN OF REPLACE WMR-190815
          ""          IF sy-subrc <> 0 AND ls_vbrk-vbeln <> gc_vbeln.
          IF sy-subrc NE 0.
*}  END OF REPLACE WMR-190815
            DELETE pe_vbrk.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDIF.

*   Verificar quedan datos
    IF pe_vbrk[] IS INITIAL.
*{I-3000011744-NTP300419
*      pe_error = '1'.
*      EXIT.
      MESSAGE e000 WITH text-e32 RAISING error.
*}I-3000011744-NTP300419
    ENDIF.

*{  BEGIN OF INSERT CSM-230615
    IF gs_consextsun IS INITIAL.
      READ TABLE pe_vbrk ASSIGNING <lfs_vbrk> INDEX 1.
      SELECT SINGLE *
      INTO gs_consextsun
      FROM zostb_consextsun
        WHERE bukrs = <lfs_vbrk>-bukrs.
    ENDIF.
*}  END OF INSERT CSM-230615

*    SELECT * INTO TABLE lt_felog
*      FROM zostb_felog
*      WHERE zzt_fecres      = pi_fecfac      AND
*          ( zzt_status_cdr  = gc_statuscdr_1 OR zzt_status_cdr  = gc_statuscdr_4 OR zzt_status_cdr  = gc_statuscdr_8 ).
*    IF sy-subrc = 0.
*      SELECT bukrs vbeln fktyp fkart bukrs fkdat knumv taxk1
*             kunag netwr waerk kdgrp mwsbk rfbsk xblnr fksto
*      INTO CORRESPONDING FIELDS OF TABLE pe_vbrk
*      FROM vbrk
*      FOR ALL ENTRIES IN lt_felog
*      WHERE vbeln EQ lt_felog-zzt_nrodocsap AND
*            fksto EQ abap_true.
*      IF sy-subrc EQ 0.
*        LOOP AT pe_vbrk INTO ls_vbrk .
*          READ TABLE lt_felog INTO ls_felog WITH KEY zzt_numeracion = ls_vbrk-xblnr+4(12).
*          IF sy-subrc <> 0.
*            DELETE pe_vbrk.
*          ENDIF.
*        ENDLOOP.
*      ENDIF.
*    ENDIF.

**************************************************************************
*   CASO II SIN CDR                                                      *
**************************************************************************

*    REFRESH lt_felog.
*    SELECT bukrs vbeln fktyp fkart bukrs fkdat knumv taxk1
*           kunag netwr waerk kdgrp mwsbk rfbsk xblnr fksto
*    INTO CORRESPONDING FIELDS OF TABLE lt_vbrk
*    FROM vbrk
*    WHERE fkdat = pi_fecfac AND
*          fksto = abap_true.
*    IF sy-subrc = 0.
*      DELETE lt_vbrk WHERE xblnr+4(1) <> 'B'.
*      LOOP AT lt_vbrk ASSIGNING  <lfs_vbrk>.
*        <lfs_vbrk>-zzt_numeracion = <lfs_vbrk>-xblnr+4(12).
*      ENDLOOP.
*      SELECT * INTO TABLE lt_felog
*        FROM zostb_felog
*        FOR ALL ENTRIES IN lt_vbrk
*        WHERE zzt_nrodocsap  = lt_vbrk-vbeln AND
*              zzt_numeracion = lt_vbrk-zzt_numeracion.
*      LOOP AT lt_vbrk INTO ls_vbrk.
*        READ TABLE lt_felog INTO ls_felog WITH KEY zzt_numeracion = ls_vbrk-zzt_numeracion.
*        IF sy-subrc = 0.
*          IF ls_felog-zzt_idcdr NE space.
*            DELETE lt_vbrk.
*          ENDIF.
*        ELSE.
*          DELETE lt_vbrk.
*        ENDIF.
*      ENDLOOP.
*    ENDIF.
*
**   Unificamos pe_vbrk y lt_vbrk y verificamos si hay datos
*    APPEND LINES OF lt_vbrk TO pe_vbrk.
*    IF pe_vbrk[] IS INITIAL.
*      pe_error = '1'.
*      EXIT.
*    ENDIF.

**************************************************************************
*   Filtrar los que ya tienen baja                                       *
**************************************************************************

    LOOP AT pe_vbrk ASSIGNING <lfs_vbrk>.
      CLEAR: lw_serie, lw_correl, lw_idbaja, lw_status.
*      lw_serie  = <lfs_vbrk>-xblnr+4(4).                                          "E-WMR-190918-3000009765
*      lw_correl = <lfs_vbrk>-xblnr+9.                                             "E-WMR-190918-3000009765
      split_xblnr( EXPORTING i_xblnr  = <lfs_vbrk>-xblnr                          "I-WMR-190918-3000009765
                   IMPORTING e_serie  = l_serie                                   "I-WMR-190918-3000009765
                             e_corre  = l_corre ).                                "I-WMR-190918-3000009765
      lw_serie  = l_serie.                                                        "I-WMR-190918-3000009765
      lw_correl = l_corre.                                                        "I-WMR-190918-3000009765
      SELECT SINGLE zz_identifibaja
      FROM zostb_badet
      INTO lw_idbaja
      WHERE bukrs EQ <lfs_vbrk>-bukrs                                           "I-WMR-200715
        AND zz_tipodoc EQ <lfs_vbrk>-xblnr(2)                                   "I-WMR-010216
        AND zz_serie EQ lw_serie
        AND zz_correlativo EQ lw_correl.
      IF sy-subrc EQ 0.
        SELECT SINGLE zzt_status_cdr
        FROM zostb_balog
        INTO lw_status
        WHERE bukrs            EQ <lfs_vbrk>-bukrs                              "I-WMR-200715
          AND zzt_identifibaja EQ lw_idbaja.
        IF lw_status = gc_statuscdr_1 OR lw_status EQ gc_statuscdr_4.
          DELETE pe_vbrk.
        ENDIF.
      ENDIF.
    ENDLOOP.
    IF pe_vbrk[] IS INITIAL.
*{I-3000011744-NTP300419
*      pe_error = '1'.
*      EXIT.
      MESSAGE e000 WITH text-e32 RAISING error.
*}I-3000011744-NTP300419
    ENDIF.

**************************************************************************
*   Datos adicionales                                                    *
**************************************************************************

*   Carga datos adicionales de la sociedad
*{  BEGIN OF REPLACE WMR-080816-3000005361
    ""    SELECT bukrs paval
    ""    INTO CORRESPONDING FIELDS OF TABLE lt_t001z
    ""    FROM t001z
    ""    FOR ALL ENTRIES IN pe_vbrk
    ""    WHERE bukrs = pe_vbrk-bukrs
    ""      AND party = gc_party.
    SELECT bukrs paval
      INTO CORRESPONDING FIELDS OF TABLE lt_t001z
      FROM t001z
      FOR ALL ENTRIES IN pe_vbrk
      WHERE bukrs = pe_vbrk-bukrs
        AND party = gs_consextsun-zz_paramruc.
*}  END OF REPLACE WMR-080816-3000005361

*   Actualiza Referencia
    LOOP AT pe_vbrk ASSIGNING <lfs_vbrk> .
*      <lfs_vbrk>-zzt_numeracion = <lfs_vbrk>-xblnr+4(12).                         "E-WMR-190918-3000009765
      split_xblnr( EXPORTING i_xblnr  = <lfs_vbrk>-xblnr                          "I-WMR-190918-3000009765
                   IMPORTING e_sercor = l_sercor ).                               "I-WMR-190918-3000009765
      <lfs_vbrk>-zzt_numeracion = l_sercor.                                       "I-WMR-190918-3000009765
    ENDLOOP.

*{  BEGIN OF DELETE WMR-100815
    ""*   Buscamos documento anulación
    ""    IF pe_vbrk[] IS NOT INITIAL.
    ""      SELECT  vbelv posnv vbeln vbtyp_n
    ""        INTO TABLE lt_vbfa_aux
    ""        FROM vbfa
    ""        FOR ALL ENTRIES IN pe_vbrk
    ""        WHERE vbelv   = pe_vbrk-vbeln AND
    ""            ( vbtyp_n = gc_vbtyp_n OR vbtyp_n = gc_vbtyp_s ).
    ""    ENDIF.
*}  END OF DELETE WMR-100815
  ENDMETHOD.                    "get_data_baj


  METHOD get_data_mining.

    DATA: ls_thead TYPE thead,
          l_text   TYPE string.

    CASE gs_process-license.
      WHEN '0021061097'.  " CMH

        CHECK is_vbrk-zz_check_expor = abap_true.
        CHECK is_vbrk-tfact = gc_tipdoc_fa.

        " Cantidad Precipitado
        CLEAR ls_thead.
        ls_thead-tdname   = is_vbrk-vbeln.
        ls_thead-tdid     = 'ZP05'.
        ls_thead-tdobject = 'VBBK'.
        SELECT SINGLE spras INTO ls_thead-tdspras FROM kna1 WHERE kunnr EQ is_vbrk-kunag.
        cs_cab2-zz_min_ctdpcp = get_text( pi_name   = ls_thead-tdname
                                          pi_id     = ls_thead-tdid
                                          pi_object = ls_thead-tdobject
                                          pi_spras  = ls_thead-tdspras ).
        IF cs_cab2-zz_min_ctdpcp IS INITIAL.
          ls_thead-tdspras = sy-langu.
          cs_cab2-zz_min_ctdpcp = get_text( pi_name   = ls_thead-tdname
                                            pi_id     = ls_thead-tdid
                                            pi_object = ls_thead-tdobject
                                            pi_spras  = ls_thead-tdspras ).
        ENDIF.

        IF cs_cab2-zz_min_ctdpcp IS NOT INITIAL.
          " Descripción Precipitado
          ls_thead-tdid = 'ZP06'.
          SELECT SINGLE spras INTO ls_thead-tdspras FROM kna1 WHERE kunnr EQ is_vbrk-kunag.
          l_text = get_text( pi_name   = ls_thead-tdname
                             pi_id     = ls_thead-tdid
                             pi_object = ls_thead-tdobject
                             pi_spras  = ls_thead-tdspras ).
          IF l_text IS INITIAL.
            ls_thead-tdspras = sy-langu.
            l_text = get_text( pi_name   = ls_thead-tdname
                               pi_id     = ls_thead-tdid
                               pi_object = ls_thead-tdobject
                               pi_spras  = ls_thead-tdspras ).
          ENDIF.
          IF l_text IS NOT INITIAL.
            CONCATENATE cs_cab2-zz_min_ctdpcp l_text INTO cs_cab2-zz_min_ctdpcp SEPARATED BY space.
          ENDIF.
        ENDIF.

        " SWAP 1
        CLEAR ls_thead.
        ls_thead-tdname   = is_vbrk-vbeln.
        ls_thead-tdid     = 'ZP03'.
        ls_thead-tdobject = 'VBBK'.
        SELECT SINGLE spras INTO ls_thead-tdspras FROM kna1 WHERE kunnr EQ is_vbrk-kunag.
        cs_cab2-zz_min_swap01 = get_text( pi_name   = ls_thead-tdname
                                          pi_id     = ls_thead-tdid
                                          pi_object = ls_thead-tdobject
                                          pi_spras  = ls_thead-tdspras ).
        IF cs_cab2-zz_min_swap01 IS INITIAL.
          ls_thead-tdspras = sy-langu.
          cs_cab2-zz_min_swap01 = get_text( pi_name   = ls_thead-tdname
                                            pi_id     = ls_thead-tdid
                                            pi_object = ls_thead-tdobject
                                            pi_spras  = ls_thead-tdspras ).
        ENDIF.

        " SWAP 2
        CLEAR ls_thead.
        ls_thead-tdname   = is_vbrk-vbeln.
        ls_thead-tdid     = 'ZP04'.
        ls_thead-tdobject = 'VBBK'.
        SELECT SINGLE spras INTO ls_thead-tdspras FROM kna1 WHERE kunnr EQ is_vbrk-kunag.
        cs_cab2-zz_min_swap02 = get_text( pi_name   = ls_thead-tdname
                                          pi_id     = ls_thead-tdid
                                          pi_object = ls_thead-tdobject
                                          pi_spras  = ls_thead-tdspras ).
        IF cs_cab2-zz_min_swap02 IS INITIAL.
          ls_thead-tdspras = sy-langu.
          cs_cab2-zz_min_swap02 = get_text( pi_name   = ls_thead-tdname
                                            pi_id     = ls_thead-tdid
                                            pi_object = ls_thead-tdobject
                                            pi_spras  = ls_thead-tdspras ).
        ENDIF.

    ENDCASE.

  ENDMETHOD.


  METHOD get_data_res.

    DATA: lt_t003i  TYPE TABLE OF lty_t003i,
          lwa_t003i LIKE LINE OF lt_t003i.

    FIELD-SYMBOLS:<fs_vbrk> LIKE LINE OF pe_vbrk.                       "I-CSM-230615

*   Carga Clase de Factura
    REFRESH: ltr_fkart, ltr_fkart3.
    SELECT a~blart a~doccls b~fkart
    INTO TABLE lt_t003i
    FROM t003_i AS a INNER JOIN tvfk AS b ON a~blart = b~blart
    WHERE ( a~doccls = gc_tipdoc_bl OR
            a~doccls = gc_tipdoc_nc OR
            a~doccls = gc_tipdoc_nd )
*{  BEGIN OF INSERT WMR-181016-3000005346
      AND a~land1 EQ gc_peru.

    SELECT doccls fkart
      APPENDING CORRESPONDING FIELDS OF TABLE lt_t003i
      FROM zostb_t003_i
      WHERE land1 EQ gc_peru
        AND ( doccls EQ gc_tipdoc_bl OR
              doccls EQ gc_tipdoc_nc OR
              doccls EQ gc_tipdoc_nd ).
*}  END OF INSERT WMR-181016-3000005346

    LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = space
                                                AND zz_opcion02 = space.
      lwa_fkart-low = lwa_constfkart-fkart.
      lwa_fkart-sign = 'I'.
      lwa_fkart-option = 'EQ'.
      APPEND lwa_fkart TO ltr_fkart3.
    ENDLOOP.
    IF lines( ltr_fkart3 ) > 0.
      DELETE lt_t003i WHERE fkart NOT IN ltr_fkart3.
    ENDIF.
    LOOP AT lt_t003i INTO lwa_t003i.
      lwa_fkart-low = lwa_t003i-fkart.
      lwa_fkart-sign = 'I'.
      lwa_fkart-option = 'EQ'.
      APPEND lwa_fkart TO ltr_fkart.
    ENDLOOP.

*   Carga Cabecera
    SELECT a~bukrs a~vbeln a~fktyp a~fkart a~bukrs a~fkdat a~knumv a~taxk1 a~kunag a~netwr a~waerk a~kdgrp a~mwsbk a~rfbsk  a~kurrf
           b~butxt b~adrnr
           c~name1 c~name2 c~name3 c~cityp_code c~street c~house_num1 c~str_suppl1 c~city1 c~city2 c~tel_number c~country c~region
           a~xblnr a~vbeln AS awkey
    INTO CORRESPONDING FIELDS OF TABLE pe_vbrk
    FROM ( vbrk AS a INNER JOIN t001 AS b ON a~bukrs = b~bukrs )
                LEFT OUTER JOIN adrc AS c ON b~adrnr = c~addrnumber
    WHERE fkdat EQ pi_fecfac
      AND rfbsk EQ gc_rfbsk_c
      AND fkart IN ltr_fkart
      AND fksto EQ space
      AND a~bukrs EQ pi_bukrs.                                                  "I-WMR-200715
    IF sy-subrc NE 0.
      pe_error = '1'.
      MESSAGE text-e30 TYPE 'I'.             "M LJG-21.05.2018
    ENDIF.

    CHECK pe_error IS INITIAL.

*{  BEGIN OF INSERT CSM-230615
    IF gs_consextsun IS INITIAL.
      READ TABLE pe_vbrk ASSIGNING <fs_vbrk> INDEX 1.
      SELECT SINGLE *
      INTO gs_consextsun
      FROM zostb_consextsun
        WHERE bukrs = <fs_vbrk>-bukrs.
    ENDIF.
*}  END OF INSERT CSM-230615

*   Carga Detalle
    SELECT b~knumv a~vbeln a~posnr a~vgbel a~vrkme a~fkimg a~arktx a~netwr
           a~mwsbp a~vgtyp a~autyp a~taxm1 a~aubel a~aupos a~pstyv a~matnr a~umvkz a~werks
           a~augru_auft                                                           "I-WMR-050615
           b~vkorg b~vtweg b~fkdat                                                "I-WMR-080615
           a~kvgr1                                                                "I-WMR-180615
    INTO CORRESPONDING FIELDS OF TABLE pe_vbrp
    FROM vbrp AS a INNER JOIN vbrk AS b ON b~vbeln = a~vbeln
    FOR ALL ENTRIES IN pe_vbrk
    WHERE a~vbeln EQ pe_vbrk-vbeln.
    IF sy-subrc NE 0.
      pe_error = '1'.
      MESSAGE text-e30 TYPE 'I'.        "#EC NOTEXT   "M LJG-21.05.2018
    ENDIF.

    CHECK pe_error IS INITIAL.

*   Condiciones
    SELECT knumv kposn kschl kwert kbetr kstat kinak koaid kmein kumza kumne
           mwsk1                                                                  "I-WMR-060117-3000006260
           mwsk2                                                                  "I-WMR-161017-3000008124
           kawrt                                                                  "I-3000011712-NTP150419
           krech                                                                  "I-3000011712-NTP150419
    INTO CORRESPONDING FIELDS OF TABLE lt_konv
*    FROM konv                                                                     "E-WMR-190918-3000009765
    FROM (gs_process-table_condpre)                                               "I-WMR-190918-3000009765
    FOR ALL ENTRIES IN pe_vbrp
    WHERE knumv EQ pe_vbrp-knumv
      AND kposn EQ pe_vbrp-posnr.

*   RUC Austral
*{  BEGIN OF REPLACE WMR-080816-3000005361
    ""    SELECT bukrs paval
    ""    INTO CORRESPONDING FIELDS OF TABLE lt_t001z
    ""    FROM t001z
    ""    FOR ALL ENTRIES IN pe_vbrk
    ""    WHERE bukrs EQ pe_vbrk-bukrs
    ""      AND party EQ gc_party.
    SELECT bukrs paval
      INTO CORRESPONDING FIELDS OF TABLE lt_t001z
      FROM t001z
      FOR ALL ENTRIES IN pe_vbrk
      WHERE bukrs = pe_vbrk-bukrs
        AND party = gs_consextsun-zz_paramruc.
*}  END OF REPLACE WMR-080816-3000005361

*   Carga datos MARC
    SELECT matnr werks stawn
    INTO TABLE lt_marc
    FROM marc
    FOR ALL ENTRIES IN pe_vbrp
    WHERE matnr EQ pe_vbrp-matnr
      AND werks EQ pe_vbrp-werks.

*********************************************************************
* NOTAS DE CREDITO y NOTAS DE DEBITO                                *
*********************************************************************

*   Datos adicionales NC/ND por devolucion
    SELECT vbeln posnr vgbel vgpos
    INTO TABLE lt_vbap_07
    FROM vbap
    FOR ALL ENTRIES IN pe_vbrp
    WHERE vbeln = pe_vbrp-aubel
      AND posnr = pe_vbrp-aupos.
    IF sy-subrc = 0.
      SELECT DISTINCT vbeln posnr
      INTO TABLE lt_vbrp_0701
      FROM vbrp
      FOR ALL ENTRIES IN lt_vbap_07
      WHERE vbeln = lt_vbap_07-vgbel
        AND posnr = lt_vbap_07-vgpos.
      IF sy-subrc = 0.
        SELECT DISTINCT vbeln fkart
        INTO TABLE lt_vbrk_07
        FROM vbrk
        FOR ALL ENTRIES IN lt_vbrp_0701
        WHERE vbeln = lt_vbrp_0701-vbeln.
      ENDIF.
    ENDIF.

*   Datos adicionales NC/ND por Valor
    IF pe_vbrp[] IS NOT INITIAL.
      SELECT vbeln augru xblnr zuonr
      INTO TABLE lt_vbak
      FROM vbak
      FOR ALL ENTRIES IN pe_vbrp
      WHERE vbeln = pe_vbrp-aubel.
      IF sy-subrc = 0.
        SELECT DISTINCT vbeln fkart xblnr
        INTO TABLE lt_vbrk_07
        FROM vbrk
        FOR ALL ENTRIES IN lt_vbak
        WHERE xblnr = lt_vbak-xblnr.
      ENDIF.
    ENDIF.

*{  BEGIN OF INSERT WMR-080615
    " Determinar Afectación del IGV
    determinar_afectacion_igv( EXPORTING it_vbrk = pe_vbrk CHANGING  ct_vbrp = pe_vbrp ).
*}  END OF INSERT WMR-080615

  ENDMETHOD.                    "get_vbrk


  METHOD get_description_from_tdid.

    DATA  ls_ttxit  TYPE  lty_ttxit.

    READ TABLE lth_ttxit INTO ls_ttxit
         WITH TABLE KEY tdobject = is_thead-tdobject
                        tdid     = is_thead-tdid.
    IF sy-subrc EQ 0.
      er_ttxit = ls_ttxit.
    ELSE.
      SELECT SINGLE tdobject tdid tdtext
        INTO ls_ttxit
        FROM ttxit
        WHERE tdspras   EQ sy-langu
          AND tdobject  EQ is_thead-tdobject
          AND tdid      EQ is_thead-tdid.
      IF sy-subrc EQ 0.
        INSERT ls_ttxit INTO TABLE lth_ttxit.
        er_ttxit = ls_ttxit.
      ENDIF.
    ENDIF.

    TRANSLATE er_ttxit TO UPPER CASE.

  ENDMETHOD.


  METHOD get_descto_item. "CARDES

*    CLEAR pe_desctoxite.

*   Armar rangos
    REFRESH ltr_kschl.
    LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '1' AND zz_opcion02 = '2'.
      lwa_kschl-low = lwa_constakonv-kschl.
      lwa_kschl-sign = 'I'.
      lwa_kschl-option = 'EQ'.
      APPEND lwa_kschl TO ltr_kschl.
    ENDLOOP.

*{  BEGIN OF INSERT WMR-270619-3000012056
    " Descuentos Mixtos
    LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = 'D' AND zz_opcion02 = 'M'.
      lwa_kschl-low = lwa_constakonv-kschl.
      lwa_kschl-sign = 'I'.
      lwa_kschl-option = 'EQ'.
      APPEND lwa_kschl TO ltr_kschl.
    ENDLOOP.
*}  END OF INSERT WMR-270619-3000012056

*   Realizar calculo
    IF ltr_kschl[] IS NOT INITIAL.
*{E-3000011712-NTP030519
*      LOOP AT lt_konvv INTO lwa_konv WHERE knumv EQ pi_knumv
*                                       AND kposn EQ pi_posnr
**{  BEGIN OF DELETE WMR-040615
*""                                       AND koaid EQ gc_koaid_a
**}  END OF DELETE WMR-040615
**{  BEGIN OF INSERT WMR-160615
*                                       AND ( kherk NE gc_chard AND kherk NE gc_charg )  " Excluir descuentos de Cabecera
**}  END OF INSERT WMR-160615
*                                       AND kschl IN ltr_kschl
*                                       AND kstat EQ space.                             "I-WMR-200417-3000007094
*
*        ADD lwa_konv-kwert TO pe_desctoxite.
*        ADD lwa_konv-kawrt TO e_kawrt.      "I-NTP280618-3000009651
*        e_kbetr = lwa_konv-kbetr / 10.      "I-NTP280618-3000009651
*
*      ENDLOOP.
*}E-3000011712-NTP030519

*{I-3000011712-NTP100419
      DATA: lt_cardes_val TYPE ltt_cardes_val,
            ls_cardes_val LIKE LINE OF lt_cardes_val,
            ls_cardes     LIKE LINE OF et_cardes.

      get_cardes_val_condition(
        EXPORTING
          i_knumv = pi_knumv
          i_posnr = pi_posnr
          i_tipdoc = i_tipdoc                       "I-080921-NTP-3000017358
          i_netwr = i_netwr                         "I-020921-NTP-3000017358
          i_kzwi1 = i_kzwi1                         "I-100921-NTP-3000017750
          i_check_expor = i_check_expor             "I-100921-NTP-3000017750
        IMPORTING
          et_cardes_val = lt_cardes_val ).

      LOOP AT lt_cardes_val INTO ls_cardes_val.
*{+010922-NTP-3000019741
        IF i_check_tg = abap_on OR i_check_bonif = abap_on.
          ADD ls_cardes_val-import TO e_tdscto_gratuito.
        ELSE.
*}+010922-NTP-3000019741
          ls_cardes-dscto       = ls_cardes_val-import.
          ls_cardes-dscto_com   = ls_cardes_val-_com.
          ls_cardes-dscto_pct   = ls_cardes_val-_pct.
          ls_cardes-dscto_base  = ls_cardes_val-_base.
*{I-020920-NTP-3000014481
          ls_cardes-nabi        = ls_cardes_val-_nabi.
          IF ls_cardes-nabi = abap_on.
            ADD ls_cardes-dscto TO e_desctoxite_nabi.
          ELSE.
            ADD ls_cardes-dscto TO e_desctoxite_sabi.
          ENDIF.
*}I-020920-NTP-3000014481
          APPEND ls_cardes TO et_cardes.
        ENDIF.
      ENDLOOP.
*}I-3000011712-NTP170419
    ENDIF.

*    pe_desctoxite = abs( pe_desctoxite ).

  ENDMETHOD.                    "get_descto_item


  METHOD get_descto_item_es.

    DATA: lw_sw TYPE c.
    CLEAR pe_desctoxite.

*   Armar rangos
    REFRESH ltr_kschl.
    LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '1' AND zz_opcion02 = '4'.
      lwa_kschl-low = lwa_constakonv-kschl.
      lwa_kschl-sign = 'I'.
      lwa_kschl-option = 'EQ'.
      APPEND lwa_kschl TO ltr_kschl.
    ENDLOOP.

*Validamos si esta actvivo ZPRB y ZDPC
    LOOP AT lt_konvv INTO lwa_konv WHERE knumv EQ pi_knumv
                                     AND kposn EQ pi_posnr.
      IF ( lwa_konv-kschl = gc_kschl_1  OR  lwa_konv-kschl = gc_kschl_2 ) AND lwa_konv-kherk <> gc_kherk_a .
        lw_sw = 1.
      ENDIF.
    ENDLOOP.
    CHECK lw_sw IS INITIAL.

*   Realizar calculo
    IF ltr_kschl[] IS NOT INITIAL.
      LOOP AT lt_konvv INTO lwa_konv WHERE knumv EQ pi_knumv
                                       AND kposn EQ pi_posnr
*{  BEGIN OF DELETE WMR-040615
""                                       AND koaid EQ gc_koaid_a
*}  END OF DELETE WMR-040615
*{  BEGIN OF INSERT WMR-160615
                                       AND ( kherk NE gc_chard AND kherk NE gc_charg )  " Excluir descuentos de Cabecera
*}  END OF INSERT WMR-160615
                                       AND kschl IN ltr_kschl.

        ADD lwa_konv-kbetr TO pe_desctoxite.

      ENDLOOP.
    ENDIF.
    pe_desctoxite = abs( pe_desctoxite ).
    pe_desctoxite = pe_desctoxite / 10.

  ENDMETHOD.                    "get_descto_item


  METHOD get_desncnd.

    DATA: lw_aubel TYPE vbeln_va,
          lw_auart TYPE auart,
          lw_xblnr TYPE xblnr_v1,
          lw_vbeln TYPE xblnr_v1,
          lw_matnr TYPE matnr,
          lw_name  TYPE thead-tdname.

    CONSTANTS: lc_tdid   TYPE thead-tdid     VALUE 'Z036',
               lc_object TYPE thead-tdobject VALUE 'VBBK'.

* Determinamos si las NC y ND son por valor
    lw_name = pi_vbrk-vbeln.
    SELECT SINGLE aubel
    INTO lw_aubel
    FROM vbrp
    WHERE vbeln = pi_vbrk-vbeln.
    IF sy-subrc = 0.
      SELECT SINGLE auart xblnr
      INTO (lw_auart, lw_xblnr)
      FROM vbak
      WHERE vbeln = lw_aubel.
      IF ( sy-subrc = 0 ) AND ( lw_auart = gc_auart_1 OR lw_auart = gc_auart_2 ). "Determina si es por valor (ZSNC / ZSND)
        IF ( pi_vbrk-ktgrd = gc_ktgrd_01 ) OR                                     "Determina si Nacional
           ( pi_vbrk-ktgrd = gc_ktgrd_03 ) OR
           ( pi_vbrk-ktgrd = gc_ktgrd_05 ) OR
           ( pi_vbrk-ktgrd = gc_ktgrd_06 ) OR
           ( pi_vbrk-ktgrd = gc_ktgrd_07 ).
          pe_arktx = me->get_text( pi_name   = lw_name
                           pi_id     = lc_tdid      "Z036
                           pi_object = lc_object ). "VBBK
        ELSE.
          SELECT SINGLE vbeln
          INTO lw_vbeln
          FROM vbrk
          WHERE xblnr = lw_xblnr.
          IF sy-subrc = 0.
            SELECT SINGLE matnr arktx
            INTO (lw_matnr, pe_vbrp-arktx)
            FROM vbrp
            WHERE vbeln = lw_vbeln.
            IF sy-subrc = 0.
              pe_vbrp-matnr = lw_matnr.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD get_detrac_header.

    DATA: lt_with_item TYPE STANDARD TABLE OF lty_with_item,                             "I-WMR-070319-3000010823
          ls_with_item TYPE lty_with_item,                                               "I-WMR-070319-3000010823
          ls_bseg      TYPE bseg,                                                        "I-WMR-260819-3000010823
          ls_const     LIKE LINE OF lt_const.                                            "I-WMR-120619-3000010823

    FIELD-SYMBOLS: <fs_konv> LIKE LINE OF lt_konv.

* Arma rango de Detracción
    REFRESH ltr_kschl.
    LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '1' AND zz_opcion02 = '3'.
      lwa_kschl-low    = lwa_constakonv-kschl.
      lwa_kschl-sign   = 'I'.
      lwa_kschl-option = 'EQ'.
      APPEND lwa_kschl TO ltr_kschl.
    ENDLOOP.

    CHECK ltr_kschl[] IS NOT INITIAL.

* Verificar si existe una condición
    LOOP AT lt_konv ASSIGNING <fs_konv> WHERE kschl IN ltr_kschl.
      ADD <fs_konv>-kwert TO pe_detrac.
      pe_detraporc = <fs_konv>-kbetr / 10.  " Porcentaje Detracción                      "I-WMR-120619-3000010823
    ENDLOOP.

*{  BEGIN OF INSERT WMR-070319-3000010823
    " Código del Bien o Servicio sujeto a Detracciones
    IF pe_detrac IS NOT INITIAL.
      CASE is_vbrk-zz_verubl.
        WHEN gc_verubl-ubl2_0.
        WHEN gc_verubl-ubl2_1.
          SELECT w~bukrs w~belnr w~gjahr w~buzei w~witht w~wt_withcd
                 w~wt_qsshh w~wt_qbshh                                                   "I-080720-NTP-3000014647
                 w~wt_qsshb w~wt_qbshb                                                   "I-SVM160420-3000014168
                 w~qsatz                                                                 "I-WMR-101019-3000012593
**            INTO TABLE lt_with_item                                                      "E-WMR-101019-3000012593
            INTO CORRESPONDING FIELDS OF TABLE lt_with_item                              "I-WMR-101019-3000012593
            FROM bkpf AS b INNER JOIN with_item AS w
            ON ( b~bukrs EQ w~bukrs AND b~belnr EQ w~belnr AND b~gjahr EQ w~gjahr )
            WHERE b~awtyp EQ 'VBRK'
              AND b~awkey EQ is_vbrk-vbeln
              AND w~hkont <> space.  " Determina Cuenta cuando supera el monto mínimo    "I-WMR-181019-3000012593

*{I-080720-NTP-3000014674
          get_detrac_preview( EXPORTING is_options   = is_options
                                        is_vbrk      = is_vbrk
                              CHANGING ct_with_item = lt_with_item ).
*}I-080720-NTP-3000014674

          CASE gs_process-license.                                                        "I-WMR-30062021-3000016475
            WHEN '0020729594'.  " Austral                                                 "I-WMR-30062021-3000016475
            WHEN OTHERS.                                                                  "I-WMR-30062021-3000016475
              IF lt_with_item[] IS INITIAL.                                                  "I-WMR-181019-3000012593
                CLEAR: pe_detrac, pe_detracodbs, pe_detraporc, pe_detractabn, pe_detra_mdpg. "I-WMR-181019-3000012593
*                EXIT.                                                                        "I-WMR-181019-3000012593 "E-121121-NTP-3000018125
              ENDIF.                                                                         "I-WMR-181019-3000012593

*{I-SVM160420-3000014168
**          CASE gw_license.                                                               "E-WMR-08062020-3000014486
**            WHEN '0020262397'. "Artesco                                                  "E-WMR-08062020-3000014486
              " Importe de detracción                                                        "I-WMR-08062020-3000014486
              CLEAR pe_detrac.
              LOOP AT lt_with_item INTO ls_with_item.
*                ADD ls_with_item-wt_qbshb TO pe_detrac.  "E-030720-NTP-3000014674
                ADD ls_with_item-wt_qbshh TO pe_detrac.   "I-030720-NTP-3000014674
                pe_detrac_mdoc = pe_detrac_mdoc + abs( ls_with_item-wt_qbshb ).               "+010922-NTP-3000018956
              ENDLOOP.
**            WHEN OTHERS.                                                                 "E-WMR-08062020-3000014486
**          ENDCASE.                                                                       "E-WMR-08062020-3000014486
*}I-SVM160420-3000014168
          ENDCASE.                                                                        "I-WMR-30062021-3000016475

          LOOP AT lt_with_item INTO ls_with_item.
            READ TABLE lt_catahomo54 INTO lwa_catahomo54
                 WITH TABLE KEY witht     = ls_with_item-witht
                                wt_withcd = ls_with_item-wt_withcd.
            IF sy-subrc = 0.
              pe_detracodbs = lwa_catahomo54-codsun.
              pe_detraporc  = ls_with_item-qsatz.                                        "I-WMR-101019-3000012593
              EXIT.
            ENDIF.
          ENDLOOP.

          IF pe_detrac IS NOT INITIAL.                                                     "I-121121-NTP-3000018125
            "Número de cuenta en el Banco de la Nación de la detracción                    "I-WMR-120619-3000010823
            READ TABLE lt_const INTO ls_const WITH KEY campo = 'DETRACTABN'                "I-WMR-120619-3000010823
                                                       valor1 = is_vbrk-bukrs.             "I-WMR-311019-3000012593
            IF sy-subrc = 0.                                                               "I-WMR-120619-3000010823
              pe_detractabn = ls_const-valor2.                                             "I-WMR-120619-3000010823
**            IF ls_const-valor2 IS NOT INITIAL.                                           "I-WMR-120619-3000010823
**              CONCATENATE pe_detractabn ls_const-valor2                                  "I-WMR-120619-3000010823
**                          INTO pe_detractabn SEPARATED BY space.                         "I-WMR-120619-3000010823
**            ENDIF.                                                                       "I-WMR-120619-3000010823
            ENDIF.                                                                         "I-WMR-120619-3000010823
          ENDIF.                                                                           "I-121121-NTP-3000018125

*{  BEGIN OF INSERT WMR-260819-3000010823
          " Medio de Pago
          READ TABLE lt_with_item INTO ls_with_item INDEX 1.
          IF sy-subrc = 0.
            SELECT SINGLE bukrs belnr gjahr buzei koart zlsch
              INTO CORRESPONDING FIELDS OF ls_bseg FROM bseg
              WHERE bukrs = ls_with_item-bukrs
                AND belnr = ls_with_item-belnr
                AND gjahr = ls_with_item-gjahr
                AND koart = gc_chard.
            IF sy-subrc = 0.
              READ TABLE lt_catahomo59 INTO lwa_catahomo59
                   WITH KEY zlsch = ls_bseg-zlsch.
              IF sy-subrc <> 0.
                READ TABLE lt_catahomo59 INTO lwa_catahomo59
                     WITH KEY zlsch = space.
              ENDIF.
              IF sy-subrc = 0.
                pe_detra_mdpg = lwa_catahomo59-codsun.
              ENDIF.
            ENDIF.
          ENDIF.
*}  END OF INSERT WMR-260819-3000010823
      ENDCASE.
    ENDIF.
*}  END OF INSERT WMR-070319-3000010823

  ENDMETHOD.


  METHOD get_detrac_preview.
*{I-080720-NTP-3000014674
    DATA: lt_minmax    TYPE SORTED TABLE OF lty_t059minmax WITH NON-UNIQUE KEY witht wt_withcd wt_date,"I-WMR-10092020-3000015240
          lt_minmax_p  TYPE SORTED TABLE OF lty_t059minmax WITH NON-UNIQUE KEY witht wt_withcd,   "I-WMR-10092020-3000015240

          ls_with_item LIKE LINE OF ct_with_item,
          ls_const     LIKE LINE OF lt_const,
          ls_minmax    LIKE LINE OF lt_minmax_p,                                                  "I-WMR-10092020-3000015240

          l_index      TYPE i.                                                                    "I-WMR-10092020-3000015240

    FIELD-SYMBOLS: <fs_konv> LIKE LINE OF lt_konv.
    FIELD-SYMBOLS: <fs_with_item> LIKE LINE OF ct_with_item,                                       "I-SVM-130720-3000014843
                   <fs_minmax> LIKE LINE OF lt_minmax.                                            "I-WMR-10092020-3000015240

* Solo preview
    CHECK is_options-only_datanojs IS NOT INITIAL AND ct_with_item IS INITIAL.

* Arma rango de Detracción
    REFRESH ltr_kschl.
    LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '1' AND zz_opcion02 = '3'.
      lwa_kschl-low    = lwa_constakonv-kschl.
      lwa_kschl-sign   = 'I'.
      lwa_kschl-option = 'EQ'.
      APPEND lwa_kschl TO ltr_kschl.
    ENDLOOP.

    "Tipo de Detracción
    LOOP AT lt_const INTO ls_const WHERE campo = 'WITHT_D'.
      ls_with_item-witht = ls_const-valor1.
    ENDLOOP.
    "Indicador de Detraccion
    LOOP AT lt_konv ASSIGNING <fs_konv> WHERE kschl IN ltr_kschl AND mwsk2 IS NOT INITIAL.
      ls_with_item-wt_withcd = <fs_konv>-mwsk2.
    ENDLOOP.

    CHECK ltr_kschl[] IS NOT INITIAL.

* Verificar si existe una condición
    LOOP AT lt_konv ASSIGNING <fs_konv> WHERE kschl IN ltr_kschl AND kwert > 0.
      ls_with_item-bukrs = is_vbrk-bukrs.
      ls_with_item-wt_qsshb  = <fs_konv>-kawrt. "BaseImp. MD
      ls_with_item-wt_qbshb  = <fs_konv>-kwert. "Ret.     MD

      convert_to_local_currency(
        EXPORTING
          i_date    = is_vbrk-fkdat
          i_waers_l = gc_waers_pen
          i_waers_f = is_vbrk-waerk
          i_monto   = ls_with_item-wt_qsshb
        IMPORTING
          e_monto   = ls_with_item-wt_qsshh
      ).

      convert_to_local_currency(
        EXPORTING
          i_date    = is_vbrk-fkdat
          i_waers_l = gc_waers_pen
          i_waers_f = is_vbrk-waerk
          i_monto   = ls_with_item-wt_qbshb
        IMPORTING
          e_monto   = ls_with_item-wt_qbshh
      ).

      SELECT SINGLE qsatz INTO ls_with_item-qsatz
        FROM t059z
        WHERE land1 = gc_peru
          AND witht = ls_with_item-witht
          AND wt_withcd = ls_with_item-wt_withcd.

      READ TABLE ct_with_item ASSIGNING <fs_with_item> WITH KEY witht = ls_with_item-witht         "I-SVM-130720-3000014843
                                                            wt_withcd = ls_with_item-wt_withcd.    "I-SVM-130720-3000014843
      IF sy-subrc EQ 0.                                                                            "I-SVM-130720-3000014843
        ADD ls_with_item-wt_qbshh TO <fs_with_item>-wt_qbshh.                                      "I-SVM-130720-3000014843
        ADD ls_with_item-wt_qsshb TO <fs_with_item>-wt_qsshb.                                      "I-SVM-130720-3000014843
        ADD ls_with_item-wt_qbshb TO <fs_with_item>-wt_qbshb.                                      "I-SVM-130720-3000014843
        ADD ls_with_item-wt_qsshh TO <fs_with_item>-wt_qsshh.                                      "I-SVM-130720-3000014843
      ELSE.                                                                                        "I-SVM-130720-3000014843
        APPEND ls_with_item TO ct_with_item.
      ENDIF.                                                                                       "I-SVM-130720-3000014843
    ENDLOOP.
*}I-080720-NTP-3000014674

*{  BEGIN OF INSERT WMR-10092020-3000015240
    IF ct_with_item IS NOT INITIAL.
      " Obtener importes mínimos y vigencias
      SELECT land1 witht wt_withcd wt_date waers wt_wtminb
        INTO TABLE lt_minmax
        FROM t059minmax
        FOR ALL ENTRIES IN ct_with_item
        WHERE land1 = gc_peru
          AND witht = ct_with_item-witht
          AND waers = gc_waers_pen
          AND ( wt_withcd = ct_with_item-wt_withcd OR wt_withcd = space ).

      lt_minmax_p = lt_minmax.
      LOOP AT lt_minmax ASSIGNING <fs_minmax>.
        l_index = sy-tabix + 1.
        LOOP AT lt_minmax_p INTO ls_minmax FROM l_index WHERE witht = <fs_minmax>-witht
                                                          AND wt_withcd = <fs_minmax>-wt_withcd.
          EXIT.
        ENDLOOP.
        IF sy-subrc = 0.
          <fs_minmax>-endda = ls_minmax-wt_date - 1.
        ELSE.
          <fs_minmax>-endda = '99991231'.
        ENDIF.
      ENDLOOP.
      CLEAR lt_minmax_p.

      " Validar si aplica por Monto mínimo
      LOOP AT ct_with_item ASSIGNING <fs_with_item>.
        l_index = sy-tabix.
        UNASSIGN <fs_minmax>.
        " Búsqueda por Tipo e Indicador
        LOOP AT lt_minmax ASSIGNING <fs_minmax> WHERE witht = <fs_with_item>-witht
                                                  AND wt_withcd = <fs_with_item>-wt_withcd
                                                  AND wt_date <= is_vbrk-fkdat
                                                  AND endda >= is_vbrk-fkdat.
          EXIT.
        ENDLOOP.
        IF sy-subrc <> 0.
          " Búsqueda por Tipo
          LOOP AT lt_minmax ASSIGNING <fs_minmax> WHERE witht = <fs_with_item>-witht
                                                    AND wt_withcd = space
                                                    AND wt_date <= is_vbrk-fkdat
                                                    AND endda >= is_vbrk-fkdat.
            EXIT.
          ENDLOOP.
        ENDIF.
        IF <fs_minmax> IS ASSIGNED.
          " En caso la base sea menor al importe mínimo, eliminar línea de detracción
          IF <fs_with_item>-wt_qsshh < <fs_minmax>-wt_wtminb.
            DELETE ct_with_item INDEX l_index.  CONTINUE.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDIF.
*}  END OF INSERT WMR-10092020-3000015240

  ENDMETHOD.


  METHOD get_dir_sede_productiva.

    DATA: ls_likp    TYPE lty_likp,
          ls_vbrp    TYPE lty_vbrp,
          ls_tvst    TYPE tvst,
          ls_cab2    TYPE zostb_docexposc2,
          ls_address TYPE lty_address,
          ls_const   LIKE LINE OF lt_const,                           "I-NTP290317-3000006749
          l_value    TYPE string,
          l_name     TYPE thead-tdname.                               "I-NTP290317-3000006749

    CLEAR r_dir_sdpr.

    CASE gw_license.
      WHEN '0020673876'.  " Beta

        CASE is_vbrk-tfact.
          WHEN gc_tipdoc_fa OR gc_tipdoc_bl.

            CLEAR: ls_vbrp, ls_likp.
            READ TABLE it_vbrp INTO ls_vbrp
                 WITH KEY vbeln = is_vbrk-vbeln.
            IF sy-subrc EQ 0.
              READ TABLE lt_likp INTO ls_likp
                   WITH KEY vbeln = ls_vbrp-vgbel.

            ENDIF.

          WHEN gc_tipdoc_nc OR gc_tipdoc_nd.
            " Buscar Entrega de Documento Referencia
            SELECT SINGLE bukrs zz_nrodocsap zz_numeracion zz_entrega
              INTO CORRESPONDING FIELDS OF ls_cab2
              FROM zostb_docexposc2
              WHERE bukrs         EQ is_vbrk-bukrs
                AND zz_nrodocsap  EQ is_vbrk-zz_sdrefer
                AND zz_numeracion EQ is_vbrk-tipdocmodif.

            IF sy-subrc EQ 0.
              SELECT SINGLE vbeln
                INTO ls_likp
                FROM likp
                WHERE vbeln EQ ls_cab2-zz_entrega.
            ENDIF.

*{  BEGIN OF INSERT WMR-180918-3000010497
            IF sy-subrc = 0.
              SELECT SINGLE vbeln posnr werks vstel
                INTO CORRESPONDING FIELDS OF ls_vbrp
                FROM vbrp
                WHERE vbeln = ls_cab2-zz_nrodocsap.
            ENDIF.
*}  END OF INSERT WMR-180918-3000010497

        ENDCASE.

        IF ls_likp-vbeln IS NOT INITIAL.
*{  BEGIN OF INSERT WMR-180918-3000010497
          IF ls_vbrp-vstel = ls_vbrp-werks.
*}  END OF INSERT WMR-180918-3000010497
            " Obtener dirección del Puesto de Expedición
            SELECT SINGLE v~vstel v~adrnr
              INTO (ls_tvst-vstel, ls_tvst-adrnr)
              FROM likp AS k INNER JOIN tvst AS v
              ON ( k~vstel EQ v~vstel )
              WHERE vbeln EQ ls_likp-vbeln.
*{  BEGIN OF INSERT WMR-180918-3000010497
          ELSE.
            " Cuando Puesto Expedición es diferente a Centro Productivo en la factura
            " se toma el Puesto Expedición con el mismo código del Centro Productivo
            SELECT SINGLE v~vstel v~adrnr
              INTO (ls_tvst-vstel, ls_tvst-adrnr)
              FROM tvswz AS t INNER JOIN tvst AS v
              ON ( t~vstel EQ v~vstel )
              WHERE t~werks = ls_vbrp-werks
                AND t~vstel = ls_vbrp-werks.
          ENDIF.
*}  END OF INSERT WMR-180918-3000010497

          IF ls_tvst IS NOT INITIAL.
            ls_address = get_address_data( ls_tvst-adrnr ).

            SELECT SINGLE landx INTO l_value
              FROM t005t
              WHERE spras EQ sy-langu
                AND land1 EQ ls_address-pais.

            CONCATENATE ls_address-street
                        ls_address-stnumb
                        ls_address-str_suppl1
                        ls_address-distri
                        ls_address-provin
                        ls_address-depmto
                        l_value
                        INTO r_dir_sdpr SEPARATED BY space.
            TRANSLATE r_dir_sdpr TO UPPER CASE.
          ENDIF.
        ENDIF.

*{I-NTP290317-3000006749
      WHEN '0020974592'. "Danper

        READ TABLE lt_const INTO ls_const WITH KEY campo  = 'DIR_SEDE_P'
                                                   valor1 = is_vbrk-bukrs.
        IF sy-subrc = 0.
          l_name = ls_const-valor2.
          r_dir_sdpr = me->get_text( pi_name   = l_name
                                     pi_id     = 'ST'
                                     pi_object = 'TEXT' ).
        ENDIF.
*}I-NTP290317-3000006749

    ENDCASE.

  ENDMETHOD.


  METHOD get_dscglo_item.

    DATA: l_global TYPE xfeld.

* Armar rango
    REFRESH ltr_kschl.
    LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '7' AND zz_opcion02 = ''.
      lwa_kschl-low = lwa_constakonv-kschl.
      lwa_kschl-sign = 'I'.
      lwa_kschl-option = 'EQ'.
      APPEND lwa_kschl TO ltr_kschl.
    ENDLOOP.

*{  BEGIN OF INSERT WMR-270619-3000012056
    " Descuentos Mixtos
    LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = 'D' AND zz_opcion02 = 'M'.
      lwa_kschl-low = lwa_constakonv-kschl.
      lwa_kschl-sign = 'I'.
      lwa_kschl-option = 'EQ'.
      APPEND lwa_kschl TO ltr_kschl.
    ENDLOOP.
*}  END OF INSERT WMR-270619-3000012056

*{  BEGIN OF REPLACE WMR-211216-3000005346
    ""* Calcular valor
    ""    IF ltr_kschl[] IS NOT INITIAL.
    ""      LOOP AT lt_konvv INTO lwa_konv WHERE knumv EQ pi_knumv
    ""                                       AND kposn EQ pi_posnr
    ""                                       AND kschl IN ltr_kschl
    ""*{  BEGIN OF INSERT WMR-160615
    ""                                       AND ( kherk EQ gc_chard OR kherk EQ gc_charg ).  " Sólo descuentos de Cabecera
    ""*}  END OF INSERT WMR-160615
    ""        IF lwa_konv-kbetr < 0.
    ""          lwa_konv-kwert = lwa_konv-kwert * -1.
    ""        ENDIF.
    ""        pe_desctoglob = pe_desctoglob + lwa_konv-kwert.
    ""      ENDLOOP.
    ""    ENDIF.

    CASE gw_license.
      WHEN '0020673876'.  " Beta
        l_global = abap_off.
      WHEN OTHERS.
        l_global = abap_on.
    ENDCASE.

    IF ltr_kschl[] IS NOT INITIAL.
*{E-3000011712-NTP030519
*      LOOP AT lt_konvv INTO lwa_konv WHERE knumv EQ pi_knumv
*                                       AND kposn EQ pi_posnr
*                                       AND kschl IN ltr_kschl
**                                       AND kherk IN lr_khrek
*                                       AND kstat EQ space.                            "I-WMR-200417-3000007094
*        lwa_konv-kwert = abs( lwa_konv-kwert ).
*        ADD lwa_konv-kwert TO pe_desctoglob.
*      ENDLOOP.
*}E-3000011712-NTP030519

*{I-3000011712-NTP170419
      DATA: lt_cardes_val TYPE ltt_cardes_val,
            ls_cardes_val LIKE LINE OF lt_cardes_val,
            ls_cardes     LIKE LINE OF et_cardes.

      get_cardes_val_condition(
        EXPORTING
          i_knumv = pi_knumv
          i_posnr = pi_posnr
          i_global = l_global
          i_tipdoc = i_tipdoc                       "I-080921-NTP-3000017358
          i_netwr = i_netwr                         "I-020921-NTP-3000017358
          i_kzwi1 = i_kzwi1                         "I-100921-NTP-3000017750
          i_check_expor = i_check_expor             "I-100921-NTP-3000017750
        IMPORTING
          et_cardes_val = lt_cardes_val ).

      LOOP AT lt_cardes_val INTO ls_cardes_val.
*{+010922-NTP-3000019741
        IF i_check_tg = abap_on OR i_check_bonif = abap_on.
          ADD ls_cardes_val-import TO e_tdscto_gratuito.
        ELSE.
*}+010922-NTP-3000019741
          ls_cardes-dscto = ls_cardes_val-import.
          ls_cardes-dscto_com = ls_cardes_val-_com.
          ls_cardes-dscto_pct = ls_cardes_val-_pct.
          ls_cardes-dscto_base = ls_cardes_val-_base.
*{I-020920-NTP-3000014481
          ls_cardes-nabi        = ls_cardes_val-_nabi.

          IF ls_cardes-nabi = abap_on.
            ADD ls_cardes-dscto TO e_desctoglob_nabi.
          ELSE.
            ADD ls_cardes-dscto TO e_desctoglob_sabi.
          ENDIF.
*}I-020920-NTP-3000014481
          APPEND ls_cardes TO et_cardes.
        ENDIF.
      ENDLOOP.
*}I-3000011712-NTP170419

    ENDIF.
*}  END OF REPLACE WMR-211216-3000005346

  ENDMETHOD.                    "get_dscglo_item


  METHOD get_fact_anticipos.

    TYPES: BEGIN OF lty_vbap1,
             vbeln TYPE vbap-vbeln,
             posnr TYPE vbap-posnr,
             vgbel TYPE vbap-vgbel,
             vgpos TYPE vbap-vgpos,
             vgtyp TYPE vbap-vgtyp,
           END OF lty_vbap1.

    DATA:
      lth_vbrk_  TYPE HASHED TABLE OF   lty_vbrk             WITH UNIQUE KEY vbeln,
      lt_vbrp_   TYPE STANDARD TABLE OF lty_vbrp,
      lth_vbap   TYPE HASHED TABLE OF   lty_vbap1            WITH UNIQUE KEY vbeln posnr,
      lt_vbap1   TYPE STANDARD TABLE OF lty_vbap1,
      lth_doccab TYPE HASHED TABLE OF   lty_cabecera_monitor WITH UNIQUE KEY bukrs zz_nrodocsap zz_numeracion,
      lt_factant TYPE STANDARD TABLE OF lty_vbrk,
      lr_pstyv   TYPE RANGE OF vbrp-pstyv,

      ls_pstyv   LIKE LINE OF lr_pstyv,
      ls_vbrp_   LIKE LINE OF lt_vbrp_,
      ls_vbap_   LIKE LINE OF lth_vbap,
      ls_vbfa    TYPE lty_xvbfa,
      ls_doccab  TYPE lty_cabecera_monitor,
      ls_homo12  LIKE LINE OF lt_catahomo12,
      ls_factant LIKE LINE OF lt_factant,
      ls_fact    LIKE LINE OF ct_fact,

      lw_tot_ant TYPE zostb_docexposc2-zz_tot_ant,
      lw_mwsbp   TYPE zostb_docexposc2-zz_tot_ant,  "I-160920-NTP-3000014481
      lw_tabix   TYPE sytabix.

    DATA: l_sercor TYPE zostb_felog-zzt_numeracion.                               "I-WMR-190918-3000009765

*{  BEGIN OF INSERT WMR-090715
    DATA: lt_vbfa         TYPE STANDARD TABLE OF lty_xvbfa,
          lt_vbfa_anticip TYPE STANDARD TABLE OF lty_xvbfa,
          lt_vbrk_anticip TYPE STANDARD TABLE OF lty_vbrk,
          ls_vbrk_anticip LIKE LINE OF lt_vbrk_anticip.
*{  END OF INSERT WMR-090715

    FIELD-SYMBOLS:
      <fs_vbrk>   LIKE LINE OF lth_vbrk_,
      <fs_aplant> LIKE LINE OF ct_fact.                               "I-WMR-240117-3000006411

*{  BEGIN OF INSERT WMR-090715
    CASE gw_license.
      WHEN '0020316164'. "Modasa
        " Clase de Condición de Aplicacion de Anticipos
        CLEAR ltr_kschl.
        LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '9' AND zz_opcion02 = space.
          CLEAR lwa_kschl.
          lwa_kschl-low     = lwa_constakonv-kschl.
          lwa_kschl-sign    = 'I'.
          lwa_kschl-option  = 'EQ'.
          APPEND lwa_kschl TO ltr_kschl.
        ENDLOOP.

        " Clase de Factura de Anticipos
        CLEAR ltr_fkart.
        LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '6' AND zz_opcion02 = '1' .
          CLEAR lwa_fkart.
          lwa_fkart-low     = lwa_constfkart-fkart.
          lwa_fkart-sign    = 'I'.
          lwa_fkart-option  = 'EQ'.
          APPEND lwa_fkart TO ltr_fkart.
        ENDLOOP.

        IF ltr_kschl[] IS NOT INITIAL AND ltr_fkart[] IS NOT INITIAL.
          LOOP AT lt_konv INTO lwa_konv WHERE knumv EQ is_vbrk-knumv
                                          AND kschl IN ltr_kschl.
            ADD lwa_konv-kwert TO lw_tot_ant.
          ENDLOOP.
          lw_tot_ant = abs( lw_tot_ant ).

          IF lw_tot_ant GT 0.
            lt_vbrp_[] = it_vbrp[].
            DELETE lt_vbrp_ WHERE autyp NE gc_charc.

            CHECK lt_vbrp_[] IS NOT INITIAL.

            " Búsqueda de Facturas de Anticipos en base a Facturas de Adelanto
            " a partir del Pedido de Fábrica
            SORT lt_vbrp_ BY aubel ASCENDING.
            DELETE ADJACENT DUPLICATES FROM lt_vbrp_ COMPARING aubel.

            CLEAR lt_vbfa_anticip.
            SELECT *
              INTO TABLE lt_vbfa_anticip
              FROM vbfa
              FOR ALL ENTRIES IN lt_vbrp_
              WHERE vbelv EQ lt_vbrp_-aubel
                AND vbtyp_n EQ gc_charm
                AND vbtyp_v EQ gc_charc.

            SORT lt_vbfa_anticip BY vbeln ASCENDING.
            DELETE ADJACENT DUPLICATES FROM lt_vbfa_anticip COMPARING vbeln.

            CHECK lt_vbfa_anticip[] IS NOT INITIAL.

            SELECT bukrs vbeln xblnr netwr mwsbk
              INTO CORRESPONDING FIELDS OF TABLE lt_vbrk_anticip
              FROM vbrk
              FOR ALL ENTRIES IN lt_vbfa_anticip
              WHERE vbeln EQ lt_vbfa_anticip-vbeln
                AND fkart IN ltr_fkart
                AND fksto EQ space.

            " Eliminar Factura Adelanto si tiene Nota de Crédito
            CLEAR lt_vbfa.
            IF lt_vbrk_anticip[] IS NOT INITIAL.
              SELECT *
                INTO TABLE lt_vbfa
                FROM vbfa
                FOR ALL ENTRIES IN lt_vbrk_anticip
                WHERE vbelv EQ lt_vbrk_anticip-vbeln
                  AND vbtyp_n EQ gc_charo
                  AND vbtyp_v EQ gc_charm.

              SORT lt_vbfa BY vbelv ASCENDING vbeln ASCENDING.
              DELETE ADJACENT DUPLICATES FROM lt_vbfa COMPARING vbelv.
            ENDIF.

            LOOP AT lt_vbrk_anticip INTO ls_vbrk_anticip.
              lw_tabix = sy-tabix.
              READ TABLE lt_vbfa TRANSPORTING NO FIELDS
                   WITH KEY vbelv = ls_vbrk_anticip-vbeln.
              IF sy-subrc EQ 0.
                DELETE lt_vbrk_anticip INDEX lw_tabix.
                CONTINUE.
              ENDIF.
*              ls_vbrk_anticip-zz_numeracion = ls_vbrk_anticip-xblnr+4.            "E-WMR-190918-3000009765
              split_xblnr( EXPORTING i_xblnr  = ls_vbrk_anticip-xblnr             "I-WMR-190918-3000009765
                           IMPORTING e_sercor = l_sercor ).                       "I-WMR-190918-3000009765
              ls_vbrk_anticip-zz_numeracion = l_sercor.                           "I-WMR-190918-3000009765
              MODIFY lt_vbrk_anticip FROM ls_vbrk_anticip INDEX lw_tabix.
            ENDLOOP.

            CHECK lt_vbrk_anticip[] IS NOT INITIAL.

            LOOP AT lt_vbrk_anticip INTO ls_vbrk_anticip.
              CLEAR ls_homo12.
              READ TABLE lt_catahomo12 INTO ls_homo12
                   WITH KEY zz_tip_doc = ls_vbrk_anticip-xblnr(2).

              CLEAR ls_fact.
              ls_fact-bukrs         = is_vbrk-bukrs.
*              ls_fact-pstyv         = ls_vbrk_anticip-pstyv.                                 "I-3000011712-NTP210419
              ls_fact-zz_nrodocsap  = is_vbrk-vbeln.
              ls_fact-zz_numeracion = is_vbrk-zz_numeracion.
              " Tipo de operación
              ls_fact-zz_tip_ope    = is_vbrk-zz_tip_ope.
              " Factura Anticipo
              ls_fact-zz_tipdocant  = ls_vbrk_anticip-xblnr(2).
              ls_fact-zz_ser_ant    = ls_vbrk_anticip-zz_numeracion.
              " Monto de aplicación de anticipos
              ls_fact-zz_mto_neto   = abs( ls_vbrk_anticip-netwr ).                          "I-3000011712-NTP210419
              ls_fact-zz_mto_pre    = abs( ls_vbrk_anticip-netwr ).
              " Código del Tipo de Documento que generó el anticipo
              ls_fact-zz_tidocre    = ls_homo12-zz_tidocre.
              CONDENSE ls_fact-zz_tidocre.
              COLLECT ls_fact INTO ct_fact.
            ENDLOOP.

*{  BEGIN OF REPLACE WMR-240117-3000006411
            ""            LOOP AT ct_fact INTO ls_fact WHERE bukrs          EQ is_cabsal2-bukrs
            ""                                           AND zz_nrodocsap   EQ is_cabsal2-zz_nrodocsap
            ""                                           AND zz_numeracion  EQ is_cabsal2-zz_numeracion.
            ""              lw_tabix = sy-tabix.
            ""              ls_fact-zz_tot_ant = lw_tot_ant.
            ""              MODIFY ct_fact FROM ls_fact INDEX lw_tabix.
            ""            ENDLOOP.

            lw_tabix = 0.
            LOOP AT ct_fact ASSIGNING <fs_aplant> WHERE bukrs          EQ is_cabsal2-bukrs
                                                    AND zz_nrodocsap   EQ is_cabsal2-zz_nrodocsap
                                                    AND zz_numeracion  EQ is_cabsal2-zz_numeracion.
              ADD 1 TO lw_tabix.
              <fs_aplant>-zz_nroposicion = lw_tabix.
            ENDLOOP.

            " Monto total de la Factura de Anticipos (incluído IGV)
            e_tot_ant = lw_tot_ant.
            e_mwsbp = lw_tot_ant * is_vbrk-igvporcent / 100. "I-160920-NTP-3000014481
*}  END OF REPLACE WMR-240117-3000006411

          ENDIF.
        ENDIF.

      WHEN OTHERS.
*{  END OF INSERT WMR-090715

        LOOP AT lt_constpstyv INTO lwa_constpstyv WHERE zz_opcion01 = '3'.
          CLEAR ls_pstyv.
          ls_pstyv-low    = lwa_constpstyv-pstyv.
          ls_pstyv-sign   = 'I'.
          ls_pstyv-option = 'EQ'.
          APPEND ls_pstyv TO lr_pstyv.
        ENDLOOP.

        CHECK lr_pstyv[] IS NOT INITIAL.

        " Sólo con la posiciones de aplicación de anticipos
*{I-110521-NTP-3000016163
*        lt_vbrp_[] = it_vbrp[].
        SELECT vbeln posnr pstyv netwr mwsbp aubel aupos
          INTO CORRESPONDING FIELDS OF TABLE lt_vbrp_
          FROM vbrp
          FOR ALL ENTRIES IN it_vbrp
          WHERE vbeln = it_vbrp-vbeln
            AND posnr = it_vbrp-posnr.
*}I-110521-NTP-3000016163

        DELETE lt_vbrp_ WHERE pstyv NOT IN lr_pstyv.

        CHECK lt_vbrp_[] IS NOT INITIAL.

        " Búsqueda de Facturas de Anticipos en base a Pedidos de aplicación de anticipos
        SORT lt_vbrp_ BY aubel ASCENDING aupos ASCENDING.
        DELETE ADJACENT DUPLICATES FROM lt_vbrp_ COMPARING aubel aupos.

        SELECT vbeln posnr vgbel vgpos
          INTO TABLE lth_vbap
          FROM vbap
          FOR ALL ENTRIES IN lt_vbrp_
          WHERE vbeln EQ lt_vbrp_-aubel
            AND posnr EQ lt_vbrp_-aupos
            AND vgtyp EQ gc_charm. " Factura

        CHECK lth_vbap[] IS NOT INITIAL.

        lt_vbap1[] = lth_vbap[].
        SORT lt_vbap1 BY vgbel ASCENDING.
        DELETE ADJACENT DUPLICATES FROM lt_vbap1 COMPARING vgbel.

        SELECT bukrs vbeln xblnr netwr mwsbk
          INTO CORRESPONDING FIELDS OF TABLE lth_vbrk_
          FROM vbrk
          FOR ALL ENTRIES IN lt_vbap1
          WHERE vbeln EQ lt_vbap1-vgbel.

        CHECK lth_vbrk_[] IS NOT INITIAL.

        " Búsqueda de Tipo de documento por Factura de Anticipo
        LOOP AT lth_vbrk_ ASSIGNING <fs_vbrk>.
          <fs_vbrk>-tipodoc       = <fs_vbrk>-xblnr(2).                         "I-WMR-031015
*          <fs_vbrk>-zz_numeracion = <fs_vbrk>-xblnr+4.                            "E-WMR-190918-3000009765
          split_xblnr( EXPORTING i_xblnr  = <fs_vbrk>-xblnr                       "I-WMR-190918-3000009765
                       IMPORTING e_sercor = l_sercor ).                           "I-WMR-190918-3000009765
          <fs_vbrk>-zz_numeracion = l_sercor.                                     "I-WMR-190918-3000009765
        ENDLOOP.

*{  BEGIN OF DELETE WMR-031015
        ""        lt_factant[] = lth_vbrk_[].
        ""        SORT lt_factant BY zz_numeracion ASCENDING.
        ""        DELETE ADJACENT DUPLICATES FROM lt_factant COMPARING zz_numeracion.

        ""        SELECT mandt bukrs zz_nrodocsap zz_numeracion zz_tipodoc
        ""          INTO CORRESPONDING FIELDS OF TABLE lth_doccab
        ""          FROM zostb_docexposca
        ""          FOR ALL ENTRIES IN lth_vbrk_
        ""          WHERE bukrs         EQ lth_vbrk_-bukrs
        ""            AND zz_nrodocsap  EQ lth_vbrk_-vbeln
        ""            AND zz_numeracion EQ lth_vbrk_-zz_numeracion.

        ""        CHECK lth_doccab[] IS NOT INITIAL.
*}  END OF DELETE WMR-031015

        LOOP AT lt_vbrp_ INTO ls_vbrp_.
          CLEAR ls_fact.
          ls_fact-bukrs         = is_vbrk-bukrs.
          ls_fact-pstyv         = ls_vbrp_-pstyv.                                 "I-3000011712-NTP210419
          ls_fact-zz_nrodocsap  = is_vbrk-vbeln.
          ls_fact-zz_numeracion = is_vbrk-zz_numeracion.
          " Tipo de operación
          ls_fact-zz_tip_ope    = is_vbrk-zz_tip_ope.

          READ TABLE lth_vbap INTO ls_vbap_
               WITH TABLE KEY vbeln = ls_vbrp_-aubel
                              posnr = ls_vbrp_-aupos.
          CHECK sy-subrc EQ 0.

          READ TABLE lth_vbrk_ ASSIGNING <fs_vbrk>
               WITH TABLE KEY vbeln = ls_vbap_-vgbel.
          CHECK sy-subrc EQ 0.

*{  BEGIN OF REPLACE WMR-031015
          ""          READ TABLE lth_doccab INTO ls_doccab
          ""               WITH TABLE KEY bukrs         = <fs_vbrk>-bukrs
          ""                              zz_nrodocsap  = <fs_vbrk>-vbeln
          ""                              zz_numeracion = <fs_vbrk>-zz_numeracion.
          ""          CHECK sy-subrc EQ 0.

          ""          READ TABLE lt_catahomo12 INTO ls_homo12
          ""               WITH KEY zz_tip_doc = ls_doccab-zz_tipodoc.
          ""          CHECK sy-subrc EQ 0.

          ""          " Factura Anticipo
          ""          ls_fact-zz_ser_ant = ls_doccab-zz_numeracion.
          " Determinar Tipo de documento relacionado
          READ TABLE lt_catahomo12 INTO ls_homo12
               WITH KEY zz_tip_doc = <fs_vbrk>-tipodoc.
          CHECK sy-subrc EQ 0.

          " Factura Anticipo
          ls_fact-zz_tipdocant = <fs_vbrk>-tipodoc.
          ls_fact-zz_ser_ant = <fs_vbrk>-zz_numeracion.
*}  END OF REPLACE WMR-031015
          " Monto de aplicación de anticipos
*{  BEGIN OF REPLACE WMR-160915 ANTICIPOS PETRAMAS
          ""          ls_fact-zz_mto_pre = abs( ls_vbrp_-netwr ).
          ls_fact-zz_mto_neto = abs( ls_vbrp_-netwr ).                          "I-3000011712-NTP210419
          ls_fact-zz_mto_pre = abs( ls_vbrp_-netwr + ls_vbrp_-mwsbp ).
*}  END OF REPLACE WMR-160915 ANTICIPOS PETRAMAS
          ""    ls_fact-zz_mto_pre = abs( ls_vbrp_-netwr + ls_vbrp_-mwsbp ).
          " Código del Tipo de Documento que generó el anticipo
          ls_fact-zz_tidocre = ls_homo12-zz_tidocre.
          CONDENSE ls_fact-zz_tidocre.

          ""    ADD ls_fact-zz_mto_pre TO lw_tot_ant.
*{  BEGIN OF REPLACE WMR-160915 ANTICIPOS PETRAMAS
          ""          " Monto Total de Aplicación de Anticipos, sin incluir IGV
          ""          lw_tot_ant = lw_tot_ant + abs( ls_vbrp_-netwr ).
          " Monto Total de Aplicación de Anticipos, incluir IGV
          lw_tot_ant = lw_tot_ant + abs( ls_vbrp_-netwr + ls_vbrp_-mwsbp ).
          lw_mwsbp   = lw_mwsbp + abs( ls_vbrp_-mwsbp ).                        "I-160920-NTP-3000014481
*}  END OF REPLACE WMR-160915 ANTICIPOS PETRAMAS

          COLLECT ls_fact INTO ct_fact.
        ENDLOOP.

*{  BEGIN OF REPLACE WMR-240117-3000006411
        ""        LOOP AT ct_fact INTO ls_fact WHERE bukrs          EQ is_cabsal2-bukrs
        ""                                       AND zz_nrodocsap   EQ is_cabsal2-zz_nrodocsap
        ""                                       AND zz_numeracion  EQ is_cabsal2-zz_numeracion.
        ""          lw_tabix = sy-tabix.
        ""          ls_fact-zz_tot_ant = lw_tot_ant.

        ""          ""    " Monto total de la Factura de Anticipos (incluído IGV)
        ""          ""    READ TABLE lt_factant INTO ls_factant
        ""          ""         WITH KEY zz_numeracion = ls_fact-zz_ser_ant.
        ""          ""    IF sy-subrc EQ 0.
        ""          ""      ls_fact-zz_mto_pre = abs( ls_factant-netwr + ls_factant-mwsbk ).
        ""          ""    ENDIF.

        ""          MODIFY ct_fact FROM ls_fact INDEX lw_tabix.
        ""        ENDLOOP.

        lw_tabix = 0.
        LOOP AT ct_fact ASSIGNING <fs_aplant> WHERE bukrs          EQ is_cabsal2-bukrs
                                                AND zz_nrodocsap   EQ is_cabsal2-zz_nrodocsap
                                                AND zz_numeracion  EQ is_cabsal2-zz_numeracion.
          ADD 1 TO lw_tabix.
          <fs_aplant>-zz_nroposicion = lw_tabix.
        ENDLOOP.

        " Monto total de la Factura de Anticipos (incluído IGV)
        e_tot_ant = lw_tot_ant.
        e_mwsbp = lw_mwsbp.     "I-160920-NTP-3000014481
*}  END OF REPLACE WMR-240117-3000006411

    ENDCASE.

  ENDMETHOD.


  METHOD get_fec_reg.
    DATA: lw_dat_time TYPE xsddatetime_z.

    CALL FUNCTION 'CACS_DATE_GET_TIMESTAMP'
      EXPORTING
        i_date                   = pi_datum
        i_time                   = pi_uzeit
      IMPORTING
        e_timestamp              = lw_dat_time
      EXCEPTIONS
        date_not_filled_but_time = 1
        date_has_no_valid_format = 2
        OTHERS                   = 3.

    IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ELSE.
      pe_datti = lw_dat_time.
    ENDIF.
  ENDMETHOD.


  METHOD get_fishery_data.

    TYPES: BEGIN OF ty_likp,
             vbeln TYPE  likp-vbeln,
             lfdat TYPE  likp-lfdat,
           END OF ty_likp,

           BEGIN OF ty_vbak,
             vbeln TYPE  vbak-vbeln,
             vdatu TYPE  vbak-vdatu,
           END OF ty_vbak.

    DATA: ls_vbak       TYPE ty_vbak,
          ls_likp       TYPE ty_likp,
          lw_lfdat      TYPE likp-lfdat,
          lw_day        TYPE scal-indicator,
          lw_day_fin    TYPE i,
          lw_dif        TYPE i,
          lw_dif_day    TYPE i,
          lw_semana_ini TYPE sy-datum,
          lw_fecha      TYPE sy-datum,
          lw_semana_fin TYPE sy-datum,
          lw_fecini     TYPE char10,
          lw_fecfin     TYPE char10,
          lw_week       TYPE scal-week,
          gs_dia_pesca  TYPE c,
          lw_valor1     TYPE string.

    FIELD-SYMBOLS:
      <fs_vbeln_va> TYPE any,
      <fs_vbeln_vl> TYPE any.

    ASSIGN COMPONENT 'VBELN' OF STRUCTURE is_vbak TO <fs_vbeln_va>.
    IF <fs_vbeln_va> IS ASSIGNED.
      " Embarcación: Matrícula y Denominación
      SELECT SINGLE a~bname AS zzmatemb d~eqktx AS zzmatembtxt
        INTO CORRESPONDING FIELDS OF es_fishery_data
        FROM vbak AS a INNER JOIN fleet AS b ON a~bname EQ b~license_num
                       INNER JOIN equi  AS c ON b~objnr EQ c~objnr
                       INNER JOIN eqkt  AS d ON c~equnr EQ d~equnr
        WHERE a~vbeln EQ <fs_vbeln_va>
          AND d~spras EQ sy-langu.
    ENDIF.

    ASSIGN COMPONENT 'VBELN' OF STRUCTURE is_likp TO <fs_vbeln_vl>.
    IF ( <fs_vbeln_vl> IS ASSIGNED AND <fs_vbeln_vl> IS NOT INITIAL ).
      SELECT SINGLE vbeln lfdat
        INTO ls_likp
        FROM likp
        WHERE vbeln EQ <fs_vbeln_vl>.
      IF sy-subrc EQ 0.
        lw_lfdat = ls_likp-lfdat.
      ENDIF.
    ELSE.
      SELECT SINGLE vbeln vdatu
        INTO ls_vbak
        FROM vbak
        WHERE vbeln EQ <fs_vbeln_va>.
      IF sy-subrc EQ 0.
        lw_lfdat = ls_vbak-vdatu.
      ENDIF.
    ENDIF.

    CHECK lw_lfdat IS NOT INITIAL.

    " Fecha de Pesca

    SELECT SINGLE valor1
      INTO lw_valor1
      FROM zostb_const_fe
      WHERE modulo      EQ 'FE'
        AND aplicacion  EQ 'FACTURA_NACIONAL'
        AND programa    EQ 'ZOSSD_RPT_RLB_INVOICE'
        AND campo       EQ 'DIA_PESC'.
    IF sy-subrc EQ 0.
      gs_dia_pesca = lw_valor1.
    ENDIF.

    IF gs_dia_pesca IS NOT INITIAL.
      " Obtenemos el día de la semana de la fecha obtenido de LIKP
      CALL FUNCTION 'DATE_COMPUTE_DAY'
        EXPORTING
          date = lw_lfdat
        IMPORTING
          day  = lw_day.

      IF gs_dia_pesca EQ lw_day.
        lw_semana_ini = lw_lfdat.
      ELSE.
        IF gs_dia_pesca < lw_day.
          lw_dif_day    = lw_day - gs_dia_pesca.
          lw_semana_ini = lw_lfdat - lw_dif_day.
        ELSE.
          lw_fecha = lw_lfdat - 7.
          lw_dif_day    = gs_dia_pesca - lw_day.
          lw_semana_ini = lw_fecha + lw_dif_day.
        ENDIF.
      ENDIF.

      CLEAR: lw_dif_day, lw_fecha.
      lw_day_fin = 3.
      IF lw_day EQ lw_day_fin.
        lw_semana_fin = lw_lfdat.
      ELSE.
        IF lw_day > lw_day_fin.
          lw_fecha      = lw_lfdat + 7.
          lw_dif_day    = lw_day - lw_day_fin.
          lw_semana_fin = lw_fecha - lw_dif_day.
        ELSE.
          lw_dif_day    = lw_day_fin - lw_day.
          lw_semana_fin = lw_lfdat + lw_dif_day.
        ENDIF.
      ENDIF.

      WRITE lw_semana_ini TO lw_fecini DD/MM/YYYY.
      WRITE lw_semana_fin TO lw_fecfin DD/MM/YYYY.
      CONCATENATE 'Del' lw_fecini 'al' lw_fecfin INTO es_fishery_data-zzpesfec SEPARATED BY space.

      " Semana de Pesca
      CALL FUNCTION 'DATE_GET_WEEK'
        EXPORTING
          date         = lw_semana_fin
        IMPORTING
          week         = lw_week
        EXCEPTIONS
          date_invalid = 1
          OTHERS       = 2.
      IF sy-subrc EQ 0.
        es_fishery_data-zzpessem = lw_week+4(2).
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD get_fi_document.

    CLEAR r_belnr.

    SELECT SINGLE belnr
      INTO r_belnr
      FROM bkpf
      WHERE awtyp EQ 'VBRK'
        AND awkey EQ i_vbeln.

  ENDMETHOD.


  METHOD get_formadepago.

    DATA: lt_bkpf   TYPE TABLE OF bkpf_key,
          lt_bseg   TYPE TABLE OF bseg,
          lt_bsegfp TYPE TABLE OF zosfetb_bsegfp,
          ls_bseg   LIKE LINE OF  lt_bseg,
          ls_bsegfp LIKE LINE OF  lt_bsegfp.
    DATA: ls_t052      LIKE LINE OF gt_t052,
          ls_formapago LIKE LINE OF et_formapago,
          ls_faede     TYPE         faede,
          l_factura    TYPE         vbeln.
    DATA: ls_const  LIKE LINE OF lt_const,
          lr_auart  TYPE RANGE OF vbak-auart,
          lr_motivo TYPE RANGE OF string,
          ls_motivo LIKE LINE OF lr_motivo,
          ls_auart  LIKE LINE OF lr_auart,
          ls_vbrp   LIKE LINE OF it_vbrp,
          l_auart   TYPE auart.
    FIELD-SYMBOLS: <fs_bseg> LIKE LINE OF lt_bseg.


    "00. Constantes
    LOOP AT lt_const INTO ls_const.
      CASE ls_const-campo.
        WHEN 'AUART_NCAJ'. "Cl.doc.venta: NC por Ajustes - Montos y/o fechas de pago
          ls_auart-sign   = ls_const-signo.
          ls_auart-option = ls_const-opcion.
          ls_auart-low    = ls_const-valor1.
          ls_auart-high   = ls_const-valor2.
          APPEND ls_auart TO lr_auart.
        WHEN 'MOTNC_AJFP'.
          ls_motivo-sign   = ls_const-signo.
          ls_motivo-option = ls_const-opcion.
*{E-WMR-07092021-3000016539
**          READ TABLE lt_catahomo09 INTO ls_catahomo09 WITH KEY augru = ls_const-valor1.
**          IF sy-subrc = 0.
**            ls_motivo-low = ls_catahomo09-zz_codigo_sunat.
**          ENDIF.
*{E-WMR-07092021-3000016539
          ls_motivo-low    = ls_const-valor1.                                       "I-WMR-07092021-3000016539
          ls_motivo-high   = ls_const-valor2.                                       "I-WMR-07092021-3000016539
          APPEND ls_motivo TO lr_motivo.
      ENDCASE.
    ENDLOOP.


    " Determinar Transferencia Gratuita                                               "+010722-NTP-3000018956
    e_check_tg = determine_free_transfer( is_vbrk = is_vbrk                           "+010722-NTP-3000018956
                                          it_vbrp = it_vbrp ).                        "+010722-NTP-3000018956
    IF e_fp_nc_ajuste IS NOT INITIAL AND gw_license = '0020262397'. "Artesco          "I-100321-NTP-3000016017
      e_check_tg = abap_true.                                                         "I-100321-NTP-3000016017
    ENDIF.                                                                            "I-100321-NTP-3000016017


    "01. PaymentMeansID
    READ TABLE gt_t052 INTO ls_t052 WITH KEY zterm = is_vbrk-zterm.
    IF sy-subrc = 0.
      IF ( ls_t052-ztag1 > 0 OR ls_t052-xsplt = abap_on ) AND e_check_tg IS INITIAL. "+010722-NTP-3000018956
        e_fp_tipo = 'Credito'.

        "02. NC o Factura
        IF is_vbrk-zz_sdrefer IS NOT INITIAL.
          l_factura = is_vbrk-zz_sdrefer.
        ELSE.
          l_factura = is_vbrk-vbeln.
        ENDIF.

        "03. Get bkpf
        SELECT mandt bukrs belnr gjahr
          INTO TABLE lt_bkpf
          FROM bkpf
          WHERE awkey = l_factura
            AND awtyp = 'VBRK'.

        "04. Get bseg
        IF lt_bkpf IS NOT INITIAL.
          SELECT bukrs belnr gjahr buzei koart shkzg wrbtr
                 pswsl fdtag zfbdt zterm zbd1t zbd2t zbd3t
                 rebzg rebzt
            INTO CORRESPONDING FIELDS OF TABLE lt_bseg
            FROM bseg
            FOR ALL ENTRIES IN lt_bkpf
            WHERE bukrs = lt_bkpf-bukrs
              AND belnr = lt_bkpf-belnr
              AND gjahr = lt_bkpf-gjahr.
        ENDIF.

        DELETE lt_bseg WHERE koart <> gc_chard.


        "05. Get bsegfp
        SELECT * INTO TABLE lt_bsegfp
          FROM zosfetb_bsegfp
          WHERE vbeln = l_factura.


        "06. Actualizar cuotas
        LOOP AT lt_bsegfp INTO ls_bsegfp.

          "06.1 Nueva condicion
          READ TABLE gt_t052 INTO ls_t052 WITH KEY zterm = ls_bsegfp-zterm.

          "06.2 Actualizar
          READ TABLE lt_bseg ASSIGNING <fs_bseg> WITH KEY bukrs = ls_bsegfp-bukrs
                                                          belnr = ls_bsegfp-belnr
                                                          gjahr = ls_bsegfp-gjahr
                                                          buzei = ls_bsegfp-buzei.
          IF sy-subrc = 0.
            CLEAR: <fs_bseg>-fdtag.
            <fs_bseg>-zbd1t = ls_t052-ztag1.
            <fs_bseg>-zbd2t = ls_t052-ztag2.
            <fs_bseg>-zbd3t = ls_t052-ztag3.
          ENDIF.
        ENDLOOP.


        "07. Cuotas
        LOOP AT lt_bseg INTO ls_bseg.

          "07.1 Adicionar cuota
          ls_formapago-cuota = ls_bseg-wrbtr.

          "07.2 Fecha de vencimiento
          IF ( ls_bseg-fdtag IS NOT INITIAL )
         AND ( gw_license    <> '0020744072' ).   "MEDROCK
            ls_formapago-fec_vto = ls_bseg-fdtag.
          ELSE.
            ls_faede-shkzg  = ls_bseg-shkzg.
            ls_faede-koart  = ls_bseg-koart.
            ls_faede-zfbdt  = ls_bseg-zfbdt.
            ls_faede-zbd1t  = ls_bseg-zbd1t.
            ls_faede-zbd2t  = ls_bseg-zbd2t.
            ls_faede-zbd3t  = ls_bseg-zbd3t.
            ls_faede-rebzg  = ls_bseg-rebzg.
            ls_faede-rebzt  = ls_bseg-rebzt.

            CALL FUNCTION 'DETERMINE_DUE_DATE'
              EXPORTING
                i_faede = ls_faede
              IMPORTING
                e_faede = ls_faede.

            ls_formapago-fec_vto = ls_faede-netdt.
          ENDIF.


          APPEND ls_formapago TO et_formapago.

          "07.3 Total
          ADD ls_bseg-wrbtr TO e_fp_total.
        ENDLOOP.

        "08
        IF ls_formapago-fec_vto IS INITIAL.
          ls_formapago-fec_vto = is_vbrk-fkdat + ls_t052-ztag1.
        ENDIF.
      ELSE.
        e_fp_tipo = 'Contado'.
        ls_formapago-fec_vto = is_vbrk-fkdat.
      ENDIF.
    ENDIF.

    "08. Fecha de Vencimiento la ultima cuota
    CONCATENATE ls_formapago-fec_vto+0(4)
                ls_formapago-fec_vto+4(2)
                ls_formapago-fec_vto+6(2) INTO e_fp_fec_vto SEPARATED BY '-'.


*{I-040521-NTP-3000016917
    "13: NC por ajustes
    READ TABLE it_vbrp INTO ls_vbrp INDEX 1.
    IF sy-subrc = 0.
      SELECT SINGLE auart INTO l_auart
        FROM vbak
        WHERE vbeln = ls_vbrp-aubel.
      IF sy-subrc EQ 0 AND
        l_auart IN lr_auart AND lr_auart IS NOT INITIAL AND
        is_vbrk-tmotivo IN lr_motivo AND lr_motivo IS NOT INITIAL.
        e_fp_nc_ajuste = abap_on.
      ENDIF.
    ENDIF.
*}I-040521-NTP-3000016917

  ENDMETHOD.


  METHOD get_guia_remision.

    DATA: lt_lips  TYPE STANDARD TABLE OF lty_vbap_lips,
          lr_tfact TYPE RANGE OF lty_vbrk-tfact,
          lr_vgtyp TYPE RANGE OF vbrp-vgtyp,

          ls_lips  LIKE LINE OF lt_lips,
          ls_tfact LIKE LINE OF lr_tfact VALUE 'IEQ',
          ls_vgtyp LIKE LINE OF lr_vgtyp VALUE 'IEQ',

          l_xblnr  TYPE vbrk-xblnr,
          l_sercor TYPE zostb_felog-zzt_numeracion.

    " Factura
    ls_tfact-low = gc_tipdoc_fa.  APPEND ls_tfact TO lr_tfact.
    " Boleta
    ls_tfact-low = gc_tipdoc_bl.  APPEND ls_tfact TO lr_tfact.
    CASE gs_process-license.
      WHEN '0020262397'.  " ARTESCO
        " Nota de crédito
        ls_tfact-low = gc_tipdoc_nc.  APPEND ls_tfact TO lr_tfact.
    ENDCASE.

    " Entregas de SM
    ls_vgtyp-low = gc_charc.  APPEND ls_vgtyp TO lr_vgtyp.
    ls_vgtyp-low = gc_charj.  APPEND ls_vgtyp TO lr_vgtyp.
    CASE gs_process-license.
      WHEN '0020262397'.  " ARTESCO
        " Devoluciones
        ls_vgtyp-low = gc_charh.  APPEND ls_vgtyp TO lr_vgtyp.
        ls_vgtyp-low = gc_chart.  APPEND ls_vgtyp TO lr_vgtyp.
    ENDCASE.

    CHECK is_vbrk-tfact IN lr_tfact.
    CHECK is_vbrp-vgtyp IN lr_vgtyp.

    CASE is_vbrp-vgtyp.
      WHEN gc_charj
        OR gc_chart.
        LOOP AT lt_likp INTO lwa_likp WHERE vbeln = is_vbrp-vgbel
                                        AND xblnr <> space.
          l_xblnr = lwa_likp-xblnr.
          split_xblnr( EXPORTING i_xblnr  = l_xblnr
                       IMPORTING e_sercor = l_sercor ).
          lwa_guiremi-xblnr = l_sercor.
          MOVE lwa_likp-wadat_ist TO lwa_guiremi-wadat_ist.
          COLLECT lwa_guiremi INTO ct_guiremi.
        ENDLOOP.
      WHEN gc_charc
        OR gc_charh.
        lt_lips[] = lt_vbap_lips[].
        DELETE lt_lips WHERE NOT ( vbelv = is_vbrp-aubel AND posnv = is_vbrp-aupos ).
        SORT lt_lips BY vbeln ASCENDING.
        DELETE ADJACENT DUPLICATES FROM lt_lips COMPARING vbeln.

        LOOP AT lt_lips INTO ls_lips.
          LOOP AT lt_likp INTO lwa_likp WHERE vbeln = ls_lips-vbeln
                                          AND xblnr <> space.
            l_xblnr = lwa_likp-xblnr.
            split_xblnr( EXPORTING i_xblnr  = l_xblnr
                         IMPORTING e_sercor = l_sercor ).
            lwa_guiremi-xblnr = l_sercor.
            MOVE lwa_likp-wadat_ist TO lwa_guiremi-wadat_ist.
            COLLECT lwa_guiremi INTO ct_guiremi.
          ENDLOOP.
        ENDLOOP.
    ENDCASE.

  ENDMETHOD.


  METHOD get_incoterms_part_2.

*{  BEGIN OF INSERT WMR-280417-3000007140
    DATA: lr_inco1_grp1 TYPE RANGE OF vbrk-inco1,
          lr_inco1_grp2 TYPE RANGE OF vbrk-inco1,

          ls_inco1      LIKE LINE OF lr_inco1_grp1,
          ls_const      TYPE lty_const,
          ls_vbrp       TYPE lty_vbrp,
          ls_adrc       TYPE adrc,                                            "I-WMR-150617-3000007448

          l_value       TYPE string.
*}  END OF INSERT WMR-280417-3000007140

    r_inco2 = is_vbrk-inco2.

    CASE gw_license.
      WHEN '0020886783'. "Pedregal
        " Tomar Descripción de Puesto de Aduanas de Salida
        SELECT SINGLE t~bezei
          INTO r_inco2
          FROM eikp AS e INNER JOIN t615t AS t
          ON ( e~aland EQ t~land1 AND e~zolla EQ t~zolla )
          WHERE e~exnum EQ is_vbrk-exnum
            AND t~spras EQ sy-langu.

*{  BEGIN OF INSERT WMR-280417-3000007140
      WHEN '0020974592'.  " DANPER
        CLEAR r_inco2.                                                          "I-WMR-150617-3000007448

        LOOP AT lt_const INTO ls_const.
          CASE ls_const-campo.
            WHEN 'TTG1_INCO1'.
              CLEAR ls_inco1.
              ls_inco1-sign   = ls_const-signo.
              ls_inco1-option = ls_const-opcion.
              ls_inco1-low    = ls_const-valor1.
              ls_inco1-high   = ls_const-valor2.
              APPEND ls_inco1 TO lr_inco1_grp1.
            WHEN 'TTG2_INCO1'.
              CLEAR ls_inco1.
              ls_inco1-sign   = ls_const-signo.
              ls_inco1-option = ls_const-opcion.
              ls_inco1-low    = ls_const-valor1.
              ls_inco1-high   = ls_const-valor2.
              APPEND ls_inco1 TO lr_inco1_grp2.
          ENDCASE.
        ENDLOOP.

        IF ( is_vbrk-inco1 IN lr_inco1_grp1 AND lr_inco1_grp1[] IS NOT INITIAL ).
          " Obtener Nombre del Centro
          LOOP AT it_vbrp INTO ls_vbrp WHERE vbeln EQ is_vbrk-vbeln.
            EXIT.
          ENDLOOP.
          IF sy-subrc EQ 0.
            CLEAR l_value.
            SELECT SINGLE a~name1 INTO l_value
              FROM t001w AS w INNER JOIN adrc AS a
              ON w~adrnr EQ a~addrnumber
              WHERE w~werks EQ ls_vbrp-werks.

            IF l_value IS NOT INITIAL.  r_inco2 = l_value. ENDIF.
          ENDIF.

        ELSEIF ( is_vbrk-inco1 IN lr_inco1_grp2 AND lr_inco1_grp2[] IS NOT INITIAL ).

*{  BEGIN OF REPLACE WMR-150617-3000007448
          ""          r_inco2 = 'Callao, Perú'.

          " Tomar Interlocutor "Puerto de Carga" de Factura
          READ TABLE lt_vbpa INTO lwa_vbpa
               WITH KEY parvw = gc_parvw_zd.
          IF sy-subrc EQ 0.
            SELECT SINGLE addrnumber date_from nation name1 country
              INTO CORRESPONDING FIELDS OF ls_adrc
              FROM adrc
              WHERE addrnumber EQ lwa_vbpa-adrnr
                AND date_from  EQ '00010101'
                AND nation     EQ space.
            IF ls_adrc IS NOT INITIAL.
              " País
              SELECT SINGLE landx INTO l_value
                FROM t005t
                WHERE spras EQ sy-langu
                  AND land1 EQ ls_adrc-country.
              IF l_value IS NOT INITIAL.
                CONCATENATE ls_adrc-name1 l_value INTO r_inco2 SEPARATED BY ','.
              ENDIF.
            ENDIF.
          ENDIF.
*}  END OF REPLACE WMR-150617-3000007448

        ELSE.

          " Tomar Calle y País de Interlocutor "Destinatario de Mcías" de Factura
          READ TABLE lt_vbpa INTO lwa_vbpa
               WITH KEY parvw = gc_parvw_we.
          IF sy-subrc EQ 0.
            " País Destino
            SELECT SINGLE landx INTO r_inco2
              FROM t005t
              WHERE spras EQ sy-langu
                AND land1 EQ lwa_vbpa-land1.

            " Calle
            CLEAR l_value.
            SELECT SINGLE street INTO l_value
              FROM adrc
              WHERE addrnumber EQ lwa_vbpa-adrnr.

            IF l_value IS NOT INITIAL.
              CONCATENATE l_value r_inco2 INTO r_inco2 SEPARATED BY ','.
            ENDIF.
          ENDIF.

        ENDIF.
*}  END OF INSERT WMR-280417-3000007140

    ENDCASE.

  ENDMETHOD.


  METHOD get_last_identify.

    DATA: lt_numeracion TYPE tt_numeracion,
          lw_correl     TYPE char6,
          lw_numero     TYPE i.

    FIELD-SYMBOLS: <fs_numeracion> TYPE ty_numeracion.

    r_lastnum = '0'.

    lt_numeracion[] = it_numeracion[].

    IF lt_numeracion[] IS NOT INITIAL.
      LOOP AT lt_numeracion ASSIGNING <fs_numeracion>.
        lw_correl = <fs_numeracion>-identi+12.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = lw_correl
          IMPORTING
            output = lw_correl.
        lw_numero = lw_correl.
        <fs_numeracion>-correl = lw_numero.
      ENDLOOP.

      SORT lt_numeracion BY correl DESCENDING.
      READ TABLE lt_numeracion ASSIGNING <fs_numeracion> INDEX 1.
      lw_correl = <fs_numeracion>-correl.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = lw_correl
        IMPORTING
          output = r_lastnum.
    ENDIF.

  ENDMETHOD.


  METHOD get_leyendas.

    DATA: lwa_spell    TYPE spell,
          lv_moneda    TYPE tcurt-ltext,
          lv_netwr     TYPE p DECIMALS 6,
          lv_netwr_aux TYPE vbrp-netwr,
          ls_tcurt     TYPE zostb_tcurt.                                       "I-WMR-231215

    SELECT SINGLE *                                                             "I-WMR-231215
      INTO ls_tcurt                                                             "I-WMR-231215
      FROM zostb_tcurt                                                          "I-WMR-231215
      WHERE waers EQ pe_vbrk-waerk                                              "I-WMR-231215
        AND begda LE pe_vbrk-fkdat                                              "I-WMR-231215
        AND endda GE pe_vbrk-fkdat.                                             "I-WMR-231215

*   Leyenda 1 - Importe en letras
    IF pe_vbrk-imporpermn > 0.
      lv_netwr = pe_vbrk-imptotvent + pe_vbrk-imporpermn.
    ELSE.
      lv_netwr = pe_vbrk-imptotvent.
    ENDIF.
    lv_netwr_aux = lv_netwr.
    CALL FUNCTION 'SPELL_AMOUNT'
      EXPORTING
        amount    = lv_netwr_aux
        currency  = pe_vbrk-waerk
        language  = sy-langu
      IMPORTING
        in_words  = lwa_spell
      EXCEPTIONS
        not_found = 1
        too_large = 2
        OTHERS    = 3.
    IF sy-subrc NE 0.
      MESSAGE text-e31 TYPE 'E'. "#EC NOTEXT               "M LJG-21.05.2018
    ENDIF.
*{  BEGIN OF REPLACE WMR-241215
    ""    SELECT SINGLE ltext
    ""    INTO lv_moneda
    ""    FROM tcurt
    ""    WHERE spras = sy-langu AND
    ""          waers = pe_vbrk-waerk.
    ""    IF sy-subrc = 0.
    IF ls_tcurt IS NOT INITIAL.
*}  END OF REPLACE WMR-241215
      CONCATENATE lwa_spell-decimal(2) '/100' pe_vbrk-leyendas  INTO pe_vbrk-leyendas.
*{  BEGIN OF REPLACE WMR-050116
      ""      CONCATENATE lwa_spell-word 'y' pe_vbrk-leyendas lv_moneda INTO pe_vbrk-leyendas SEPARATED BY space.
      IF lv_netwr_aux LE 1.
        CONCATENATE lwa_spell-word 'y' pe_vbrk-leyendas ls_tcurt-nomsun INTO pe_vbrk-leyendas SEPARATED BY space.
      ELSE.
        CONCATENATE lwa_spell-word 'y' pe_vbrk-leyendas ls_tcurt-nommon2 INTO pe_vbrk-leyendas SEPARATED BY space.
      ENDIF.
*}  END OF REPLACE WMR-050116
      TRANSLATE pe_vbrk-leyendas TO UPPER CASE.
      pe_vbrk-leyendasho = '1'.
    ENDIF.

*   Leyenda 2 - Percepción
    IF pe_vbrk-imporpermn NE 0.
*{  BEGIN OF REPLACE WMR-181017-3000008124
      ""      CONCATENATE pe_vbrk-leyendas02 'COMPROBANTE DE PERCEPCION' INTO  pe_vbrk-leyendas02 SEPARATED BY space.
      pe_vbrk-leyendas02 = 'COMPROBANTE DE PERCEPCION'.
*}  END OF REPLACE WMR-181017-3000008124
      pe_vbrk-leyendasho02 = '3'.
    ENDIF.

*   Leyenda 3 - Transferencia Gratuita
*{  BEGIN OF REPLACE WMR-050615
    ""    REFRESH ltr_fkart.
    ""    LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '2' AND zz_opcion02 = ' '.
    ""      lwa_kschl-low    = lwa_constfkart-fkart.
    ""      lwa_kschl-sign   = 'I'.
    ""      lwa_kschl-option = 'EQ'.
    ""      APPEND lwa_kschl TO ltr_fkart.
    ""    ENDLOOP.
    ""    IF pe_vbrk-fkart IN ltr_fkart[] AND ltr_fkart[] IS NOT INITIAL.
    IF pe_vbrk-zz_check_tg EQ abap_true.
*}  END OF REPLACE WMR-050615
*{  BEGIN OF REPLACE WMR-181017-3000008124
      ""      CONCATENATE '' 'TRANSFERENCIA GRATUITA DE UN BIEN Y/O SERVICIO PRESTADO GRATUITAMENTE'
      ""             INTO  pe_vbrk-leyendas03 SEPARATED BY space.
      pe_vbrk-leyendas03 = 'TRANSFERENCIA GRATUITA DE UN BIEN Y/O SERVICIO PRESTADO GRATUITAMENTE'.
*}  END OF REPLACE WMR-181017-3000008124
      pe_vbrk-leyendasho03 = '2'.
    ENDIF.

*   Homologar datos de salida
*    IF pe_vbrk-leyendas NE space.
    pe_cabsal-zz_leyendas = pe_vbrk-leyendas.                    " Leyendas
    IF pe_vbrk-leyendasho IS NOT INITIAL.
      READ TABLE lt_cata15 INTO lwa_cata15 WITH KEY zz_opcion01 = pe_vbrk-leyendasho. " BINARY SEARCH.
      IF sy-subrc = 0.
        pe_cabsal-zz_leyendashomo = lwa_cata15-zz_codigo_sunat.   " Leyendas - Homologado
      ENDIF.
    ENDIF.
*    ENDIF.
*    IF pe_vbrk-leyendas02 NE space.
    pe_cabsal-zz_leyendas02 = pe_vbrk-leyendas02.              " Leyendas
    IF pe_vbrk-leyendasho02 IS NOT INITIAL.
      READ TABLE lt_cata15 INTO lwa_cata15 WITH KEY zz_opcion01 = pe_vbrk-leyendasho02. " BINARY SEARCH.
      IF sy-subrc = 0.
        pe_cabsal-zz_leyendashom02 = lwa_cata15-zz_codigo_sunat.  " Leyendas - Homologado
      ENDIF.
    ENDIF.
*    ENDIF.
*    IF pe_vbrk-leyendas03 NE space.
    pe_cabsal-zz_leyendas03 = pe_vbrk-leyendas03.               " Leyendas
    IF pe_vbrk-leyendasho03 IS NOT INITIAL.
      READ TABLE lt_cata15 INTO lwa_cata15 WITH KEY zz_opcion01 = pe_vbrk-leyendasho03. " BINARY SEARCH.
      IF sy-subrc = 0.
        pe_cabsal-zz_leyendashom03 = lwa_cata15-zz_codigo_sunat.  " Leyendas - Homologado
      ENDIF.
    ENDIF.
*    ENDIF.

  ENDMETHOD.                    "get_leyendas


  METHOD get_leyendas_ubl2_1.

    DATA: lwa_spell    TYPE spell,
          lv_moneda    TYPE tcurt-ltext,
          lv_netwr     TYPE p DECIMALS 6,
          lv_netwr_aux TYPE vbrp-netwr,
          ls_tcurt     TYPE zostb_tcurt.

    SELECT SINGLE *
      INTO ls_tcurt
      FROM zostb_tcurt
      WHERE waers EQ cs_vbrk-waerk
        AND begda LE cs_vbrk-fkdat
        AND endda GE cs_vbrk-fkdat.

*   Leyenda 1 - Importe en letras
    IF cs_vbrk-imporpermn > 0.
      lv_netwr = cs_vbrk-imptotvent + cs_vbrk-imporpermn.
    ELSE.
      lv_netwr = cs_vbrk-imptotvent.
    ENDIF.
    lv_netwr_aux = lv_netwr.
    CALL FUNCTION 'SPELL_AMOUNT'
      EXPORTING
        amount    = lv_netwr_aux
        currency  = cs_vbrk-waerk
        language  = sy-langu
      IMPORTING
        in_words  = lwa_spell
      EXCEPTIONS
        not_found = 1
        too_large = 2
        OTHERS    = 3.
    IF sy-subrc NE 0.
      MESSAGE 'Error en importe total de ventas, no se puede mostrar en texto' TYPE 'E'. "#EC NOTEXT
    ENDIF.

    IF ls_tcurt IS NOT INITIAL.
      CONCATENATE lwa_spell-decimal(2) '/100' cs_vbrk-leyendas  INTO cs_vbrk-leyendas.
      IF lv_netwr_aux LE 1.
        CONCATENATE lwa_spell-word 'y' cs_vbrk-leyendas ls_tcurt-nomsun INTO cs_vbrk-leyendas SEPARATED BY space.
      ELSE.
        CONCATENATE lwa_spell-word 'y' cs_vbrk-leyendas ls_tcurt-nommon2 INTO cs_vbrk-leyendas SEPARATED BY space.
      ENDIF.
      TRANSLATE cs_vbrk-leyendas TO UPPER CASE.
      cs_vbrk-leyendasho = '1'.
    ENDIF.

*   Leyenda 2 - Percepción
    IF cs_vbrk-imporpermn NE 0.
      cs_vbrk-leyendasho02 = '3'.
    ENDIF.

*   Leyenda 3 - Transferencia Gratuita
    IF cs_vbrk-zz_check_tg EQ abap_true.
      cs_vbrk-leyendasho03 = '2'.
    ENDIF.

    " Leyenda 4 - Detracciones                                                            "I-WMR-070319-3000010823
    IF cs_vbrk-zz_detra <> 0.                                                             "I-WMR-070319-3000010823
      cs_vbrk-leyendasho04 = '9'.                                                         "I-WMR-070319-3000010823
    ENDIF.                                                                                "I-WMR-070319-3000010823

*   Homologar datos de salida
    IF cs_vbrk-leyendasho IS NOT INITIAL.
      READ TABLE lt_cata52 INTO ls_cata52 WITH KEY zz_codintabap = cs_vbrk-leyendasho.
      IF sy-subrc = 0.
        cs_cabsal-zz_leyendashomo = ls_cata52-zz_codigo_sunat.
        cs_cabsal-zz_leyendas = cs_vbrk-leyendas.
      ENDIF.
    ENDIF.

    IF cs_vbrk-leyendasho02 IS NOT INITIAL.
      READ TABLE lt_cata52 INTO ls_cata52 WITH KEY zz_codintabap = cs_vbrk-leyendasho02.
      IF sy-subrc = 0.
        cs_cabsal-zz_leyendashom02 = ls_cata52-zz_codigo_sunat.
        cs_vbrk-leyendas02 = ls_cata52-zz_desc_cod_suna.
        cs_cabsal-zz_leyendas02 = ls_cata52-zz_desc_cod_suna.                                   "I-WMR-250119-3000011120
      ENDIF.
    ENDIF.

    IF cs_vbrk-leyendasho03 IS NOT INITIAL.
      READ TABLE lt_cata52 INTO ls_cata52 WITH KEY zz_codintabap = cs_vbrk-leyendasho03.
      IF sy-subrc = 0.
        cs_cabsal-zz_leyendashom03 = ls_cata52-zz_codigo_sunat.
        cs_vbrk-leyendas03 = ls_cata52-zz_desc_cod_suna.
        cs_cabsal-zz_leyendas03 = ls_cata52-zz_desc_cod_suna.                                   "I-WMR-250119-3000011120
      ENDIF.
    ENDIF.

*{  BEGIN OF INSERT WMR-070319-3000010823
    IF cs_vbrk-leyendasho03 IS NOT INITIAL.
      READ TABLE lt_cata52 INTO ls_cata52 WITH KEY zz_codintabap = cs_vbrk-leyendasho03.
      IF sy-subrc = 0.
        cs_cabsal2-zz_leyendashom04 = ls_cata52-zz_codigo_sunat.
        cs_vbrk-leyendas04         = ls_cata52-zz_desc_cod_suna.
        cs_cabsal2-zz_leyendas04    = ls_cata52-zz_desc_cod_suna.
      ENDIF.
    ENDIF.
*}  END OF INSERT WMR-070319-3000010823

  ENDMETHOD.                    "get_leyendas


  METHOD get_material_codigo_cubso.

    TYPES:  BEGIN OF ty_ausp.                                                                   "I-PBM060219-3000009765
            INCLUDE TYPE ausp.                                                                      "I-PBM060219-3000009765
    TYPES: secu TYPE numc3,                                                                     "I-PBM060219-3000009765
           END OF ty_ausp.                                                                      "I-PBM060219-3000009765

    DATA: lt_ausp   TYPE TABLE OF ty_ausp,                                                      "I-PBM060219-3000009765
          lt_consta TYPE TABLE OF lty_const,                                                    "I-PBM060219-3000009765
          lr_atinn  TYPE RANGE OF ausp-atinn,                                                   "I-PBM060219-3000009765

          ls_atinn  LIKE LINE OF lr_atinn,                                                      "I-PBM060219-3000009765

          l_codigo  TYPE zostb_asgcubsosg-codigo,
          l_valorc  TYPE n LENGTH 2,                                                            "I-PBM060219-3000009765
          l_table   TYPE tabname,
          lo_error  TYPE REF TO cx_root.

    DATA: lc_klart TYPE ausp-klart VALUE '001',                                                 "I-PBM060219-3000009765
          lc_mafid TYPE ausp-mafid VALUE 'O'.                                                   "I-PBM060219-3000009765

    FIELD-SYMBOLS: <fs_const> LIKE LINE OF lt_const,                                            "I-PBM060219-3000009765
                   <fs_ausp>  LIKE LINE OF lt_ausp.                                             "I-PBM060219-3000009765

    CLEAR r_material_sunat.

    l_codigo = is_vbrp-matnr.

    CASE gs_process-license.                                                                    "I-PBM040119-3000011120
      WHEN '0020886783'. "Pedregal                                                              "I-PBM040119-3000011120
        l_table = 'ZFIT_CUBSO_SAP'.                                                             "I-PBM040119-3000011120
        TRY .                                                                                   "I-PBM040119-3000011120
            SELECT SINGLE codsunat INTO r_material_sunat                                        "I-PBM040119-3000011120
            FROM (l_table)                                                                      "I-PBM040119-3000011120
              WHERE matnr =  is_vbrp-matnr                                                      "I-PBM040119-3000011120
                AND matchx = abap_true.                                                         "I-PBM040119-3000011120
          CATCH cx_root INTO lo_error.                                                          "I-PBM040119-3000011120
        ENDTRY.                                                                                 "I-PBM040119-3000011120

*{I-PBM060219-3000009765
      WHEN '0021061097'.  " CMH
        lt_consta[] = lt_const[]. DELETE lt_consta WHERE campo <> 'ATINN_CUBS'.
        LOOP AT lt_consta ASSIGNING <fs_const>.
          CLEAR ls_atinn.
          ls_atinn-sign   = <fs_const>-signo.
          ls_atinn-option = <fs_const>-opcion.
          CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
            EXPORTING
              input  = <fs_const>-valor1
            IMPORTING
              output = ls_atinn-low.
          <fs_const>-valor1 = ls_atinn-low.
          APPEND ls_atinn TO lr_atinn.
        ENDLOOP.

        IF lr_atinn[] IS NOT INITIAL.
          " Seleccionar datos de características
          SELECT objek atinn atzhl mafid klart adzhl atwrt atflv
            INTO CORRESPONDING FIELDS OF TABLE lt_ausp FROM ausp
            WHERE objek = is_vbrp-matnr
              AND atinn IN lr_atinn
              AND mafid = lc_mafid
              AND klart = lc_klart.

          " Establecer Niveles
          LOOP AT lt_ausp ASSIGNING <fs_ausp>.
            READ TABLE lt_consta ASSIGNING <fs_const> WITH KEY valor1 = <fs_ausp>-atinn.
            IF sy-subrc = 0.  <fs_ausp>-secu = <fs_const>-secuencia. ENDIF.
          ENDLOOP.
          DELETE lt_ausp WHERE secu = 0.

          " Concatenar Valores
          SORT lt_ausp BY secu.
          LOOP AT lt_ausp ASSIGNING <fs_ausp>.
            IF <fs_ausp>-atwrt IS NOT INITIAL.
              l_valorc = <fs_ausp>-atwrt.
            ELSE.
              l_valorc = <fs_ausp>-atflv.
            ENDIF.
            IF r_material_sunat IS INITIAL.
              r_material_sunat = l_valorc.
            ELSE.
              CONCATENATE r_material_sunat l_valorc INTO r_material_sunat.
            ENDIF.
          ENDLOOP.
        ENDIF.
*}I-PBM060219-3000009765

      WHEN '0020886706'. "PIRAMIDE                                                             "I-PBM070319-3000011085
        SELECT SINGLE cubsosg INTO r_material_sunat                                            "I-PBM070319-3000011085
          FROM zostb_asgcubsosg                                                                "I-PBM070319-3000011085
          WHERE gjahr = is_vbrk-fkdat(4)                                                       "I-PBM070319-3000011085
            AND tipasg = '99'                                                                  "I-PBM070319-3000011085
            AND codigo = l_codigo.                                                             "I-PBM070319-3000011085

      WHEN OTHERS.                                                                             "I-PBM040119-3000011120
        SELECT SINGLE cubsosg INTO r_material_sunat
          FROM zostb_asgcubsosg
          WHERE gjahr = is_vbrk-fkdat(4)
            AND tipasg = '99'
            AND codigo = l_codigo.
    ENDCASE.

    "Si no hay, buscar en las constantes código genérico
    IF r_material_sunat IS INITIAL.                                                            "I-PBM070319-3000011085
      READ TABLE lt_const ASSIGNING <fs_const> WITH KEY campo = 'CODCUB_GEN'.                  "I-PBM070319-3000011085
      IF sy-subrc = 0.                                                                         "I-PBM070319-3000011085
        r_material_sunat = <fs_const>-valor1.                                                  "I-PBM070319-3000011085
      ENDIF.                                                                                   "I-PBM070319-3000011085
    ENDIF.                                                                                     "I-PBM070319-3000011085

  ENDMETHOD.


  METHOD get_mat_des.

*   Rango Facturas de Exportación
    REFRESH ltr_fkart.
    LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '1' AND zz_opcion02 = '0' .
      lwa_fkart-low = lwa_constfkart-fkart.
      lwa_fkart-sign = 'I'.
      lwa_fkart-option = 'EQ'.
      APPEND lwa_fkart TO ltr_fkart.
    ENDLOOP.

*   Facturas de Exportación
    IF pi_tipdoc EQ gc_tipdoc_fa AND pi_vbrk-fkart IN ltr_fkart.
      pe_string = me->get_mat_des_exp( pi_vbrk = pi_vbrk
                                       pi_vbrp = pi_vbrp
                                       pi_last = pi_last ).
    ENDIF.

*   Facturas y Boletas Nacionales
    IF ( pi_tipdoc EQ gc_tipdoc_fa OR pi_tipdoc EQ gc_tipdoc_bl ) AND pi_vbrk-fkart NOT IN ltr_fkart.
      pe_string = me->get_mat_des_nac( pi_vbrk = pi_vbrk
                                       pi_vbrp = pi_vbrp
                                       pi_last = pi_last ).
    ENDIF.

*   NC y ND Nacionales
*{  BEGIN OF REPLACE WMR-300615
    ""    IF ( pi_tipdoc EQ gc_tipdoc_nc OR pi_tipdoc EQ gc_tipdoc_nd ) AND pi_vbrk-kalsm NOT IN ltr_kalsm_e.
    IF ( pi_tipdoc EQ gc_tipdoc_nc OR pi_tipdoc EQ gc_tipdoc_nd ) AND pi_vbrk-zz_check_expor EQ abap_false.
*}  END OF REPLACE WMR-300615
      pe_string = me->get_mat_des_notnac( pi_vbrk = pi_vbrk
                                          pi_vbrp = pi_vbrp
                                          pi_last = pi_last ).
    ENDIF.

*  NC y ND Exportacion
*{  BEGIN OF REPLACE WMR-300615
    ""    IF ( pi_tipdoc EQ gc_tipdoc_nc OR pi_tipdoc EQ gc_tipdoc_nd ) AND pi_vbrk-kalsm IN ltr_kalsm_e.
    IF ( pi_tipdoc EQ gc_tipdoc_nc OR pi_tipdoc EQ gc_tipdoc_nd ) AND pi_vbrk-zz_check_expor EQ abap_true.
*}  END OF REPLACE WMR-300615
      pe_string = me->get_mat_des_notexp( pi_vbrk = pi_vbrk
                                          pi_vbrp = pi_vbrp
                                          pi_last = pi_last ).
    ENDIF.
  ENDMETHOD.                    "get_mat_des


  METHOD get_mat_des_exp.

    DATA: lw_name   TYPE thead-tdname,
          lw_texto1 TYPE string,
          lw_texto2 TYPE string.

*   Primer texto
    CLEAR: lw_name, lw_texto1.
    CONCATENATE pi_vbrp-vbeln pi_vbrp-posnr INTO lw_name.
    lw_texto1 = me->get_text( pi_name   = lw_name
                              pi_id     = '0001'
                              pi_object = 'VBBP' ).
    IF lw_texto1 IS INITIAL.
      IF ( pi_vbrk-spart EQ '40' OR pi_vbrk-spart EQ '50' ).
        CLEAR: lw_name, lw_texto1.
        lw_name = pi_vbrp-matnr.
        lw_texto1 = me->get_text( pi_name   = lw_name
                                  pi_id     = 'GRUN'
                                  pi_object = 'MATERIAL' ).
      ENDIF.
    ENDIF.

*   Texto final cabecera (Nota)
    IF pi_last = abap_true.
      CLEAR: lw_name,lw_texto2.
      lw_name = pi_vbrp-vbeln.
      lw_texto2 = me->get_text( pi_name   = lw_name
                                pi_id     = 'Z036'
                                pi_object = 'VBBK' ).
    ENDIF.

*   Formar texto final
    CONDENSE: lw_texto1, lw_texto2.
    IF lw_texto1 IS INITIAL.
      CONCATENATE pi_vbrp-arktx lw_texto2 INTO pe_string SEPARATED BY space.
      CONDENSE pe_string.
    ELSE.
      CONCATENATE lw_texto1 lw_texto2 INTO pe_string SEPARATED BY space.
      CONDENSE pe_string.
    ENDIF.

  ENDMETHOD.                    "get_mat_des


  METHOD get_mat_des_nac.

    DATA: w_id          TYPE tdid,
          w_name        TYPE tdobname,
          w_object      TYPE tdobject,
          w_vbelv       TYPE vbeln_von,
          w_posnv       TYPE posnr_von,
          wa_detalle    TYPE ty_detalle,
          wa_tline      TYPE tline,
          ls_thead      TYPE thead,
          w_objek       TYPE objnum,
          w_texto       TYPE string,
          lt_class      TYPE STANDARD TABLE OF sclass,
          lt_objectdata TYPE STANDARD TABLE OF clobjdat,
          ls_objectdata LIKE LINE OF lt_objectdata.

    DATA: lt_descr TYPE tline_t.
    DATA: wa_descr TYPE tline.

    DATA: c_001  TYPE char3  VALUE '001',
          c_mara TYPE char30 VALUE 'MARA'.

    FIELD-SYMBOLS: <fs_descr> TYPE tline.

    CLEAR wa_detalle.
    MOVE-CORRESPONDING pi_vbrp TO wa_detalle.

    IF ( pi_vbrk-spart EQ '40' OR pi_vbrk-spart EQ '50' ).

      w_id = 'GRUN'.
      w_name = pi_vbrp-matnr.
      w_object = 'MATERIAL'.
      CALL FUNCTION 'ZOSGE_LEER_TEXTOS'
        EXPORTING
          i_id       = w_id
          i_language = sy-langu
          i_name     = w_name
          i_object   = w_object
        IMPORTING
          e_textos   = wa_detalle-descr
        EXCEPTIONS
          ex_err     = 1
          OTHERS     = 2.
      IF ( sy-subrc NE 0 OR wa_detalle-descr[] IS INITIAL ).
        SELECT SINGLE vbelv posnv
        INTO (w_vbelv, w_posnv)
        FROM vbfa
        WHERE vbeln EQ pi_vbrp-aubel AND
              posnn EQ pi_vbrp-aupos AND
              vbtyp_n EQ 'G'.
        IF ( sy-subrc EQ 0 ).
*          w_id = 'Z004'.
*          CONCATENATE w_vbelv w_posnv INTO w_name.
*          w_object = 'VBBP'.
*          CALL FUNCTION 'ZOSGE_LEER_TEXTOS'
*            EXPORTING
*              i_id       = w_id
*              i_language = sy-langu
*              i_name     = w_name
*              i_object   = w_object
*            IMPORTING
*              e_textos   = wa_detalle-descr
*            EXCEPTIONS
*              ex_err     = 1
*              OTHERS     = 2.
          CLEAR ls_thead.
          ls_thead-tdid     = 'Z004'.
          ls_thead-tdobject = 'VBBP'.
          CONCATENATE w_vbelv w_posnv INTO ls_thead-tdname.
          get_text_lines( EXPORTING is_thead = ls_thead
                          IMPORTING et_text  = wa_detalle-descr[] ).
          IF ( sy-subrc NE 0 OR wa_detalle-descr[] IS INITIAL ).
            CLEAR wa_descr.
            wa_descr-tdformat = '*'.
            wa_descr-tdline = pi_vbrp-arktx.
            APPEND wa_descr TO wa_detalle-descr.
          ENDIF.
        ELSE.
          CLEAR wa_descr.
          wa_descr-tdformat = '*'.
          wa_descr-tdline = pi_vbrp-arktx.
          APPEND wa_descr TO wa_detalle-descr.
        ENDIF.
      ENDIF.
      IF pi_vbrk-spart EQ '40'.
        w_objek = pi_vbrp-matnr.
        CALL FUNCTION 'CLAF_CLASSIFICATION_OF_OBJECTS'
          EXPORTING
            class              = space
            classtext          = abap_true
            classtype          = c_001
            features           = abap_true
            language           = sy-langu
            object             = w_objek
            objecttable        = c_mara
            key_date           = sy-datum
            initial_charact    = abap_true
            change_service_clf = abap_true
          TABLES
            t_class            = lt_class
            t_objectdata       = lt_objectdata
          EXCEPTIONS
            no_classification  = 1
            no_classtypes      = 2
            invalid_class_type = 3
            OTHERS             = 4.
        IF sy-subrc = 0.
          LOOP AT lt_objectdata INTO ls_objectdata WHERE atnam = 'ZMM_CODIGO_ABREVIAD'.
            CLEAR wa_descr.
            IF wa_detalle-descr[] IS NOT INITIAL.
              READ TABLE wa_detalle-descr ASSIGNING <fs_descr> INDEX 1.
              IF sy-subrc = 0.
                CLEAR <fs_descr>-tdformat.
              ENDIF.
            ENDIF.
            wa_descr-tdformat = '*'.
            CONCATENATE ls_objectdata-ausp1 '-' INTO wa_descr-tdline SEPARATED BY space.
            INSERT wa_descr INTO wa_detalle-descr INDEX 1.
          ENDLOOP.
        ENDIF.
      ENDIF.

    ELSE.

      SELECT SINGLE vbelv posnv
      INTO (w_vbelv, w_posnv)
      FROM vbfa
      WHERE vbeln EQ pi_vbrp-aubel AND
            posnn EQ pi_vbrp-aupos AND
            vbtyp_n EQ 'G'.
      IF ( sy-subrc EQ 0 ).
        w_id = 'Z004'.
        CONCATENATE w_vbelv w_posnv INTO w_name.
        w_object = 'VBBP'.
        CALL FUNCTION 'ZOSGE_LEER_TEXTOS'
          EXPORTING
            i_id       = w_id
            i_language = sy-langu
            i_name     = w_name
            i_object   = w_object
          IMPORTING
            e_textos   = wa_detalle-descr
          EXCEPTIONS
            ex_err     = 1
            OTHERS     = 2.
        IF ( sy-subrc NE 0 OR wa_detalle-descr[] IS INITIAL ).
          CLEAR wa_descr.
          wa_descr-tdformat = '*'.
          wa_descr-tdline = pi_vbrp-arktx.
          APPEND wa_descr TO wa_detalle-descr.
        ENDIF.
      ELSE.
        CLEAR wa_descr.
        wa_descr-tdformat = '*'.
        wa_descr-tdline = pi_vbrp-arktx.
        APPEND wa_descr TO wa_detalle-descr.
      ENDIF.
      w_id = '0001'.
      CONCATENATE pi_vbrp-vbeln pi_vbrp-posnr INTO w_name.
      w_object = 'VBBP'.
      CALL FUNCTION 'ZOSGE_LEER_TEXTOS'
        EXPORTING
          i_id       = w_id
          i_language = sy-langu
          i_name     = w_name
          i_object   = w_object
        IMPORTING
          e_textos   = lt_descr
        EXCEPTIONS
          ex_err     = 1
          OTHERS     = 2.
      IF ( sy-subrc EQ 0 AND lt_descr[] IS NOT INITIAL ).
        APPEND LINES OF lt_descr TO wa_detalle-descr.
      ENDIF.

    ENDIF.

*   Buscar texto adicional
    w_id = '0001'.
    CONCATENATE pi_vbrp-vbeln pi_vbrp-posnr INTO w_name.
    w_object = 'VBBP'.
    CALL FUNCTION 'ZOSGE_LEER_TEXTOS'
      EXPORTING
        i_id       = w_id
        i_language = sy-langu
        i_name     = w_name
        i_object   = w_object
      IMPORTING
        e_textos   = lt_descr
      EXCEPTIONS
        ex_err     = 1
        OTHERS     = 2.
    IF ( sy-subrc EQ 0 AND lt_descr[] IS NOT INITIAL ).
      wa_detalle-descr[] = lt_descr[].
    ENDIF.
    LOOP AT wa_detalle-descr INTO wa_tline .
      CONCATENATE pe_string wa_tline-tdline INTO pe_string SEPARATED BY space.
    ENDLOOP.

*   Texto final cabecera (Nota)
    IF pi_last = abap_true.
      CLEAR: w_name, w_texto.
      w_name = pi_vbrp-vbeln.
      w_texto = me->get_text( pi_name   = w_name
                              pi_id     = 'Z036'
                              pi_object = 'VBBK' ).
      IF w_texto IS NOT INITIAL.
        CONCATENATE pe_string w_texto INTO pe_string SEPARATED BY space.
      ENDIF.
    ENDIF.

  ENDMETHOD.                    "get_mat_des


  METHOD get_mat_des_notexp.

    DATA: w_id          TYPE tdid,
          w_name        TYPE tdobname,
          w_object      TYPE tdobject,
          w_texto1      TYPE string,
          w_texto2      TYPE string,
          w_texto3      TYPE string,
          wa_tline      TYPE tline,
          w_objek       TYPE objnum,
          lt_class      TYPE STANDARD TABLE OF sclass,
          lt_objectdata TYPE STANDARD TABLE OF clobjdat,
          ls_objectdata LIKE LINE OF lt_objectdata.

    DATA: lt_descr TYPE tline_t.
    DATA: wa_descr TYPE tline.

    DATA: c_001  TYPE char3  VALUE '001',
          c_mara TYPE char30 VALUE 'MARA'.

    FIELD-SYMBOLS: <fs_descr> TYPE tline.

*   Primer texto (para todos los casos)
    CONCATENATE pi_vbrp-vbeln pi_vbrp-posnr INTO w_name.
    w_object = 'VBBP'.
    w_id     = '0001'.
    w_texto1  = me->get_text( pi_name   = w_name
                              pi_id     = w_id
                              pi_object = w_object ).

*   Sector 40
    IF w_texto1 IS INITIAL.
      IF pi_vbrk-spart EQ '40'.
        w_objek = pi_vbrp-matnr.
        CALL FUNCTION 'CLAF_CLASSIFICATION_OF_OBJECTS'
          EXPORTING
            class              = space
            classtext          = abap_true
            classtype          = c_001
            features           = abap_true
            language           = sy-langu
            object             = w_objek
            objecttable        = c_mara
            key_date           = sy-datum
            initial_charact    = abap_true
            change_service_clf = abap_true
          TABLES
            t_class            = lt_class
            t_objectdata       = lt_objectdata
          EXCEPTIONS
            no_classification  = 1
            no_classtypes      = 2
            invalid_class_type = 3
            OTHERS             = 4.
        IF sy-subrc = 0.
          LOOP AT lt_objectdata INTO ls_objectdata WHERE atnam = 'ZMM_CODIGO_ABREVIAD'.
            CONCATENATE ls_objectdata-ausp1 '-' INTO w_texto1 SEPARATED BY space.
          ENDLOOP.
        ENDIF.
      ENDIF.
    ENDIF.

*   Texto final de cabecera (Nota)
    IF pi_last = abap_true.
      CLEAR: w_name, w_texto2.
      w_name = pi_vbrp-vbeln.
      w_texto2 = me->get_text( pi_name   = w_name
                               pi_id     = 'Z036'
                               pi_object = 'VBBK' ).
    ENDIF.

*  Texto adicional
    IF ( pi_vbrk-spart EQ '40' OR pi_vbrk-spart EQ '50' ).
      w_name  = pi_vbrp-matnr.
      w_texto3 = me->get_text( pi_name   = w_name
                               pi_id     = 'GRUN'
                               pi_object = 'MATERIAL' ).
    ENDIF.

*   Formar texto final
    CONDENSE: w_texto1, w_texto2.
    IF w_texto1 IS INITIAL.
      CONCATENATE pi_vbrp-arktx w_texto3 w_texto2 INTO pe_string SEPARATED BY space.
      CONDENSE pe_string.
    ELSE.
      CONCATENATE w_texto1 w_texto2 INTO pe_string SEPARATED BY space.
      CONDENSE pe_string.
    ENDIF.

  ENDMETHOD.                    "get_mat_des


  METHOD get_mat_des_notnac.

    DATA: w_id          TYPE tdid,
          w_name        TYPE tdobname,
          w_object      TYPE tdobject,
          w_texto1      TYPE string,
          w_texto2      TYPE string,
          wa_tline      TYPE tline,
          w_objek       TYPE objnum,
          lt_class      TYPE STANDARD TABLE OF sclass,
          lt_objectdata TYPE STANDARD TABLE OF clobjdat,
          ls_objectdata LIKE LINE OF lt_objectdata,
          lt_descr      TYPE tline_t.

    FIELD-SYMBOLS <fs_descr> LIKE LINE OF lt_descr.

    DATA: c_001  TYPE char3  VALUE '001',
          c_mara TYPE char30 VALUE 'MARA'.

*   Primer texto (para todos los casos)
    CONCATENATE pi_vbrp-vbeln pi_vbrp-posnr INTO w_name.
    w_object = 'VBBP'.
    w_id     = '0001'.
    w_texto1  = me->get_text( pi_name   = w_name
                              pi_id     = w_id
                              pi_object = w_object ).

*   Sector 40
    IF w_texto1 IS INITIAL.
      IF pi_vbrk-spart EQ '40'.
        w_objek = pi_vbrp-matnr.
        CALL FUNCTION 'CLAF_CLASSIFICATION_OF_OBJECTS'
          EXPORTING
            class              = space
            classtext          = abap_true
            classtype          = c_001
            features           = abap_true
            language           = sy-langu
            object             = w_objek
            objecttable        = c_mara
            key_date           = sy-datum
            initial_charact    = abap_true
            change_service_clf = abap_true
          TABLES
            t_class            = lt_class
            t_objectdata       = lt_objectdata
          EXCEPTIONS
            no_classification  = 1
            no_classtypes      = 2
            invalid_class_type = 3
            OTHERS             = 4.
        IF sy-subrc = 0.
          LOOP AT lt_objectdata INTO ls_objectdata WHERE atnam = 'ZMM_CODIGO_ABREVIAD'.
            CONCATENATE ls_objectdata-ausp1 '-' INTO w_texto1 SEPARATED BY space.
          ENDLOOP.
        ENDIF.
      ENDIF.
    ENDIF.

*   Texto final de cabecera (Nota)
    IF pi_last = abap_true.
      CLEAR: w_name, w_texto2.
      w_name = pi_vbrp-vbeln.
      w_texto2 = me->get_text( pi_name   = w_name
                               pi_id     = 'Z036'
                               pi_object = 'VBBK' ).
    ENDIF.

*   Formar texto final
    CONDENSE: w_texto1, w_texto2.
    IF w_texto1 IS INITIAL.
      CONCATENATE pi_vbrp-arktx w_texto2 INTO pe_string SEPARATED BY space.
      CONDENSE pe_string.
    ELSE.
      CONCATENATE w_texto1 w_texto2 INTO pe_string SEPARATED BY space.
      CONDENSE pe_string.
    ENDIF.

  ENDMETHOD.                    "get_mat_des


  METHOD get_notasv_header.

    DATA: lt_xvbfa    TYPE TABLE OF lty_xvbfa,
          lt_comwa    TYPE TABLE OF lty_comwa,
          lwa_xvbfa   LIKE LINE OF  lt_xvbfa,
          lwa_comwa   LIKE LINE OF  lt_comwa,
          ls_vbrp     TYPE          lty_vbrp,                                   "I-WMR-220715
          ls_xvbfa    TYPE          lty_xvbfa,                                  "I-WMR-030216
          lv_xblnr    TYPE          xblnr,
          lv_numeraci TYPE          zosed_numeracion,
          lw_vgbel    TYPE          vbak-vgbel.                                 "I-WMR-030216

    DATA: l_sercor TYPE zostb_felog-zzt_numeracion.                               "I-WMR-190918-3000009765

    DATA: ls_catahomo09 LIKE LINE OF lt_catahomo09,
          ls_catahomo10 LIKE LINE OF lt_catahomo10,
          lr_motsref    TYPE RANGE OF char02,                                   "I-WMR-171115-3000004081
          ls_motsref    LIKE LINE OF lr_motsref,                                "I-WMR-171115-3000004081
          ls_const      LIKE LINE OF lt_const.                                  "I-WMR-171115-3000004081

    DATA: select   TYPE TABLE OF edpline,                                       "I-WMR-310717-3000007838
          sublist  TYPE edpline,                                                "I-WMR-310717-3000007838
          lo_error TYPE REF TO cx_root.                                         "I-WMR-310717-3000007838

*{  BEGIN OF INSERT WMR-171115-3000004081
    " Motivo ND sin referencia documento que modifica
    LOOP AT lt_const INTO ls_const.
      CASE ls_const-campo.
        WHEN 'MOTNDSRE'.
          CLEAR ls_motsref.
          ls_motsref-sign   = ls_const-signo.
          ls_motsref-option = ls_const-opcion.
          ls_motsref-low    = ls_const-valor1.
          ls_motsref-high   = ls_const-valor2.
          APPEND ls_motsref TO lr_motsref.
      ENDCASE.
    ENDLOOP.
*}  END OF INSERT WMR-171115-3000004081

*   Lectura de tablas
    READ TABLE lt_aubel INTO lwa_aubel WITH KEY vbeln = pi_vbrk-vbeln.
    READ TABLE lt_vbak INTO lwa_vbak WITH TABLE KEY vbeln = lwa_aubel-aubel.
    IF sy-subrc = 0.
      READ TABLE lt_vbrk_ref INTO lwa_vbrk_ref WITH KEY xblnr = lwa_vbak-xblnr.
      IF sy-subrc NE 0.
        READ TABLE lt_vbrk_ref INTO lwa_vbrk_ref WITH KEY xblnr = lwa_vbak-zuonr.
      ENDIF.
    ENDIF.

*   Tipo Documento Modificación
    CLEAR lv_xblnr.
    lwa_comwa-vbeln = pi_vbrk-vbeln.
    CALL FUNCTION 'RV_ORDER_FLOW_INFORMATION'
      EXPORTING
        comwa         = lwa_comwa
      TABLES
        vbfa_tab      = lt_xvbfa
      EXCEPTIONS
        no_vbfa       = 1
        no_vbuk_found = 2
        OTHERS        = 3.
    IF sy-subrc = 0.
      READ TABLE lt_xvbfa INTO lwa_xvbfa WITH KEY vbtyp_n = 'M'.
      IF sy-subrc = 0.
*{  BEGIN OF REPLACE WMR-130715
        ""        SELECT SINGLE xblnr
        ""        INTO lv_xblnr
        SELECT SINGLE xblnr fkdat waerk
        INTO (lv_xblnr, pe_fecdocmodif, pe_sdreferwaerk)
*}  END OF REPLACE WMR-130715
        FROM vbrk
        WHERE vbeln = lwa_xvbfa-vbeln.
*{  BEGIN OF INSERT WMR-010317-3000006743
        IF sy-subrc EQ 0.
          " Factura/ Boleta SD referencia de NC/ ND
          pe_sdrefer = lwa_xvbfa-vbeln.
        ENDIF.
*}  END OF INSERT WMR-010317-3000006743
      ELSE.
        READ TABLE lt_xvbfa INTO lwa_xvbfa WITH KEY vbtyp_n = 'O'.
        IF sy-subrc NE 0.
          READ TABLE lt_xvbfa INTO lwa_xvbfa WITH KEY vbtyp_n = 'P'.
        ENDIF.
*{  BEGIN OF INSERT WMR-180815
        IF lwa_xvbfa-vbtyp_v EQ 'T'.  " Entrega de Devoluciones
          READ TABLE lt_xvbfa INTO lwa_xvbfa
                     WITH KEY vbeln   = lwa_xvbfa-vbelv
                              vbtyp_v = 'H'.    " Solicitud de Devoluciones
          IF sy-subrc NE 0.                                                     "I-WMR-310717-3000007838
            READ TABLE lt_xvbfa INTO lwa_xvbfa                                  "I-WMR-310717-3000007838
                       WITH KEY vbeln   = lwa_xvbfa-vbelv                       "I-WMR-310717-3000007838
                                vbtyp_v = 'V'.    " Pedido de Traslado MM       "I-WMR-310717-3000007838
          ENDIF.                                                                "I-WMR-310717-3000007838
        ENDIF.
*}  END OF INSERT WMR-180815

*{  BEGIN OF INSERT WMR-030216
        CASE lwa_xvbfa-vbtyp_v.
          WHEN 'K'  " Solicitud NC
            OR 'L'. " Solicitud ND
            READ TABLE lt_xvbfa INTO ls_xvbfa
                 WITH KEY vbelv = space             " Sin referencia por posición
                          vbeln = lwa_xvbfa-vbelv.
            IF sy-subrc EQ 0.
              " Búsqueda de referencia por cabecera
              SELECT SINGLE vgbel
                INTO lw_vgbel
                FROM vbak
                WHERE vbeln EQ ls_xvbfa-vbeln.
            ENDIF.
        ENDCASE.
*}  END OF INSERT WMR-030216

        IF lw_vgbel IS NOT INITIAL.                                             "I-WMR-030216
          SELECT SINGLE xblnr fkdat waerk                                       "I-WMR-030216
            INTO (lv_xblnr, pe_fecdocmodif, pe_sdreferwaerk)                    "I-WMR-030216
            FROM vbrk                                                           "I-WMR-030216
            WHERE vbeln = lw_vgbel.                                             "I-WMR-030216
*{  BEGIN OF INSERT WMR-010317-3000006743
          IF sy-subrc EQ 0.
            " Factura/ Boleta SD referencia de NC/ ND
            pe_sdrefer = lw_vgbel.
          ENDIF.
*}  END OF INSERT WMR-010317-3000006743
        ELSE.                                                                   "I-WMR-030216
*{  BEGIN OF REPLACE WMR-310717-3000007838
          ""*{  BEGIN OF REPLACE WMR-130715
          ""          ""        SELECT SINGLE xblnr
          ""          ""        INTO lv_xblnr
          ""          SELECT SINGLE xblnr audat
          ""          INTO (lv_xblnr, pe_fecdocmodif)
          ""*}  END OF REPLACE WMR-130715
          ""          FROM vbak
          ""          WHERE vbeln = lwa_xvbfa-vbelv.

          CASE lwa_xvbfa-vbtyp_v.
            WHEN 'V'. " Pedido de Traslado MM
              CASE gw_license.
                WHEN '0020974592'.  " Danper
                  CLEAR select.
                  sublist = 'ZZXBLNR'.  APPEND sublist TO select.
                  sublist = 'ZZPRESER'. APPEND sublist TO select.
                  TRY .
                      SELECT SINGLE (select)
                        INTO (lv_xblnr, pe_fecdocmodif)
                        FROM ekko
                        WHERE ebeln EQ lwa_xvbfa-vbelv.

                    CATCH cx_root INTO lo_error.         "#EC CATCH_ALL
                      EXIT.
                  ENDTRY.
              ENDCASE.
**              SELECT SINGLE zzxblnr zzpreser
**                INTO (lv_xblnr, pe_fecdocmodif)
**                FROM ekko
**                WHERE ebeln EQ lwa_xvbfa-vbelv.
            WHEN OTHERS.
              " Solicitud de Devoluciones
              " Solicitud NC
              " Solicitud ND
*{E-130120-NTP-3000013627
*                  SELECT SINGLE xblnr audat
*                    INTO (lv_xblnr, pe_fecdocmodif)
*                    FROM vbak
*                    WHERE vbeln EQ lwa_xvbfa-vbelv.
*}E-130120-NTP-3000013627
*{I-130120-NTP-3000013627
                  SELECT SINGLE xblnr waerk INTO (lv_xblnr, pe_sdreferwaerk)
                    FROM vbak
                    WHERE vbeln EQ lwa_xvbfa-vbelv.
                  IF sy-subrc = 0.
                    "fecha de prestación de servicios
*{I-PBM170120-3000013627
*                    SELECT SINGLE b~fbuda INTO pe_fecdocmodif
*                      FROM vbrk AS a INNER JOIN vbrp AS b ON a~vbeln = b~vbeln
*                      WHERE a~xblnr = lv_xblnr
*                        AND a~vbtyp = 'M'.
                    SELECT SINGLE fbuda INTO pe_fecdocmodif
                    FROM vbkd
                    WHERE vbeln EQ lwa_xvbfa-vbelv.
*}I-PBM170120-3000013627
                  ENDIF.
*}I-130120-NTP-3000013627
          ENDCASE.
*}  END OF REPLACE WMR-310717-3000007838
        ENDIF.                                                                  "I-WMR-030216
      ENDIF.
*      pe_tipdocmodif = lv_xblnr+4(12).                                            "E-WMR-190918-3000009765
      split_xblnr( EXPORTING i_xblnr  = lv_xblnr                                  "I-WMR-190918-3000009765
                   IMPORTING e_sercor = l_sercor ).                               "I-WMR-190918-3000009765
      pe_tipdocmodif = l_sercor.                                                  "I-WMR-190918-3000009765
*{  BEGIN OF REPLACE WMR-240615
      ""      IF pe_tipdocmodif(1) = 'F'.
      ""        pe_tipdocmodifho = gc_tipdoc_fa.
      ""      ELSEIF pe_tipdocmodif(1) = 'B'.
      ""        pe_tipdocmodifho = gc_tipdoc_bl.
      ""      ENDIF.
      CASE lv_xblnr(2).
        WHEN gc_tipdoc_fa.  pe_tipdocmodifho = gc_tipdoc_fa.
        WHEN gc_tipdoc_bl.  pe_tipdocmodifho = gc_tipdoc_bl.
      ENDCASE.
*}  END OF REPLACE WMR-240615
    ENDIF.

*   Documento de Referencia
    CLEAR lv_numeraci.
    SELECT SINGLE zz_numeracion
    INTO lv_numeraci
    FROM zostb_docexposca
    WHERE zz_nrodocsap = lwa_vbak-xblnr.
    IF sy-subrc = 0.
      pe_tipodocref = lv_numeraci.
    ENDIF.

*{  BEGIN OF REPLACE WMR-220715
    ""*   Tipo de Documento y Motivo de Sustento
    ""    CLEAR lwa_tvaut.
    ""    READ TABLE lt_tvaut INTO lwa_tvaut WITH KEY augru = lwa_vbak-augru.
    ""    IF sy-subrc = 0.
    ""      pe_tipodocdesc = lwa_tvaut-bezei.
    ""      pe_motivosuste = lwa_tvaut-bezei.
    ""    ENDIF.

    ""*   Codigo de Motivo Para ACFARMA NC
    ""    IF gw_tipdoc = gc_tipdoc_nc.
    ""      READ TABLE lt_catahomo09 INTO ls_catahomo09 WITH KEY augru = lwa_vbak-augru.
    ""      IF sy-subrc = 0.
    ""        pe_tmotivo = ls_catahomo09-zz_codigo_sunat.
    ""      ENDIF.
    ""    ENDIF.
    ""*   Codigo de Motivo Para ACFARMA ND
    ""    IF gw_tipdoc = gc_tipdoc_nd.
    ""      READ TABLE lt_catahomo10 INTO ls_catahomo10 WITH KEY augru = lwa_vbak-augru.
    ""      IF sy-subrc = 0.
    ""        pe_tmotivo = ls_catahomo10-zz_codigo_sunat.
    ""      ENDIF.
    ""    ENDIF.

    READ TABLE it_vbrp INTO ls_vbrp
         WITH KEY vbeln = pi_vbrk-vbeln.
    IF sy-subrc EQ 0.
      " Tipo de Documento y Motivo de Sustento
      SELECT SINGLE augru bezei
        INTO lwa_tvaut
        FROM tvaut
        WHERE spras EQ sy-langu
          AND augru EQ ls_vbrp-augru_auft.
      IF sy-subrc EQ 0.
        pe_tipodocdesc = lwa_tvaut-bezei.
        pe_motivosuste = lwa_tvaut-bezei.

        CASE gw_tipdoc.
          WHEN gc_tipdoc_nc.
            " Codigo de Motivo para NC
            READ TABLE lt_catahomo09 INTO ls_catahomo09 WITH KEY augru = ls_vbrp-augru_auft.
            IF sy-subrc = 0.
              pe_tmotivo = ls_catahomo09-zz_codigo_sunat.
            ENDIF.

          WHEN gc_tipdoc_nd.
            " Codigo de Motivo para ND
            READ TABLE lt_catahomo10 INTO ls_catahomo10 WITH KEY augru = ls_vbrp-augru_auft.
            IF sy-subrc = 0.
              pe_tmotivo = ls_catahomo10-zz_codigo_sunat.
            ENDIF.
        ENDCASE.

*{I-3000010993-NTP261218
      ELSEIF gw_license = '0020729594'. "Austral
        "Tipo de Documento y Motivo de Sustento
        CLEAR lwa_tvaut.
        READ TABLE lt_tvaut INTO lwa_tvaut WITH KEY augru = lwa_vbak-augru.
        IF sy-subrc = 0.
          pe_tipodocdesc = lwa_tvaut-bezei.
          pe_motivosuste = lwa_tvaut-bezei.
        ENDIF.

        "Codigo de Motivo Para NC
        IF gw_tipdoc = gc_tipdoc_nc.
          READ TABLE lt_catahomo09 INTO ls_catahomo09 WITH KEY augru = lwa_vbak-augru.
          IF sy-subrc = 0.
            pe_tmotivo = ls_catahomo09-zz_codigo_sunat.
          ENDIF.
        ENDIF.
        "Codigo de Motivo Para ND
        IF gw_tipdoc = gc_tipdoc_nd.
          READ TABLE lt_catahomo10 INTO ls_catahomo10 WITH KEY augru = lwa_vbak-augru.
          IF sy-subrc = 0.
            pe_tmotivo = ls_catahomo10-zz_codigo_sunat.
          ENDIF.
        ENDIF.
      ENDIF.
*}I-3000010993-NTP261218
    ENDIF.
*}  END OF REPLACE WMR-220715

*   pe_tmotivo = lwa_vbak-augru+1. "Para AUSTRAL

*{  BEGIN OF INSERT WMR-171115-3000004081
    " Motivo ND sin referencia documento que modifica
    CASE pi_tipdoc.
      WHEN gc_tipdoc_nd.
        IF pe_tmotivo IN lr_motsref[] AND lr_motsref[] IS NOT INITIAL.
*          CLEAR: pe_tipdocmodif.                                                  "E-WMR-190918-3000009765
          CASE pi_vbrk-zz_verubl.                                                   "I-WMR-110419-3000011736
            WHEN gc_verubl-ubl2_0.                                                  "I-WMR-110419-3000011736
              IF gw_license = '0020729594'. "Austral                                "I-PBM260419-3000010993
                CLEAR: pe_tipdocmodifho, pe_tipdocmodif, pe_tipodocref.             "I-PBM260419-3000010993
              ELSE.                                                                 "I-PBM260419-3000010993
                pe_tipdocmodifho = pi_tipdoc.
                pe_tipdocmodif   = pi_vbrk-zz_numeracion.                           "I-WMR-190918-3000009765
                pe_tipodocref    = pi_vbrk-zz_numeracion.
              ENDIF.                                                                "I-PBM260419-3000010993
            WHEN gc_verubl-ubl2_1.                                                  "I-WMR-110419-3000011736
              CLEAR: pe_tipdocmodifho, pe_tipdocmodif, pe_tipodocref.               "I-WMR-110419-3000011736
          ENDCASE.                                                                  "I-WMR-110419-3000011736
        ENDIF.
    ENDCASE.
*}  END OF INSERT WMR-171115-3000004081

*{I-231020-NTP-3000015579
    IF gw_license = '0020311006' OR "AIB
       gw_license = '0020863116'.   "AIB CLOUD
      DATA: lr_fkart     TYPE RANGE OF vbrk-fkart,
            lr_augru     TYPE RANGE OF vbrp-augru_auft,
            lr_augru_ncc TYPE RANGE OF vbrp-augru_auft,         "I-PBM030621-3000017155
            ls_fkart     LIKE LINE OF lr_fkart,
            ls_augru     LIKE LINE OF lr_augru.

      LOOP AT lt_const INTO ls_const.
        CASE ls_const-campo.
          WHEN 'NC0_FKART'.
            CLEAR ls_fkart.
            ls_fkart-sign   = ls_const-signo.
            ls_fkart-option = ls_const-opcion.
            ls_fkart-low    = ls_const-valor1.
            ls_fkart-high   = ls_const-valor2.
            APPEND ls_fkart TO lr_fkart.
          WHEN 'NC0_AUGRU'.
            CLEAR ls_augru.
            ls_augru-sign   = ls_const-signo.
            ls_augru-option = ls_const-opcion.
            ls_augru-low    = ls_const-valor1.
            ls_augru-high   = ls_const-valor2.
            APPEND ls_augru TO lr_augru.
*{I-PBM030621-3000017155
          WHEN 'NCC_AUGRU'. "NC Corrección
            CLEAR ls_augru.
            ls_augru-sign   = ls_const-signo.
            ls_augru-option = ls_const-opcion.
            ls_augru-low    = ls_const-valor1.
            ls_augru-high   = ls_const-valor2.
            APPEND ls_augru TO lr_augru_ncc.
*}I-PBM030621-3000017155
        ENDCASE.
      ENDLOOP.

      IF lr_fkart IS NOT INITIAL AND lr_augru IS NOT INITIAL.
        IF pi_vbrk-fkart IN lr_fkart.
          LOOP AT it_vbrp TRANSPORTING NO FIELDS WHERE vbeln = pi_vbrk-vbeln
                                                   AND augru_auft IN lr_augru.
            pe_check_nccero = abap_on.
          ENDLOOP.
*{I-PBM030621-3000017155
          LOOP AT it_vbrp TRANSPORTING NO FIELDS WHERE vbeln = pi_vbrk-vbeln
                                                   AND augru_auft IN lr_augru_ncc.
            pe_check_nc_corr = abap_on.
          ENDLOOP.
*}I-PBM030621-3000017155
        ENDIF.
      ENDIF.
    ENDIF.
*}I-231020-NTP-3000015579

  ENDMETHOD.                    "get_notasv_header


  METHOD get_opeexo_header.

    DATA: lwa_vbrp     LIKE LINE OF pi_vbrp,
          lv_netwr     TYPE p DECIMALS 6,
*{  BEGIN OF REPLACE WMR-100715
          ""*{  BEGIN OF INSERT WMR-190615
          ""          lw_sumaotrtri TYPE vbrp-netwr,
          ""          lw_sumaotrcar TYPE vbrp-netwr,
          ""*}  END OF INSERT WMR-190615
          ls_vbrp_temp LIKE LINE OF pi_vbrp.
*}  END OF REPLACE WMR-100715

*   Armar rango (documentos nacionales)
    REFRESH ltr_fkart.
    LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '1' AND zz_opcion02 = '3'.
      lwa_fkart-low = lwa_constfkart-fkart.
      lwa_fkart-sign = 'I'.
      lwa_fkart-option = 'EQ'.
      APPEND lwa_fkart TO ltr_fkart.
    ENDLOOP.

*{  BEGIN OF INSERT WMR-100715
*    " Tipos de posición Anticipos
*    CLEAR ltr_pstyv.
*    LOOP AT lt_constpstyv INTO lwa_constpstyv WHERE zz_opcion01 = '3'.
*      lwa_pstyv-low = lwa_constpstyv-pstyv.
*      lwa_pstyv-sign = 'I'.
*      lwa_pstyv-option = 'EQ'.
*      APPEND lwa_pstyv TO ltr_pstyv.
*    ENDLOOP.
*
*    " Aplicación de Anticipos
*    CASE pi_vbrk-zz_tip_ope.
*      WHEN gc_tipop_01.
*      WHEN OTHERS.
*        CLEAR ltr_pstyv.
*    ENDCASE.
*}  END OF INSERT WMR-100715

*   Calcular valor
    IF ltr_fkart[] IS NOT INITIAL AND pi_vbrk-fkart IN ltr_fkart.
*{  BEGIN OF REPLACE WMR-080615
      ""      IF pi_vbrk-taxk1 = '1'.
      ""        LOOP AT pi_vbrp INTO lwa_vbrp WHERE vbeln = pi_vbrk-vbeln
      ""                                        AND taxm1 = '0'.
      ""          lv_netwr = lv_netwr + lwa_vbrp-netwr.
      ""        ENDLOOP.
      ""        pe_opeexo = lv_netwr.
      ""      ENDIF.
      LOOP AT pi_vbrp INTO lwa_vbrp WHERE vbeln = pi_vbrk-vbeln
                                      AND afect_igv EQ gc_exoner_igv
                                      AND zz_check_bonif = abap_false. " No bonificadas "I-WMR-18122020-3000014557
        ""*{  BEGIN OF INSERT WMR-100715  ANTICIPOS PETRAMAS
        ""        IF lwa_vbrp-pstyv IN ltr_pstyv AND ltr_pstyv[] IS NOT INITIAL.
        ""          CONTINUE.
        ""        ENDIF.
        ""*}  END OF INSERT WMR-100715  ANTICIPOS PETRAMAS
*{  BEGIN OF REPLACE WMR-100715
        ""*{  BEGIN OF REPLACE WMR-190615
        ""        ""        lv_netwr = lv_netwr + lwa_vbrp-netwr.

        ""        CLEAR: lw_sumaotrtri, lw_sumaotrcar.
        ""        lw_sumaotrcar = get_otrcar_item( pi_knumv = pi_vbrk-knumv
        ""                                         pi_posnr = lwa_vbrp-posnr ).

        ""        lv_netwr = lv_netwr + lwa_vbrp-netwr - ( lw_sumaotrcar + lw_sumaotrtri ).
        ""*}  END OF REPLACE WMR-190615

*        CLEAR ls_vbrp_temp. "E-090920-NTP-3000014481
*        ls_vbrp_temp-sumaotrcar = get_otrcar_item( is_vbrk  = pi_vbrk         "I-WMR-020217-3000006528  "E-WMR-070319-3000010823
*                                                   pi_knumv = pi_vbrk-knumv               "E-WMR-070319-3000010823
*                                                   pi_posnr = lwa_vbrp-posnr ).           "E-WMR-070319-3000010823
*{E-090920-NTP-3000014481
*        get_otrcar_item(                                                                  "I-WMR-070319-3000010823
*          EXPORTING                                                                       "I-WMR-070319-3000010823
*            is_vbrk       = pi_vbrk                                                       "I-WMR-070319-3000010823
*            pi_knumv      = pi_vbrk-knumv                                                 "I-WMR-070319-3000010823
*            pi_posnr      = lwa_vbrp-posnr                                                "I-WMR-070319-3000010823
*          IMPORTING                                                                       "I-WMR-070319-3000010823
*            pe_sumaotrcar = ls_vbrp_temp-sumaotrcar ).                                    "I-WMR-070319-3000010823
*        ls_vbrp_temp-sumaotrtri = get_otrtri_item( pi_knumv = pi_vbrk-knumv
*                                                   pi_posnr = lwa_vbrp-posnr ).
*        ls_vbrp_temp-valantxite = get_valant_item( i_knumv = pi_vbrk-knumv
*                                                   i_posnr = lwa_vbrp-posnr ).
*        lv_netwr = lv_netwr + lwa_vbrp-netwr                                  " Valor Neto de Posición
*                   - ( ls_vbrp_temp-sumaotrcar + ls_vbrp_temp-sumaotrtri ).   " Menos Otros Cargos y Otros Tributos
***                   + ls_vbrp_temp-valantxite.                                 " Más Anticipos por Item
*}E-090920-NTP-3000014481
        lv_netwr = lv_netwr + lwa_vbrp-valvenxite.                          "I-090920-NTP-3000014481
*}  END OF REPLACE WMR-100715
      ENDLOOP.
      pe_opeexo = lv_netwr.
*}  END OF REPLACE WMR-080615
    ENDIF.

  ENDMETHOD.                    "get_opeexo_header


  METHOD get_opegra_header.

    DATA: lwa_vbrp      LIKE LINE OF pi_vbrp,
          lv_netwr      TYPE         p DECIMALS 6,
          lv_netwr_neto TYPE         p DECIMALS 6,
*{  BEGIN OF REPLACE WMR-100715
          ""*{  BEGIN OF INSERT WMR-190615
          ""          lw_sumaotrtri TYPE vbrp-netwr,
          ""          lw_sumaotrcar TYPE vbrp-netwr,
          ""*}  END OF INSERT WMR-190615
          ls_vbrp_temp  LIKE LINE OF pi_vbrp.
*}  END OF REPLACE WMR-100715

*   Armar rango (documentos nacionales)
    REFRESH ltr_fkart.
    LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '1' AND zz_opcion02 = '1'.
      lwa_fkart-low = lwa_constfkart-fkart.
      lwa_fkart-sign = 'I'.
      lwa_fkart-option = 'EQ'.
      APPEND lwa_fkart TO ltr_fkart.
    ENDLOOP.

*{  BEGIN OF INSERT WMR-100715
*    " Tipos de posición Anticipos
*    CLEAR ltr_pstyv.
*    LOOP AT lt_constpstyv INTO lwa_constpstyv WHERE zz_opcion01 = '3'.
*      lwa_pstyv-low = lwa_constpstyv-pstyv.
*      lwa_pstyv-sign = 'I'.
*      lwa_pstyv-option = 'EQ'.
*      APPEND lwa_pstyv TO ltr_pstyv.
*    ENDLOOP.
*
*    " Aplicación de Anticipos
*    CASE pi_vbrk-zz_tip_ope.
*      WHEN gc_tipop_01.
*      WHEN OTHERS.
*        CLEAR ltr_pstyv.
*    ENDCASE.
*}  END OF INSERT WMR-100715

*   Calcular valor
    IF ltr_fkart[] IS NOT INITIAL AND pi_vbrk-fkart IN ltr_fkart.
*{  BEGIN OF DELETE WMR-300615
      ""      IF pi_vbrk-taxk1 = '1'."Cuando el Cliente esta afecta a IGV
*}  END OF DELETE WMR-300615
      LOOP AT pi_vbrp INTO lwa_vbrp WHERE vbeln = pi_vbrk-vbeln.
        ""*{  BEGIN OF INSERT WMR-100715  ANTICIPOS PETRAMAS
        ""        IF lwa_vbrp-pstyv IN ltr_pstyv AND ltr_pstyv[] IS NOT INITIAL.
        ""          CONTINUE.
        ""        ENDIF.
        ""*}  END OF INSERT WMR-100715  ANTICIPOS PETRAMAS
*CASO ACFARMA
*{  BEGIN OF REPLACE WMR-080615
        ""          IF lwa_vbrp-taxm1 = '1'.
        IF lwa_vbrp-afect_igv EQ gc_afecto_igv
        AND lwa_vbrp-zz_check_bonif = abap_false. " No bonificadas                      "I-WMR-18122020-3000014557
*}  END OF REPLACE WMR-080615
*{  BEGIN OF REPLACE WMR-100715
          ""*{  BEGIN OF REPLACE WMR-190615
          ""          ""            lv_netwr = lv_netwr + lwa_vbrp-netwr.

          ""          CLEAR: lw_sumaotrtri, lw_sumaotrcar.
          ""          lw_sumaotrcar = get_otrcar_item( pi_knumv = pi_vbrk-knumv
          ""                                           pi_posnr = lwa_vbrp-posnr ).

          ""          lv_netwr = lv_netwr + lwa_vbrp-netwr - ( lw_sumaotrcar + lw_sumaotrtri ).
          ""*}  END OF REPLACE WMR-190615

*          CLEAR ls_vbrp_temp. "E-090920-NTP-3000014481
*          ls_vbrp_temp-sumaotrcar = get_otrcar_item( is_vbrk  = pi_vbrk       "I-WMR-020217-3000006528  "E-WMR-070319-3000010823
*                                                     pi_knumv = pi_vbrk-knumv             "E-WMR-070319-3000010823
*                                                     pi_posnr = lwa_vbrp-posnr ).         "E-WMR-070319-3000010823
*{E-090920-NTP-3000014481
*          get_otrcar_item(                                                                "I-WMR-070319-3000010823
*            EXPORTING                                                                     "I-WMR-070319-3000010823
*              is_vbrk       = pi_vbrk                                                     "I-WMR-070319-3000010823
*              pi_knumv      = pi_vbrk-knumv                                               "I-WMR-070319-3000010823
*              pi_posnr      = lwa_vbrp-posnr                                              "I-WMR-070319-3000010823
*            IMPORTING                                                                     "I-WMR-070319-3000010823
*              pe_sumaotrcar = ls_vbrp_temp-sumaotrcar ).                                  "I-WMR-070319-3000010823
*          ls_vbrp_temp-sumaotrtri = get_otrtri_item( pi_knumv = pi_vbrk-knumv
*                                                     pi_posnr = lwa_vbrp-posnr ).
*          ls_vbrp_temp-valantxite = get_valant_item( i_knumv = pi_vbrk-knumv
*                                                     i_posnr = lwa_vbrp-posnr ).
*          lv_netwr = lv_netwr + lwa_vbrp-netwr                                  " Valor Neto de Posición
*                     - ( ls_vbrp_temp-sumaotrcar + ls_vbrp_temp-sumaotrtri ).   " Menos Otros Cargos y Otros Tributos
***                     + ls_vbrp_temp-valantxite.                                 " Más Anticipos por Item
*          lv_netwr_neto = lv_netwr_neto + lwa_vbrp-netwr.                       " Valor Neto de Posición  "I-3000011712-NTP210419
*}E-090920-NTP-3000014481
          lv_netwr = lv_netwr + lwa_vbrp-valvenxite                 "I-090920-NTP-3000014481
                     - lwa_vbrp-valantxite.                         "I-190421-NTP-3000016080
          lv_netwr_neto = lv_netwr_neto + lwa_vbrp-valvenxite_taxa  "I-110920-NTP-3000014481
                          - lwa_vbrp-valantxite.                    "I-190421-NTP-3000016080
*}  END OF REPLACE WMR-100715
        ENDIF.
*CASO AUSTRAL
*          IF pi_vbrk-kalsm IN ltr_kalsm_e.
*            lv_netwr = lv_netwr + lwa_vbrp-netwr.
*          ELSEIF  lwa_vbrp-taxm1 = '1'.
*            lv_netwr = lv_netwr + lwa_vbrp-netwr.
*          ENDIF.
      ENDLOOP.
      pe_opegra_neto = lv_netwr_neto. "I-3000011712-NTP210419
      pe_opegra = lv_netwr.
*{  BEGIN OF DELETE WMR-300615
      ""      ENDIF.
*}  END OF DELETE WMR-300615
    ENDIF.

  ENDMETHOD.                    "get_opegra_header


  METHOD get_opeina_header.

    DATA: lwa_vbrp     LIKE LINE OF pi_vbrp,
          lv_netwr     TYPE         p DECIMALS 6,
*{  BEGIN OF REPLACE WMR-100715
          ""*{  BEGIN OF INSERT WMR-190615
          ""          lw_sumaotrtri TYPE vbrp-netwr,
          ""          lw_sumaotrcar TYPE vbrp-netwr,
          ""*}  END OF INSERT WMR-190615
          ls_vbrp_temp LIKE LINE OF pi_vbrp.
*}  END OF REPLACE WMR-100715

*   Armar rango de clases de factura (exportación y NC y ND de exportación)
    REFRESH ltr_fkart.
    LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '1' AND zz_opcion02 = '2'.
      lwa_fkart-low = lwa_constfkart-fkart.
      lwa_fkart-sign = 'I'.
      lwa_fkart-option = 'EQ'.
      APPEND lwa_fkart TO ltr_fkart.
    ENDLOOP.

*{  BEGIN OF INSERT WMR-100715
*    " Tipos de posición Anticipos
*    CLEAR ltr_pstyv.
*    LOOP AT lt_constpstyv INTO lwa_constpstyv WHERE zz_opcion01 = '3'.
*      lwa_pstyv-low = lwa_constpstyv-pstyv.
*      lwa_pstyv-sign = 'I'.
*      lwa_pstyv-option = 'EQ'.
*      APPEND lwa_pstyv TO ltr_pstyv.
*    ENDLOOP.
*
*    " Aplicación de Anticipos
*    CASE pi_vbrk-zz_tip_ope.
*      WHEN gc_tipop_01.
*      WHEN OTHERS.
*        CLEAR ltr_pstyv.
*    ENDCASE.
*}  END OF INSERT WMR-100715

*   Calcular valor
    IF ltr_fkart[] IS NOT INITIAL AND pi_vbrk-fkart IN ltr_fkart.
*{  BEGIN OF DELETE WMR-300615
      ""      IF pi_vbrk-kalsm IN ltr_kalsm_e.
*}  END OF DELETE WMR-300615
      LOOP AT pi_vbrp INTO lwa_vbrp WHERE vbeln = pi_vbrk-vbeln.
*{  BEGIN OF REPLACE WMR-080615
        ""*{  BEGIN OF INSERT WMR-100715  ANTICIPOS PETRAMAS
        ""        IF lwa_vbrp-pstyv IN ltr_pstyv AND ltr_pstyv[] IS NOT INITIAL.
        ""          CONTINUE.
        ""        ENDIF.
        ""*}  END OF INSERT WMR-100715  ANTICIPOS PETRAMAS
        ""          IF lwa_vbrp-taxm1 = '0'.
        IF lwa_vbrp-afect_igv EQ gc_inafec_igv
        AND lwa_vbrp-zz_check_bonif = abap_false. " No bonificadas                      "I-WMR-18122020-3000014557
*}  END OF REPLACE WMR-080615
*{  BEGIN OF REPLACE WMR-100715
          ""*{  BEGIN OF REPLACE WMR-190615
          ""          ""            lv_netwr = lv_netwr + lwa_vbrp-netwr.

          ""          CLEAR: lw_sumaotrtri, lw_sumaotrcar.
          ""          lw_sumaotrcar = get_otrcar_item( pi_knumv = pi_vbrk-knumv
          ""                                           pi_posnr = lwa_vbrp-posnr ).

          ""          lv_netwr = lv_netwr + lwa_vbrp-netwr - ( lw_sumaotrcar + lw_sumaotrtri ).
          ""*}  END OF REPLACE WMR-190615

*          CLEAR ls_vbrp_temp. "E-090920-NTP-3000014481
*          ls_vbrp_temp-sumaotrcar = get_otrcar_item( is_vbrk  = pi_vbrk       "I-WMR-020217-3000006528  "E-WMR-070319-3000010823
*                                                     pi_knumv = pi_vbrk-knumv             "E-WMR-070319-3000010823
*                                                     pi_posnr = lwa_vbrp-posnr ).         "E-WMR-070319-3000010823
*{E-090920-NTP-3000014481
*          get_otrcar_item(                                                                "I-WMR-070319-3000010823
*            EXPORTING                                                                     "I-WMR-070319-3000010823
*              is_vbrk       = pi_vbrk                                                     "I-WMR-070319-3000010823
*              pi_knumv      = pi_vbrk-knumv                                               "I-WMR-070319-3000010823
*              pi_posnr      = lwa_vbrp-posnr                                              "I-WMR-070319-3000010823
*            IMPORTING                                                                     "I-WMR-070319-3000010823
*              pe_sumaotrcar = ls_vbrp_temp-sumaotrcar ).                                  "I-WMR-070319-3000010823
*          ls_vbrp_temp-sumaotrtri = get_otrtri_item( pi_knumv = pi_vbrk-knumv
*                                                     pi_posnr = lwa_vbrp-posnr ).
*          ls_vbrp_temp-valantxite = get_valant_item( i_knumv = pi_vbrk-knumv
*                                                     i_posnr = lwa_vbrp-posnr ).
*          lv_netwr = lv_netwr + lwa_vbrp-netwr                                  " Valor Neto de Posición
*                     - ( ls_vbrp_temp-sumaotrcar + ls_vbrp_temp-sumaotrtri ).   " Menos Otros Cargos y Otros Tributos
***                     + ls_vbrp_temp-valantxite.                                 " Más Anticipos por Item
*}E-090920-NTP-3000014481
          lv_netwr = lv_netwr + lwa_vbrp-valvenxite.                         "I-090920-NTP-3000014481
*}  END OF REPLACE WMR-100715
        ENDIF.
      ENDLOOP.
      pe_opeina = lv_netwr.
*{  BEGIN OF DELETE WMR-300615
      ""      ENDIF.
*}  END OF DELETE WMR-300615
    ENDIF.

  ENDMETHOD.                    "get_opeina_header


  METHOD get_ordenc_header.

*{  BEGIN OF INSERT WMR-030617-3000007316
    DATA: lt_vbrp TYPE ltt_vbrp,
          lt_vbkd TYPE STANDARD TABLE OF vbkd.
    DATA: l_vbeln TYPE vbeln. "I-261021-NTP-3000017871

    FIELD-SYMBOLS: <fs_vbkd> TYPE vbkd.

    CASE gw_license.
      WHEN '0020974592'.  " DANPER
        " Obtener todos los números de pedidos de cliente
        lt_vbrp[] = it_vbrp[].
        DELETE lt_vbrp WHERE vbeln NE pi_vbrk-vbeln.
        SORT lt_vbrp BY aubel ASCENDING.
        DELETE ADJACENT DUPLICATES FROM lt_vbrp COMPARING aubel.

        IF lt_vbrp[] IS NOT INITIAL.
          SELECT vbeln posnr bstkd
            INTO CORRESPONDING FIELDS OF TABLE lt_vbkd
            FROM vbkd
            FOR ALL ENTRIES IN lt_vbrp
            WHERE vbeln EQ lt_vbrp-aubel
              AND posnr EQ 0.

          LOOP AT lt_vbkd ASSIGNING <fs_vbkd>.
            IF pe_bstkd IS INITIAL.
              pe_bstkd = <fs_vbkd>-bstkd.
            ELSE.
              CONCATENATE pe_bstkd <fs_vbkd>-bstkd INTO pe_bstkd SEPARATED BY ','.
            ENDIF.
          ENDLOOP.
        ENDIF.

      WHEN '0020729594'. "Austral
        "Rango Facturas de Exportación
        REFRESH ltr_fkart.
        LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '1' AND zz_opcion02 = '0' .
          lwa_fkart-low = lwa_constfkart-fkart.
          lwa_fkart-sign = 'I'.
          lwa_fkart-option = 'EQ'.
          APPEND lwa_fkart TO ltr_fkart.
        ENDLOOP.

        CHECK pi_vbrk-zz_vbeln IS NOT INITIAL AND pi_vbrk-fkart NOT IN ltr_fkart.

        "Obtener OC
        SELECT SINGLE bstkd
        FROM vbkd
        INTO pe_bstkd
        WHERE vbeln EQ pi_vbrk-zz_vbeln.

*{I-261021-NTP-3000017871
      WHEN '0020311006'  " AIB
        OR '0020863116'. " AIB CLOUD
        "Orden OC
        l_vbeln = pi_vbrk-zz_vbeln.

        "Para nc leer de factura
        IF pi_vbrk-tfact = gc_tipdoc_nc
        OR pi_vbrk-tfact = gc_tipdoc_nd.                                    "I-WMR-15122021-3000018127
          SELECT SINGLE aubel INTO l_vbeln FROM vbrp WHERE vbeln = pi_vbrk-zz_sdrefer.
        ENDIF.

        SELECT SINGLE bstkd
          FROM vbkd
          INTO pe_bstkd
          WHERE vbeln EQ l_vbeln.
*}I-261021-NTP-3000017871

      WHEN OTHERS.
*}  END OF INSERT WMR-030617-3000007316
*       Obtener OC
        SELECT SINGLE bstkd
        FROM vbkd
        INTO pe_bstkd
        WHERE vbeln EQ pi_vbrk-zz_vbeln.

*{  BEGIN OF INSERT WMR-030617-3000007316
    ENDCASE.
*}  END OF INSERT WMR-030617-3000007316

  ENDMETHOD.


  METHOD get_otrtri_item.

    CLEAR pe_adicio.

* Armar rango
    REFRESH ltr_kschl.
    LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '1' AND zz_opcion02 = '6'.
      lwa_kschl-low = lwa_constakonv-kschl.
      lwa_kschl-sign = 'I'.
      lwa_kschl-option = 'EQ'.
      APPEND lwa_kschl TO ltr_kschl.
    ENDLOOP.

* Calcular valor
    IF ltr_kschl[] IS NOT INITIAL.
      LOOP AT lt_konvv INTO lwa_konv WHERE knumv EQ pi_knumv
                                       AND kposn EQ pi_posnr
                                       AND kschl IN ltr_kschl
                                       AND kstat EQ space.
        pe_adicio = pe_adicio + lwa_konv-kwert.
      ENDLOOP.
    ENDIF.

  ENDMETHOD.                    "get_otrtri_item


  METHOD get_pallets_and_units_export.

    DATA: lt_vbrp   TYPE ltt_vbrp,
          lt_vekp_1 TYPE STANDARD TABLE OF vekp,
          lt_vekp   TYPE STANDARD TABLE OF vekp,
          lt_vepo   TYPE STANDARD TABLE OF vepo,
          lt_ausp   TYPE STANDARD TABLE OF ausp,
          lr_atinn  TYPE RANGE OF ausp-atinn,

          ls_const  LIKE LINE OF lt_const,
          ls_vekp   TYPE vekp,
          ls_vepo   TYPE vepo,
          ls_ausp   TYPE ausp,
          ls_atinn  LIKE LINE OF lr_atinn,

          l_lines   TYPE i,

          lc_klart  TYPE ausp-klart VALUE '001'.

    FIELD-SYMBOLS: <fs_vbrp> TYPE lty_vbrp.

    CHECK is_vbrk-zz_check_expor EQ abap_true.  " Exportación

    LOOP AT lt_const INTO ls_const.
      CASE ls_const-campo.
        WHEN 'ATINN_PRES'.  " Presentación: Código de característica
          CLEAR ls_atinn.
          ls_atinn-sign   = ls_const-signo.
          ls_atinn-option = ls_const-opcion.
          CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
            EXPORTING
              input  = ls_const-valor1
            IMPORTING
              output = ls_atinn-low.
          CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
            EXPORTING
              input  = ls_const-valor2
            IMPORTING
              output = ls_atinn-high.
          APPEND ls_atinn TO lr_atinn.
      ENDCASE.
    ENDLOOP.

    lt_vbrp[] = it_vbrp[].
    DELETE lt_vbrp WHERE vbeln NE is_vbrk-vbeln.
    SORT lt_vbrp BY vgbel ASCENDING.
    DELETE ADJACENT DUPLICATES FROM lt_vbrp COMPARING vgbel.

    CHECK lt_vbrp[] IS NOT INITIAL.

    LOOP AT lt_vbrp ASSIGNING <fs_vbrp>.
      CLEAR ls_vekp.
      ls_vekp-vpobj = '01'. ls_vekp-vpobjkey = <fs_vbrp>-vgbel.
      APPEND ls_vekp TO lt_vekp_1.
    ENDLOOP.

    SELECT venum vpobj vpobjkey uevel packvorschr
      INTO CORRESPONDING FIELDS OF TABLE lt_vekp           ##TOO_MANY_ITAB_FIELDS
      FROM vekp
      FOR ALL ENTRIES IN lt_vekp_1
      WHERE vpobj    EQ lt_vekp_1-vpobj
        AND vpobjkey EQ lt_vekp_1-vpobjkey.

    " Cantidad de Pallets
    CHECK lr_atinn[] IS NOT INITIAL.

    l_lines = 0.
    lt_vekp_1[] = lt_vekp[].  DELETE lt_vekp_1 WHERE uevel IS INITIAL.
    l_lines = lines( lt_vekp_1 ).
    IF l_lines GT 0.
      e_exp_pallet = l_lines. CONDENSE e_exp_pallet NO-GAPS.
      CONCATENATE e_exp_pallet 'PALETA(S)' INTO e_exp_pallet SEPARATED BY space.
    ENDIF.

    " Total de Unidades
    l_lines = 0.
    lt_vekp_1[] = lt_vekp[].  DELETE lt_vekp_1 WHERE uevel IS NOT INITIAL.
    IF lt_vekp_1[] IS NOT INITIAL.
      SELECT venum vepos matnr vemng
        INTO CORRESPONDING FIELDS OF TABLE lt_vepo              ##TOO_MANY_ITAB_FIELDS
        FROM vepo
        FOR ALL ENTRIES IN lt_vekp_1
        WHERE venum EQ lt_vekp_1-venum.

      READ TABLE lt_vepo INTO ls_vepo INDEX 1.
      IF sy-subrc EQ 0.
        SELECT objek atinn atzhl mafid klart adzhl atwrt
          INTO CORRESPONDING FIELDS OF TABLE lt_ausp              ##TOO_MANY_ITAB_FIELDS
          FROM ausp
          WHERE objek EQ ls_vepo-matnr
            AND atinn IN lr_atinn
            AND klart EQ lc_klart.

        LOOP AT lt_vepo INTO ls_vepo.
          ADD ls_vepo-vemng TO l_lines.
        ENDLOOP.
        IF l_lines GT 0.
          e_exp_units = l_lines.  CONDENSE e_exp_units NO-GAPS.
          READ TABLE lt_ausp INTO ls_ausp INDEX 1.
          IF sy-subrc EQ 0.
            CONCATENATE e_exp_units ls_ausp-atwrt INTO e_exp_units SEPARATED BY space.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD get_partida_arancelaria.

    DATA: ls_likp TYPE lty_likp,
          l_exnum TYPE likp-exnum.

    CLEAR r_part_ara.

    CASE gw_license.
      WHEN '0020974592'.  " DANPER
        READ TABLE lt_likp INTO ls_likp
             WITH KEY vbeln = is_vbrp-vgbel.
        IF sy-subrc EQ 0.
          SELECT SINGLE exnum
            INTO l_exnum
            FROM likp
            WHERE vbeln EQ ls_likp-vbeln.
          IF sy-subrc EQ 0.
            SELECT SINGLE stawn
              INTO r_part_ara
              FROM eipo
              WHERE exnum EQ l_exnum
                AND expos EQ is_vbrp-vgpos.
          ENDIF.
        ENDIF.

    ENDCASE.

  ENDMETHOD.


  METHOD get_pedido_header.

    DATA: lwa_vbrp LIKE LINE OF pi_vbrp.

*   Obtener Pedido
    CASE gw_license.
      WHEN '0020729594'. "Austral
        "Rango Facturas de Exportación Consumo Humano Directo/ Consumo Humano Indirecto
        REFRESH ltr_fkart.
        LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '3' AND zz_opcion02 = '1' .
          lwa_fkart-low = lwa_constfkart-fkart.
          lwa_fkart-sign = 'I'.
          lwa_fkart-option = 'EQ'.
          APPEND lwa_fkart TO ltr_fkart.
        ENDLOOP.

        "Obtener Pedido
        IF pi_vbrk-fkart IN ltr_fkart.
          READ TABLE pi_vbrp INTO lwa_vbrp WITH KEY vbeln = pi_vbrk-vbeln.
          IF sy-subrc = 0.
            READ TABLE lt_vbak INTO lwa_vbak WITH KEY vbeln  = lwa_vbrp-aubel.
            IF sy-subrc = 0.
              SELECT SINGLE vgbel
              FROM vbap
              INTO pe_pedido
              WHERE vbeln EQ lwa_vbak-vbeln.
            ENDIF.
          ENDIF.
        ELSE.
          READ TABLE pi_vbrp INTO lwa_vbrp WITH KEY vbeln = pi_vbrk-vbeln.
          IF sy-subrc = 0.
            READ TABLE lt_vbak INTO lwa_vbak WITH KEY vbeln  = lwa_vbrp-aubel.
            IF sy-subrc = 0.
              pe_pedido = lwa_vbak-vbeln.
            ENDIF.
          ENDIF.
        ENDIF.

      WHEN OTHERS.
        "Para clase fact. envia docs. int. (Pedido/Entrega/Factura)
        REFRESH ltr_fkart.
        LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '7' AND zz_opcion02 = '1' .
          lwa_fkart-low = lwa_constfkart-fkart.
          lwa_fkart-sign = 'I'.
          lwa_fkart-option = 'EQ'.
          APPEND lwa_fkart TO ltr_fkart.
        ENDLOOP.

        IF ( pi_vbrk-fkart IN ltr_fkart ) AND ( ltr_fkart[] IS NOT INITIAL ).
          READ TABLE pi_vbrp INTO lwa_vbrp WITH KEY vbeln = pi_vbrk-vbeln.
          IF sy-subrc = 0.
            pe_pedido = lwa_vbrp-aubel.
          ENDIF.
        ENDIF.
    ENDCASE.

  ENDMETHOD.                    "get_opeina_header


  METHOD get_percep_item.

    CLEAR pe_imporpermn.

*   Armar rango de Condición de Percepción
    REFRESH ltr_kschl.
    LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '5' AND zz_opcion02 = '6'.
      lwa_kschl-low = lwa_constakonv-kschl.
      lwa_kschl-sign = 'I'.
      lwa_kschl-option = 'EQ'.
      APPEND lwa_kschl TO ltr_kschl.
    ENDLOOP.

    CHECK ltr_kschl[] IS NOT INITIAL.

*   Calcular valor de Percepción
    LOOP AT lt_konvv INTO lwa_konv WHERE knumv EQ pi_knumv
                                     AND kposn EQ pi_posnr
                                     AND kschl IN ltr_kschl.
*{  BEGIN OF REPLACE WMR-161017-3000008124
      ""      pe_imporpermn = pe_imporpermn + lwa_konv-kwert.
      CASE gw_license.
        WHEN '0020673876'. "Beta
          IF lwa_konv-kstat EQ abap_true.
            " Valor de Percepción
            ADD lwa_konv-kwert TO pe_imporpermn.

            " Porcentaje de Percepción
            IF pe_imporpermn_por IS INITIAL.
              pe_imporpermn_por = lwa_konv-kbetr / 10.
            ENDIF.
          ELSE.
            " Código Porcentaje de Percepción
            pe_codreg_per = lwa_konv-mwsk2.
          ENDIF.

        WHEN OTHERS.
          pe_imporpermn = pe_imporpermn + lwa_konv-kwert.
      ENDCASE.
*{  END OF REPLACE WMR-161017-3000008124
    ENDLOOP.

*   Calcula Porcentaje de Percepción
    CASE gw_license.
      WHEN '0020673876'. "Beta
      WHEN OTHERS.
        IF pe_imporpermn IS NOT INITIAL.
          pe_imporpermn_por = lwa_konv-kbetr / 10.
        ENDIF.
    ENDCASE.

  ENDMETHOD.                    "get_percep_item


  METHOD get_port_data.
    TYPES: BEGIN OF ty_vbrk,
             vbeln   TYPE  vbrk-vbeln,
             landtx  TYPE  vbrk-landtx,
             stceg_l TYPE  vbrk-stceg_l,
           END OF ty_vbrk.

    DATA:
      ls_vbrk  TYPE ty_vbrk,
*{  BEGIN OF INSERT WMR-171016-3000005361
      ls_kna1  TYPE kna1,
*}  END OF INSERT WMR-171016-3000005361
*{  BEGIN OF INSERT WMR-241116-3000005345
      ls_eikp  TYPE eikp,
*}  END OF INSERT WMR-241116-3000005346
      select   TYPE TABLE OF edpline,
      sublist  TYPE edpline,
      from     TYPE string,
      where    TYPE string,
      lo_error TYPE REF TO cx_root.

*{  BEGIN OF INSERT WMR-270317-3000006749
    DATA: l_value TYPE string,
*}  END OF INSERT WMR-270317-3000006749
          l_exnum TYPE exnum.  "I-261021-NTP-3000017871

    FIELD-SYMBOLS:
        <fs_vbeln>  TYPE any.

    CASE gw_license.
      WHEN '0020758614'.  " LSA

        ASSIGN COMPONENT 'VBELN' OF STRUCTURE is_vbak TO <fs_vbeln>.
        CHECK <fs_vbeln> IS ASSIGNED.

        SELECT SINGLE vbeln landtx stceg_l
          INTO ls_vbrk
          FROM vbrk
          WHERE vbeln EQ i_vbeln.

        CLEAR select.
        sublist = 'ZZPUEORI AS ZZPUEORI'.
        APPEND sublist TO select.
        sublist = 'ZZPUEDES AS ZZPUEDES'.
        APPEND sublist TO select.
        sublist = 'ZZCODEMB AS ZZVAPOR'.
        APPEND sublist TO select.
*{  BEGIN OF REPLACE WMR-210815
        ""    sublist = 'ZZNROVIA AS ZZBLNRO'.
        sublist = 'ZZCONEMB AS ZZBLNRO'.
*}  END OF REPLACE WMR-210815
        APPEND sublist TO select.
        sublist = 'ZZSALEMB AS ZZBLFEC'.
        APPEND sublist TO select.
        sublist = 'ZZCARCRE AS ZZCONDIC'.
        APPEND sublist TO select.

        TRY .
            SELECT SINGLE (select)
              INTO CORRESPONDING FIELDS OF es_port_data
              FROM vbak
              WHERE vbeln EQ <fs_vbeln>.

          CATCH cx_root INTO lo_error.                   "#EC CATCH_ALL
            EXIT.
        ENDTRY.

        CHECK sy-subrc EQ 0.

        " Denominación Puerto Origen
        CLEAR select.
        sublist = 'DENPUE'.
        APPEND sublist TO select.
        from    = 'ZOSTB_PUERTOS'.
        where   = 'CODPUE EQ ES_PORT_DATA-ZZPUEORI'.

        TRY .
            SELECT SINGLE (select)
              INTO es_port_data-zzpueoritxt
              FROM (from)
              WHERE (where).

            IF sy-subrc EQ 0.
              SELECT SINGLE landx
                INTO es_port_data-zzpaisori
                FROM t005t
                WHERE spras EQ sy-langu
                  AND land1 EQ ls_vbrk-landtx.
            ENDIF.

          CATCH cx_root INTO lo_error.  "#EC CATCH_ALL  "#EC NO_HANDLER

        ENDTRY.

        " Denominación Puerto Destino
        CLEAR select.
        sublist = 'DENPUE'.
        APPEND sublist TO select.
        from    = 'ZOSTB_PUERTOS'.
        where   = 'CODPUE EQ ES_PORT_DATA-ZZPUEDES'.

        TRY .
            SELECT SINGLE (select)
              INTO es_port_data-zzpuedestxt
              FROM (from)
              WHERE (where).

            IF sy-subrc EQ 0.
              SELECT SINGLE landx
                INTO es_port_data-zzpaisdes
                FROM t005t
                WHERE spras EQ sy-langu
                  AND land1 EQ ls_vbrk-stceg_l.
            ENDIF.

          CATCH cx_root INTO lo_error. "#EC CATCH_ALL   "#EC NO_HANDLER

        ENDTRY.

        " Denominación Vapor
        CLEAR select.
        sublist = 'DESEMB'.
        APPEND sublist TO select.
        from    = 'ZOSTB_EMBARCA'.
        where   = 'CODEMB EQ ES_PORT_DATA-ZZVAPOR'.

        TRY .
            SELECT SINGLE (select)
              INTO es_port_data-zzvaportxt
              FROM (from)
              WHERE (where).

          CATCH cx_root INTO lo_error. "#EC CATCH_ALL     "#EC NO_HANDLER

        ENDTRY.

*{  BEGIN OF INSERT WMR-171016-3000005361
      WHEN '0020311006'   " AIB
        OR '0020863116'.  " AIB CLOUD
        CLEAR: ls_eikp, ls_kna1.

*{I-261021-NTP-3000017871
        l_exnum = is_vbrk-exnum.

        "Para nc leer de factura
        IF is_vbrk-tfact = gc_tipdoc_nc
        OR is_vbrk-tfact = gc_tipdoc_nd.                                    "I-WMR-15122021-3000018127
          SELECT SINGLE exnum INTO l_exnum FROM vbrk WHERE vbeln = is_vbrk-zz_sdrefer.
        ENDIF.
*}I-261021-NTP-3000017871

        "Puertos - Factura
        SELECT SINGLE exnum aland azoll zollb
          INTO CORRESPONDING FIELDS OF ls_eikp
          FROM eikp
          WHERE exnum EQ l_exnum.
*{I-NTP040718-3000010128
        IF sy-subrc <> 0.

          "Puertos - Entrega
          SELECT SINGLE b~exnum b~aland b~azoll b~zollb
            INTO CORRESPONDING FIELDS OF ls_eikp
            FROM likp AS a INNER JOIN eikp AS b ON b~exnum = a~exnum
            WHERE a~vbeln EQ is_likp-vbeln.
        ENDIF.
*}I-NTP040718-3000010128

        IF sy-subrc EQ 0.
**          " País Origen
**          SELECT SINGLE landx
**            INTO es_port_data-zzpaisori
**            FROM t005t
**            WHERE spras EQ sy-langu
**              AND land1 EQ ls_eikp-aland.
**          TRANSLATE es_port_data-zzpaisori TO UPPER CASE.

          " Puerto Carga
          SELECT SINGLE bezei
            INTO es_port_data-zzpueoritxt
            FROM t615t
            WHERE spras EQ sy-langu
              AND land1 EQ ls_eikp-aland
              AND zolla EQ ls_eikp-azoll.
          TRANSLATE es_port_data-zzpueoritxt TO UPPER CASE.

          " Datos de Destinatario de Mcías
          IF is_likp IS NOT INITIAL.                                        "I-WMR-170117-3000006395
            SELECT SINGLE kunnr land1
              INTO CORRESPONDING FIELDS OF ls_kna1
              FROM kna1
              WHERE kunnr EQ is_likp-kunnr.
          ELSE.                                                             "I-WMR-170117-3000006395
            " Tomar Destinatario Mcías de Interlocutores de Factura         "I-WMR-170117-3000006395
            READ TABLE lt_vbpa INTO lwa_vbpa                                "I-WMR-170117-3000006395
                 WITH KEY parvw = gc_parvw_we.                              "I-WMR-170117-3000006395
            IF sy-subrc EQ 0.                                               "I-WMR-170117-3000006395
              SELECT SINGLE kunnr land1                                     "I-WMR-170117-3000006395
                INTO CORRESPONDING FIELDS OF ls_kna1                        "I-WMR-170117-3000006395
                FROM kna1                                                   "I-WMR-170117-3000006395
                WHERE kunnr EQ lwa_vbpa-kunnr.                              "I-WMR-170117-3000006395
            ENDIF.                                                          "I-WMR-170117-3000006395
          ENDIF.                                                            "I-WMR-170117-3000006395

          ""          IF sy-subrc EQ 0.                                     "E-WMR-170117-3000006395
          IF ls_kna1 IS NOT INITIAL.                                        "I-WMR-170117-3000006395
**            " País Destino
**            SELECT SINGLE landx
**              INTO es_port_data-zzpaisdes
**              FROM t005t
**              WHERE spras EQ sy-langu
**                AND land1 EQ ls_kna1-land1.
**            TRANSLATE es_port_data-zzpaisdes TO UPPER CASE.

            " Puerto Descarga
            SELECT SINGLE bezei
              INTO es_port_data-zzpuedestxt
              FROM t615t
              WHERE spras EQ sy-langu
                AND land1 EQ ls_kna1-land1
                AND zolla EQ ls_eikp-zollb.
            TRANSLATE es_port_data-zzpuedestxt TO UPPER CASE.
          ENDIF.
        ENDIF.
*}  END OF INSERT WMR-171016-3000005361

*{  BEGIN OF INSERT WMR-241116-3000005346
      WHEN '0020673876'.  " BETA
        CLEAR: ls_eikp, ls_kna1.

        SELECT SINGLE exnum aland azoll zollb
          INTO CORRESPONDING FIELDS OF ls_eikp
          FROM eikp
          WHERE exnum EQ is_vbrk-exnum.

        IF sy-subrc EQ 0.
          " País Origen
          SELECT SINGLE landx
            INTO es_port_data-zzpaisori
            FROM t005t
            WHERE spras EQ sy-langu
              AND land1 EQ ls_eikp-aland.
          TRANSLATE es_port_data-zzpaisori TO UPPER CASE.

          " Puerto Carga
          SELECT SINGLE bezei
            INTO es_port_data-zzpueoritxt
            FROM t615t
            WHERE spras EQ sy-langu
              AND land1 EQ ls_eikp-aland
              AND zolla EQ ls_eikp-azoll.
          TRANSLATE es_port_data-zzpueoritxt TO UPPER CASE.

          ""          " Datos de Destinatario de Mcías                      "E-WMR-070217-3000006563
          ""          SELECT SINGLE kunnr land1                             "E-WMR-070217-3000006563
          ""            INTO CORRESPONDING FIELDS OF ls_kna1                "E-WMR-070217-3000006563
          ""            FROM kna1                                           "E-WMR-070217-3000006563
          ""            WHERE kunnr EQ is_likp-kunnr.                       "E-WMR-070217-3000006563

          " Tomar Destinatario Mcías de Interlocutores de Factura           "I-WMR-070217-3000006563
          READ TABLE lt_vbpa INTO lwa_vbpa                                  "I-WMR-070217-3000006563
               WITH KEY parvw = gc_parvw_we.                                "I-WMR-070217-3000006563

          IF sy-subrc EQ 0.
            " País Destino
            SELECT SINGLE landx
              INTO es_port_data-zzpaisdes
              FROM t005t
              WHERE spras EQ sy-langu
""                AND land1 EQ ls_kna1-land1                                "E-WMR-070217-3000006563
                AND land1 EQ lwa_vbpa-land1.                                "I-WMR-070217-3000006563
            TRANSLATE es_port_data-zzpaisdes TO UPPER CASE.

            IF ls_eikp-zollb IS NOT INITIAL.
            " Puerto Descarga
            SELECT SINGLE bezei
              INTO es_port_data-zzpuedestxt
              FROM t615t
              WHERE spras EQ sy-langu
""                AND land1 EQ ls_kna1-land1                                "E-WMR-070217-3000006563
                AND land1 EQ lwa_vbpa-land1                                 "I-WMR-070217-3000006563
                AND zolla EQ ls_eikp-zollb.
          ELSE.
            " Puerto Descarga
            SELECT SINGLE bezei
              INTO es_port_data-zzpuedestxt
              FROM t615t
              WHERE spras EQ sy-langu
                AND land1 EQ lwa_vbpa-land1
                AND zolla EQ ls_eikp-zoll1.
          ENDIF.
            TRANSLATE es_port_data-zzpuedestxt TO UPPER CASE.
          ENDIF.
        ENDIF.
*}  END OF INSERT WMR-171016-3000005361

*{  BEGIN OF INSERT WMR-270317-3000006749
      WHEN '0020974592'.  " DANPER

        """""""""""""""""""""""""""""""""""""""""""""""""""
        "           PUERTO CARGA Y PAIS ORIGEN            "
        """""""""""""""""""""""""""""""""""""""""""""""""""

        " Tomar Puerto de Carga de Interlocutor "Puerto de Carga" de Factura
        READ TABLE lt_vbpa INTO lwa_vbpa
             WITH KEY parvw = gc_parvw_zd.
        IF sy-subrc EQ 0.
          " País Origen
          SELECT SINGLE landx
            INTO es_port_data-zzpaisori
            FROM t005t
            WHERE spras EQ sy-langu
              AND land1 EQ lwa_vbpa-land1.
          TRANSLATE es_port_data-zzpaisori TO UPPER CASE.

          " Puerto Carga
          SELECT SINGLE name1
            INTO es_port_data-zzpueoritxt
            FROM adrc
            WHERE addrnumber EQ lwa_vbpa-adrnr.
          TRANSLATE es_port_data-zzpueoritxt TO UPPER CASE.
        ENDIF.

        """""""""""""""""""""""""""""""""""""""""""""""""""
        "           PUERTO CARGA Y PAIS DESTINO           "
        """""""""""""""""""""""""""""""""""""""""""""""""""

        " Tomar Puerto de Descarga de Interlocutor "Destinatario de Mcías" de Factura
        READ TABLE lt_vbpa INTO lwa_vbpa
             WITH KEY parvw = gc_parvw_we.
        IF sy-subrc EQ 0.
          " País Destino
          SELECT SINGLE landx
            INTO es_port_data-zzpaisdes
            FROM t005t
            WHERE spras EQ sy-langu
              AND land1 EQ lwa_vbpa-land1.
          TRANSLATE es_port_data-zzpaisdes TO UPPER CASE.

          " Puerto Descarga
          CLEAR l_value.
          SELECT SINGLE street
            INTO l_value
            FROM adrc
            WHERE addrnumber EQ lwa_vbpa-adrnr.
          es_port_data-zzpuedestxt = l_value.
          TRANSLATE es_port_data-zzpuedestxt TO UPPER CASE.
        ENDIF.
*}  END OF INSERT WMR-270317-3000006749

*{  BEGIN OF INSERT WMR-191018-3000009765
      WHEN '0021061097'.  " CMH

        """""""""""""""""""""""""""""""""""""""""""""""""""
        "           PUERTO CARGA Y PAIS ORIGEN            "
        """""""""""""""""""""""""""""""""""""""""""""""""""

        " Puerto Carga
        CLEAR select.
        sublist = 'INCO2_L'.
        APPEND sublist TO select.

        TRY .
            SELECT SINGLE (select)
              INTO l_value
              FROM vbrk
              WHERE vbeln = is_vbrk-vbeln.

            es_port_data-zzpueoritxt = l_value.
            TRANSLATE es_port_data-zzpueoritxt TO UPPER CASE.

          CATCH cx_root INTO lo_error.

        ENDTRY.

        " País Origen
        SELECT SINGLE landx
          INTO es_port_data-zzpaisori
          FROM marc AS m INNER JOIN t005t AS t
          ON m~herkl = t~land1
          WHERE m~matnr = is_vbrp-matnr
            AND m~werks = is_vbrp-werks
            AND t~spras = sy-langu.
        TRANSLATE es_port_data-zzpaisori TO UPPER CASE.
*}  END OF INSERT WMR-191018-3000009765

    ENDCASE.

  ENDMETHOD.


  METHOD get_position_expcertif.

    DATA: lt_ausp  TYPE STANDARD TABLE OF ausp,
          lr_atinn TYPE RANGE OF ausp-atinn,
          lr_atwrt TYPE RANGE OF ausp-atwrt,
          lr_land1 TYPE RANGE OF t005-land1,

          ls_atinn LIKE LINE OF lr_atinn,
          ls_atwrt LIKE LINE OF lr_atwrt,
          ls_land1 LIKE LINE OF lr_land1,
          ls_const LIKE LINE OF lt_const,
          ls_adrc  TYPE adrc,

          lc_klart TYPE ausp-klart VALUE '001'.

    CLEAR: cs_vbrp-zz_certif_fda, cs_vbrp-zz_certif_fce.

    CASE gw_license.
      WHEN '0020974592'.  " DANPER

        LOOP AT lt_const INTO ls_const.
          CASE ls_const-campo.
            WHEN 'ATINN_CONS'.  " Proceso Conservas: Código de característica
              CLEAR ls_atinn.
              ls_atinn-sign   = ls_const-signo.
              ls_atinn-option = ls_const-opcion.
              CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
                EXPORTING
                  input  = ls_const-valor1
                IMPORTING
                  output = ls_atinn-low.
              CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
                EXPORTING
                  input  = ls_const-valor2
                IMPORTING
                  output = ls_atinn-high.
              APPEND ls_atinn TO lr_atinn.

            WHEN 'DENOM_CONS'.  " Proceso Conservas: Valor de característica
              CLEAR ls_atwrt.
              ls_atwrt-sign   = ls_const-signo.
              ls_atwrt-option = ls_const-opcion.
              ls_atwrt-low    = ls_const-valor1.
              ls_atwrt-high   = ls_const-valor2.
              APPEND ls_atwrt TO lr_atwrt.

            WHEN 'LAND1_CONS'.  " Proceso Conservas: Países
              CLEAR ls_land1.
              ls_land1-sign   = ls_const-signo.
              ls_land1-option = ls_const-opcion.
              ls_land1-low    = ls_const-valor1.
              ls_land1-high   = ls_const-valor2.
              APPEND ls_land1 TO lr_land1.

          ENDCASE.
        ENDLOOP.

        CHECK lr_land1[] IS NOT INITIAL.

        " Verificar País del Destinatario de Mercancías sea EEUU o Puerto Rico
        LOOP AT lt_vbpa INTO lwa_vbpa WHERE vbeln EQ is_vbrk-vbeln
                                        AND parvw EQ gc_parvw_we
                                        AND land1 IN lr_land1.
          EXIT.
        ENDLOOP.

        IF sy-subrc EQ 0.
          SELECT SINGLE addrnumber name3 name4
            INTO CORRESPONDING FIELDS OF ls_adrc
            FROM t001w AS t INNER JOIN adrc AS a
            ON t~adrnr EQ a~addrnumber
            WHERE t~werks     EQ cs_vbrp-werks
              AND a~date_from EQ '00010101'
              AND a~nation    EQ ''.

          IF sy-subrc EQ 0.
            " FDA
            cs_vbrp-zz_certif_fda = ls_adrc-name3.

            CHECK lr_atinn[] IS NOT INITIAL.
            CHECK lr_atwrt[] IS NOT INITIAL.

            " Verificar Si el Proceso del Material es Conserva
            SELECT objek atinn atzhl mafid klart adzhl atwrt
              INTO CORRESPONDING FIELDS OF TABLE lt_ausp           ##TOO_MANY_ITAB_FIELDS
              FROM ausp
              WHERE objek EQ cs_vbrp-matnr
                AND atinn IN lr_atinn
                AND klart EQ lc_klart
                AND atwrt IN lr_atwrt.

            IF lt_ausp[] IS NOT INITIAL.
              " FCE
              cs_vbrp-zz_certif_fce = ls_adrc-name4.
            ENDIF.
          ENDIF.
        ENDIF.

    ENDCASE.

  ENDMETHOD.


  METHOD get_reference_sd.

    DATA: ls_cab  TYPE lty_cabecera_salida.

    CLEAR r_sdrefer.

    CASE is_vbrk-tfact.
      WHEN gc_tipdoc_nc OR gc_tipdoc_nd.

        " Buscar documento SD referencia
        SELECT SINGLE bukrs zz_nrodocsap zz_numeracion zz_tipodoc
          INTO CORRESPONDING FIELDS OF ls_cab
          FROM zostb_docexposca
          WHERE bukrs         EQ is_vbrk-bukrs
            AND zz_numeracion EQ is_vbrk-tipdocmodif
            AND zz_tipodoc    EQ is_vbrk-tipdocmodifho.

        IF sy-subrc EQ 0.
          r_sdrefer = ls_cab-zz_nrodocsap.
        ENDIF.

    ENDCASE.

  ENDMETHOD.


  METHOD get_sid_number.

    TYPES: BEGIN OF ty_mat,
             werks  TYPE vbrp-werks,
             matkl  TYPE vbrp-matkl,
             matnr  TYPE vbrp-matnr,
             getsid TYPE string,
             tippo  TYPE string,
             tipca  TYPE string,
             tipen  TYPE string,
             tamen  TYPE string,
           END OF ty_mat.

    TYPES: BEGIN OF ty_charac,
             atinn TYPE ausp-atinn,
             field TYPE fieldname,
           END OF ty_charac.

    DATA: lt_ausp     TYPE STANDARD TABLE OF ausp,
          lt_charac   TYPE STANDARD TABLE OF ty_charac,

          ls_ausp     TYPE ausp,
          ls_mat      TYPE ty_mat,
          ls_charac   TYPE ty_charac,
          ls_const    LIKE LINE OF lt_const,

          lo_struct   TYPE REF TO data,
          lo_error    TYPE REF TO cx_root,

          lc_klart    TYPE ausp-klart VALUE '001',
          lc_ztable_c TYPE string     VALUE 'ZOSTB_SIDNUMC',
          lc_ztable_d TYPE string     VALUE 'ZOSTB_SIDNUMD',
          lc_sid      TYPE string     VALUE 'SI',
          lc_sidnu    TYPE fieldname  VALUE 'SIDNU',
          lc_sides    TYPE fieldname  VALUE 'SIDES',
          lc_siden    TYPE fieldname  VALUE 'SIDEN',                              "I-WMR-180517-3000007316
          lc_dimev    TYPE fieldname  VALUE 'DIMEV'.                              "I-WMR-180517-3000007316

    DATA: select  TYPE TABLE OF edpline,
          sublist TYPE edpline,
          from    TYPE string,
          where   TYPE string.

    FIELD-SYMBOLS: <fs_value> TYPE any,
                   <fs_data>  TYPE any.

    CLEAR: e_sid_number, e_sid_descr.

    CASE gw_license.
      WHEN '0020974592'.  " DANPER

        CLEAR ls_mat.

        LOOP AT lt_const INTO ls_const.
          CASE ls_const-campo.
            WHEN 'MAT_CHARAC'.  " Características de Material para determinar SID
              CLEAR ls_charac.
              CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
                EXPORTING
                  input  = ls_const-valor1
                IMPORTING
                  output = ls_charac-atinn.
              ls_charac-field = ls_const-valor2.
              APPEND ls_charac TO lt_charac.
          ENDCASE.
        ENDLOOP.

        CHECK lt_charac[] IS NOT INITIAL.

        " Obtener Características de Material para Determinación del SID Number
        SELECT objek atinn atzhl mafid klart adzhl atwrt
          INTO CORRESPONDING FIELDS OF TABLE lt_ausp             ##TOO_MANY_ITAB_FIELDS
          FROM ausp
          FOR ALL ENTRIES IN lt_charac
          WHERE objek EQ is_vbrp-matnr
            AND atinn EQ lt_charac-atinn
            AND klart EQ lc_klart.

        CHECK lt_ausp[] IS NOT INITIAL.

        LOOP AT lt_ausp INTO ls_ausp.
          READ TABLE lt_charac INTO ls_charac
               WITH KEY atinn = ls_ausp-atinn.
          IF sy-subrc EQ 0.
            UNASSIGN <fs_value>. ASSIGN COMPONENT ls_charac-field OF STRUCTURE ls_mat TO <fs_value>.
            CHECK <fs_value> IS ASSIGNED.
            <fs_value> = ls_ausp-atwrt.
          ENDIF.
        ENDLOOP.

        CHECK ls_mat IS NOT INITIAL.
        CHECK ls_mat-getsid EQ lc_sid.

        ls_mat-matnr = is_vbrp-matnr.
        ls_mat-werks = is_vbrp-werks.
        ls_mat-matkl = is_vbrp-matkl.

        " Leer tabla ZOSTB_SIDNUMD dinámicamente
        CREATE DATA lo_struct TYPE (lc_ztable_d).
        UNASSIGN <fs_data>. ASSIGN lo_struct->* TO <fs_data>. FREE lo_struct.

        CLEAR: select, from, where.
        " SELECT
        CLEAR select.
        sublist = '*'.
        APPEND sublist TO select.

        " FROM
        from    = lc_ztable_d.

        " WHERE
        CONCATENATE 'WERKS  EQ LS_MAT-WERKS   AND'
                    'MATKL  EQ LS_MAT-MATKL   AND'
                    'TIPPO  EQ LS_MAT-TIPPO   AND'
                    'TIPCA  EQ LS_MAT-TIPCA   AND'
                    'TIPEN  EQ LS_MAT-TIPEN   AND'
                    'TAMEN  EQ LS_MAT-TAMEN   AND'
                    'MATNR  EQ LS_MAT-MATNR'
                    INTO where SEPARATED BY space.

        TRY .
            SELECT SINGLE (select)
              INTO <fs_data>
              FROM (from)
              WHERE (where).

            IF sy-subrc EQ 0.
              " SID Number
              UNASSIGN <fs_value>. ASSIGN COMPONENT lc_sidnu OF STRUCTURE <fs_data> TO <fs_value>.
              IF <fs_value> IS ASSIGNED.
                e_sid_number = <fs_value>.

                " SID Descripción

                " Leer tabla ZOSTB_SIDNUMC dinámicamente
                CREATE DATA lo_struct TYPE (lc_ztable_c).
                UNASSIGN <fs_data>. ASSIGN lo_struct->* TO <fs_data>. FREE lo_struct.

                CLEAR: select, from, where.
                " SELECT
                CLEAR select.
                sublist = '*'.
                APPEND sublist TO select.

                " FROM
                from    = lc_ztable_c.

                " WHERE
                CONCATENATE 'WERKS  EQ LS_MAT-WERKS   AND'
                            'MATKL  EQ LS_MAT-MATKL   AND'
                            'SIDNU  EQ E_SID_NUMBER   AND'
                            'TIPPO  EQ LS_MAT-TIPPO   AND'
                            'TIPCA  EQ LS_MAT-TIPCA   AND'
                            'TIPEN  EQ LS_MAT-TIPEN   AND'
                            'TAMEN  EQ LS_MAT-TAMEN'
                            INTO where SEPARATED BY space.

                SELECT SINGLE (select)
                  INTO <fs_data>
                  FROM (from)
                  WHERE (where).

                IF sy-subrc EQ 0.
*{  BEGIN OF REPLACE WMR-180517-3000007316
                  ""                  UNASSIGN <fs_value>. ASSIGN COMPONENT lc_sides OF STRUCTURE <fs_data> TO <fs_value>.
                  ""                  IF <fs_value> IS ASSIGNED.  e_sid_descr = <fs_value>.  ENDIF.

                  " SID Descripción en Inglés
                  UNASSIGN <fs_value>. ASSIGN COMPONENT lc_siden OF STRUCTURE <fs_data> TO <fs_value>.
                  IF <fs_value> IS ASSIGNED.  e_sid_descr = <fs_value>.  ENDIF.
                  " Dimensiones del Envase
                  UNASSIGN <fs_value>. ASSIGN COMPONENT lc_dimev OF STRUCTURE <fs_data> TO <fs_value>.
                  IF <fs_value> IS ASSIGNED.
                    IF e_sid_descr IS NOT INITIAL.
                      CONCATENATE e_sid_descr '- (' <fs_value> ' )' INTO e_sid_descr SEPARATED BY space.
                    ENDIF.
                  ENDIF.
*}  END OF REPLACE WMR-180517-3000007316
                ENDIF.
              ENDIF.
            ENDIF.

          CATCH cx_root INTO lo_error. "#EC CATCH_ALL          "#EC NO_HANDLER

        ENDTRY.

    ENDCASE.

  ENDMETHOD.


  METHOD get_spell_amount.

    DATA: lw_amount TYPE netwr,
          ls_spell  TYPE spell,
          ls_tcurt  TYPE zostb_tcurt.

    CLEAR e_inwords.

    SELECT SINGLE *
      INTO ls_tcurt
      FROM zostb_tcurt
      WHERE waers EQ i_waers
        AND begda LE i_fkdat
        AND endda GE i_fkdat.

    lw_amount = i_amount.

    CALL FUNCTION 'SPELL_AMOUNT'
      EXPORTING
        amount    = lw_amount
        currency  = i_waers
        language  = i_spras
      IMPORTING
        in_words  = ls_spell
      EXCEPTIONS
        not_found = 1
        too_large = 2
        OTHERS    = 3.

    CHECK sy-subrc EQ 0.

    CONCATENATE ls_spell-decimal(2) '/100' INTO e_inwords.
    CASE i_spras.
      WHEN 'S'.  " Español
        IF lw_amount LE 1.
          CONCATENATE ls_spell-word 'y' e_inwords ls_tcurt-nomsun INTO e_inwords SEPARATED BY space.
        ELSE.
          CONCATENATE ls_spell-word 'y' e_inwords ls_tcurt-nommon2 INTO e_inwords SEPARATED BY space.
        ENDIF.
      WHEN 'E'.  " Inglés
*{  BEGIN OF REPLACE WMR-280417-3000007140
        ""      IF lw_amount LE 1.
        ""        CONCATENATE ls_spell-word 'and' e_inwords 'United States Dollar' INTO e_inwords SEPARATED BY space.
        ""      ELSE.
        ""        CONCATENATE ls_spell-word 'and' e_inwords 'United States Dollars' INTO e_inwords SEPARATED BY space.
        ""      ENDIF.
        IF lw_amount LE 1.
          CONCATENATE ls_spell-word 'and' e_inwords ls_tcurt-nomleging INTO e_inwords SEPARATED BY space.
        ELSE.
          CONCATENATE ls_spell-word 'and' e_inwords ls_tcurt-nomimping INTO e_inwords SEPARATED BY space.
        ENDIF.
*}  END OF REPLACE WMR-280417-3000007140
    ENDCASE.
    TRANSLATE e_inwords TO UPPER CASE.

  ENDMETHOD.


  METHOD get_sumisc_item.

    CLEAR pe_sumaisc.

*   Armar rangos
    REFRESH ltr_kschl.
    LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '1' AND zz_opcion02 = '3'.
      lwa_kschl-low = lwa_constakonv-kschl.
      lwa_kschl-sign = 'I'.
      lwa_kschl-option = 'EQ'.
      APPEND lwa_kschl TO ltr_kschl.
    ENDLOOP.
    REFRESH ltr_fkart.
    LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '1' AND zz_opcion02 = '4' .
      lwa_fkart-low = lwa_constfkart-fkart.
      lwa_fkart-sign = 'I'.
      lwa_fkart-option = 'EQ'.
      APPEND lwa_fkart TO ltr_fkart.
    ENDLOOP.

    CHECK ltr_fkart[] IS NOT INITIAL AND ltr_kschl[] IS NOT INITIAL.

*   Realizar calculo
    IF pi_fkart IN ltr_fkart.
      LOOP AT lt_konvv INTO lwa_konv WHERE knumv EQ pi_knumv
                                       AND kposn EQ pi_posnr
                                       AND kschl IN ltr_kschl
                                       AND kstat EQ space.
        pe_sumaisc = lwa_konv-kwert.
      ENDLOOP.
    ENDIF.

  ENDMETHOD.                    "get_sumisc_item


  METHOD get_sunat_resolution.

    DATA: ls_const_company  TYPE  lty_consextsun.

    SELECT SINGLE *
      INTO ls_const_company
      FROM zostb_consextsun
      WHERE bukrs EQ i_bukrs.

    CHECK ls_const_company-zz_resol IS NOT INITIAL.

    r_resol = text-g01.
    REPLACE '&' WITH ls_const_company-zz_resol INTO r_resol.

  ENDMETHOD.


  METHOD get_text.

    DATA lt_text  TYPE TABLE OF lty_text.
    FIELD-SYMBOLS <fs_text> LIKE LINE OF lt_text.
*{  BEGIN OF INSERT WMR-201114
    DATA:
      lt_stream TYPE TABLE OF tdline,
      lt_lines  TYPE TABLE OF lty_text,
      ls_stream LIKE LINE OF lt_stream,
      ls_lines  TYPE  lty_text.
*}  END OF INSERT WMR-201114

    CALL FUNCTION 'READ_TEXT'
      EXPORTING
        id                      = pi_id
*{  BEGIN OF REPLACE WMR-180417-3000007083
        ""        language                = sy-langu
        language                = pi_spras
*}  END OF REPLACE WMR-180417-3000007083
        name                    = pi_name
        object                  = pi_object
      TABLES
        lines                   = lt_text
      EXCEPTIONS
        id                      = 1
        language                = 2
        name                    = 3
        not_found               = 4
        object                  = 5
        reference_check         = 6
        wrong_access_to_archive = 7
        OTHERS                  = 8.
    IF sy-subrc = 0.
*{  BEGIN OF INSERT WMR-201114
      " Convertir texto con caracteres especiales a texto original
      LOOP AT lt_text ASSIGNING <fs_text>.
        CLEAR: lt_lines, ls_lines, lt_stream.
        ls_lines = <fs_text>.
        APPEND ls_lines TO lt_lines.
        CALL FUNCTION 'CONVERT_ITF_TO_STREAM_TEXT'
          TABLES
            itf_text    = lt_lines
            text_stream = lt_stream.

        READ TABLE lt_stream INTO ls_stream INDEX 1.
        IF sy-subrc EQ 0.
          <fs_text>-tdline = ls_stream.
        ENDIF.
      ENDLOOP.
*}  END OF INSERT WMR-201114

      LOOP AT lt_text ASSIGNING <fs_text>.
        AT FIRST.
          pe_string = <fs_text>-tdline.
          CONTINUE.
        ENDAT.
        CONCATENATE pe_string <fs_text>-tdline INTO pe_string SEPARATED BY space.
      ENDLOOP.
    ENDIF.

  ENDMETHOD.                    "get_text


  METHOD get_text_ctabank.

    DATA: lt_febank TYPE STANDARD TABLE OF zostb_febank. "I-PBM211118-3000010907

    DATA: ls_febank TYPE zostb_febank,
          ls_const  LIKE LINE OF lt_const,
          lr_fkart  TYPE RANGE OF fkart,
          ls_fkart  LIKE LINE OF lr_fkart.

    DATA: lv_sede_moneda TYPE string,        "I-PBM211118-3000010907
          lv_str_ctabank TYPE string.        "I-PBM211118-3000010907


    CASE gs_process-license.                 "I-PBM211118-3000010907
      WHEN '0020974592'. "DANPER             "I-PBM211118-3000010907

        LOOP AT lt_const INTO ls_const WHERE campo = 'CTABANK'.
          ls_fkart-sign = ls_const-signo.
          ls_fkart-option = ls_const-opcion.
          ls_fkart-low = ls_const-valor1.
          ls_fkart-high = ls_const-valor2.
          APPEND ls_fkart TO lr_fkart.
        ENDLOOP.

        IF is_vbrk-fkart IN lr_fkart AND lr_fkart IS NOT INITIAL.
          SELECT SINGLE * INTO ls_febank FROM zostb_febank WHERE bukrs = is_vbrk-bukrs AND waers = is_vbrk-waerk.
          IF sy-subrc = 0.
            r_text_ctabank = 'BANCO: &1 - CUENTA &2: &3 - CCI: &4'.
            REPLACE '&1' IN r_text_ctabank WITH ls_febank-bankl.
            REPLACE '&2' IN r_text_ctabank WITH ls_febank-waers_t.
            REPLACE '&3' IN r_text_ctabank WITH ls_febank-bankn.
            REPLACE '&4' IN r_text_ctabank WITH ls_febank-bankn2.
          ENDIF.
        ENDIF.

*{I-PBM211118-3000010907
      WHEN '0021061097'. "CMH
        LOOP AT lt_const INTO ls_const WHERE campo = 'CTABANK'.
          ls_fkart-sign = ls_const-signo.
          ls_fkart-option = ls_const-opcion.
          ls_fkart-low = ls_const-valor1.
          ls_fkart-high = ls_const-valor2.
          APPEND ls_fkart TO lr_fkart.
        ENDLOOP.

        IF is_vbrk-fkart IN lr_fkart AND lr_fkart IS NOT INITIAL.
          SELECT * INTO TABLE lt_febank FROM zostb_febank WHERE bukrs = is_vbrk-bukrs.
          LOOP AT lt_febank INTO ls_febank.
            CONCATENATE ls_febank-sedeb '-' ls_febank-waers_t INTO lv_sede_moneda SEPARATED BY space.

            CONCATENATE '{"0":"'  ls_febank-bankl   '",'
                        '"1":"'   lv_sede_moneda    '",'
                        '"2":"'   ls_febank-bankn    '",'
                        '"3":"'   ls_febank-bankn2    '"}'
                        INTO lv_str_ctabank.

            IF r_text_ctabank IS INITIAL.
              r_text_ctabank = lv_str_ctabank.
            ELSE.
              CONCATENATE r_text_ctabank lv_str_ctabank INTO r_text_ctabank SEPARATED BY ','.
            ENDIF.
            CLEAR lv_str_ctabank.
          ENDLOOP.
        ENDIF.
    ENDCASE.
*}I-PBM211118-3000010907

  ENDMETHOD.


  METHOD get_text_export_bep.

    CLEAR r_text_bep.

    CASE gw_license.
      WHEN '0020673876'.  " Beta

        CHECK is_vbrk-zz_check_expor EQ abap_true.

        CASE is_vbrk-land1_vbrk.
          WHEN 'US'.
            r_text_bep = 'I hereby certify that the products on this invoice have not previously been refused entry to any other country.'.
        ENDCASE.
    ENDCASE.

  ENDMETHOD.


  METHOD get_text_lines.

    DATA: lt_text   TYPE TABLE OF lty_text,
          lt_stream TYPE TABLE OF tdline,
          lt_lines  TYPE TABLE OF lty_text,
          ls_stream LIKE LINE OF lt_stream,
          ls_lines  TYPE  lty_text,
          lw_spras  TYPE sylangu.

    FIELD-SYMBOLS <fs_text> LIKE LINE OF lt_text.

    lw_spras = sy-langu.
    IF is_thead-tdspras IS NOT INITIAL.
      lw_spras = is_thead-tdspras.
    ENDIF.

    CALL FUNCTION 'READ_TEXT'
      EXPORTING
        id                      = is_thead-tdid
        language                = lw_spras
        name                    = is_thead-tdname
        object                  = is_thead-tdobject
      TABLES
        lines                   = lt_text
      EXCEPTIONS
        id                      = 1
        language                = 2
        name                    = 3
        not_found               = 4
        object                  = 5
        reference_check         = 6
        wrong_access_to_archive = 7
        OTHERS                  = 8.
    IF sy-subrc EQ 0.
      " Convertir texto con caracteres especiales a texto original
      LOOP AT lt_text ASSIGNING <fs_text>.
        REPLACE ALL OCCURRENCES OF ',,' IN <fs_text>-tdline WITH '~'.  " Separador de Tab
        CLEAR: lt_lines, ls_lines, lt_stream.
        ls_lines = <fs_text>.
        APPEND ls_lines TO lt_lines.
        CALL FUNCTION 'CONVERT_ITF_TO_STREAM_TEXT'
          TABLES
            itf_text    = lt_lines
            text_stream = lt_stream.

        READ TABLE lt_stream INTO ls_stream INDEX 1.
        IF sy-subrc EQ 0.
          <fs_text>-tdline = ls_stream.
        ENDIF.
      ENDLOOP.
    ENDIF.

    et_text[] = lt_text[].

  ENDMETHOD.


  METHOD get_text_observations.

    DATA: lr_spart     TYPE RANGE OF vbrk-spart,                               "I-WMR-171218-3000009765
          ls_thead     TYPE thead,
          ls_constants LIKE LINE OF lt_const,                                  "I-WMR-241018-3000010704
          ls_spart     LIKE LINE OF lr_spart.                                  "I-WMR-171218-3000009765

    CASE gw_license.                                                            "I-WMR-191018-3000009765
      WHEN '0020974592'.  " DANPER                                              "I-WMR-191018-3000009765

        CLEAR: ls_thead.

        SELECT SINGLE spras INTO ls_thead-tdspras
          FROM kna1
          WHERE kunnr EQ is_vbrk-kunag.

        ls_thead-tdname   = is_vbrk-vbeln.
        ls_thead-tdobject = 'VBBK'.
        ls_thead-tdid     = 'Z002'.

*        r_string = get_text( pi_name   = ls_thead-tdname                        "E-WMR-191018-3000009765
        cs_cab2-zz_text_obs = get_text( pi_name   = ls_thead-tdname             "I-WMR-191018-3000009765
                                        pi_id     = ls_thead-tdid
                                        pi_object = ls_thead-tdobject
                                        pi_spras  = ls_thead-tdspras ).

*        IF r_string IS INITIAL.                                                 "E-WMR-191018-3000009765
*          r_string = get_text( pi_name   = ls_thead-tdname                      "E-WMR-191018-3000009765
        IF cs_cab2-zz_text_obs IS INITIAL.                                      "I-WMR-191018-3000009765
          cs_cab2-zz_text_obs = get_text( pi_name   = ls_thead-tdname           "I-WMR-191018-3000009765
                                          pi_id     = ls_thead-tdid
                                          pi_object = ls_thead-tdobject ).
        ENDIF.

*{  BEGIN OF INSERT WMR-191018-3000009765
      WHEN '0021061097'.  " CMH

        " Sector Mineral
        LOOP AT lt_const INTO ls_constants WHERE campo = 'SPART_MINE'.
          CLEAR ls_spart.
          ls_spart-sign   = ls_constants-signo.
          ls_spart-option = ls_constants-opcion.
          ls_spart-low    = ls_constants-valor1.
          ls_spart-high   = ls_constants-valor2.
          APPEND ls_spart TO lr_spart.
        ENDLOOP.

        IF is_vbrk-spart IN lr_spart AND lr_spart[] IS NOT INITIAL.
          " Observación 1
          CLEAR ls_thead.
          ls_thead-tdname   = is_vbrk-vbeln.
          ls_thead-tdobject = 'VBBK'.
          ls_thead-tdid     = 'ZP01'.
          SELECT SINGLE spras INTO ls_thead-tdspras
            FROM kna1
            WHERE kunnr EQ is_vbrk-kunag.
          cs_cab2-zz_text_obs = get_text( pi_name   = ls_thead-tdname
                                          pi_id     = ls_thead-tdid
                                          pi_object = ls_thead-tdobject
                                          pi_spras  = ls_thead-tdspras ).
          IF cs_cab2-zz_text_obs IS INITIAL.
            ls_thead-tdspras = sy-langu.
            cs_cab2-zz_text_obs = get_text( pi_name   = ls_thead-tdname
                                            pi_id     = ls_thead-tdid
                                            pi_object = ls_thead-tdobject
                                            pi_spras  = ls_thead-tdspras ).
          ENDIF.

          " Observación 2
          CLEAR ls_thead.
          ls_thead-tdname   = is_vbrk-vbeln.
          ls_thead-tdobject = 'VBBK'.
          ls_thead-tdid     = 'ZP02'.
          SELECT SINGLE spras INTO ls_thead-tdspras
            FROM kna1
            WHERE kunnr EQ is_vbrk-kunag.
          cs_cab2-zz_text_obs_02 = get_text( pi_name   = ls_thead-tdname
                                             pi_id     = ls_thead-tdid
                                             pi_object = ls_thead-tdobject
                                             pi_spras  = ls_thead-tdspras ).
          IF cs_cab2-zz_text_obs_02 IS INITIAL.
            ls_thead-tdspras = sy-langu.
            cs_cab2-zz_text_obs_02 = get_text( pi_name   = ls_thead-tdname
                                               pi_id     = ls_thead-tdid
                                               pi_object = ls_thead-tdobject
                                               pi_spras  = ls_thead-tdspras ).
          ENDIF.
        ENDIF.

*}  END OF INSERT WMR-191018-3000009765

*{  BEGIN OF INSERT WMR-241018-3000010704
      WHEN '0020886706'.  " PIRAMIDE

        " Dirección Web
        READ TABLE lt_const INTO ls_constants
             WITH KEY campo = 'DWEBTXTOBJ'.
        IF sy-subrc = 0.
          CLEAR ls_thead.
          ls_thead-tdname   = ls_constants-valor1.
          ls_thead-tdobject = 'TEXT'.
          ls_thead-tdid     = 'ST'.
          ls_thead-tdspras = sy-langu.
          cs_cab2-zz_text_obs = get_text( pi_name   = ls_thead-tdname
                                          pi_id     = ls_thead-tdid
                                          pi_object = ls_thead-tdobject
                                          pi_spras  = ls_thead-tdspras ).
        ENDIF.

*}  END OF INSERT WMR-241018-3000010704

    ENDCASE.                                                            "I-WMR-191018-3000009765

  ENDMETHOD.


  METHOD get_text_totexp.

    DATA: lt_descr TYPE TABLE OF lty_const,
          ls_const LIKE LINE OF lt_const.

    CLEAR r_inco3.

    CASE gw_license.
      WHEN '0020311006'   " AIB
        OR '0020863116'.  " AIB CLOUD

        CHECK is_vbrk-zz_check_expor EQ abap_true.

        lt_descr[] = lt_const[].
        DELETE lt_descr WHERE campo NE 'TXTTOTEXP'.
        SORT lt_descr BY secuencia ASCENDING.

        CHECK lt_descr[] IS NOT INITIAL.

        " Buscar en las condiciones del documento la clase de condición definida en la secuencia
        LOOP AT lt_descr INTO ls_const.
          LOOP AT lt_konvv INTO lwa_konv WHERE knumv EQ is_vbrk-knumv
                                           AND kschl EQ ls_const-valor1.
            EXIT.
          ENDLOOP.
          IF sy-subrc EQ 0.
            r_inco3 = ls_const-valor2.
            EXIT.
          ENDIF.
        ENDLOOP.

    ENDCASE.

  ENDMETHOD.


  METHOD get_tipisc_item.

    CLEAR: pe_tipisc, pe_sumaiscsv.

* Tipo
    READ TABLE lt_catahomo08 INTO lwa_catahomo08 WITH TABLE KEY taxm1 = pi_taxm1. "Tipo ISC
    IF sy-subrc = 0.
      pe_tipisc = lwa_catahomo08-zz_codigo_sunat.
    ENDIF.

* Arma Rango
    REFRESH ltr_kschl.
    LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '1' AND zz_opcion02 = '1'. "Total para Sistema de ISC por item
      lwa_kschl-low = lwa_constakonv-kschl.
      lwa_kschl-sign = 'I'.
      lwa_kschl-option = 'EQ'.
      APPEND lwa_kschl TO ltr_kschl.
    ENDLOOP.

* Calcular valor
    IF ltr_kschl[] IS NOT INITIAL.
      LOOP AT lt_konv INTO lwa_konv WHERE knumv EQ pi_knumv
                                      AND kposn EQ pi_posnr
                                      AND kschl IN ltr_kschl
                                      AND kstat EQ space.                             "I-WMR-200417-3000007094
        ADD lwa_konv-kwert TO pe_sumaiscsv.
      ENDLOOP.
    ENDIF.

  ENDMETHOD.                    "get_tipisc_item


  METHOD get_tipo_envio_export.

    DATA: ls_vbrp TYPE lty_vbrp.

    CLEAR r_exp_tpenv.

    CASE gw_license.
      WHEN '0020974592'.  " DANPER

        IF is_vbrk-zz_check_expor EQ abap_true.

          LOOP AT it_vbrp INTO ls_vbrp WHERE vbeln EQ is_vbrk-vbeln
                                         AND mvgr5 NE space.
            EXIT.
          ENDLOOP.
          IF sy-subrc EQ 0.
            SELECT SINGLE bezei INTO r_exp_tpenv
              FROM tvm5t
              WHERE spras EQ sy-langu
                AND mvgr5 EQ ls_vbrp-mvgr5.

            IF r_exp_tpenv IS NOT INITIAL.
              CONCATENATE ls_vbrp-mvgr5 r_exp_tpenv INTO r_exp_tpenv SEPARATED BY space.
            ENDIF.
          ENDIF.
        ENDIF.

    ENDCASE.

  ENDMETHOD.


  METHOD get_tip_op.

*    DATA: lr_fkart TYPE RANGE OF vbrk-fkart.                                    "E-WMR-190219-3000011108
    DATA: lt_kna1_op TYPE STANDARD TABLE OF ty_kna1.

    DATA: ls_constfkart LIKE LINE OF lt_constfkart,
          ls_kna1_op    TYPE         ty_kna1,
          ls_cabsal     TYPE LINE OF ltt_cabsal,                                  "I-WMR-050216
          ls_cabsal2    TYPE LINE OF ltt_cabsal2.                                 "I-WMR-050216

*{  BEGIN OF INSERT WMR-050216
    " En caso de NC y ND, se busca el tipo de operación del documento referencia
    " Si es de Anticipos (04) se toma el mismo
    CASE pi_vbrk-tfact.
      WHEN gc_tipdoc_nc
        OR gc_tipdoc_nd.
        SELECT SINGLE *
          INTO ls_cabsal
          FROM zostb_docexposca
          WHERE bukrs         EQ pi_vbrk-bukrs
            AND zz_numeracion EQ pi_vbrk-tipdocmodif
            AND zz_tipodoc    EQ pi_vbrk-tipdocmodifho.

        IF sy-subrc EQ 0.
          SELECT SINGLE *
            INTO ls_cabsal2
            FROM zostb_docexposc2
            WHERE bukrs         EQ ls_cabsal-bukrs
              AND zz_nrodocsap  EQ ls_cabsal-zz_nrodocsap
              AND zz_numeracion EQ ls_cabsal-zz_numeracion.
          IF sy-subrc EQ 0 AND ls_cabsal2-zz_tip_ope EQ gc_tipop_04.  " Anticipos
            pe_tip_ope = ls_cabsal2-zz_tip_ope.
            EXIT.
          ENDIF.
        ENDIF.
    ENDCASE.
*}  END OF INSERT WMR-050216

*{  BEGIN OF DELETE WMR-190219-3000011108
**   Cargamos Parametros para Tipo de Operacion (Anticipos, Exportacion, Venta Interna)
*    LOOP AT lt_constfkart INTO ls_constfkart WHERE zz_opcion01 = '6' AND zz_opcion02 = '1'.
*      lwa_fkart-low    = ls_constfkart-fkart.
*      lwa_fkart-sign   = 'I'.
*      lwa_fkart-option = 'EQ'.
*      APPEND lwa_fkart TO lr_fkart.
*    ENDLOOP.
*}  END OF DELETE WMR-190219-3000011108

*{  BEGIN OF DELETE WMR-300615
    ""*   Buscamos en KNA1
    ""    SELECT SINGLE kunnr stcdt INTO (ls_kna1_op-kunnr, ls_kna1_op-stcdt)
    ""      FROM kna1
    ""      WHERE  kunnr = pi_vbrk-kunrg.
*}  END OF DELETE WMR-300615

*    IF ( lr_fkart[] IS NOT INITIAL ) AND ( pi_vbrk-fkart IN lr_fkart ).         "E-WMR-190219-3000011108
    IF pi_vbrk-zz_check_anticp = abap_true.                                     "I-WMR-190219-3000011108
      pe_tip_ope = gc_tipop_04.
*{  BEGIN OF REPLACE WMR-300615
      ""    ELSEIF ls_kna1_op-stcdt = gc_char0." '0'.
    ELSEIF pi_vbrk-zz_check_expor EQ abap_true.
*}  END OF REPLACE WMR-300615
      pe_tip_ope = gc_tipop_02.
    ELSE.
*{  BEGIN OF REPLACE WMR-281015
      ""    pe_tip_ope = gc_tipop_01.
      IF pi_vbrk-zz_check_vtaiti EQ abap_true.
        pe_tip_ope = gc_tipop_05.
      ELSE.
        pe_tip_ope = gc_tipop_01.
      ENDIF.
*}  END OF REPLACE WMR-281015
    ENDIF.

  ENDMETHOD.


  METHOD get_tip_op2_1.

*    DATA: lr_fkart TYPE RANGE OF vbrk-fkart.                                    "E-WMR-190219-3000011108
    DATA: lt_kna1_op   TYPE STANDARD TABLE OF ty_kna1,
          lt_with_item TYPE TABLE OF lty_with_item,                              "I-WMR-280819-3000010823
          lt_mara      TYPE TABLE OF mara.                                       "I-WMR-280819-3000010823

    DATA: ls_constfkart LIKE LINE OF lt_constfkart,
          ls_kna1_op    TYPE         ty_kna1,
          ls_cabsal     TYPE LINE OF ltt_cabsal,                                  "I-WMR-050216
          ls_cabsal2    TYPE LINE OF ltt_cabsal2,                                 "I-WMR-050216
          ls_vbrp       LIKE LINE OF it_vbrp,                                     "I-PBM040319-3000011101
          ls_with_item  LIKE LINE OF lt_with_item,                                "I-WMR-280819-3000010823
          ls_mara       LIKE LINE OF lt_mara,                                     "I-WMR-280819-3000010823
          ls_const      LIKE LINE OF lt_const,                                    "I-WMR-280819-3000010823
          ls_homo51_rq  TYPE lty_catahomo51.                                      "I-WMR-280819-3000010823

    DATA: lr_pstyv TYPE RANGE OF zostb_constpstyv-pstyv,                          "I-PBM040319-3000011101
          ls_pstyv LIKE LINE OF lr_pstyv,                                         "I-PBM040319-3000011101
          lr_witht TYPE RANGE OF with_item-witht,                                 "I-WMR-280819-3000010823
          ls_witht LIKE LINE OF lr_witht VALUE 'IEQ',                             "I-WMR-280819-3000010823
          lr_matnr TYPE RANGE OF mara-matnr,                                      "I-WMR-280819-3000010823
          ls_matnr LIKE LINE OF lr_matnr VALUE 'IEQ'.                             "I-WMR-280819-3000010823

*{I-PBM040319-3000011101
    CLEAR lr_pstyv.
    LOOP AT lt_constpstyv INTO lwa_constpstyv WHERE zz_opcion01 = 'S'.
      ls_pstyv-sign    = 'I'.
      ls_pstyv-option  = 'EQ'.
      ls_pstyv-low     = lwa_constpstyv-pstyv.
      APPEND ls_pstyv TO lr_pstyv.
    ENDLOOP.
*}I-PBM040319-3000011101

*{  BEGIN OF INSERT WMR-050216
    " En caso de NC y ND, se busca el tipo de operación del documento referencia
    " Si es de Anticipos (04) se toma el mismo
    CASE pi_vbrk-tfact.
      WHEN gc_tipdoc_nc
        OR gc_tipdoc_nd.
        SELECT SINGLE *
          INTO ls_cabsal
          FROM zostb_docexposca
          WHERE bukrs         EQ pi_vbrk-bukrs
            AND zz_numeracion EQ pi_vbrk-tipdocmodif
            AND zz_tipodoc    EQ pi_vbrk-tipdocmodifho.

        IF sy-subrc EQ 0.
          SELECT SINGLE *
            INTO ls_cabsal2
            FROM zostb_docexposc2
            WHERE bukrs         EQ ls_cabsal-bukrs
              AND zz_nrodocsap  EQ ls_cabsal-zz_nrodocsap
              AND zz_numeracion EQ ls_cabsal-zz_numeracion.
*          IF sy-subrc EQ 0 AND ls_cabsal2-zz_tip_ope EQ gc_tipop_04.  " Anticipos  "E-NTP281118-3000009651
          IF sy-subrc EQ 0 AND ls_cabsal2-zz_tip_ope EQ gc_tipop_0101.  " Anticipos "I-NTP281118-3000009651
            pe_tip_ope = ls_cabsal2-zz_tip_ope.
            EXIT.
          ENDIF.
        ENDIF.
    ENDCASE.
*}  END OF INSERT WMR-050216

*{  BEGIN OF DELETE WMR-190219-3000011108
**   Cargamos Parametros para Tipo de Operacion (Anticipos, Exportacion, Venta Interna)
*    LOOP AT lt_constfkart INTO ls_constfkart WHERE zz_opcion01 = '6' AND zz_opcion02 = '1'.
*      lwa_fkart-low    = ls_constfkart-fkart.
*      lwa_fkart-sign   = 'I'.
*      lwa_fkart-option = 'EQ'.
*      APPEND lwa_fkart TO lr_fkart.
*    ENDLOOP.
*}  END OF DELETE WMR-190219-3000011108

*{  BEGIN OF DELETE WMR-300615
    ""*   Buscamos en KNA1
    ""    SELECT SINGLE kunnr stcdt INTO (ls_kna1_op-kunnr, ls_kna1_op-stcdt)
    ""      FROM kna1
    ""      WHERE  kunnr = pi_vbrk-kunrg.
*}  END OF DELETE WMR-300615

*{E-3000011108-NTP230219
*    IF ( lr_fkart[] IS NOT INITIAL ) AND ( pi_vbrk-fkart IN lr_fkart ).
**      pe_tip_ope = gc_tipop_04.
**{  BEGIN OF REPLACE WMR-300615
*      ""    ELSEIF ls_kna1_op-stcdt = gc_char0." '0'.
*    ELSEIF pi_vbrk-zz_check_expor EQ abap_true.
*}  END OF REPLACE WMR-300615
*      pe_tip_ope = gc_tipop_02.
*    ELSE.
**{  BEGIN OF REPLACE WMR-281015
*      ""    pe_tip_ope = gc_tipop_01.
*      IF pi_vbrk-zz_check_vtaiti EQ abap_true.
**        pe_tip_ope = gc_tipop_05.
*      ELSE.
**        pe_tip_ope = gc_tipop_01.
*      ENDIF.
**}  END OF REPLACE WMR-281015
*    ENDIF.
*}E-3000011108-NTP230219
*{I-3000011108-NTP230219: cata51
    IF pi_vbrk-zz_check_expor EQ abap_true.
      IF pi_vbrk-zz_check_anticp = abap_true.
        pe_tip_ope = gc_tipop_0401.
      ELSE.
        IF lr_pstyv IS NOT INITIAL.                                                             "I-3000010715-NTP120319
          LOOP AT it_vbrp INTO ls_vbrp WHERE pstyv IN lr_pstyv.                                 "I-PBM040319-3000011101
            EXIT.                                                                               "I-PBM040319-3000011101
          ENDLOOP.                                                                              "I-PBM040319-3000011101
        ENDIF.                                                                                  "I-3000010715-NTP120319
        IF sy-subrc = 0.                                                                        "I-PBM040319-3000011101
          pe_tip_ope = gc_tipop_0201.                                                           "I-PBM040319-3000011101
        ELSE.                                                                                   "I-PBM040319-3000011101
          pe_tip_ope = gc_tipop_0200.
        ENDIF.                                                                                  "I-PBM040319-3000011101
      ENDIF.
    ELSE.
      IF pi_vbrk-zz_check_anticp EQ abap_true.
        pe_tip_ope = gc_tipop_0101.
      ELSEIF pi_vbrk-zz_check_vtaiti EQ abap_true.
        pe_tip_ope = gc_tipop_0101.
      ELSE.
        pe_tip_ope = gc_tipop_0101.
      ENDIF.
    ENDIF.
*}I-3000011108-NTP230219

*{  BEGIN OF INSERT WMR-280819-3000010823
    CASE gs_process-license.
      WHEN '0020262397'  " ARTESCO
        OR '0021131379'  " RESEMIN
        OR '0021061097'  " CMH
        OR '0020311006'  " AIB
        OR '0020863116'. " AIB CLOUD

        CLEAR pe_tip_ope.

        IF pi_vbrk-zz_check_expor = abap_true.
          "  EXPORTACIÓN
          ls_homo51_rq-land1 = space.
          ls_homo51_rq-witht = space.
          ls_homo51_rq-wt_withcd = space.

        ELSE.
          "  NACIONAL
          " 1.- País del Destinatario de factura
          READ TABLE lt_vbpa INTO lwa_vbpa WITH KEY vbeln = pi_vbrk-vbeln
                                                    parvw = gc_parvw_re.
          IF sy-subrc = 0.
            ls_homo51_rq-land1 = lwa_vbpa-land1.
          ENDIF.

          " 2.- Tipo e Indicador de Detracción/ Percepción/ Retención
          LOOP AT lt_const INTO ls_const.
            CASE ls_const-campo.
              WHEN 'WITHT_D'
                OR 'WITHT_P'
                OR 'WITHT_R'.                                                             "I-WMR-18032021-3000016455
                ls_witht-low = ls_const-valor1.  APPEND ls_witht TO lr_witht.
            ENDCASE.
          ENDLOOP.
          IF lr_witht[] IS NOT INITIAL.
            SELECT w~bukrs w~belnr w~gjahr w~buzei w~witht w~wt_withcd w~wt_qbshh
              INTO CORRESPONDING FIELDS OF TABLE lt_with_item
              FROM bkpf AS b INNER JOIN with_item AS w
              ON ( b~bukrs = w~bukrs AND b~belnr = w~belnr AND b~gjahr = w~gjahr )
              WHERE b~awtyp = 'VBRK'
                AND b~awkey = pi_vbrk-vbeln
                AND w~witht IN lr_witht
                AND w~hkont <> space.  " Determina Cuenta cuando supera el monto mínimo  "I-WMR-280819-3000010823

*{I-080720-NTP-3000014674
          get_detrac_preview( EXPORTING is_options   = is_options
                                        is_vbrk      = pi_vbrk
                              CHANGING ct_with_item = lt_with_item ).
*}I-080720-NTP-3000014674
          ENDIF.
          DELETE lt_with_item WHERE wt_withcd IS INITIAL.
          READ TABLE lt_with_item INTO ls_with_item INDEX 1.
          IF sy-subrc = 0.
            READ TABLE lt_catahomo51 INTO lwa_catahomo51
                 WITH KEY land1 = ls_homo51_rq-land1
                          witht = ls_with_item-witht
                          wt_withcd = ls_with_item-wt_withcd.
            IF sy-subrc = 0.
              ls_homo51_rq-witht = ls_with_item-witht.
              ls_homo51_rq-wt_withcd = ls_with_item-wt_withcd.
            ENDIF.
          ENDIF.
        ENDIF.

*{I-050220-NTP-3000013672
        READ TABLE it_vbrp INTO ls_vbrp INDEX 1.

        " 1.- Tipo de posición y Tipo de motivo
        READ TABLE lt_catahomo51 INTO lwa_catahomo51
             WITH KEY land1 = ls_homo51_rq-land1
                      witht = ls_homo51_rq-witht
                      wt_withcd = ls_homo51_rq-wt_withcd
                      pstyv = ls_vbrp-pstyv
                      augru = ls_vbrp-augru_auft
                      mtart = space.
        IF sy-subrc = 0.
          ls_homo51_rq-pstyv = ls_vbrp-pstyv.
          ls_homo51_rq-augru = ls_vbrp-augru_auft.
        ELSE.

          " 2.- Tipo de posición y Tipo de motivo = space
          READ TABLE lt_catahomo51 INTO lwa_catahomo51
               WITH KEY land1 = ls_homo51_rq-land1
                        witht = ls_homo51_rq-witht
                        wt_withcd = ls_homo51_rq-wt_withcd
                        pstyv = ls_vbrp-pstyv
                        augru = space
                        mtart = space.
          IF sy-subrc = 0.
            ls_homo51_rq-pstyv = ls_vbrp-pstyv.
          ELSE.

            " 3.- Tipo de material
            LOOP AT it_vbrp INTO ls_vbrp WHERE vbeln = pi_vbrk-vbeln.
              ls_matnr-low = ls_vbrp-matnr.  APPEND ls_matnr TO lr_matnr.
            ENDLOOP.
            SELECT matnr mtart INTO CORRESPONDING FIELDS OF TABLE lt_mara
              FROM mara
              WHERE matnr IN lr_matnr.
            READ TABLE lt_mara INTO ls_mara INDEX 1.
            IF sy-subrc = 0.
              READ TABLE lt_catahomo51 INTO lwa_catahomo51
                   WITH KEY land1 = ls_homo51_rq-land1
                            witht = ls_homo51_rq-witht
                            wt_withcd = ls_homo51_rq-wt_withcd
                            pstyv = space
                            augru = space
                            mtart = ls_mara-mtart.
              IF sy-subrc = 0.
                ls_homo51_rq-mtart = ls_mara-mtart.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
*}I-300120-NTP-3000013748

        " Consulta a la tabla de homologación 51
        READ TABLE lt_catahomo51 INTO lwa_catahomo51
             WITH KEY land1 = ls_homo51_rq-land1
                      witht = ls_homo51_rq-witht
                      wt_withcd = ls_homo51_rq-wt_withcd
                      pstyv = ls_homo51_rq-pstyv
                      augru = ls_homo51_rq-augru
                      mtart = ls_homo51_rq-mtart.
        IF sy-subrc = 0.
          pe_tip_ope = lwa_catahomo51-codsun.
        ENDIF.
    ENDCASE.
*}  END OF INSERT WMR-280819-3000010823

  ENDMETHOD.


  METHOD get_totals_optional.

    DATA: lr_excl  TYPE RANGE OF konv-kschl,                                  "I-WMR-020217-3000006528
          ls_const LIKE LINE OF lt_const,                                     "I-WMR-020217-3000006528
          lw_kwert TYPE konv-kwert.
    FIELD-SYMBOLS: <fs_konv> LIKE LINE OF lt_konv.

    CASE gw_license.
      WHEN '0020316164'   " Modasa
        OR '0020311006'   " AIB
        OR '0020863116'.  " AIB CLOUD
        "  Flete
        CLEAR: ltr_kschl, lw_kwert.
        LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '4' AND zz_opcion02 = '' AND zz_opcion03 = 'F'.
          lwa_kschl-low    = lwa_constakonv-kschl.
          lwa_kschl-sign   = 'I'.
          lwa_kschl-option = 'EQ'.
          APPEND lwa_kschl TO ltr_kschl.
        ENDLOOP.

        CASE gw_license.                                                      "I-WMR-020217-3000006528
          WHEN '0020316164'.  " Modasa                                        "I-WMR-020217-3000006528
            " Para Ventas Nacionales no tomar Flete                           "I-WMR-020217-3000006528
            IF cs_vbrk-zz_tip_ope EQ gc_tipop_01                              "I-WMR-020217-3000006528
            OR cs_vbrk-zz_tip_ope EQ gc_tipop_0101. " En UBL 2.1              "I-WMR-040419-3000011108
              " Clases de condición a excluir de Fletes                       "I-WMR-020217-3000006528
              LOOP AT lt_const INTO ls_const.                                 "I-WMR-020217-3000006528
                CASE ls_const-campo.                                          "I-WMR-020217-3000006528
                  WHEN 'VTANACEC'.                                            "I-WMR-020217-3000006528
                    CLEAR lwa_kschl.                                          "I-WMR-020217-3000006528
                    lwa_kschl-sign   = ls_const-signo.                        "I-WMR-020217-3000006528
                    lwa_kschl-option = ls_const-opcion.                       "I-WMR-020217-3000006528
                    lwa_kschl-low    = ls_const-valor1.                       "I-WMR-020217-3000006528
                    lwa_kschl-high   = ls_const-valor2.                       "I-WMR-020217-3000006528
                    APPEND lwa_kschl TO lr_excl.                              "I-WMR-020217-3000006528
                ENDCASE.                                                      "I-WMR-020217-3000006528
              ENDLOOP.                                                        "I-WMR-020217-3000006528
              IF lr_excl[] IS NOT INITIAL.                                    "I-WMR-020217-3000006528
                DELETE ltr_kschl WHERE low IN lr_excl.                        "I-WMR-020217-3000006528
              ENDIF.                                                          "I-WMR-020217-3000006528
            ENDIF.                                                            "I-WMR-020217-3000006528
        ENDCASE.                                                              "I-WMR-020217-3000006528

        IF ltr_kschl[] IS NOT INITIAL.
          LOOP AT lt_konv ASSIGNING <fs_konv> WHERE knumv EQ cs_vbrk-knumv
                                                AND kschl IN ltr_kschl.
            ADD <fs_konv>-kwert TO lw_kwert.
          ENDLOOP.
          cs_vbrk-zz_tot_flete = lw_kwert.
          CONDENSE cs_vbrk-zz_tot_flete NO-GAPS.
        ENDIF.

        "  Seguro
        CLEAR: ltr_kschl, lw_kwert.
        LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '4' AND zz_opcion02 = '' AND zz_opcion03 = 'S'.
          lwa_kschl-low    = lwa_constakonv-kschl.
          lwa_kschl-sign   = 'I'.
          lwa_kschl-option = 'EQ'.
          APPEND lwa_kschl TO ltr_kschl.
        ENDLOOP.

        IF ltr_kschl[] IS NOT INITIAL.
          LOOP AT lt_konv ASSIGNING <fs_konv> WHERE knumv EQ cs_vbrk-knumv
                                                AND kschl IN ltr_kschl.
            ADD <fs_konv>-kwert TO lw_kwert.
          ENDLOOP.
          cs_vbrk-zz_tot_seguro = lw_kwert.
          CONDENSE cs_vbrk-zz_tot_seguro NO-GAPS.
        ENDIF.

        "BEGIN OF OFV 23.07.2015
        "  Otros
        CLEAR: ltr_kschl, lw_kwert.
        LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '4' AND zz_opcion02 = '' AND zz_opcion03 = 'O'.
          lwa_kschl-low    = lwa_constakonv-kschl.
          lwa_kschl-sign   = 'I'.
          lwa_kschl-option = 'EQ'.
          APPEND lwa_kschl TO ltr_kschl.
        ENDLOOP.

        IF ltr_kschl[] IS NOT INITIAL.
          LOOP AT lt_konv ASSIGNING <fs_konv> WHERE knumv EQ cs_vbrk-knumv
                                                AND kschl IN ltr_kschl.
            ADD <fs_konv>-kwert TO lw_kwert.
          ENDLOOP.
          cs_vbrk-zz_tot_otros = lw_kwert.
          CONDENSE cs_vbrk-zz_tot_otros NO-GAPS.
        ENDIF.
        "END OF OFV 23.07.2015

    ENDCASE.

  ENDMETHOD.


  METHOD get_valant_item.

    CLEAR ltr_kschl.
    LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '9' AND zz_opcion02 = space.
      lwa_kschl-low     = lwa_constakonv-kschl.
      lwa_kschl-sign    = 'I'.
      lwa_kschl-option  = 'EQ'.
      APPEND lwa_kschl TO ltr_kschl.
    ENDLOOP.

    CHECK ltr_kschl[] IS NOT INITIAL.

    LOOP AT lt_konvv INTO lwa_konv WHERE knumv EQ i_knumv
                                     AND kposn EQ i_posnr
                                     AND kschl IN ltr_kschl
                                     AND kstat EQ space.                              "I-WMR-200417-3000007094
      ADD lwa_konv-kwert TO r_valant.
    ENDLOOP.
    r_valant = abs( r_valant ).

  ENDMETHOD.


  METHOD get_valigvanticip_item.

    " Clase de Condición de IGV de Aplicacion de Anticipos
    CLEAR ltr_kschl.
    LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '9' AND zz_opcion02 = '9'.
      CLEAR lwa_kschl.
      lwa_kschl-low     = lwa_constakonv-kschl.
      lwa_kschl-sign    = 'I'.
      lwa_kschl-option  = 'EQ'.
      APPEND lwa_kschl TO ltr_kschl.
    ENDLOOP.

    IF ltr_kschl[] IS NOT INITIAL.
      " Sumar de Condición de IGV de Aplicacion de Anticipos
      LOOP AT lt_konvv INTO lwa_konv WHERE knumv EQ i_knumv
                                       AND kposn EQ i_posnr
                                       AND kschl IN ltr_kschl.
        r_igvant = r_igvant + abs( lwa_konv-kwert ).
      ENDLOOP.
    ENDIF.

  ENDMETHOD.


  METHOD get_valigv_item.

    DATA: lw_igvporcent_cab TYPE lty_vbrk-igvporcent.                                 "I-WMR-19122020-3000014557

*{  BEGIN OF REPLACE WMR-170615
    ""    DATA: ls_constfkart LIKE LINE OF lt_constfkart.

    ""    DATA: lr_fkart TYPE RANGE OF vbrk-fkart .

    ""    CLEAR: pe_igvporcent, pe_mwsbp.

    " Clases de Condiciones para IGV
*{I-240120-NTP-3000012593
    IF is_vbrp-t_cardes_glob IS NOT INITIAL.
      REFRESH ltr_kschl.
      LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '8' AND zz_opcion02 = '1'.
        lwa_kschl-low    = lwa_constakonv-kschl.
        lwa_kschl-sign   = 'I'.
        lwa_kschl-option = 'EQ'.
        APPEND lwa_kschl TO ltr_kschl.
      ENDLOOP.
*}I-240120-NTP-3000012593
    ELSE.
      REFRESH ltr_kschl.
      LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '8' AND zz_opcion02 = ''.
        lwa_kschl-low    = lwa_constakonv-kschl.
        lwa_kschl-sign   = 'I'.
        lwa_kschl-option = 'EQ'.
        APPEND lwa_kschl TO ltr_kschl.
      ENDLOOP.
    ENDIF.

    ""*{  BEGIN OF DELETE WMR-050615
    ""    ""    " Clases de Factura para Transferencias Gratuitas
    ""    ""    LOOP AT lt_constfkart INTO ls_constfkart WHERE zz_opcion01 = '2' AND zz_opcion02 = ' '.
    ""    ""      lwa_fkart-low    = ls_constfkart-fkart.
    ""    ""      lwa_fkart-sign   = 'I'.
    ""    ""      lwa_fkart-option = 'EQ'.
    ""    ""      APPEND lwa_fkart TO lr_fkart.
    ""    ""    ENDLOOP.
    ""*}  END OF DELETE WMR-050615

    ""* Realizar calculo
    ""    IF ltr_kschl[] IS NOT INITIAL.
    ""      LOOP AT lt_konvv INTO lwa_konv WHERE knumv EQ pi_knumv
    ""                                       AND kposn EQ pi_posnr
    ""                                       AND kschl IN ltr_kschl.
    ""*{  BEGIN OF REPLACE WMR-050615
    ""        ""        IF pi_vbrk-fkart IN lr_fkart AND lr_fkart[] IS NOT INITIAL .
    ""        IF pi_vbrk-zz_check_tg EQ abap_true.
    ""*}  END OF REPLACE WMR-050615
    ""          pe_mwsbp      = 0.
    ""          pe_igvporcent = 0.
    ""        ELSE.
    ""          pe_mwsbp      = lwa_konv-kwert.
    ""*          pe_igvporcent = lwa_konv-kbetr / 10.     "CASO AUSTRAL
    ""        ENDIF.
    ""        EXIT.
    ""      ENDLOOP.
    ""    ENDIF.
    ""    pe_igvporcent = gw_igvporcent.                  "CASO ACFARMA %IGV Tab. Contantes

    " Salvar temporalmente IGV cabecera                                               "I-WMR-19122020-3000014557
    lw_igvporcent_cab = pi_vbrk-igvporcent.                                           "I-WMR-19122020-3000014557

*{I-240120-NTP-3000012593
    IF is_vbrp-t_cardes_glob IS NOT INITIAL AND gs_process-license EQ '0020262397'.  " Artesco "I-030821-NTP-3000017358
      CLEAR pe_mwsbp.
      LOOP AT lt_konv INTO lwa_konv WHERE knumv EQ pi_knumv
                                      AND kposn EQ pi_posnr
                                      AND kschl IN ltr_kschl
*                                      AND kstat EQ space
                                      AND kstat EQ abap_true.
        IF gs_process-s4core = abap_off.
          pe_igvporcent = lwa_konv-kbetr / 10.
        ELSE.
          pe_igvporcent = lwa_konv-kbetr.
        ENDIF.
        ADD lwa_konv-kwert TO pe_mwsbp.
      ENDLOOP.
*}I-240120-NTP-3000012593
    ELSEIF pi_vbrk-zz_check_tg EQ abap_true AND
*{I-090120-NTP-3000013600: Ahora se envia IGV para todas las empresas
        ( gs_process-license EQ '0020262397'  " Artesco
       OR gs_process-license EQ '0021061097'  " CMH                                   "I-PBM-070720-3000014791
       OR ( gs_process-license EQ '0020299975' AND is_vbrp-afect_igv NE gc_chara ) " ACFA "I-WMR-22022021-3000015973
       OR gs_process-license EQ '0021131379'  " RESEMIN                               "I-WMR-24032021-3000016091
*       OR gs_process-license EQ '0020311006'  " AIB                                   "I-WMR-25032021-3000016017 "-NTP030423-3000021571
*       OR gs_process-license EQ '0020863116'  " AIB CLOUD                                                        "-NTP030423-3000021571
       OR gs_process-license EQ '0020886783'  " PEDREGAL                              "I-WMR-26032021-3000016001
       OR gs_process-license EQ '0020744072')." Medrock                               "I-PBM-220720-3000014913
*}I-090120-NTP-3000013600
      CASE gs_process-license.                                                        "I-WMR-290719-3000010823
        WHEN '0020262397' " ARTESCO                                                   "I-WMR-290719-3000010823
          OR '0021061097' " CMH                                                       "I-PBM-070720-3000014791
          OR '0020744072' " Medrock                                                   "I-PBM-220720-3000014913
*          OR '0020311006'  " AIB                                                      "I-WMR-25032021-3000016017 "-NTP030423-3000021571
*          OR '0020863116'  " AIB CLOUD                                                                           "-NTP030423-3000021571
          OR '0020886783'.  " PEDREGAL                                                "I-WMR-26032021-3000016001
          LOOP AT lt_konv INTO lwa_konv WHERE knumv EQ pi_knumv                       "I-WMR-290719-3000010823
                                          AND kposn EQ pi_posnr                       "I-WMR-290719-3000010823
                                          AND kschl IN ltr_kschl                      "I-WMR-290719-3000010823
**                                          AND kstat EQ space                          "I-WMR-290719-3000010823
                                          AND kstat EQ abap_true.                     "I-WMR-121119-3000010823
            IF gs_process-s4core = abap_off.                                          "I-WMR-290719-3000010823
              pe_igvporcent = lwa_konv-kbetr / 10.                                    "I-WMR-290719-3000010823
            ELSE.                                                                     "I-WMR-290719-3000010823
              pe_igvporcent = lwa_konv-kbetr.                                         "I-WMR-290719-3000010823
            ENDIF.                                                                    "I-WMR-290719-3000010823
****            pe_baseigv = pe_baseigv + abs( lwa_konv-kawrt ).                          "I-WMR-290720-3000014885
            EXIT.                                                                     "I-WMR-290719-3000010823
          ENDLOOP.                                                                    "I-WMR-290719-3000010823
*****{  BEGIN OF INSERT WMR-290720-3000014885
****        WHEN '0020299975'.  " ACFARMA
****          " Tomar %IGV, Importe IGV y Base del IGV de condición estadística
****          IF pe_mwsbp = 0.
****            LOOP AT lt_konv INTO lwa_konv WHERE knumv EQ pi_knumv
****                                            AND kposn EQ pi_posnr
****                                            AND kschl IN ltr_kschl
****                                            AND kstat EQ abap_true.
****              IF gs_process-s4core = abap_off.
****                pe_igvporcent = lwa_konv-kbetr / 10.
****              ELSE.
****                pe_igvporcent = lwa_konv-kbetr.
****              ENDIF.
****              pe_mwsbp   = pe_mwsbp   + abs( lwa_konv-kwert ).
****              pe_baseigv = pe_baseigv + abs( lwa_konv-kawrt ).
****            ENDLOOP.
****          ENDIF.
*****}  END OF INSERT WMR-290720-3000014885
        WHEN OTHERS.                                                                  "I-WMR-290719-3000010823
          pe_mwsbp      = 0.
          pe_igvporcent = 0.
      ENDCASE.                                                                        "I-WMR-290719-3000010823
    ELSE.
      ""      pe_igvporcent = gw_igvporcent.
      LOOP AT lt_konv INTO lwa_konv WHERE knumv EQ pi_knumv
                                      AND kposn EQ pi_posnr
                                      AND kschl IN ltr_kschl
                                      AND kstat EQ space.                             "I-WMR-200417-3000007094
        IF gs_process-s4core = abap_off.                                              "I-WMR-261118-3000009765
          pe_igvporcent = lwa_konv-kbetr / 10.
        ELSE.                                                                         "I-WMR-261118-3000009765
          pe_igvporcent = lwa_konv-kbetr.                                             "I-WMR-261118-3000009765
        ENDIF.                                                                        "I-WMR-261118-3000009765
        EXIT.
      ENDLOOP.
      CASE is_vbrp-afect_igv.                                                         "I-WMR-270619-3000012056
        WHEN gc_chare   " Exonerado                                                   "I-WMR-270619-3000012056
          OR gc_chari.  " Inafecto                                                    "I-WMR-270619-3000012056

*{I-3000012056-NTP-100719
          "Solo si no tiene alguna linea afecta
          LOOP AT it_vbrp TRANSPORTING NO FIELDS WHERE afect_igv = gc_afecto_igv.
            EXIT.
          ENDLOOP.
          IF sy-subrc <> 0.
*}I-3000012056-NTP-100719
            pe_igvporcent = 0.  " % IGV cero                                          "I-WMR-270619-3000012056
          ELSE.                                                                       "I-WMR-19122020-3000014557
            " Si existe una línea afecta a IGV y si el % ha sido determinado en cero  "I-WMR-19122020-3000014557
            " sobreescrbir el valor de la cabecera con el valor antiguo               "I-WMR-19122020-3000014557
            IF pe_igvporcent = 0 AND lw_igvporcent_cab <> 0.                          "I-WMR-19122020-3000014557
              pe_igvporcent = lw_igvporcent_cab.                                      "I-WMR-19122020-3000014557
            ENDIF.                                                                    "I-WMR-19122020-3000014557
          ENDIF.
      ENDCASE.                                                                        "I-WMR-270619-3000012056
*{I-090920-NTP-3000014481
      pe_mwsbp_cab = pe_mwsbp.

      READ TABLE lt_cata05 INTO ls_cata05 WITH KEY zz_codigo_sunat = is_vbrp-tributo.
      IF ls_cata05-zz_tributo_det IS INITIAL.
        CLEAR pe_mwsbp.
      ENDIF.
      IF ls_cata05-zz_tributo_cab IS INITIAL.
        CLEAR pe_mwsbp_cab.
      ENDIF.
*}I-090920-NTP-3000014481
    ENDIF.
*}  END OF REPLACE WMR-170615

  ENDMETHOD.                    "get_valigv_item


  METHOD get_valref_item.

*{  BEGIN OF REPLACE WMR-300615
    ""    DATA: lv_kbetr TYPE p DECIMALS 6,
    ""          lv_kwert TYPE konv-kwert.

    ""    CLEAR: pe_valrefunit, pe_totvalveno.

    ""* Armar rangos
    ""    REFRESH ltr_fkart.
    ""    LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '2'.
    ""      lwa_kschl-low    = lwa_constfkart-fkart.
    ""      lwa_kschl-sign   = 'I'.
    ""      lwa_kschl-option = 'EQ'.
    ""      APPEND lwa_kschl TO ltr_fkart.
    ""    ENDLOOP.
    ""    REFRESH ltr_pstyv.
    ""    LOOP AT lt_constpstyv INTO lwa_constpstyv.
    ""      lwa_pstyv-low = lwa_constpstyv-pstyv.
    ""      lwa_pstyv-sign = 'I'.
    ""      lwa_pstyv-option = 'EQ'.
    ""      APPEND lwa_pstyv TO ltr_pstyv.
    ""    ENDLOOP.

    ""* Calcular valor
    ""    IF ltr_fkart[] IS NOT INITIAL AND pi_fkart IN ltr_fkart.
    ""      REFRESH ltr_kschl.
    ""      LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '0' AND zz_opcion02 = ''.
    ""        lwa_kschl-low = lwa_constakonv-kschl.
    ""        lwa_kschl-sign = 'I'.
    ""        lwa_kschl-option = 'EQ'.
    ""        APPEND lwa_kschl TO ltr_kschl.
    ""      ENDLOOP.
    ""      IF ltr_kschl[] IS NOT INITIAL.
    ""        lv_kbetr = lv_kwert = 0.
    ""        LOOP AT lt_konvv INTO lwa_konv WHERE knumv EQ pi_knumv
    ""                                         AND kposn EQ pi_vbrp-posnr
    ""                                         AND kschl IN ltr_kschl.
    ""          ADD lwa_konv-kbetr TO lv_kbetr.
    ""          ADD lwa_konv-kwert TO lv_kwert.
    ""        ENDLOOP.
    ""      ENDIF.
    ""      IF lv_kbetr NE 0.
    ""        pe_valrefunit = lv_kbetr.
    ""        pe_totvalveno = lv_kwert.
    ""      ENDIF.
    ""*     Calculo final ACFARMA
    ""      IF pi_vbrp-kmein NE pi_vbrp-vrkme.
    ""        pe_valrefunit = pe_valrefunit * pi_vbrp-umvkz.
    ""      ENDIF.
    ""      pe_valrefunit = pe_valrefunit .

    ""    ELSE.
    ""      IF ( ltr_pstyv[] IS NOT INITIAL ) AND ( pi_vbrp-pstyv IN ltr_pstyv ).
    ""        REFRESH ltr_kschl.
    ""        LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '0' AND zz_opcion02 = ''.
    ""          lwa_kschl-low = lwa_constakonv-kschl.
    ""          lwa_kschl-sign = 'I'.
    ""          lwa_kschl-option = 'EQ'.
    ""          APPEND lwa_kschl TO ltr_kschl.
    ""        ENDLOOP.
    ""        lv_kbetr = lv_kwert = 0.
    ""        IF ltr_kschl[] IS NOT INITIAL.
    ""          LOOP AT lt_konv INTO lwa_konv WHERE knumv EQ pi_knumv
    ""                                          AND kposn EQ pi_vbrp-posnr
    ""                                          AND kschl IN ltr_kschl.
    ""            ADD lwa_konv-kbetr TO lv_kbetr.
    ""            ADD lwa_konv-kwert TO lv_kwert.
    ""          ENDLOOP.
    ""        ENDIF.
    ""        pe_valrefunit = lv_kwert / pi_vbrp-fkimg.
    ""*       Calculo final ACFARMA
    ""        IF pi_vbrp-kmein NE pi_vbrp-vrkme.
    ""          pe_valrefunit = pe_valrefunit * pi_vbrp-umvkz.
    ""        ENDIF.
    ""        pe_valrefunit = pe_valrefunit .

    ""      ENDIF.
    ""    ENDIF.

    ""*CASO AUSTRAL
    ""** Calculo final
    ""*    IF pi_vbrp-kmein NE pi_vbrp-vrkme.
    ""*      pe_valrefunit = pe_valrefunit * pi_vbrp-umvkz.
    ""*    ENDIF.
    ""*    pe_valrefunit = pe_valrefunit - pi_vbrp-desctoxite.

    DATA: ls_cardes TYPE lty_cardes.
    DATA: lw_kwert  TYPE konv-kwert.

    CLEAR: pe_valrefunit, pe_totvalveno.

    IF pi_vbrk-zz_check_tg EQ abap_true
    OR pi_vbrp-zz_check_bonif EQ abap_true.                                       "I-WMR-240915

      CLEAR ltr_kschl.
      CLEAR ltr_pstyv.                                                            "I-WMR-160816-3000003890
      CASE abap_true.                                                             "I-WMR-140716-3000003890
        WHEN pi_vbrk-zz_check_tg.                                                 "I-WMR-140716-3000003890
          LOOP AT lt_constpstyv INTO lwa_constpstyv WHERE zz_opcion01 = 'T'.      "I-WMR-160816-3000003890
            lwa_pstyv-low     = lwa_constpstyv-pstyv.                             "I-WMR-160816-3000003890
            lwa_pstyv-sign    = 'I'.                                              "I-WMR-160816-3000003890
            lwa_pstyv-option  = 'EQ'.                                             "I-WMR-160816-3000003890
            APPEND lwa_pstyv TO ltr_pstyv.                                        "I-WMR-160816-3000003890
          ENDLOOP.                                                                "I-WMR-160816-3000003890

          IF pi_vbrp-pstyv IN ltr_pstyv AND ltr_pstyv[] IS NOT INITIAL.           "I-WMR-160816-3000003890
            LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = 'T'     "I-WMR-160816-3000003890
                                                        AND zz_opcion02 = ''.     "I-WMR-160816-3000003890
              CLEAR lwa_kschl.                                                    "I-WMR-160816-3000003890
              lwa_kschl-sign    = 'I'.                                            "I-WMR-160816-3000003890
              lwa_kschl-option  = 'EQ'.                                           "I-WMR-160816-3000003890
              lwa_kschl-low     = lwa_constakonv-kschl.                           "I-WMR-160816-3000003890
              APPEND lwa_kschl TO ltr_kschl.                                      "I-WMR-160816-3000003890
            ENDLOOP.                                                              "I-WMR-160816-3000003890

          ELSE.                                                                   "I-WMR-160816-3000003890
            LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '0' AND zz_opcion02 = ''.
              CLEAR lwa_kschl.
              lwa_kschl-sign    = 'I'.
              lwa_kschl-option  = 'EQ'.
              lwa_kschl-low     = lwa_constakonv-kschl.
              APPEND lwa_kschl TO ltr_kschl.
            ENDLOOP.

*{I-150120-NTP-3000013600
            IF pi_vbrk-zz_check_expor = abap_on.
              "Adicionar cargos y descuentos
              LOOP AT lt_constakonv INTO lwa_constakonv WHERE ( zz_opcion01 = '1' AND zz_opcion02 = '2' ) OR zz_opcion01 = '4'.
                CLEAR lwa_kschl.
                lwa_kschl-sign    = 'I'.
                lwa_kschl-option  = 'EQ'.
                lwa_kschl-low     = lwa_constakonv-kschl.
                APPEND lwa_kschl TO ltr_kschl.
              ENDLOOP.
            ENDIF.
*}I-150120-NTP-3000013600
          ENDIF.                                                                  "I-WMR-160816-3000003890

        WHEN pi_vbrp-zz_check_bonif.                                              "I-WMR-140716-3000003890
          LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = 'B'.      "I-WMR-140716-3000003890
            CLEAR lwa_kschl.                                                      "I-WMR-140716-3000003890
            lwa_kschl-sign    = 'I'.                                              "I-WMR-140716-3000003890
            lwa_kschl-option  = 'EQ'.                                             "I-WMR-140716-3000003890
            lwa_kschl-low     = lwa_constakonv-kschl.                             "I-WMR-140716-3000003890
            APPEND lwa_kschl TO ltr_kschl.                                        "I-WMR-140716-3000003890
          ENDLOOP.                                                                "I-WMR-140716-3000003890
      ENDCASE.                                                                    "I-WMR-140716-3000003890

      IF ltr_kschl[] IS NOT INITIAL.
        LOOP AT lt_konv INTO lwa_konv WHERE knumv EQ pi_knumv
                                        AND kposn EQ pi_vbrp-posnr
                                        AND kschl IN ltr_kschl
                                        AND kstat EQ space.                           "I-WMR-200417-3000007094
          ADD lwa_konv-kwert TO lw_kwert.
        ENDLOOP.

        TRY .
            pe_totvalveno = lw_kwert.
            pe_valrefunit = lw_kwert / pi_vbrp-fkimg.

          CATCH cx_root.            "#EC CATCH_ALL      "#EC NO_HANDLER

        ENDTRY.
      ENDIF.
*}  END OF REPLACE WMR-300615

*{I-3000010993-NTP261218
      "Calculo final
      IF gw_license = '0020729594'. "Austral
        IF pi_vbrp-kmein NE pi_vbrp-vrkme.
          pe_valrefunit = pe_valrefunit * pi_vbrp-umvkz.
        ENDIF.
*      pe_valrefunit = pe_valrefunit - pi_vbrp-desctoxite. "E-3000011712-NTP110419
*{I-3000011712-NTP110419
        LOOP AT pi_vbrp-t_cardes_item INTO ls_cardes.
          SUBTRACT ls_cardes-dscto FROM pe_valrefunit.
        ENDLOOP.
*}I-3000011712-NTP110419
      ENDIF.
*}I-3000010993-NTP261218
    ENDIF.

  ENDMETHOD.                    "get_valref_item


  METHOD get_valuni_item.

    DATA: ls_const   LIKE LINE OF lt_const,                                    "I-WMR-020217-3000006528
          lv_kbetr   TYPE p DECIMALS 6,
          lv_kbetr01 TYPE p DECIMALS 6,
          lv_kbetr02 TYPE p DECIMALS 6,
          lv_kbetr03 TYPE p DECIMALS 6,
*{  BEGIN OF INSERT WMR-170615
          lw_kwert   TYPE konv-kwert.
*}  END OF INSERT WMR-170615

    DATA: lw_sw TYPE c.

    CONSTANTS lc_kschl TYPE kschl  VALUE 'MWST'.

    DATA: lt_konv_aux TYPE STANDARD TABLE OF lty_konv,
          ls_konv     TYPE                   lty_konv.

    CLEAR: pe_valunit.

*****************************************
*   Arma rangos de Valor Unitario sin IGV
*****************************************
    REFRESH ltr_kschl.
    LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '0'.
      lwa_kschl-low    = lwa_constakonv-kschl.
      lwa_kschl-sign   = 'I'.
      lwa_kschl-option = 'EQ'.
      APPEND lwa_kschl TO ltr_kschl.
    ENDLOOP.

*{  BEGIN OF REPLACE WMR-170615
    ""*   Realizar cálculo
    ""    IF ltr_kschl[] IS NOT INITIAL AND pi_vbrk-kalsm <> gc_kalsm.  " 'ZAC002'.
    ""      LOOP AT lt_konvv INTO lwa_konv WHERE knumv EQ pi_knumv
    ""                                       AND kposn EQ pi_vbrp-posnr
    ""*{  BEGIN OF DELETE WMR-040615
    """"                                       AND koaid EQ gc_koaid_b
    ""*}  END OF DELETE WMR-040615
    ""                                       AND kschl IN ltr_kschl.
    ""        lw_sw = 1.
    ""        IF lwa_konv-kmein = pi_vbrp-vrkme.
    ""          TRY.
    ""              lv_kbetr03 = lwa_konv-kbetr / lwa_konv-kpein.
    ""              ADD lv_kbetr03 TO lv_kbetr.
    ""            CATCH cx_sy_zerodivide.
    ""          ENDTRY.
    ""          CLEAR: lv_kbetr03.
    ""        ELSEIF lwa_konv-kumza = lwa_konv-kumne.
    ""          lv_kbetr01 = lwa_konv-kbetr * pi_vbrp-umvkz.
    ""          ADD lv_kbetr01 TO lv_kbetr.
    ""        ELSE.
    ""          IF pi_vbrp-vrkme NE lwa_konv-kmein AND
    ""             pi_vbrp-vrkme NE pi_vbrp-meins.
    ""            TRY.
    ""                lv_kbetr02 = lwa_konv-kbetr / lwa_konv-kumza.
    ""                lv_kbetr02 = lv_kbetr02 * pi_vbrp-umvkz.
    ""                ADD lv_kbetr02 TO lv_kbetr.
    ""              CATCH cx_sy_zerodivide.
    ""            ENDTRY.
    ""          ELSE.
    ""            TRY.
    ""                lv_kbetr01 = lwa_konv-kbetr / lwa_konv-kumza.
    ""                ADD lv_kbetr01 TO lv_kbetr.
    ""              CATCH cx_sy_zerodivide.
    ""            ENDTRY.
    ""          ENDIF.
    ""        ENDIF.
    ""        pe_kmein = lwa_konv-kmein.
    ""      ENDLOOP.
    ""    ENDIF.

    ""********************************************
    ""*Busca Rangos para Valor Unitario con IGV
    ""********************************************
    ""    IF lw_sw IS INITIAL.
    ""      lt_konv_aux[] = lt_konv[].
    ""      REFRESH ltr_kschl.
    ""      LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '0' AND zz_opcion02 = '1'.
    ""        lwa_kschl-low    = lwa_constakonv-kschl.
    ""        lwa_kschl-sign   = 'I'.
    ""        lwa_kschl-option = 'EQ'.
    ""        APPEND lwa_kschl TO ltr_kschl.
    ""      ENDLOOP.

    ""      LOOP AT lt_konvv INTO lwa_konv WHERE knumv EQ pi_knumv
    ""                                       AND kposn EQ pi_vbrp-posnr
    ""*{  BEGIN OF DELETE WMR-040615
    """"                                       AND koaid EQ gc_koaid_b
    ""*}  END OF DELETE WMR-040615
    ""                                       AND kschl IN ltr_kschl.

    ""        READ TABLE lt_konv_aux INTO ls_konv WITH KEY knumv = lwa_konv-knumv
    ""                                                     kposn = lwa_konv-kposn
    ""*{  BEGIN OF DELETE WMR-040615
    """"                                                     koaid = gc_koaid_d
    ""*}  END OF DELETE WMR-040615
    ""                                                     kschl = lc_kschl.
    ""        IF sy-subrc = 0.
    ""          lwa_konv-kbetr = ( lwa_konv-kbetr / ( 1 + ls_konv-kbetr / 1000 ) ).
    ""        ENDIF.
    ""        IF lwa_konv-kmein = pi_vbrp-vrkme.
    ""          TRY.
    ""              lv_kbetr03 = lwa_konv-kbetr / lwa_konv-kpein.
    ""              ADD lv_kbetr03 TO lv_kbetr.
    ""            CATCH cx_sy_zerodivide.
    ""          ENDTRY.
    ""          CLEAR: lv_kbetr03.
    ""        ELSEIF lwa_konv-kumza = lwa_konv-kumne.
    ""          lv_kbetr01 = lwa_konv-kbetr * pi_vbrp-umvkz.
    ""          ADD lv_kbetr01 TO lv_kbetr.
    ""        ELSE.
    ""          IF pi_vbrp-vrkme NE lwa_konv-kmein AND
    ""             pi_vbrp-vrkme NE pi_vbrp-meins.
    ""            TRY.
    ""                lv_kbetr02 = lwa_konv-kbetr / lwa_konv-kumza.
    ""                lv_kbetr02 = lv_kbetr02 * pi_vbrp-umvkz.
    ""                ADD lv_kbetr02 TO lv_kbetr.
    ""              CATCH cx_sy_zerodivide.
    ""            ENDTRY.
    ""          ELSE.
    ""            TRY.
    ""                lv_kbetr01 = lwa_konv-kbetr / lwa_konv-kumza.
    ""                ADD lv_kbetr01 TO lv_kbetr.
    ""              CATCH cx_sy_zerodivide.
    ""            ENDTRY.
    ""          ENDIF.
    ""        ENDIF.
    ""        pe_kmein = lwa_konv-kmein.
    ""      ENDLOOP.
    ""    ENDIF.
    ""    MOVE lv_kbetr TO pe_valunit.

    CASE gw_license.                                                          "I-WMR-020217-3000006528
      WHEN '0020316164'.  " Modasa                                            "I-WMR-020217-3000006528
        " Para Ventas Nacionales tomar Flete en Valor Unitario                "I-WMR-020217-3000006528
        IF pi_vbrk-zz_tip_ope EQ gc_tipop_01                                  "I-WMR-020217-3000006528
        OR pi_vbrk-zz_tip_ope EQ gc_tipop_0101. " En UBL 2.1                  "I-WMR-040419-3000011108
          " Clases de condición a añadir en Valor Unitario                    "I-WMR-020217-3000006528
          LOOP AT lt_const INTO ls_const.                                     "I-WMR-020217-3000006528
            CASE ls_const-campo.                                              "I-WMR-020217-3000006528
              WHEN 'VTANACEC'.                                                "I-WMR-020217-3000006528
                CLEAR lwa_kschl.                                              "I-WMR-020217-3000006528
                lwa_kschl-sign   = ls_const-signo.                            "I-WMR-020217-3000006528
                lwa_kschl-option = ls_const-opcion.                           "I-WMR-020217-3000006528
                lwa_kschl-low    = ls_const-valor1.                           "I-WMR-020217-3000006528
                lwa_kschl-high   = ls_const-valor2.                           "I-WMR-020217-3000006528
                APPEND lwa_kschl TO ltr_kschl.                                "I-WMR-020217-3000006528
            ENDCASE.                                                          "I-WMR-020217-3000006528
          ENDLOOP.                                                            "I-WMR-020217-3000006528
        ENDIF.                                                                "I-WMR-020217-3000006528
    ENDCASE.                                                                  "I-WMR-020217-3000006528

    IF ltr_kschl[] IS NOT INITIAL.
      LOOP AT lt_konvv INTO lwa_konv WHERE knumv EQ pi_knumv
                                       AND kposn EQ pi_vbrp-posnr
                                       AND kschl IN ltr_kschl
                                       AND kstat EQ space.                            "I-WMR-200417-3000007094
        ADD lwa_konv-kwert TO lw_kwert.
      ENDLOOP.

      TRY .
          pe_valunit  = lw_kwert / pi_vbrp-fkimg.
          pe_kmein    = pi_vbrp-vrkme.
        CATCH cx_root.         "#EC CATCH_ALL           "#EC NO_HANDLER

      ENDTRY.
    ENDIF.
*}  END OF REPLACE WMR-170615

  ENDMETHOD.                    "get_valuni_item


  METHOD obtener_lugar_entrega.

    DATA: ls_vbpa  TYPE vbpa,
          ls_const LIKE LINE OF lt_const,

          lw_parvw TYPE vbpa-parvw.

    CLEAR es_address.

    " Interlocutor para Venta Itinerante
    LOOP AT lt_const INTO ls_const.
      CASE ls_const-campo.
        WHEN 'PARVW_VI'.
          lw_parvw = ls_const-valor1.
      ENDCASE.
    ENDLOOP.

    CHECK lw_parvw IS NOT INITIAL.

    CHECK is_vbrk-tfact EQ gc_tipdoc_fa.  " Sólo Facturas

*{  BEGIN OF DELETE WMR-071215
    ""  CHECK ( is_vbrk-zz_check_vtaiti EQ abap_true AND lt_guiremi[] IS INITIAL )  " Venta Itinerante y Sin Guía de remisión
    ""     OR ( is_vbrk-zz_check_vtasrv EQ abap_true ).                             " Venta de Servicios
*}  END OF DELERE WMR-071215

    " Obtener datos del interlocutor
    SELECT SINGLE *
      INTO ls_vbpa
      FROM vbpa
      WHERE vbeln EQ is_vbrk-vbeln
        AND posnr EQ 0
        AND parvw EQ lw_parvw.

    CHECK sy-subrc EQ 0.

    " Obtener datos de dirección
    es_address = get_address_data( ls_vbpa-adrnr ).

  ENDMETHOD.


  METHOD obtener_numero_placa.

    DATA: ls_const LIKE LINE OF lt_const,
          ls_thead TYPE thead,
          lw_text  TYPE string.

    CLEAR: ls_thead, lw_text.

    " ID texto para Número de Placa
    LOOP AT lt_const INTO ls_const.
      CASE ls_const-campo.
        WHEN 'TXTPLACA'.
          ls_thead-tdid = ls_const-valor1.
      ENDCASE.
    ENDLOOP.

    CHECK ls_thead-tdid IS NOT INITIAL.

    ls_thead-tdname   = is_vbrk-vbeln.
    ls_thead-tdobject = 'VBBK'.

    lw_text = get_text( pi_name   = ls_thead-tdname
                        pi_id     = ls_thead-tdid
                        pi_object = ls_thead-tdobject ).

    r_placa = lw_text.

  ENDMETHOD.


  METHOD others_discounts.

    CASE gw_license.
      WHEN '0020895037'.  " Promelsa

        " Descuento 1
        CLEAR cs_vbrp-zz_dscto_01.

        CLEAR ltr_kschl.
        LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '1'
                                                    AND zz_opcion02 = '2'
                                                    AND zz_opcion03 = '1'.
          lwa_kschl-low     = lwa_constakonv-kschl.
          lwa_kschl-sign    = 'I'.
          lwa_kschl-option  = 'EQ'.
          APPEND lwa_kschl TO ltr_kschl.
        ENDLOOP.

        IF ltr_kschl[] IS NOT INITIAL.
          LOOP AT lt_konvv INTO lwa_konv WHERE knumv EQ cs_vbrp-knumv
                                           AND kposn EQ cs_vbrp-posnr
                                           AND kschl IN ltr_kschl.
            ADD lwa_konv-kwert TO cs_vbrp-zz_dscto_01.
          ENDLOOP.
          cs_vbrp-zz_dscto_01 = abs( cs_vbrp-zz_dscto_01 ).
        ENDIF.

        " Descuento 2
        CLEAR cs_vbrp-zz_dscto_02.

        CLEAR ltr_kschl.
        LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '1'
                                                    AND zz_opcion02 = '2'
                                                    AND zz_opcion03 = '2'.
          lwa_kschl-low     = lwa_constakonv-kschl.
          lwa_kschl-sign    = 'I'.
          lwa_kschl-option  = 'EQ'.
          APPEND lwa_kschl TO ltr_kschl.
        ENDLOOP.

        IF ltr_kschl[] IS NOT INITIAL.
          LOOP AT lt_konvv INTO lwa_konv WHERE knumv EQ cs_vbrp-knumv
                                           AND kposn EQ cs_vbrp-posnr
                                           AND kschl IN ltr_kschl.
            ADD lwa_konv-kwert TO cs_vbrp-zz_dscto_02.
          ENDLOOP.
          cs_vbrp-zz_dscto_02 = abs( cs_vbrp-zz_dscto_02 ).
        ENDIF.

    ENDCASE.

  ENDMETHOD.


  METHOD prorrateo_neto_lotes.
    DATA:
      lt_matrix TYPE ltt_matrix,
      ls_matrix TYPE lty_matrix,
      ls_vbrp   TYPE lty_vbrp,
      lw_count  TYPE vbrp-netwr,
      lw_netwr  TYPE vbrp-netwr.

    FIELD-SYMBOLS:
      <fs_matrix> TYPE lty_matrix.

    LOOP AT ct_matrix ASSIGNING <fs_matrix>.
      CLEAR ls_matrix.
      ls_matrix-posmt = <fs_matrix>-posmt.
      ls_matrix-netwr = 1.                      " Posiciones de factura por Lote
      COLLECT ls_matrix INTO lt_matrix.
    ENDLOOP.

    DELETE lt_matrix WHERE netwr EQ 1.
    CHECK lt_matrix[] IS NOT INITIAL.

    SORT lt_matrix BY posmt ASCENDING.
    SORT ct_matrix BY posmt ASCENDING.

    LOOP AT lt_matrix INTO ls_matrix.
      CLEAR: lw_count, lw_netwr.
      READ TABLE it_vbrp INTO ls_vbrp
           WITH KEY posnr = ls_matrix-posmt.
      CHECK sy-subrc EQ 0.

      LOOP AT ct_matrix ASSIGNING <fs_matrix> WHERE posmt EQ ls_matrix-posmt.
        ADD 1 TO lw_count.
        IF ls_matrix-netwr EQ lw_count.
          <fs_matrix>-netwr = ls_vbrp-netwr - lw_netwr.
        ELSE.
          IF ls_vbrp-fkimg IS NOT INITIAL.
            <fs_matrix>-netwr = ( <fs_matrix>-lfimg / ls_vbrp-fkimg ) * ls_vbrp-netwr.
            ADD <fs_matrix>-netwr TO lw_netwr.
          ENDIF.
        ENDIF.
      ENDLOOP.

    ENDLOOP.

  ENDMETHOD.


  METHOD s4_completar_datos_nif.

    DATA: lt_bus_part  TYPE TABLE OF ty_bus_part.

    FIELD-SYMBOLS: <fs_kna1>     LIKE LINE OF ct_kna1,
                   <fs_bus_part> LIKE LINE OF lt_bus_part,
                   <fs_asgtnhr>  LIKE LINE OF lth_asgtnhr,
                   <fs_fldnif>   TYPE any.                                              "I-WMR-310119-3000011180

    CHECK gs_process-s4core = abap_on.

    CHECK ct_kna1[] IS NOT INITIAL.

    " Tomar N° NIF de Business Partner
    SELECT l~customer t~partner t~taxtype t~taxnum
           t~taxnumxl "CASE_HANA
      INTO TABLE lt_bus_part
      FROM cvi_cust_link AS l
      INNER JOIN but000 AS b ON ( l~partner_guid = b~partner_guid )
      LEFT JOIN dfkkbptaxnum AS t ON ( t~partner = b~partner )
      FOR ALL ENTRIES IN ct_kna1
      WHERE l~customer = ct_kna1-kunnr.

    LOOP AT ct_kna1 ASSIGNING <fs_kna1> WHERE stcd1 = space.
      LOOP AT lt_bus_part ASSIGNING <fs_bus_part> WHERE kunnr = <fs_kna1>-kunnr.
*{  BEGIN OF DELETE WMR-310119-3000011180
**        <fs_kna1>-stcd1 = <fs_bus_part>-taxnum.
**        IF <fs_kna1>-stcdt IS INITIAL.
**          READ TABLE lth_asgtnhr ASSIGNING <fs_asgtnhr>
**               WITH TABLE KEY taxtype = <fs_bus_part>-taxtype.
**          IF sy-subrc = 0.
**            <fs_kna1>-stcdt = <fs_asgtnhr>-stcdt.
**          ENDIF.
**        ENDIF.
*}  END OF DELETE WMR-310119-3000011180
*{  BEGIN OF INSERT WMR-310119-3000011180
        READ TABLE lth_asgtnhr ASSIGNING <fs_asgtnhr>
             WITH TABLE KEY taxtype = <fs_bus_part>-taxtype.
        IF sy-subrc = 0.
          IF <fs_kna1>-stcdt IS INITIAL.
            <fs_kna1>-stcdt = <fs_asgtnhr>-stcdt.
          ENDIF.
          CHECK <fs_asgtnhr>-fldtaxnum IS NOT INITIAL.
          UNASSIGN <fs_fldnif>.
          ASSIGN COMPONENT <fs_asgtnhr>-fldtaxnum OF STRUCTURE <fs_bus_part> TO <fs_fldnif>.
          IF ( <fs_fldnif> IS ASSIGNED ) AND ( <fs_kna1>-stcd1 <> <fs_fldnif> ).
            <fs_kna1>-stcd1 = <fs_fldnif>.
          ENDIF.
        ENDIF.
*}  END OF INSERT WMR-310119-3000011180
        EXIT.
      ENDLOOP.
    ENDLOOP.

  ENDMETHOD.


  METHOD serialize_json.

    DATA: lt_string TYPE trext_string.

    serialize_json_recursive( EXPORTING i_tabname = i_tabname
                                        i_data = data
                              CHANGING ct_string = lt_string ) .

    CONCATENATE LINES OF lt_string INTO json.

  ENDMETHOD.


  METHOD serialize_json_recursive.

    DATA: lv_type  TYPE c,
          lv_comps TYPE i,
          lv_lines TYPE i,
          lv_index TYPE i,
          lv_value TYPE string.
    CONSTANTS: lc_comma TYPE char01 VALUE ',',
               lc_colon TYPE char01 VALUE ':'.
    FIELD-SYMBOLS: <itab> TYPE ANY TABLE,
                   <comp> TYPE any.


    DESCRIBE FIELD i_data TYPE lv_type COMPONENTS lv_comps.

    "------------------------------------------------------------------*
    " Table
    "------------------------------------------------------------------*
    IF lv_type = cl_abap_typedescr=>typekind_table .
* itab -> array
      APPEND '[' TO ct_string .
      ASSIGN i_data TO <itab> .
      lv_lines = lines( <itab> ) .
      LOOP AT <itab> ASSIGNING <comp> .
        ADD 1 TO lv_index .
        serialize_json_recursive( EXPORTING i_data = <comp>
                                            i_recursive_call = abap_on
                                  CHANGING ct_string = ct_string ) .
        IF lv_index < lv_lines .
          APPEND lc_comma TO ct_string .
        ENDIF .
      ENDLOOP .
      APPEND ']' TO ct_string .
    ELSE .
      "------------------------------------------------------------------*
      " If components are initial and method called from serialize we *
      " are working with a single standalone scarlarfield without name *
      " we only know the data type, not the field name. Therefore the *
      " datatype is used as the fieldname since an JSON object must have *
      " an object name and must be surrounded by brackets *
      "{"name":"value"}. Scalar fields are allways single field values, *
      " nor part of a structure or tabletype. *
      "If components are initial and method is called recursive from *
      "serial_recursive, the scarlar field is part of an object or array *
      " and there by have a name.
      "------------------------------------------------------------------*
      IF lv_comps IS INITIAL .
* field -> scalar
* CASE: format
        lv_value = serialize_json_replace( i_data ).
        IF i_recursive_call IS INITIAL.
          IF i_tabname IS NOT INITIAL.
            CONCATENATE '{"' i_tabname '":' '"' lv_value '"' '}'
            INTO lv_value.
          ELSE.
            CASE lv_type.
              WHEN cl_abap_typedescr=>typekind_num.
                CONCATENATE '{"num":' '"' lv_value '"' '}' INTO lv_value.
              WHEN cl_abap_typedescr=>typekind_date.
                CONCATENATE '{"date":' '"' lv_value '"' '}' INTO lv_value.
              WHEN cl_abap_typedescr=>typekind_packed.
                CONCATENATE '{"packed":' '"' lv_value '"' '}' INTO lv_value.
              WHEN cl_abap_typedescr=>typekind_time.
                CONCATENATE '{"time":' '"' lv_value '"' '}' INTO lv_value.
              WHEN cl_abap_typedescr=>typekind_char.
                CONCATENATE '{"char":' '"' lv_value '"' '}' INTO lv_value.
              WHEN cl_abap_typedescr=>typekind_hex.
                CONCATENATE '{"hex":' '"' lv_value '"' '}' INTO lv_value.
              WHEN cl_abap_typedescr=>typekind_float.
                CONCATENATE '{"float":' '"' lv_value '"' '}' INTO lv_value.
              WHEN cl_abap_typedescr=>typekind_int.
                CONCATENATE '{"int":' '"' lv_value '"' '}' INTO lv_value.
              WHEN cl_abap_typedescr=>typekind_int1.
                CONCATENATE '{"int1":' '"' lv_value '"' '}' INTO lv_value.
              WHEN cl_abap_typedescr=>typekind_int2.
                CONCATENATE '{"int2":' '"' lv_value '"' '}' INTO lv_value.
              WHEN cl_abap_typedescr=>typekind_w.
                CONCATENATE '{"Wide":' '"' lv_value '"' '}' INTO lv_value.
              WHEN cl_abap_typedescr=>typekind_oref.
                CONCATENATE '{"Object reference, not supported":'(j01) '"'
                lv_value '"' '}' INTO lv_value.
              WHEN cl_abap_typedescr=>typekind_string.
                CONCATENATE '{"string":' '"' lv_value '"' '}' INTO lv_value.
              WHEN cl_abap_typedescr=>typekind_xstring.
                CONCATENATE '{"xtring":' '"' lv_value '"' '}' INTO lv_value.
              WHEN cl_abap_typedescr=>typekind_dref.
                CONCATENATE '{"Data reference, not supported":'(j02) '"'
                lv_value '"' '}' INTO lv_value.
              WHEN cl_abap_typedescr=>typekind_class.
                CONCATENATE '{"Class reference, not supported":'(j03) '"'
                lv_value '"' '}' INTO lv_value.
              WHEN cl_abap_typedescr=>typekind_intf.
                CONCATENATE '{"Class reference, not supported":'(j04) '"'
                lv_value '"' '}' INTO lv_value.
              WHEN cl_abap_typedescr=>typekind_any.
                CONCATENATE '{"Type Any, not supported":'(j05) '"'
                lv_value '"' '}' INTO lv_value.
              WHEN cl_abap_typedescr=>typekind_data.
                CONCATENATE '{"Type data, not supported":'(j06) '"'
                lv_value '"' '}' INTO lv_value.
              WHEN cl_abap_typedescr=>typekind_simple.
                CONCATENATE '{"Type clike, not supported":'(j07) '"'
                lv_value '"' '}' INTO lv_value.
              WHEN cl_abap_typedescr=>typekind_csequence.
                CONCATENATE '{"Type csequence, not supported":'(j08) '"'
                lv_value '"' '}' INTO lv_value.
              WHEN cl_abap_typedescr=>typekind_xsequence.
                CONCATENATE '{"Type xsequence, not supported":'(j09) '"'
                lv_value '"' '}' INTO lv_value.
              WHEN cl_abap_typedescr=>typekind_numeric.
                CONCATENATE '{"numeric":' '"' lv_value '"' '}' INTO lv_value .
              WHEN cl_abap_typedescr=>typekind_iref.
                CONCATENATE '{"Instance reference, not supported":'(j10) '"'
                lv_value '"' '}' INTO lv_value.
              WHEN OTHERS.
                CONCATENATE '{"NOT SUPPORTED":'(j11) '"' lv_value '"' '}'
                INTO lv_value.
            ENDCASE.
          ENDIF.
        ELSE.
          CONCATENATE '"' lv_value '"' INTO lv_value.
        ENDIF.
        CONDENSE lv_value.
        APPEND lv_value TO ct_string.
      ELSE .
        "------------------------------------------------------------------*
        " Structure
        "------------------------------------------------------------------*
        DATA: lv_typedescr TYPE REF TO cl_abap_structdescr,
              l_string     TYPE string.
        FIELD-SYMBOLS <abapcomp> TYPE abap_compdescr.
        APPEND '{' TO ct_string.
        lv_typedescr ?= cl_abap_typedescr=>describe_by_data( i_data ).

        LOOP AT lv_typedescr->components ASSIGNING <abapcomp>.
          lv_index = sy-tabix .
          CONCATENATE '"' <abapcomp>-name '"' lc_colon INTO lv_value.
          TRANSLATE lv_value TO LOWER CASE.
          APPEND lv_value TO ct_string.

          ASSIGN COMPONENT <abapcomp>-name OF STRUCTURE i_data TO <comp>.

          "Tipo de Variable
          CASE <abapcomp>-type_kind.
            WHEN 'P' OR 'I'.
              "Para montos negativos
              IF <comp> < 0.
                l_string = <comp>.
                REPLACE '-' INTO l_string WITH space.
                CONCATENATE '-' l_string INTO l_string.
                CONDENSE l_string.
                ASSIGN l_string TO <comp>.
              ENDIF.
            WHEN OTHERS.
          ENDCASE.

          serialize_json_recursive( EXPORTING i_data           = <comp>
                                              i_recursive_call = abap_on
                                    CHANGING ct_string         = ct_string
          ).

          IF lv_index < lv_comps.
            APPEND lc_comma TO ct_string.
          ENDIF.
        ENDLOOP.
        APPEND '}' TO ct_string.
      ENDIF .
    ENDIF .

  ENDMETHOD.


  METHOD serialize_json_replace.

    r_data = i_data.

    REPLACE ALL OCCURRENCES OF '\'  IN r_data WITH '\\'.
*    REPLACE ALL OCCURRENCES OF '''' IN r_data WITH '\'''.    "I-PBM010419-3000011101
    REPLACE ALL OCCURRENCES OF '"'  IN r_data WITH '\"'.
*    REPLACE ALL OCCURRENCES OF '&'  IN r_data WITH '\&'.     "I-PBM280319-3000011101
    REPLACE ALL OCCURRENCES OF cl_abap_char_utilities=>cr_lf           IN r_data WITH '\r\n' .
    REPLACE ALL OCCURRENCES OF cl_abap_char_utilities=>newline         IN r_data WITH '\n' .
    REPLACE ALL OCCURRENCES OF cl_abap_char_utilities=>horizontal_tab  IN r_data WITH '\t' .
    REPLACE ALL OCCURRENCES OF cl_abap_char_utilities=>backspace       IN r_data WITH '\b'.
    REPLACE ALL OCCURRENCES OF cl_abap_char_utilities=>form_feed       IN r_data WITH '\f'.

  ENDMETHOD.


  METHOD set_agroindustry_data_part2.

    DATA: lt_clbatch TYPE STANDARD TABLE OF clbatch,
          lt_vbrp    TYPE ltt_vbrp,                                              "I-WMR-090217-3000006563
          lr_vkorg   TYPE RANGE OF vbrk-vkorg,                                   "I-WMR-190617-3000007466

          ls_clbatch TYPE clbatch,
          ls_vbrp    TYPE lty_vbrp,
          ls_thead   TYPE thead,
          ls_likp    TYPE lty_likp,
          ls_adrc    TYPE ty_adrc,
          ls_adr6    TYPE ty_adr6,
          ls_address TYPE lty_address,
          ls_kna1    LIKE LINE OF lt_kna1,
          ls_vbpa_ag LIKE LINE OF lt_vbpa,                                       "I-WMR-040517-3000007114
          ls_vbpa_rg LIKE LINE OF lt_vbpa,                                       "I-WMR-040517-3000007114
          ls_const   LIKE LINE OF lt_const,                                      "I-WMR-190617-3000007466
          ls_vkorg   LIKE LINE OF lr_vkorg,                                      "I-WMR-190617-3000007466

          l_value    TYPE string,
          l_number   TYPE i.

    DATA: lo_data   TYPE REF TO data,                                           "I-WMR-010217-3000006520
          lo_excep  TYPE REF TO cx_root,                                        "I-WMR-010217-3000006520
          l_type    TYPE string,                                                "I-WMR-010217-3000006520
          l_program TYPE string,                                                "I-WMR-010217-3000006520
          l_form    TYPE string.                                                "I-WMR-010217-3000006520

    FIELD-SYMBOLS: <fs_s_header> TYPE any,                                       "I-WMR-010217-3000006520
                   <fs_t_detail> TYPE ANY TABLE,                                 "I-WMR-010217-3000006520
                   <fs_s_footer> TYPE any,                                       "I-WMR-010217-3000006520
                   <fs_value>    TYPE any.                                       "I-WMR-010217-3000006520

    CLEAR es_exppart2.

    CASE gw_license.
      WHEN '0020673876'.  " Beta

*&==============================================================================&*
*&    Código o Lote ( Exportación )
*&    N° Orden de Compra  ( Nacional )
*&==============================================================================&*
        CLEAR: ls_thead, l_value.
        ls_thead-tdobject    = 'VBBK'.
        ls_thead-tdname      = is_vbrk-vbeln.
        ls_thead-tdid        = 'Z117'.
        l_value = get_text( pi_name   = ls_thead-tdname
                            pi_id     = ls_thead-tdid
                            pi_object = ls_thead-tdobject ).
        IF l_value IS NOT INITIAL.
          es_exppart2-zz_cod_lote = l_value.
        ENDIF.

*&==============================================================================&*
*&    Partida Arancelaria
*&==============================================================================&*
        IF is_vbrk-zz_check_expor EQ abap_true.
          CLEAR: l_value.
          LOOP AT it_vbrp INTO ls_vbrp WHERE vbeln EQ is_vbrk-vbeln.
            EXIT.
          ENDLOOP.
          IF sy-subrc EQ 0.
            SELECT SINGLE stawn INTO l_value
              FROM marc
              WHERE matnr EQ ls_vbrp-matnr
                AND werks EQ ls_vbrp-werks.
            IF l_value IS NOT INITIAL.
              es_exppart2-zz_part_ara = l_value.
            ENDIF.
          ENDIF.
        ENDIF.

*&==============================================================================&*
*&    Etiqueta
*&==============================================================================&*
        IF is_vbrk-zz_check_expor EQ abap_true.
          CLEAR: ls_thead, l_value.
          ls_thead-tdobject    = 'VBBK'.
          ls_thead-tdname      = is_vbrk-vbeln.
          ls_thead-tdid        = 'Z085'.
          l_value = get_text( pi_name   = ls_thead-tdname
                              pi_id     = ls_thead-tdid
                              pi_object = ls_thead-tdobject ).
          IF l_value IS NOT INITIAL.
            es_exppart2-zz_etiqueta = l_value.
          ENDIF.
        ENDIF.

*&==============================================================================&*
*&    Número y Clase de Bultos
*&==============================================================================&*
        IF is_vbrk-zz_check_expor EQ abap_true.
*{  BEGIN OF REPLACE WMR-070217-3000006563
          ""        CLEAR: ls_likp, l_value.
          ""        READ TABLE it_likp INTO ls_likp WITH KEY vbeln = ls_vbrp-vgbel.
          ""        IF  sy-subrc EQ 0
          ""        AND ls_likp-anzpk IS NOT INITIAL.
          ""          l_number = ls_likp-anzpk.
          ""          l_value  = l_number.
          ""          LOOP AT it_vbrp INTO ls_vbrp WHERE vbeln EQ is_vbrk-vbeln.
          ""            EXIT.
          ""          ENDLOOP.
          ""          IF sy-subrc EQ 0.
          ""            CASE ls_vbrp-matkl.
          ""              WHEN '198'. " ESPARRAGO CONGELADO
          ""                CONCATENATE l_value 'CAJAS'      INTO l_value SEPARATED BY space.
          ""              WHEN OTHERS.
          ""                CONCATENATE l_value 'PARIHUELAS' INTO l_value SEPARATED BY space.
          ""            ENDCASE.
          ""            es_exppart2-zz_nrcl_bul = l_value.
          ""            CONDENSE es_exppart2-zz_nrcl_bul.
          ""          ENDIF.
          ""        ENDIF.

          CLEAR: l_value, l_number.
          lt_vbrp[] = it_vbrp[].
          SORT lt_vbrp BY vbeln ASCENDING vgbel ASCENDING.
          DELETE ADJACENT DUPLICATES FROM lt_vbrp COMPARING vbeln vgbel.

          LOOP AT lt_vbrp INTO ls_vbrp WHERE vbeln EQ is_vbrk-vbeln.
            READ TABLE it_likp INTO ls_likp WITH KEY vbeln = ls_vbrp-vgbel.
            IF sy-subrc EQ 0.
              ADD ls_likp-anzpk TO l_number.
            ENDIF.
          ENDLOOP.
          IF ( sy-subrc EQ 0 AND l_number GT 0 ).
            l_value = l_number.
*{E-NTP070917-3000008115
*          CASE ls_vbrp-matkl.
*            WHEN '198'. " ESPARRAGO CONGELADO
*              CONCATENATE l_value 'CAJAS'      INTO l_value SEPARATED BY space.
*            WHEN OTHERS.
*              CONCATENATE l_value 'PARIHUELAS' INTO l_value SEPARATED BY space.
*          ENDCASE.
*}E-NTP070917-3000008115
*{I-NTP070917-3000008115
            "Descripción de bulto por grupo
            READ TABLE lt_const INTO ls_const WITH KEY campo = 'EX_MATKL_D'
                                                       valor1 = ls_vbrp-matkl.
            IF sy-subrc <> 0.
              "Descripción general de bulto
              READ TABLE lt_const INTO ls_const WITH KEY campo = 'EX_MATKL_D'
                                                         valor1 = '*'.
            ENDIF.
            CONCATENATE l_value ls_const-valor2 INTO l_value SEPARATED BY space.
*}I-NTP070917-3000008115
            es_exppart2-zz_nrcl_bul = l_value.
            CONDENSE es_exppart2-zz_nrcl_bul.
          ENDIF.
*}  END OF REPLACE WMR-070217-3000006563
        ENDIF.

*&==============================================================================&*
*&    AWB/ Contenedor
*&==============================================================================&*
        IF is_vbrk-zz_check_expor EQ abap_true.
          CLEAR: ls_thead, l_value.
          ls_thead-tdobject    = 'VBBK'.
          ls_thead-tdname      = is_vbrk-vbeln.
          ls_thead-tdid        = 'Z094'.
          l_value = get_text( pi_name   = ls_thead-tdname
                              pi_id     = ls_thead-tdid
                              pi_object = ls_thead-tdobject ).
          IF l_value IS NOT INITIAL.
            es_exppart2-zz_awb = l_value.
          ENDIF.
        ENDIF.

*&==============================================================================&*
*&    Cuenta Corriente
*&==============================================================================&*
        CLEAR: l_value.
        LOOP AT it_vbrp INTO ls_vbrp WHERE vbeln EQ is_vbrk-vbeln.
          EXIT.
        ENDLOOP.
        IF sy-subrc EQ 0.
          CASE is_vbrk-tfact.
            WHEN gc_tipdoc_fa.
              IF ls_vbrp-kvgr1 IS NOT INITIAL.
                SELECT SINGLE bezei INTO l_value
                  FROM tvv1t
                  WHERE spras EQ sy-langu
                    AND kvgr1 EQ ls_vbrp-kvgr1.
                IF l_value IS NOT INITIAL.
                  es_exppart2-zz_ctacte = l_value.
                  TRANSLATE es_exppart2-zz_ctacte TO UPPER CASE.
                ENDIF.
              ENDIF.
            WHEN gc_tipdoc_bl.
              es_exppart2-zz_ctacte = '--'.
*{  BEGIN OF INSERT WMR-040517-3000007114
              CLEAR: ls_vbpa_ag, ls_vbpa_rg.
              " Datos del Solicitante
              READ TABLE lt_vbpa INTO ls_vbpa_ag
                   WITH KEY vbeln = is_vbrk-vbeln
                            parvw = gc_parvw_ag.
              " Datos del Responsable de Pago
              READ TABLE lt_vbpa INTO ls_vbpa_rg
                   WITH KEY vbeln = is_vbrk-vbeln
                            parvw = gc_parvw_rg.

              " Si Solicitante del Extranjero y Responsable de Pago Nacional: Obtener Cuenta Corriente
              IF ( ls_vbpa_ag-land1 NE gc_peru ) AND ( ls_vbpa_rg-land1 EQ gc_peru ).
                IF ls_vbrp-kvgr1 IS NOT INITIAL.
                  SELECT SINGLE bezei INTO l_value
                    FROM tvv1t
                    WHERE spras EQ sy-langu
                      AND kvgr1 EQ ls_vbrp-kvgr1.
                  IF l_value IS NOT INITIAL.
                    es_exppart2-zz_ctacte = l_value.
                    TRANSLATE es_exppart2-zz_ctacte TO UPPER CASE.
                  ENDIF.
                ENDIF.
              ENDIF.
*}  END OF INSERT WMR-040517-3000007114
          ENDCASE.
        ENDIF.

*&==============================================================================&*
*&    Certificación GGN
*&==============================================================================&*

*{  BEGIN OF INSERT WMR-190617-3000007466
        LOOP AT lt_const INTO ls_const.
          CASE ls_const-campo.
            WHEN 'VKORG2'.
              CLEAR ls_vkorg.
              ls_vkorg-sign   = ls_const-signo.
              ls_vkorg-option = ls_const-opcion.
              ls_vkorg-low    = ls_const-valor1.
              ls_vkorg-high   = ls_const-valor2.
              APPEND ls_vkorg TO lr_vkorg.
          ENDCASE.
        ENDLOOP.
*}  END OF INSERT WMR-190617-3000007466

*{  BEGIN OF REPLACE WMR-010217-3000006520
        ""      CLEAR: l_value.
        ""      LOOP AT it_vbrp INTO ls_vbrp WHERE vbeln EQ is_vbrk-vbeln.
        ""        EXIT.
        ""      ENDLOOP.
        ""      IF sy-subrc EQ 0
        ""      AND ls_vbrp-charg IS NOT INITIAL.
        ""        CALL FUNCTION 'VB_BATCH_GET_DETAIL'
        ""          EXPORTING
        ""            matnr              = ls_vbrp-matnr
        ""            charg              = ls_vbrp-charg
        ""            werks              = ls_vbrp-werks
        ""            get_classification = 'X'
        ""          TABLES
        ""            char_of_batch      = lt_clbatch
        ""          EXCEPTIONS
        ""            no_material        = 1
        ""            no_batch           = 2
        ""            no_plant           = 3
        ""            material_not_found = 4
        ""            plant_not_found    = 5
        ""            no_authority       = 6
        ""            batch_not_exist    = 7
        ""            lock_on_batch      = 8
        ""            OTHERS             = 9.
        ""        IF sy-subrc EQ 0
        ""        AND lt_clbatch[] IS NOT INITIAL.
        ""          LOOP AT lt_clbatch INTO ls_clbatch.
        ""            IF es_exppart2-zz_certif_ggn IS INITIAL.
        ""              es_exppart2-zz_certif_ggn = ls_clbatch-atwtb.
        ""            ELSE.
        ""              CONCATENATE es_exppart2-zz_certif_ggn '/' ls_clbatch-atwtb INTO es_exppart2-zz_certif_ggn.
        ""            ENDIF.
        ""          ENDLOOP.
        ""        ENDIF.

        ""      ENDIF.

        UNASSIGN: <fs_s_header>, <fs_t_detail>, <fs_s_footer>, <fs_value>.
        l_program = 'ZOSSD_FORMATOS_IMPRESION'.

        CLEAR: l_value.
        CASE is_vbrk-tfact.
          WHEN gc_tipdoc_fa.
            IF is_vbrk-zz_check_expor EQ abap_true.
              l_form = 'FACTURA_EXPORTACION'.

              l_type = 'ZOSES_FACTURA_EXPORT_HEAD'.
              CREATE DATA lo_data TYPE (l_type).  ASSIGN lo_data->* TO <fs_s_header>. FREE lo_data.
              l_type = 'ZOSTT_FACTURA_EXPORT_DETAIL'.
              CREATE DATA lo_data TYPE (l_type).  ASSIGN lo_data->* TO <fs_t_detail>. FREE lo_data.
              l_type = 'ZOSES_FACTURA_EXPORT_FOOT'.
              CREATE DATA lo_data TYPE (l_type).  ASSIGN lo_data->* TO <fs_s_footer>. FREE lo_data.
            ELSE.
              l_form = 'FACTURA_NACIONAL'.

              l_type = 'ZOSES_FACTURA_NACIONAL_HEAD'.
              CREATE DATA lo_data TYPE (l_type).  ASSIGN lo_data->* TO <fs_s_header>. FREE lo_data.
              l_type = 'ZOSTT_FACTURA_NACIONAL_DETAIL'.
              CREATE DATA lo_data TYPE (l_type).  ASSIGN lo_data->* TO <fs_t_detail>. FREE lo_data.
              l_type = 'ZOSES_FACTURA_NACIONAL_FOOT'.
              CREATE DATA lo_data TYPE (l_type).  ASSIGN lo_data->* TO <fs_s_footer>. FREE lo_data.
            ENDIF.
            IF <fs_s_header> IS ASSIGNED.
              ASSIGN COMPONENT 'VBELN' OF STRUCTURE <fs_s_header> TO <fs_value>.
              IF <fs_value> IS ASSIGNED.
                <fs_value> = is_vbrk-vbeln.
              ENDIF.
              UNASSIGN <fs_value>.
            ENDIF.
            IF l_form IS NOT INITIAL.
              TRY .
                  PERFORM (l_form) IN PROGRAM (l_program)
                                   CHANGING <fs_s_header>
                                            <fs_t_detail>
                                            <fs_s_footer>
                                   IF FOUND.
                CATCH cx_root INTO lo_excep. "#EC CATCH_ALL          "#EC NO_HANDLER

              ENDTRY.
              IF <fs_s_footer> IS ASSIGNED.
                ASSIGN COMPONENT 'SIGLA2' OF STRUCTURE <fs_s_footer> TO <fs_value>.
                IF <fs_value> IS ASSIGNED.
                  es_exppart2-zz_certif_ggn = <fs_value>.
                  IF ( is_vbrk-vkorg IN lr_vkorg AND lr_vkorg[] IS NOT INITIAL ).                   "I-WMR-190617-3000007466
                    REPLACE ALL OCCURRENCES OF 'GGN' IN es_exppart2-zz_certif_ggn WITH ''.
                    CONDENSE es_exppart2-zz_certif_ggn.
                  ENDIF.                                                                            "I-WMR-190617-3000007466
                ENDIF.
                UNASSIGN <fs_value>.
              ENDIF.
            ENDIF.
        ENDCASE.
*}  END OF REPLACE WMR-010217-3000006520

*&==============================================================================&*
*&    DUA
*&==============================================================================&*
        IF is_vbrk-zz_check_expor EQ abap_true.
          CASE is_vbrk-tfact.
            WHEN gc_tipdoc_fa OR gc_tipdoc_bl.
              CLEAR: ls_thead, l_value.
              ls_thead-tdobject    = 'VBBK'.
              ls_thead-tdname      = is_vbrk-vbeln.
              ls_thead-tdid        = 'Z095'.
              l_value = get_text( pi_name   = ls_thead-tdname
                                  pi_id     = ls_thead-tdid
                                  pi_object = ls_thead-tdobject ).
              IF l_value IS NOT INITIAL.
                es_exppart2-zz_dua = l_value.
              ENDIF.
            WHEN gc_tipdoc_nc OR gc_tipdoc_nd.
              " Buscar con documento SD referencia
              IF is_vbrk-zz_sdrefer IS NOT INITIAL.
                CLEAR: ls_thead, l_value.
                ls_thead-tdobject    = 'VBBK'.
                ls_thead-tdname      = is_vbrk-zz_sdrefer.
                ls_thead-tdid        = 'Z095'.
                l_value = get_text( pi_name   = ls_thead-tdname
                                    pi_id     = ls_thead-tdid
                                    pi_object = ls_thead-tdobject ).
                IF l_value IS NOT INITIAL.
                  es_exppart2-zz_dua = l_value.
                ENDIF.
              ENDIF.
          ENDCASE.
        ENDIF.

*&==============================================================================&*
*&    Notify
*&==============================================================================&*
        IF is_vbrk-zz_check_expor EQ abap_true.
          READ TABLE lt_vbpa INTO lwa_vbpa
               WITH KEY vbeln = is_vbrk-vbeln
                        parvw = 'ZG'. " Notify
          IF sy-subrc EQ 0.
            " Datos de Dirección
            SELECT SINGLE addrnumber cityp_code street house_num1 str_suppl1 str_suppl2 str_suppl3
                          city1 city2 country region name1 name2 name3 name4 tel_number fax_number location
              INTO CORRESPONDING FIELDS OF ls_adrc
              FROM adrc
              WHERE addrnumber EQ lwa_vbpa-adrnr.

            IF sy-subrc EQ 0.
              ls_address = get_address_data( lwa_vbpa-adrnr ).

              CLEAR l_value.
              SELECT SINGLE landx INTO l_value
                FROM t005t
                WHERE spras EQ sy-langu
                  AND land1 EQ ls_address-pais.

              CONCATENATE ls_address-street
                          ls_address-stnumb
                          ls_address-str_suppl1
                          ls_address-distri
                          ls_address-provin
                          ls_address-depmto
                          l_value
                          INTO es_exppart2-zz_notify_dir SEPARATED BY space.
              CONDENSE es_exppart2-zz_notify_dir.
              TRANSLATE es_exppart2-zz_notify_dir TO UPPER CASE.

              " Telefóno
              IF ls_adrc-tel_number IS NOT INITIAL.
                es_exppart2-zz_notify_tel = ls_adrc-tel_number.
              ENDIF.

              " Fax
              IF ls_adrc-fax_number IS NOT INITIAL.
                es_exppart2-zz_notify_fax = ls_adrc-fax_number.
              ENDIF.
            ENDIF.

            " Contacto
            CLEAR l_value.
            SELECT SINGLE name1 INTO l_value
              FROM knvk
              WHERE kunnr EQ lwa_vbpa-kunnr.
            IF l_value IS NOT INITIAL.
              es_exppart2-zz_notify_cnt = l_value.
              TRANSLATE es_exppart2-zz_notify_cnt TO UPPER CASE.
            ENDIF.

            " Correo electrónico
            SELECT SINGLE addrnumber persnumber smtp_addr
              INTO ls_adr6
              FROM adr6
              WHERE addrnumber EQ lwa_vbpa-adrnr
                AND persnumber EQ space
                AND flgdefault EQ abap_true.
            IF sy-subrc EQ 0.
              es_exppart2-zz_notify_mail = ls_adr6-smtp_addr.
              TRANSLATE es_exppart2-zz_notify_mail TO UPPER CASE.
            ENDIF.

            " Razón Social
            READ TABLE lt_kna1 INTO ls_kna1
                 WITH KEY kunnr = lwa_vbpa-kunnr.
            IF sy-subrc EQ 0.
              CONCATENATE ls_kna1-name1 ls_kna1-name2 ls_kna1-name3 ls_kna1-name4
                INTO es_exppart2-zz_notify_name SEPARATED BY space.
              TRANSLATE es_exppart2-zz_notify_name TO UPPER CASE.
            ENDIF.

          ENDIF.
        ENDIF.

    ENDCASE.

  ENDMETHOD.


  METHOD set_agrupa_pos.

    DATA: lw_sw1     TYPE c VALUE 1,
          lw_sw2     TYPE c VALUE 1,
          lw_charg   TYPE charg_d,
          lw_sum_lot TYPE lfimg,
          lw_txt_lfi TYPE char15,
          lw_lfimg   TYPE lfimg,
          lw_txt_lot TYPE char200,
          lw_zlotes  TYPE char200,
          lw_length  TYPE i.

    DATA: lw_matnr  TYPE matnr,
          lw_kbetr  TYPE kbetr,
          lw_kbetr1 TYPE kbetr,
          lw_kschl  TYPE kschl,
          lw_kschl1 TYPE kschl.

    DATA: lt_matrix_aux TYPE STANDARD TABLE OF lty_matrix,
          lt_matrix_agr TYPE STANDARD TABLE OF lty_matrix,
          lt_sumlot     TYPE STANDARD TABLE OF lty_sumlot,
          lt_sum        TYPE STANDARD TABLE OF lty_sumlot.

    DATA: ls_agrup      LIKE LINE OF pe_agrup,
          ls_sumlot     TYPE         lty_sumlot,
          ls_matrix_agr TYPE         lty_matrix.

    FIELD-SYMBOLS: <fs_matrix> LIKE LINE OF pi_matrix.
    FIELD-SYMBOLS: <fs_agrup> LIKE LINE OF lt_agrup.
    FIELD-SYMBOLS: <fs_sumlot> LIKE LINE OF lt_sumlot.

    lt_matrix_aux[] = pi_matrix[].
    SORT lt_matrix_aux BY  posmt matnr.

******************************************************
* Venta sector private. Agrupa registros
******************************************************
    IF ( pi_vbrk-vkorg = gc_vkorg4 ) OR ( ( pi_vbrk-vtweg = gc_vtweg1 ) OR ( pi_vbrk-vtweg = gc_vtweg2 ) ).
      SORT lt_matrix_aux BY matnr kschl kschl1 kbetr kbetr1.
      LOOP AT lt_matrix_aux ASSIGNING <fs_matrix>.
        IF ( lw_matnr  = <fs_matrix>-matnr  ) AND
           ( lw_kschl  = <fs_matrix>-kschl  ) AND
           ( lw_kschl1 = <fs_matrix>-kschl1 ) AND
           ( lw_kbetr  = <fs_matrix>-kbetr  ) AND
           ( lw_kbetr1 = <fs_matrix>-kbetr1 ).

          SORT lt_agrup BY matnr kschl kschl1 kbetr0 kbetr1.
          READ TABLE lt_agrup ASSIGNING <fs_agrup> WITH KEY matnr  = <fs_matrix>-matnr
                                                            kschl  = <fs_matrix>-kschl
                                                            kschl1 = <fs_matrix>-kschl1
                                                            kbetr0 = <fs_matrix>-kbetr
                                                            kbetr1 = <fs_matrix>-kbetr1.
          IF sy-subrc = 0.
            <fs_agrup>-lfimg = <fs_agrup>-lfimg  + <fs_matrix>-lfimg.
            <fs_agrup>-kbetr = <fs_matrix>-kbetr + <fs_matrix>-kbetr1.
            <fs_agrup>-netwr = <fs_agrup>-netwr  + <fs_matrix>-netwr.
          ENDIF.
        ELSE.
          ls_agrup-posmt  = <fs_matrix>-posmt.
          ls_agrup-matnr  = <fs_matrix>-matnr.
          ls_agrup-kschl  = <fs_matrix>-kschl.
          ls_agrup-kschl1 = <fs_matrix>-kschl1.
          ls_agrup-kbetr0 = <fs_matrix>-kbetr.
          ls_agrup-kbetr1 = <fs_matrix>-kbetr1.

          ls_agrup-lfimg  = <fs_matrix>-lfimg.
          ls_agrup-kbetr  = <fs_matrix>-kbetr + <fs_matrix>-kbetr1.
          ls_agrup-netwr  = <fs_matrix>-netwr.
          APPEND ls_agrup TO lt_agrup.

          lw_matnr  = <fs_matrix>-matnr.
          lw_kschl  = <fs_matrix>-kschl.
          lw_kschl1 = <fs_matrix>-kschl1.
          lw_kbetr  = <fs_matrix>-kbetr.
          lw_kbetr1 = <fs_matrix>-kbetr1.
        ENDIF.
      ENDLOOP.
***************************************************************
*Actualiza Registros agrupados con el Lote Venta sector privado
***************************************************************
      SORT lt_matrix_aux BY  matnr charg .
      LOOP AT lt_agrup ASSIGNING <fs_agrup>.
        CLEAR: lw_sum_lot,lw_charg.
        LOOP AT lt_matrix_aux ASSIGNING <fs_matrix> WHERE  matnr  = <fs_agrup>-matnr  AND
                                                           kschl  = <fs_agrup>-kschl  AND
                                                           kschl1 = <fs_agrup>-kschl1 AND
                                                           kbetr  = <fs_agrup>-kbetr0 AND
                                                           kbetr1 = <fs_agrup>-kbetr1.
          IF lw_charg <> <fs_matrix>-charg.
            ls_sumlot-charg = <fs_matrix>-charg.
            ls_sumlot-lfimg = <fs_matrix>-lfimg.
            APPEND ls_sumlot TO lt_sumlot.
            lw_charg = <fs_matrix>-charg.
          ELSE.
            READ TABLE lt_sumlot ASSIGNING <fs_sumlot> WITH KEY charg = <fs_matrix>-charg.
            <fs_sumlot>-lfimg = <fs_sumlot>-lfimg + <fs_matrix>-lfimg.
          ENDIF.
        ENDLOOP.
        CLEAR: lw_txt_lot.
        LOOP AT lt_sumlot ASSIGNING <fs_sumlot>.
          lw_txt_lfi = <fs_sumlot>-lfimg.
          CONDENSE lw_txt_lfi.
          CONCATENATE '{"0":"' <fs_sumlot>-charg  '","1":"'  lw_txt_lfi '"}' INTO  <fs_agrup>-zlotes.
          CONCATENATE <fs_agrup>-zlotes lw_txt_lot INTO lw_txt_lot SEPARATED BY ','.
        ENDLOOP.
        lw_length = strlen( lw_txt_lot ).
        lw_length = lw_length - 1.
        <fs_agrup>-zlotes = lw_txt_lot+0(lw_length).
        lt_sumlot[] = lt_sum[].
      ENDLOOP.
****************************************
*   Venta INtitucional Agrupa registros
****************************************
    ELSEIF  ( pi_vbrk-vkorg = gc_vkorg3 ) OR ( ( pi_vbrk-vtweg = gc_vtweg3 ) OR ( pi_vbrk-vtweg = gc_vtweg4 ) ).
*     Agrupa x Material
      SORT lt_matrix_aux BY posmt matnr.
      LOOP AT lt_matrix_aux ASSIGNING  <fs_matrix>.
        ls_agrup-matnr = <fs_matrix>-matnr.
        ls_agrup-lfimg = <fs_matrix>-lfimg.
        ls_agrup-netwr = <fs_matrix>-netwr.
        COLLECT ls_agrup INTO lt_agrup.
      ENDLOOP.
*     Concatena Lotes
      LOOP AT lt_agrup ASSIGNING <fs_agrup>.
        CLEAR: lw_sum_lot.
        SORT lt_matrix_aux BY  matnr charg.
        LOOP AT lt_matrix_aux ASSIGNING <fs_matrix> WHERE matnr = <fs_agrup>-matnr.
          IF lw_charg <> <fs_matrix>-charg.
            ls_sumlot-charg = <fs_matrix>-charg.
            ls_sumlot-lfimg = <fs_matrix>-lfimg.
            APPEND ls_sumlot TO lt_sumlot.
            lw_charg = <fs_matrix>-charg.
          ELSE.
            READ TABLE lt_sumlot ASSIGNING <fs_sumlot> WITH KEY charg = <fs_matrix>-charg.
            <fs_sumlot>-lfimg = <fs_sumlot>-lfimg + <fs_matrix>-lfimg.
          ENDIF.
        ENDLOOP.
        CLEAR: lw_txt_lot.
        LOOP AT lt_sumlot ASSIGNING <fs_sumlot>.
          lw_txt_lfi = <fs_sumlot>-lfimg.
          CONDENSE lw_txt_lfi.
          CONCATENATE '{"0":"' <fs_sumlot>-charg  '","1":"' lw_txt_lfi '"}' INTO  <fs_agrup>-zlotes.
          CONCATENATE <fs_agrup>-zlotes lw_txt_lot INTO lw_txt_lot SEPARATED BY ','.
        ENDLOOP.
        lw_length = strlen( lw_txt_lot ).
        lw_length = lw_length - 1.
        <fs_agrup>-zlotes = lw_txt_lot+0(lw_length).
        SORT lt_matrix_aux BY  posmt matnr.
        READ TABLE lt_matrix_aux ASSIGNING <fs_matrix> WITH KEY matnr = <fs_agrup>-matnr.
        IF sy-subrc = 0.
          <fs_agrup>-posmt = <fs_matrix>-posmt.
        ENDIF.
        lt_sumlot[] = lt_sum[].
      ENDLOOP.
    ENDIF.

  ENDMETHOD.


  METHOD set_cabdet_res.

    DATA: lwa_cabecera_salida LIKE LINE OF pe_cab,
          lwa_detalle_salida  LIKE LINE OF pe_det,
          lv_true             TYPE         char01,
          lv_identifiresu     TYPE         zoses_docexpreca-zz_identifiresu,
          lv_nfila            TYPE         c LENGTH 3,
          lv_kwert            TYPE         konv-kwert,
          lt_vbrp             TYPE         ltt_vbrp,                        "I-WMR-050615
          ls_vbrk             TYPE         lty_vbrk,                        "I-WMR-230615
          ls_vbrp             TYPE         lty_vbrp,                        "I-WMR-050615
          lt_numeracion       TYPE         tt_numeracion.                   "I-WMR-010316

    DATA: l_serie  TYPE string,                                                   "I-WMR-190918-3000009765
          l_corre  TYPE string,                                                   "I-WMR-190918-3000009765
          l_sercor TYPE zostb_felog-zzt_numeracion.                               "I-WMR-190918-3000009765

    FIELD-SYMBOLS: <lfs_vbrk> LIKE LINE OF pi_vbrk,
                   <lfs_vbrp> LIKE LINE OF pi_vbrp.

    DATA: rl_identifiresu TYPE RANGE OF zosed_identifiresu,
          rs_identifiresu LIKE LINE OF  rl_identifiresu.

*    DATA: lr_kschl TYPE RANGE OF konv-kschl .  "E-150120-NTP-3000013600

*   Clases de Bolestas incluidas
    REFRESH ltr_fkart3.
    LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '9' AND zz_opcion02 = '1'.
      lwa_fkart-low = lwa_constfkart-fkart.
      lwa_fkart-sign = 'I'.
      lwa_fkart-option = 'EQ'.
      APPEND lwa_fkart TO ltr_fkart3.
    ENDLOOP.

*   Notas de Credito
    REFRESH ltr_fkart7.
    LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '9' AND zz_opcion02 = '2'.
      lwa_fkart-low = lwa_constfkart-fkart.
      lwa_fkart-sign = 'I'.
      lwa_fkart-option = 'EQ'.
      APPEND lwa_fkart TO ltr_fkart7.
    ENDLOOP.

*   Notas de Debito
    REFRESH ltr_fkart8.
    LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '9' AND zz_opcion02 = '3'.
      lwa_fkart-low = lwa_constfkart-fkart.
      lwa_fkart-sign = 'I'.
      lwa_fkart-option = 'EQ'.
      APPEND lwa_fkart TO ltr_fkart8.
    ENDLOOP.

*{  BEGIN OF DELETE WMR-050615
    ""*   Transferencia Gratuita Res.
    ""    REFRESH ltr_fkart.
    ""    LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '2' AND zz_opcion02 = ' '.
    ""      lwa_fkart-low = lwa_constfkart-fkart.
    ""      lwa_fkart-sign = 'I'.
    ""      lwa_fkart-option = 'EQ'.
    ""      APPEND lwa_fkart TO ltr_fkart.
    ""    ENDLOOP.
*}  END OF DELETE WMR-050615

*{E-150120-NTP-3000013600
*    REFRESH ltr_pstyv.
*    LOOP AT lt_constpstyv INTO lwa_constpstyv WHERE zz_opcion01 = '1'.
*      lwa_pstyv-low = lwa_constpstyv-pstyv.
*      lwa_pstyv-sign = 'I'.
*      lwa_pstyv-option = 'EQ'.
*      APPEND lwa_pstyv TO ltr_pstyv.
*    ENDLOOP.
*
**     Rango para Valor Operacion no Onerosa gratuita
*    REFRESH ltr_kschl.
*    LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '0' AND zz_opcion02 = ''.
*      lwa_kschl-low    = lwa_constakonv-kschl.
*      lwa_kschl-sign   = 'I'.
*      lwa_kschl-option = 'EQ'.
*      APPEND lwa_kschl TO lr_kschl.
*    ENDLOOP.
*}E-150120-NTP-3000013600

    LOOP AT pi_vbrk ASSIGNING <lfs_vbrk>.

      CLEAR lwa_cabecera_salida.

      split_xblnr( EXPORTING i_xblnr  = <lfs_vbrk>-xblnr                          "I-WMR-190918-3000009765
                   IMPORTING e_serie  = l_serie                                   "I-WMR-190918-3000009765
                             e_corre  = l_corre                                   "I-WMR-190918-3000009765
                             e_sercor = l_sercor ).                               "I-WMR-190918-3000009765

*     Verificar que se trate de una Boleta
*      IF <lfs_vbrk>-xblnr+4(1) NE gs_consextsun-zz_boleta.                        "E-WMR-190918-3000009765
      IF l_serie(1) NE gs_consextsun-zz_boleta.                                   "I-WMR-190918-3000009765
        CONTINUE.
      ENDIF.

      MOVE: gs_consextsun-zz_ncomercial TO lwa_cabecera_salida-zz_nempresa,
            gs_ubl-zz_verubl            TO lwa_cabecera_salida-zz_versiubl,
            gs_ubl-zz_verestrdoc        TO lwa_cabecera_salida-zz_versiestrudoc,
            <lfs_vbrk>-fkdat            TO lwa_cabecera_salida-zz_femision,        " Fecha de Emisión
            <lfs_vbrk>-vbeln            TO lwa_cabecera_salida-zz_nrodocsap,       " Documento SAP
*            <lfs_vbrk>-xblnr+4           TO lwa_cabecera_salida-zz_numeracion,      " Numeración    "E-WMR-190918-3000009765
            l_sercor                    TO lwa_cabecera_salida-zz_numeracion,      " Numeración    "I-WMR-190918-3000009765
            sy-datum                    TO lwa_cabecera_salida-zz_fecgenresume.    " Fecha de Creción del registro

*{  BEGIN OF INSERT WMR-200715
      lwa_cabecera_salida-bukrs = <lfs_vbrk>-bukrs.
*}  END OF INSERT WMR-200715

*     Número de RUC
      READ TABLE lt_t001z INTO lwa_t001z WITH KEY bukrs = <lfs_vbrk>-bukrs.
      IF sy-subrc = 0.
        lwa_cabecera_salida-zz_nroruc = lwa_t001z-paval.
      ENDIF.

*     Identificador del Resumen
*      CONCATENATE 'RC-' <lfs_vbrk>-fkdat INTO lwa_cabecera_salida-zz_identifiresu.
      CONCATENATE 'RC-' sy-datum INTO lwa_cabecera_salida-zz_identifiresu.
      CONCATENATE lwa_cabecera_salida-zz_identifiresu '*' INTO lv_identifiresu.

      rs_identifiresu-sign   = 'I'.
      rs_identifiresu-option = 'CP'.
      rs_identifiresu-low    = lv_identifiresu.
      APPEND rs_identifiresu TO rl_identifiresu.

*      IF pi_repro = '1'.
*        SELECT MAX( zzt_identifiresu )
*          INTO lv_identifiresu
*          FROM zostb_rblog
*          WHERE    zzt_identifiresu IN rl_identifiresu AND "zzt_femision      = pi_fecfac       AND
*                   zzt_status_cdr   IN  ltr_status .
*        lwa_cabecera_salida-zz_identifiresu = lv_identifiresu.
*      ELSE.
*{  BEGIN OF REPLACE WMR-010316
      ""*{  BEGIN OF REPLACE WMR-151015
      ""      ""      SELECT MAX( zzt_identifiresu )
      ""      ""        INTO lv_identifiresu
      ""      ""        FROM zostb_rblog
      ""      ""        WHERE bukrs   EQ <lfs_vbrk>-bukrs                                       "I-WMR-200715
      ""      ""          AND zzt_identifiresu IN rl_identifiresu AND   "zzt_femision      = pi_fecfac       AND
      ""      ""              NOT ( zzt_status_cdr   IN  ltr_status ).
      ""      SELECT MAX( zzt_identifiresu )
      ""        INTO lv_identifiresu
      ""        FROM zostb_rblog
      ""        WHERE bukrs            EQ <lfs_vbrk>-bukrs
      ""          AND zzt_identifiresu IN rl_identifiresu.
      ""*}  END OF REPLACE WMR-151015

      ""      IF sy-subrc NE 0 OR lv_identifiresu IS INITIAL.
      ""        lv_nfila = 0.
      ""      ELSE.
      ""        MOVE lv_identifiresu+12(3) TO lv_nfila.
      ""      ENDIF.

      CLEAR lt_numeracion.
      SELECT bukrs zzt_identifiresu
        INTO TABLE lt_numeracion
        FROM zostb_rblog
        WHERE bukrs            EQ <lfs_vbrk>-bukrs
          AND zzt_identifiresu IN rl_identifiresu.

      lv_nfila = get_last_identify( lt_numeracion ).
*}  END OF REPLACE WMR-010316

      ADD 1 TO lv_nfila.
      CONDENSE lv_nfila.
      CONCATENATE 'RC-' sy-datum '-' lv_nfila INTO lwa_cabecera_salida-zz_identifiresu.
*      ENDIF.

*{  BEGIN OF INSERT WMR-050615
      " Determinar Transferencia Gratuita
      CLEAR lt_vbrp.
      CLEAR ls_vbrk.
      LOOP AT pi_vbrp INTO ls_vbrp WHERE vbeln = <lfs_vbrk>-vbeln.
        APPEND ls_vbrp TO lt_vbrp.
      ENDLOOP.
      ls_vbrk = <lfs_vbrk>.
      ls_vbrk-zz_check_tg = determine_free_transfer(           is_vbrk = <lfs_vbrk>
                                                               it_vbrp = lt_vbrp ).
*}  END OF INSERT WMR-050615

*     Lee Posiciones
*{  BEGIN OF REPLACE WMR-250615
      ""      LOOP AT pi_vbrp ASSIGNING <lfs_vbrp> WHERE vbeln = <lfs_vbrk>-vbeln.
      LOOP AT lt_vbrp ASSIGNING <lfs_vbrp>.
*}  END OF REPLACE WMR-250615

        CLEAR: lv_true, lwa_detalle_salida.

        MOVE: <lfs_vbrp>-vbeln      TO lwa_detalle_salida-zz_nrodocsap,     " Documento SAP
*{  BEGIN OF REPLACE WMR-190918-3000009765
*              <lfs_vbrk>-xblnr+4    TO lwa_detalle_salida-zz_numeracion,    " N° SUNAT
*              <lfs_vbrk>-xblnr+4(4) TO lwa_detalle_salida-zz_serie,         " Número de serie de los documentos
*              <lfs_vbrk>-xblnr+9(7) TO lwa_detalle_salida-zz_correla_low,   " Número  correlativo  del  documento  de  inicio  del  rango  informado  para  una serie.
*              <lfs_vbrk>-xblnr+9(7) TO lwa_detalle_salida-zz_correla_high.  " Número correlativo del documento de fin dentro de un rango informado
              l_sercor              TO lwa_detalle_salida-zz_numeracion,    " N° SUNAT
              l_serie               TO lwa_detalle_salida-zz_serie,         " Número de serie de los documentos
              l_corre               TO lwa_detalle_salida-zz_correla_low,   " Número  correlativo  del  documento  de  inicio  del  rango  informado  para  una serie.
              l_corre               TO lwa_detalle_salida-zz_correla_high.  " Número correlativo del documento de fin dentro de un rango informado
*}  END OF REPLACE WMR-190918-3000009765

*       ID Resumen Detalle
        lwa_detalle_salida-zz_identiresum = lwa_cabecera_salida-zz_identifiresu.
*{  BEGIN OF INSERT WMR-200715
        lwa_detalle_salida-bukrs = <lfs_vbrk>-bukrs.
*}  END OF INSERT WMR-200715

*       Tipo de documento
        IF ltr_fkart3[] IS NOT INITIAL.
          IF <lfs_vbrk>-fkart IN ltr_fkart3[].
            lwa_detalle_salida-zz_tipodoc = gs_consextsun-zz_tdocboleta.
            lv_true = abap_true.
          ENDIF.
        ENDIF.
        IF lv_true IS INITIAL.
          IF ltr_fkart7[] IS NOT INITIAL.
            IF <lfs_vbrk>-fkart IN ltr_fkart7[].
              lwa_detalle_salida-zz_tipodoc = gs_consextsun-zz_tdocnotacre.
              lv_true = abap_true.
            ENDIF.
          ENDIF.
        ENDIF.
        IF lv_true IS INITIAL.
          IF ltr_fkart8[] IS NOT INITIAL.
            IF <lfs_vbrk>-fkart IN ltr_fkart8[].
              lwa_detalle_salida-zz_tipodoc = gs_consextsun-zz_tdocnotadeb.
              lv_true = abap_true.
            ENDIF.
          ENDIF.
        ENDIF.

        CHECK lv_true EQ abap_true.

*{  BEGIN OF REPLACE WMR-080615
        ""        IF <lfs_vbrp>-taxm1 = '1'.
        IF <lfs_vbrp>-afect_igv = gc_afecto_igv.
*}  END OF REPLACE WMR-080615

*         Total valor de venta operaciones gravadas
          IF <lfs_vbrk>-waerk NE gc_waers_pen.
            lv_kwert = <lfs_vbrp>-netwr * <lfs_vbrk>-kurrf.
          ELSE.
            lv_kwert = <lfs_vbrp>-netwr.
          ENDIF.
          ADD lv_kwert TO lwa_detalle_salida-zz_totvvopgra.

*         Total IGV
          REFRESH ltr_kschl.
          LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '8' AND zz_opcion02 = ''.
            lwa_kschl-low = lwa_constakonv-kschl.
            lwa_kschl-sign = 'I'.
            lwa_kschl-option = 'EQ'.
            APPEND lwa_kschl TO ltr_kschl.
          ENDLOOP.
          IF ltr_kschl[] IS NOT INITIAL.
            LOOP AT lt_konv INTO lwa_konv WHERE knumv EQ <lfs_vbrk>-knumv
                                            AND kposn EQ <lfs_vbrp>-posnr
                                            AND kschl IN ltr_kschl
                                            AND kstat EQ space
                                            AND kinak EQ space.
              IF <lfs_vbrk>-waerk NE gc_waers_pen.
                lwa_konv-kwert = lwa_konv-kwert * <lfs_vbrk>-kurrf.
              ENDIF.
              ADD lwa_konv-kwert TO lwa_detalle_salida-zz_sumaigv.
            ENDLOOP.
          ENDIF.

*{  BEGIN OF REPLACE WMR-080615
          ""        ELSEIF <lfs_vbrp>-taxm1 = '0'.
        ELSEIF ( <lfs_vbrp>-afect_igv EQ gc_inafec_igv OR <lfs_vbrp>-afect_igv EQ gc_exoner_igv ).
*}  END OF REPLACE WMR-080615

*         Total valor de venta operaciones exoneradas e inafectas
          READ TABLE lt_marc INTO lwa_marc WITH KEY matnr = <lfs_vbrp>-matnr
                                                    werks = <lfs_vbrp>-werks.
          IF sy-subrc = 0.
*{  BEGIN OF REPLACE WMR-050815
            ""            IF <lfs_vbrk>-waerk NE gc_waers_pen.
            ""              <lfs_vbrp>-netwr = <lfs_vbrp>-netwr * <lfs_vbrk>-kurrf.
            ""            ENDIF.
            ""*{  BEGIN OF REPLACE WMR-080615
            ""            ""            IF lwa_marc-stawn IN ltr_exonera[].
            ""            ""              ADD <lfs_vbrp>-netwr TO lwa_detalle_salida-zz_totvvopexo.
            ""            ""            ELSE.
            ""            ""              ADD <lfs_vbrp>-netwr TO lwa_detalle_salida-zz_totvvopinaf.
            ""            ""            ENDIF.
            ""            CASE <lfs_vbrp>-afect_igv.
            ""              WHEN gc_exoner_igv.
            ""                ADD <lfs_vbrp>-netwr TO lwa_detalle_salida-zz_totvvopexo.
            ""              WHEN gc_inafec_igv.
            ""                ADD <lfs_vbrp>-netwr TO lwa_detalle_salida-zz_totvvopinaf.
            ""            ENDCASE.
            ""*}  END OF REPLACE WMR-080615
            IF <lfs_vbrk>-waerk NE gc_waers_pen.
              lv_kwert = <lfs_vbrp>-netwr * <lfs_vbrk>-kurrf.
            ELSE.
              lv_kwert = <lfs_vbrp>-netwr.
            ENDIF.
            CASE <lfs_vbrp>-afect_igv.
              WHEN gc_exoner_igv. " Total de Operaciones Exoneradas
                ADD lv_kwert TO lwa_detalle_salida-zz_totvvopexo.
              WHEN gc_inafec_igv. " Total de Operaciones Inafectas
                ADD lv_kwert TO lwa_detalle_salida-zz_totvvopinaf.
            ENDCASE.
*}  END OF REPLACE WMR-050815
          ENDIF.

        ENDIF.

*       Sumatoria ISC (No aplica para AUSTRAL)
        REFRESH ltr_kschl.
        LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '1' AND zz_opcion02 = '3'.
          lwa_kschl-low = lwa_constakonv-kschl.
          lwa_kschl-sign = 'I'.
          lwa_kschl-option = 'EQ'.
          APPEND lwa_kschl TO ltr_kschl.
        ENDLOOP.
        IF ltr_kschl[] IS NOT INITIAL.
          LOOP AT lt_konv INTO lwa_konv WHERE knumv EQ <lfs_vbrk>-knumv
                                          AND kstat EQ space
                                          AND kinak EQ space.
            IF lwa_konv-kschl IN ltr_kschl[].
              IF <lfs_vbrk>-waerk NE gc_waers_pen.
                lwa_konv-kwert = lwa_konv-kwert * <lfs_vbrk>-kurrf.
              ENDIF.
              ADD lwa_konv-kwert TO lwa_detalle_salida-zz_sumaisc.
            ENDIF.
          ENDLOOP.
        ENDIF.

*       Importe Total Venta
        lwa_detalle_salida-zz_imptotvent = lwa_detalle_salida-zz_sumaigv     + lwa_detalle_salida-zz_totvvopexo + lwa_detalle_salida-zz_totvvopgra +
                                           lwa_detalle_salida-zz_totvvopinaf + lwa_detalle_salida-zz_sumaisc.

*       Transferencia gratuita / Total operaciones gratuitas
*{  BEGIN OF REPLACE WMR-050615
        ""        IF <lfs_vbrk>-fkart IN ltr_fkart[] AND ltr_fkart[] IS NOT INITIAL.
        IF ls_vbrk-zz_check_tg EQ abap_true.
*}  END OF REPLACE WMR-050615
          lwa_detalle_salida-zz_sumaigv    = 0. " Si es transferencia gratuita, limpio IGV.
          lwa_detalle_salida-zz_imptotvent = 0. " Si es transferencia gratuita, limpio MONTO TOTAL.
          lwa_detalle_salida-zz_totvvopgra = 0. " Operaciones Gravadas
*{  BEGIN OF INSERT WMR-050815
          lwa_detalle_salida-zz_totvvopexo = 0. " Operaciones Exoneradas
          lwa_detalle_salida-zz_totvvopinaf = 0.  " Operaciones Inafectas
*}  END OF INSERT WMR-050815
*         Total operaciones gratuitas
*{  BEGIN OF REPLACE WMR-150715
          ""          IF ( ltr_pstyv[] IS NOT INITIAL ) AND ( <lfs_vbrp>-pstyv IN ltr_pstyv ).
          ""            IF ( lr_kschl[] IS NOT INITIAL ).
          ""              CLEAR lv_kwert.
          ""              LOOP AT lt_konv INTO lwa_konv WHERE knumv EQ <lfs_vbrk>-knumv
          ""                                              AND kposn EQ <lfs_vbrp>-posnr
          ""                                              AND kschl IN lr_kschl.
          ""                lv_kwert = lv_kwert +  lwa_konv-kwert.
          ""              ENDLOOP.
          ""            ENDIF.

          ""            IF <lfs_vbrk>-waerk NE gc_waers_pen.
          ""              lv_kwert = lv_kwert * <lfs_vbrk>-kurrf.
          ""            ENDIF.
          ""            ADD lv_kwert TO lwa_detalle_salida-zz_totvvopgrat.
          ""          ENDIF.

          CLEAR lv_kwert.
          lv_kwert = <lfs_vbrp>-netwr.
          IF <lfs_vbrk>-waerk NE gc_waers_pen.
            lv_kwert = lv_kwert * <lfs_vbrk>-kurrf.
          ENDIF.
          ADD lv_kwert TO lwa_detalle_salida-zz_totvvopgrat.
*}  END OF REPLACE WMR-150715
        ENDIF.
        lwa_detalle_salida-zz_opergrathomo = '05'. "Código de tipo de valor venta

*       Moneda
        lwa_detalle_salida-zz_waerk = gc_waers_pen.




*       Adicionar registro detalle
        COLLECT lwa_detalle_salida INTO pe_det.

      ENDLOOP.

      CHECK lv_true = abap_true.

*     Adicionar registro Cabecera
      COLLECT lwa_cabecera_salida INTO pe_cab.

    ENDLOOP.

*   Ordenar datos
    SORT pe_det BY zz_tipodoc zz_serie zz_correla_low.

  ENDMETHOD.                    "SET_CAB_DE_RES


  METHOD set_cabdet_res_v2.

    TYPES: BEGIN OF ty_vbrk,
             vbeln TYPE vbrk-vbeln,
             fksto TYPE vbrk-fksto,                                           "I-WMR-100118-3000008865
           END OF ty_vbrk.

    DATA: lth_vbrk  TYPE HASHED TABLE OF ty_vbrk WITH UNIQUE KEY vbeln,
*{  BEGIN OF INSERT WMR-100118-3000008865: Se envián anulaciones de Boletas
          lth_felog TYPE HASHED TABLE OF zostb_felog WITH UNIQUE KEY zzt_nrodocsap zzt_numeracion,
          lt_felog  TYPE STANDARD TABLE OF zostb_felog.
*}  END OF INSERT WMR-100118-3000008865: Se envián anulaciones de Boletas

    DATA: lt_expca      TYPE TABLE OF zostb_docexposca,
          lt_expde      TYPE TABLE OF zostb_docexposde,
          lt_expca2     TYPE TABLE OF zostb_docexposc2,
          lt_numeracion TYPE tt_numeracion,                                    "I-WMR-010316

          ls_expca      TYPE zostb_docexposca,
          ls_expde      TYPE zostb_docexposde,
          ls_expca2     TYPE zostb_docexposc2,
*{  BEGIN OF INSERT WMR-100118-3000008865: Se envián anulaciones de Boletas
          ls_vbrk       TYPE ty_vbrk,
          ls_felog      TYPE zostb_felog,
*}  END OF INSERT WMR-100118-3000008865: Se envián anulaciones de Boletas

          ls_cab        LIKE LINE OF pe_cab,
          ls_det        LIKE LINE OF pe_det,
          ls_const      LIKE LINE OF lt_const.

    DATA: lr_identifiresu TYPE RANGE OF zosed_identifiresu,
          lv_identifiresu TYPE zoses_docexpreca-zz_identifiresu,
          lv_nfila        TYPE char03,
          l_string        TYPE string,
          l_tabix         TYPE i,
*          l_fechalimite   TYPE i.
          l_fechalimite   TYPE sy-datum.                                        "I-PBM030523-3000021813


*{I-3000011712-NTP250419
* 0. Constantes
    READ TABLE lt_const INTO ls_const WITH KEY campo = 'FECRES'.
    IF sy-subrc = 0.
      TRY.
          l_fechalimite = sy-datum - ls_const-valor1.
        CATCH cx_root.                                   "#EC CATCH_ALL
          l_fechalimite = sy-datum - 7.
      ENDTRY.
    ENDIF.
*}I-3000011712-NTP250419


* 1. Obtiene boletas informadas hasta con (7) dias pasados
    SELECT * INTO TABLE lt_expca
      FROM zostb_docexposca
      WHERE bukrs = pi_bukrs
        AND zz_numeracion LIKE 'B%'
        AND zz_femision = pi_fkdat. "vbrk-fkdat

    "Filtro de facturas eliminadas
    IF lt_expca[] IS NOT INITIAL.
      SELECT vbeln
             fksto                                                            "I-WMR-100118-3000008865
        INTO TABLE lth_vbrk
        FROM vbrk
        FOR ALL ENTRIES IN lt_expca
        WHERE vbeln = lt_expca-zz_nrodocsap.
*{  BEGIN OF DELETE WMR-100118-3000008865: Se envián anulaciones de Boletas
      ""          AND fksto = space.
*}  END OF DELETE WMR-100118-3000008865: Se envián anulaciones de Boletas

*{  BEGIN OF INSERT WMR-100118-3000008865: Se envián anulaciones de Boletas
*      SELECT * INTO TABLE lth_felog
      SELECT * INTO TABLE lt_felog
        FROM zostb_felog
        FOR ALL ENTRIES IN lt_expca
        WHERE zzt_nrodocsap  = lt_expca-zz_nrodocsap
          AND zzt_numeracion = lt_expca-zz_numeracion.

      SORT lt_felog BY zzt_nrodocsap zzt_numeracion.
      DELETE ADJACENT DUPLICATES FROM lt_felog COMPARING zzt_nrodocsap zzt_numeracion.
      lth_felog[] = lt_felog[].
      FREE lt_felog.
*}  END OF INSERT WMR-100118-3000008865: Se envián anulaciones de Boletas

      LOOP AT lt_expca INTO ls_expca.
        l_tabix = sy-tabix.
*{  BEGIN OF REPLACE WMR-100118-3000008865: Se envián anulaciones de Boletas
        ""        READ TABLE lth_vbrk WITH TABLE KEY vbeln = ls_expca-zz_nrodocsap TRANSPORTING NO FIELDS.
        ""        IF sy-subrc <> 0.
        ""          DELETE lt_expca INDEX l_tabix.
        ""        ENDIF.

        READ TABLE lth_vbrk INTO ls_vbrk WITH TABLE KEY vbeln = ls_expca-zz_nrodocsap.
        IF sy-subrc <> 0.
          DELETE lt_expca INDEX l_tabix.  CONTINUE.
        ENDIF.

        READ TABLE lth_felog INTO ls_felog
             WITH TABLE KEY zzt_nrodocsap  = ls_expca-zz_nrodocsap
                            zzt_numeracion = ls_expca-zz_numeracion.
        IF sy-subrc <> 0.
          DELETE lt_expca INDEX l_tabix.  CONTINUE.
        ENDIF.

*{I-3000011744-NTP300419
        CASE gs_process-license.
          WHEN '0021061097'. "cmh
            IF ls_vbrk-fksto EQ abap_false.
              "Vigente - Valida fecha de emisión
              IF ls_expca-zz_femision < l_fechalimite.
                DELETE lt_expca INDEX l_tabix.  CONTINUE.
              ENDIF.
            ELSE.
              "Anulado - Valida fecha de recepción
              IF ls_felog-zzt_fecres < l_fechalimite.
                DELETE lt_expca INDEX l_tabix.  CONTINUE.
              ENDIF.
            ENDIF.
          WHEN OTHERS.
            "Vigente y anulado - Valida fecha de emisión
            IF ls_expca-zz_femision < l_fechalimite.
              DELETE lt_expca INDEX l_tabix.  CONTINUE.
            ENDIF.
        ENDCASE.
*}I-3000011744-NTP300419

        IF ls_vbrk-fksto EQ abap_false.
          " Si no está anulado, no enviar
          CASE ls_felog-zzt_status_cdr.
            WHEN gc_statuscdr_0   "Error de homologación      "I-3000011120-NTP150319
              OR gc_statuscdr_1   "Aceptado
              OR gc_statuscdr_4   "Aceptado con observaciones
              OR gc_statuscdr_7   "Error de conexión          "I-3000011101-NTP150319
              OR gc_statuscdr_9.  "Cancelado
              DELETE lt_expca INDEX l_tabix.  CONTINUE.
            WHEN OTHERS.
          ENDCASE.
        ELSE.
          " Si está anulado:
          CASE ls_felog-zzt_status_cdr.
            WHEN gc_statuscdr_8   " No volver a enviar si ya está dado de baja
              OR gc_statuscdr_9.
              DELETE lt_expca INDEX l_tabix.  CONTINUE.
            WHEN gc_statuscdr_1   " Sólo enviar si Boleta ha sido previamente aceptada
              OR gc_statuscdr_4.
            WHEN OTHERS.
              DELETE lt_expca INDEX l_tabix.  CONTINUE.
          ENDCASE.
        ENDIF.
*}  END OF INSERT WMR-100118-3000008865: Se envián anulaciones de Boletas
      ENDLOOP.
    ENDIF.

    IF lt_expca[] IS INITIAL.
      MESSAGE TEXT-e32 TYPE 'E' RAISING error.
    ENDIF.

    "Datos adicionales
    SELECT * INTO TABLE lt_expca2
      FROM zostb_docexposc2
      FOR ALL ENTRIES IN lt_expca
      WHERE bukrs         = lt_expca-bukrs
        AND zz_nrodocsap  = lt_expca-zz_nrodocsap
        AND zz_numeracion = lt_expca-zz_numeracion.
    ##SELECT_FAE_WITH_LOB[!ZZ_AMOIWEN]
    ##SELECT_FAE_WITH_LOB[!ZZ_TEXT_OBS]
    ##SELECT_FAE_WITH_LOB[!ZZ_TEXT_CTABANK]

* 2. Construir resumen de boletas

* 2.1 Cabecera
    READ TABLE lt_expca INTO ls_expca INDEX 1.
    IF sy-subrc = 0.

      "Datos adicionales
      CLEAR ls_expca2.
      READ TABLE lt_expca2 INTO ls_expca2 WITH KEY bukrs = ls_expca-bukrs
                                                   zz_nrodocsap = ls_expca-zz_nrodocsap
                                                   zz_numeracion = ls_expca-zz_numeracion.

      "Identificador de Resumen
      CONCATENATE 'ICP' 'RC-' sy-datum '*' INTO l_string.
      APPEND l_string TO lr_identifiresu.

*{  BEGIN OF REPLACE WMR-010316
      ""    SELECT MAX( zzt_identifiresu )
      ""      INTO lv_identifiresu
      ""      FROM zostb_rblog
      ""      WHERE zzt_identifiresu IN lr_identifiresu.

      ""    IF sy-subrc = 0.
      ""      MOVE lv_identifiresu+12(3) TO lv_nfila.
      ""      ADD 1 TO lv_nfila.
      ""      CONDENSE lv_nfila.
      ""    ELSE.
      ""      lv_nfila = 1.
      ""    ENDIF.

      CLEAR lt_numeracion.
      SELECT bukrs zzt_identifiresu
        INTO TABLE lt_numeracion
        FROM zostb_rblog
        WHERE bukrs            EQ ls_expca-bukrs
          AND zzt_identifiresu IN lr_identifiresu.

      lv_nfila = get_last_identify( lt_numeracion ).
      ADD 1 TO lv_nfila.
      CONDENSE lv_nfila.
*}  END OF REPLACE WMR-010316

      CONCATENATE 'RC-' sy-datum '-' lv_nfila INTO ls_cab-zz_identifiresu.

      ls_cab-bukrs            = ls_expca-bukrs.
      ls_cab-zz_fecgenresume  = sy-datum.
      ls_cab-zz_femision      = ls_expca-zz_femision.
*{  BEGIN OF REPLACE WMR-271217-3000008865
      ""      ls_cab-zz_nempresa      = ls_expca2-zz_nempreex.
      ls_cab-zz_nempresa      = gs_consextsun-zz_ncomercial.
*}  END OF REPLACE WMR-271217-3000008865
      ls_cab-zz_nroruc        = ls_expca-zz_nroruc.
      ls_cab-zz_firdigital    = ls_expca-zz_fdigital.
*{  BEGIN OF REPLACE WMR-271217-3000008865
      ""      ls_cab-zz_versiubl      = ls_expca-zz_verubl.
      ""      ls_cab-zz_versiestrudoc = ls_expca-zz_verestrdoc.
*      ls_cab-zz_versiubl      = gs_ubl-zz_verubl. "E-NTP271218-3000010993
      ls_cab-zz_versiubl      = gs_ubl-zz_verubl.         "I-NTP271218-3000010993
      ls_cab-zz_versiestrudoc = gs_ubl-zz_verestrdoc.     "1.1
*}  END OF REPLACE WMR-271217-3000008865
      ls_cab-zz_versivigen    = gs_ubl-zz_versivigen.
      APPEND ls_cab TO pe_cab.
    ENDIF.


* 2.2 Detalle
    LOOP AT lt_expca INTO ls_expca.
*{  BEGIN OF INSERT WMR-271217-3000008865
      ls_det-bukrs           = ls_expca-bukrs.
*}  END OF INSERT WMR-271217-3000008865
      ls_det-zz_identifiresu = ls_cab-zz_identifiresu.
      ls_det-zz_nrofila      = sy-tabix.
      ls_det-zz_tipodoc      = ls_expca-zz_tipodoc.
      ls_det-zz_serie        = ls_expca-zz_numeracion.

      ls_det-zz_nrodociadq   = ls_expca-zz_nrodociadq.
*{  BEGIN OF INSERT WMR-271217-3000008865
      ls_det-zz_nrodociadq_h = ls_expca-zz_tipdociadq.
*}  END OF INSERT WMR-271217-3000008865
      ls_det-zz_nrodocmodif  = ls_expca-zz_tipdocmodif.
      ls_det-zz_nrodocmodif_h = ls_expca-zz_tipdocmodifho.                  "I-NTP-100616

*{  BEGIN OF DELETE WMR-100118-3000008865
      ""      ls_det-zz_estadoitem   = 1.
*{  BEGIN OF DELETE WMR-100118-3000008865

      ls_det-zz_totvvopgra   = ls_expca-zz_totvvopgra.
      ls_det-zz_totvvopexo   = ls_expca-zz_totvvopexo.
      ls_det-zz_totvvopinaf  = ls_expca-zz_totvvopinaf.
      ls_det-zz_totvalveno   = ls_expca-zz_totvalveno.

      ls_det-zz_sumaotrcargos = ls_expca-zz_sumaotrcargos.
      ls_det-zz_sumaisc      = ls_expca-zz_sumaisc.
      ls_det-zz_sumaigv      = ls_expca-zz_sumaigv.
      ls_det-zz_sumaotrtri   = ls_expca-zz_sumaotrtri.

      ls_det-zz_imptotvent   = ls_expca-zz_imptotvent.
      ls_det-zz_waerk        = ls_expca-zz_moneda.

*{  BEGIN OF INSERT WMR-100118-3000008865: Estado del Item
      READ TABLE lth_vbrk INTO ls_vbrk WITH TABLE KEY vbeln = ls_expca-zz_nrodocsap.
      IF sy-subrc = 0.
        READ TABLE lth_felog INTO ls_felog
             WITH TABLE KEY zzt_nrodocsap  = ls_expca-zz_nrodocsap
                            zzt_numeracion = ls_expca-zz_numeracion.
        IF sy-subrc = 0.
          IF ls_vbrk-fksto EQ abap_false.
            " Si no está anulado, no enviar
            CASE ls_felog-zzt_status_cdr.
              WHEN gc_statuscdr_0   "Error de homologación      "I-3000011120-NTP150319
                OR gc_statuscdr_1   "Aceptado
                OR gc_statuscdr_4   "Aceptado con observaciones
                OR gc_statuscdr_7   "Error de conexión          "I-3000011101-NTP150319
                OR gc_statuscdr_9.  "Cancelado
              WHEN OTHERS.
                ls_det-zz_estadoitem   = 1. " Adicionar
            ENDCASE.
          ELSE.
            " Si está anulado:
            CASE ls_felog-zzt_status_cdr.
              WHEN gc_statuscdr_8   " No volver a enviar si ya está dado de baja o cancelado
                OR gc_statuscdr_9.
              WHEN gc_statuscdr_1   " Sólo enviar si Boleta ha sido previamente aceptada
                OR gc_statuscdr_4.
                ls_det-zz_estadoitem   = 3. " Anulado
              WHEN OTHERS.
            ENDCASE.
          ENDIF.
        ENDIF.
      ENDIF.
*}  END OF INSERT WMR-100118-3000008865: Estado del Item

*{  BEGIN OF INSERT WMR-150218-3000009072: No pintar N°doc identidad adquirente
      READ TABLE lt_expca2 INTO ls_expca2 WITH KEY bukrs = ls_expca-bukrs
                                                   zz_nrodocsap = ls_expca-zz_nrodocsap
                                                   zz_numeracion = ls_expca-zz_numeracion.
      IF sy-subrc = 0.
        ls_det-zz_bol_npnad = ls_expca2-zz_bol_npnad.
      ENDIF.
*}  END OF INSERT WMR-150218-3000009072: No pintar N°doc identidad adquirente

      APPEND ls_det TO pe_det.
    ENDLOOP.

  ENDMETHOD.


  METHOD set_header_expcertif.

    DATA: ls_vbrp  TYPE lty_vbrp,
          ls_t001w TYPE t001w,
          ls_adrc  TYPE adrc,
          ls_const LIKE LINE OF lt_const.

    CLEAR es_certif.

    CASE gw_license.
      WHEN '0020311006'   " AIB
        OR '0020863116'.  " AIB CLOUD

        LOOP AT it_vbrp INTO ls_vbrp WHERE vbeln EQ is_vbrk-vbeln.
          EXIT.
        ENDLOOP.
        CHECK sy-subrc EQ 0.

        " Obtener Dirección de Centro
        SELECT SINGLE werks adrnr
          INTO CORRESPONDING FIELDS OF ls_t001w
          FROM t001w
*          WHERE werks EQ ls_vbrp-lgort.  "E-NTP270618-3000010128
          WHERE werks EQ ls_vbrp-werks.   "I-NTP270618-3000010128
        CHECK sy-subrc EQ 0.

        SELECT SINGLE addrnumber date_from nation sort1 sort2
          INTO CORRESPONDING FIELDS OF ls_adrc
          FROM adrc
          WHERE addrnumber EQ ls_t001w-adrnr.
        CHECK sy-subrc EQ 0.

        IF ls_adrc-sort2 IS NOT INITIAL.
          CASE is_vbrk-land1_vbrk.
            WHEN 'US'.
*{  BEGIN OF REPLACE WMR-110117-3000006381
              ""            CASE ls_adrc-sort1.
              ""              WHEN 'PLANTA SUR'.
              ""                es_certif-zz_certif_fda = 'FDA Register: 19976402130'.
              ""              WHEN 'PLANTA NORTE'.
              ""                es_certif-zz_certif_fda = 'FDA Register: 13475461390'.
              ""            ENDCASE.

              READ TABLE lt_const INTO ls_const
                   WITH KEY campo  = 'FDA'
                            valor1 = ls_adrc-sort1.
              IF sy-subrc EQ 0.
                CONCATENATE 'FDA Register:' ls_const-valor2 INTO es_certif-zz_certif_fda SEPARATED BY space.
              ENDIF.
*}  END OF REPLACE WMR-110117-3000006381

              CONCATENATE 'FCE:' ls_adrc-sort2
                INTO es_certif-zz_certif_fce SEPARATED BY space.
          ENDCASE.
        ENDIF.

    ENDCASE.

  ENDMETHOD.


  METHOD set_header_texts.

    TYPES: BEGIN OF ty_struct,
             value01 TYPE string,
             value02 TYPE string,
             value03 TYPE string,
           END OF ty_struct.

    TYPES: BEGIN OF ty_vttp.
        INCLUDE TYPE vttp.
    TYPES: objkey TYPE vevw-objkey,
           END OF ty_vttp.

    DATA: lt_constants   TYPE STANDARD TABLE OF zostb_const_fe,
          lt_constants1  TYPE STANDARD TABLE OF zostb_const_fe,
          lt_with_item   TYPE STANDARD TABLE OF lty_with_item,
          lt_vbrp        TYPE ltt_vbrp,
          lt_vttp        TYPE STANDARD TABLE OF ty_vttp,
          lt_vevw        TYPE STANDARD TABLE OF vevw,
          lt_vekp        TYPE STANDARD TABLE OF vekp,

          ls_vbrk        TYPE  lty_vbrk,
          ls_header_text TYPE  lty_header_texts,
          ls_constants   TYPE  zostb_const_fe,
          ls_constants1  TYPE  zostb_const_fe,
          ls_struct      TYPE  ty_struct,
          ls_with_item   TYPE  lty_with_item,
          ls_vekp        TYPE  vekp,
          ls_kna1        LIKE LINE OF lt_kna1,                                "I-WMR-040216
          ls_tcurt       TYPE  zostb_tcurt,                                       "I-WMR-271118-3000009765
          ls_thead       TYPE thead,                                              "I-WMR-01042020-3000014097

          lw_position    TYPE  zostb_docexpostc-zz_nroposicion,
          l_perc_ret     TYPE  vbrp-netwr,                                        "I-WMR-271118-3000009765
          l_porcentaje   TYPE  string,                                            "I-WMR-271118-3000009765
          l_base         TYPE  string,                                            "I-WMR-271118-3000009765
          l_retencion    TYPE  string,                                            "I-WMR-271118-3000009765
          l_glosa        TYPE  string.                                            "I-WMR-271118-3000009765

    DATA: select   TYPE TABLE OF edpline,
          sublist  TYPE edpline,
          from     TYPE string,
          where    TYPE string,
          lo_error TYPE REF TO cx_root.

    DATA: lt_columns TYPE  lvc_t_fcat,
          lo_table   TYPE REF TO data,
          lo_line    TYPE REF TO data.

    FIELD-SYMBOLS:
      <fs_table> TYPE ANY TABLE,
      <fs_line>  TYPE any,
      <fs_vttp>  TYPE ty_vttp.

    LOOP AT it_vbrk INTO ls_vbrk.
*  *********************************************************************
      " Inicio: Texto Detracciones
*  *********************************************************************
      CASE gw_license.
        WHEN '0020316164'. "Modasa
          IF ls_vbrk-zz_detra IS NOT INITIAL.
            ADD 1 TO lw_position.
            CLEAR ls_header_text.
            ls_header_text-zz_nrodocsap   = ls_vbrk-vbeln.
            ls_header_text-zz_numeracion  = ls_vbrk-zz_numeracion.
            ls_header_text-zz_nroposicion = lw_position.
            READ TABLE lt_cata15 INTO lwa_cata15
                 WITH KEY zz_codigo_sunat = '3001'.
            IF sy-subrc EQ 0.
              ls_header_text-zz_text_head = lwa_cata15-zz_desc_cod_suna.
            ENDIF.
            APPEND ls_header_text TO es_head_txt-t_text_header.
          ENDIF.
        WHEN '0020744072'.  " Medrock
          CLEAR lt_with_item.
          IF ls_vbrk-zz_detra IS NOT INITIAL.
            ADD 1 TO lw_position.
            CLEAR ls_header_text.
            ls_header_text-zz_nrodocsap   = ls_vbrk-vbeln.
            ls_header_text-zz_numeracion  = ls_vbrk-zz_numeracion.
            ls_header_text-zz_nroposicion = lw_position.
            SELECT w~bukrs w~belnr w~gjahr w~buzei w~witht w~wt_withcd w~wt_qbshh
              INTO TABLE lt_with_item
              FROM bkpf AS b INNER JOIN with_item AS w
              ON ( b~bukrs EQ w~bukrs AND b~belnr EQ w~belnr AND b~gjahr EQ w~gjahr )
              WHERE b~awtyp EQ 'VBRK'
                AND b~awkey EQ ls_vbrk-vbeln.

            LOOP AT lt_with_item INTO ls_with_item.
              READ TABLE lt_catahomo15 INTO lwa_catahomo15
                   WITH TABLE KEY bukrs     = ls_with_item-bukrs
                                  witht     = ls_with_item-witht
                                  wt_withcd = ls_with_item-wt_withcd.
              IF sy-subrc EQ 0.
                IF lwa_catahomo15-zz_text_clie IS NOT INITIAL.                    "I-WMR-260115
                  " Si Texto de cliente está lleno, se informa este campo         "I-WMR-260115
                  ls_header_text-zz_text_head = lwa_catahomo15-zz_text_clie.      "I-WMR-260115
                ELSE.                                                             "I-WMR-260115
                  READ TABLE lt_cata15 INTO lwa_cata15
                       WITH KEY zz_codigo_sunat = lwa_catahomo15-zz_codigo_sunat.
                  IF sy-subrc EQ 0.
                    ls_header_text-zz_text_head = lwa_cata15-zz_desc_cod_suna.
                  ENDIF.
                ENDIF.                                                            "I-WMR-260115
              ENDIF.
              IF ls_header_text-zz_text_head IS NOT INITIAL.
                APPEND ls_header_text TO es_head_txt-t_text_header.
                EXIT.
              ENDIF.
            ENDLOOP.
          ELSE.
            CLEAR ls_header_text.
            ls_header_text-zz_tdobject    = 'VBBK'.
            ls_header_text-zz_tdname      = ls_vbrk-vbeln.
            ls_header_text-zz_tdid        = 'Z002'.
            ls_header_text-zz_text_head   = get_text( pi_name   = ls_header_text-zz_tdname
                                                      pi_id     = ls_header_text-zz_tdid
                                                      pi_object = ls_header_text-zz_tdobject ).
            IF ls_header_text-zz_text_head IS NOT INITIAL.
              ADD 1 TO lw_position.
              ls_header_text-zz_nrodocsap   = ls_vbrk-vbeln.
              ls_header_text-zz_numeracion  = ls_vbrk-zz_numeracion.
              ls_header_text-zz_nroposicion = lw_position.
              APPEND ls_header_text TO es_head_txt-t_text_header.
            ENDIF.
          ENDIF.
*&========================================================================================&*
*&      INICIO CMH WMR-271118-3000009765
*&========================================================================================&*
        WHEN '0021061097'.  " CMH
          CLEAR lt_with_item.
          IF ls_vbrk-zz_detra IS NOT INITIAL.
            ADD 1 TO lw_position.
            CLEAR ls_header_text.
            ls_header_text-zz_nrodocsap   = ls_vbrk-vbeln.
            ls_header_text-zz_numeracion  = ls_vbrk-zz_numeracion.
            ls_header_text-zz_nroposicion = lw_position.
            SELECT w~bukrs w~belnr w~gjahr w~buzei w~witht w~wt_withcd w~wt_qbshh
                   w~wt_qsshb w~wt_qbshb w~qsatz
              INTO TABLE lt_with_item
              FROM bkpf AS b INNER JOIN with_item AS w
              ON ( b~bukrs EQ w~bukrs AND b~belnr EQ w~belnr AND b~gjahr EQ w~gjahr )
              WHERE b~awtyp    =  'VBRK'
                AND b~awkey    = ls_vbrk-vbeln
                AND w~wt_qbshb <> 0.

            LOOP AT lt_with_item INTO ls_with_item.
              READ TABLE lt_catahomo15 INTO lwa_catahomo15
                   WITH TABLE KEY bukrs     = ls_with_item-bukrs
                                  witht     = ls_with_item-witht
                                  wt_withcd = ls_with_item-wt_withcd.
              IF sy-subrc EQ 0.
                IF lwa_catahomo15-zz_text_clie IS NOT INITIAL.
                  " Si Texto de cliente está lleno, se informa este campo
                  ls_header_text-zz_text_head = lwa_catahomo15-zz_text_clie.
                ELSE.
                  READ TABLE lt_cata15 INTO lwa_cata15
                       WITH KEY zz_codigo_sunat = lwa_catahomo15-zz_codigo_sunat.
                  IF sy-subrc EQ 0.
                    ls_header_text-zz_text_head = lwa_cata15-zz_desc_cod_suna.
                  ENDIF.
                ENDIF.
              ENDIF.
              IF ls_header_text-zz_text_head IS NOT INITIAL.
                CLEAR: ls_tcurt, l_perc_ret, l_porcentaje, l_base, l_retencion, l_glosa.
                SELECT SINGLE * INTO ls_tcurt
                  FROM zostb_tcurt
                  WHERE waers = ls_vbrk-waerk
                    AND begda <= ls_vbrk-fkdat
                    AND endda >= ls_vbrk-fkdat.
                l_perc_ret = ls_with_item-qsatz. l_porcentaje = l_perc_ret.
                l_base = ls_with_item-wt_qsshb.  l_retencion = ls_with_item-wt_qbshb.
                CONDENSE l_porcentaje NO-GAPS.  CONDENSE l_base NO-GAPS.  CONDENSE l_retencion NO-GAPS.
                CONCATENATE l_porcentaje 'DE' ls_tcurt-sigmon l_base '=' ls_tcurt-sigmon l_retencion
                  INTO l_glosa SEPARATED BY space.
                CONCATENATE ls_header_text-zz_text_head l_glosa INTO ls_header_text-zz_text_head
                  SEPARATED BY space.
                APPEND ls_header_text TO es_head_txt-t_text_header.
                EXIT.
              ENDIF.
            ENDLOOP.
          ENDIF.
*&========================================================================================&*
*&      FIN CMH WMR-271118-3000009765
*&========================================================================================&*
*&========================================================================================&*
*&      INICIO AIB 040720-NTP-3000014674
*&========================================================================================&*
        WHEN '0020311006'   " AIB
          OR '0020863116'.  " AIB CLOUD
          CLEAR lt_with_item.
          IF ls_vbrk-zz_detra IS NOT INITIAL.
            ADD 1 TO lw_position.
            CLEAR ls_header_text.
            ls_header_text-zz_nrodocsap   = ls_vbrk-vbeln.
            ls_header_text-zz_numeracion  = ls_vbrk-zz_numeracion.
            ls_header_text-zz_nroposicion = lw_position.
            SELECT w~bukrs w~belnr w~gjahr w~buzei w~witht w~wt_withcd w~wt_qbshh
                   w~wt_qsshb w~wt_qbshb w~qsatz
              APPENDING TABLE lt_with_item
              FROM bkpf AS b INNER JOIN with_item AS w
              ON ( b~bukrs EQ w~bukrs AND b~belnr EQ w~belnr AND b~gjahr EQ w~gjahr )
              WHERE b~awtyp    =  'VBRK'
                AND b~awkey    = ls_vbrk-vbeln
                AND w~wt_qbshb <> 0.

*{I-080720-NTP-3000014674
          get_detrac_preview( EXPORTING is_options  = is_options
                                        is_vbrk     = ls_vbrk
                              CHANGING ct_with_item = lt_with_item ).
*}I-080720-NTP-3000014674

            LOOP AT lt_with_item INTO ls_with_item.
              READ TABLE lt_catahomo15 INTO lwa_catahomo15
                   WITH TABLE KEY bukrs     = ls_with_item-bukrs
                                  witht     = ls_with_item-witht
                                  wt_withcd = ls_with_item-wt_withcd.
              IF sy-subrc EQ 0.
                IF lwa_catahomo15-zz_text_clie IS NOT INITIAL.
                  " Si Texto de cliente está lleno, se informa este campo
                  ls_header_text-zz_text_head = lwa_catahomo15-zz_text_clie.
                ELSE.
                  READ TABLE lt_cata15 INTO lwa_cata15
                       WITH KEY zz_codigo_sunat = lwa_catahomo15-zz_codigo_sunat.
                  IF sy-subrc EQ 0.
                    ls_header_text-zz_text_head = lwa_cata15-zz_desc_cod_suna.
                  ENDIF.
                ENDIF.
              ENDIF.
              IF ls_header_text-zz_text_head IS NOT INITIAL.
                CLEAR: ls_tcurt, l_perc_ret, l_porcentaje, l_base, l_retencion, l_glosa.
                SELECT SINGLE * INTO ls_tcurt
                  FROM zostb_tcurt
                  WHERE waers = ls_vbrk-waerk
                    AND begda <= ls_vbrk-fkdat
                    AND endda >= ls_vbrk-fkdat.
                l_perc_ret = ls_with_item-qsatz. l_porcentaje = l_perc_ret.
                l_base = ls_with_item-wt_qsshb.  l_retencion = ls_with_item-wt_qbshb.
                CONDENSE l_porcentaje NO-GAPS.  CONDENSE l_base NO-GAPS.  CONDENSE l_retencion NO-GAPS.
                CONCATENATE l_porcentaje 'DE' ls_tcurt-sigmon l_base '=' ls_tcurt-sigmon l_retencion
                  INTO l_glosa SEPARATED BY space.
                REPLACE '&DETALLE&' IN ls_header_text-zz_text_head WITH l_glosa.
                APPEND ls_header_text TO es_head_txt-t_text_header.
                EXIT.
              ENDIF.
            ENDLOOP.
          ENDIF.
*&========================================================================================&*
*&      FIN AIB 040720-NTP-3000014674
*&========================================================================================&*
        WHEN OTHERS.
          CLEAR lt_with_item.
          IF ls_vbrk-zz_detra IS NOT INITIAL.
            ADD 1 TO lw_position.
            CLEAR ls_header_text.
            ls_header_text-zz_nrodocsap   = ls_vbrk-vbeln.
            ls_header_text-zz_numeracion  = ls_vbrk-zz_numeracion.
            ls_header_text-zz_nroposicion = lw_position.
            SELECT w~bukrs w~belnr w~gjahr w~buzei w~witht w~wt_withcd w~wt_qbshh
              INTO TABLE lt_with_item
              FROM bkpf AS b INNER JOIN with_item AS w
              ON ( b~bukrs EQ w~bukrs AND b~belnr EQ w~belnr AND b~gjahr EQ w~gjahr )
              WHERE b~awtyp EQ 'VBRK'
                AND b~awkey EQ ls_vbrk-vbeln
                AND w~wt_qbshb NE 0.                                                  "I-WMR-170417-3000007074

            LOOP AT lt_with_item INTO ls_with_item.
              READ TABLE lt_catahomo15 INTO lwa_catahomo15
                   WITH TABLE KEY bukrs     = ls_with_item-bukrs      "OFV 08.09.2015
                                  witht     = ls_with_item-witht
                                  wt_withcd = ls_with_item-wt_withcd.
              IF sy-subrc EQ 0.
                IF lwa_catahomo15-zz_text_clie IS NOT INITIAL.                    "I-WMR-260115
                  " Si Texto de cliente está lleno, se informa este campo         "I-WMR-260115
                  ls_header_text-zz_text_head = lwa_catahomo15-zz_text_clie.      "I-WMR-260115
                ELSE.                                                             "I-WMR-260115
                  READ TABLE lt_cata15 INTO lwa_cata15
                       WITH KEY zz_codigo_sunat = lwa_catahomo15-zz_codigo_sunat.
                  IF sy-subrc EQ 0.
                    ls_header_text-zz_text_head = lwa_cata15-zz_desc_cod_suna.
                  ENDIF.
                ENDIF.                                                            "I-WMR-260115
              ENDIF.
              IF ls_header_text-zz_text_head IS NOT INITIAL.
                APPEND ls_header_text TO es_head_txt-t_text_header.
                EXIT.
              ENDIF.
            ENDLOOP.
          ENDIF.
      ENDCASE.
*  *********************************************************************
      " Fin: Texto Detracciones
*  *********************************************************************

      CASE gw_license.
        WHEN '0020316164'.  "Modasa

          " Observaciones
          ADD 1 TO lw_position.
          CLEAR ls_header_text.
          ls_header_text-zz_nrodocsap   = ls_vbrk-vbeln.
          ls_header_text-zz_numeracion  = ls_vbrk-zz_numeracion.
          ls_header_text-zz_nroposicion = lw_position.
          ls_header_text-zz_tdobject    = 'VBBK'.
          ls_header_text-zz_tdname      = ls_vbrk-vbeln.
          ls_header_text-zz_tdid        = 'Z013'.
          ls_header_text-zz_text_head   = get_text( pi_name   = ls_header_text-zz_tdname
                                                    pi_id     = ls_header_text-zz_tdid
                                                    pi_object = ls_header_text-zz_tdobject ).
          APPEND ls_header_text TO es_head_txt-t_text_header.

          IF ls_vbrk-zz_check_expor EQ abap_false.

            " Texto Agente de Retención
            ADD 1 TO lw_position.
            CLEAR ls_header_text.
            ls_header_text-zz_nrodocsap   = ls_vbrk-vbeln.
            ls_header_text-zz_numeracion  = ls_vbrk-zz_numeracion.
            ls_header_text-zz_nroposicion = lw_position.

            CLEAR ls_constants.

            ls_constants-modulo     = 'FI'.
            ls_constants-aplicacion = 'CUENTA_BANCARIA'.
            ls_constants-programa   = 'ZFITR_BANCOS'.
            ls_constants-campo      = 'TEXT1'.
            ls_constants-valor1     = 'TXT01'.

            CLEAR select.
            sublist = 'TEXTO2'.
            APPEND sublist TO select.
            from    = 'ZTEXTOS'.
            CONCATENATE 'MODULO     EQ LS_CONSTANTS-MODULO      AND'
                        'APLICACION EQ LS_CONSTANTS-APLICACION  AND'
                        'PROGRAMA   EQ LS_CONSTANTS-PROGRAMA    AND'
                        'CAMPO      EQ LS_CONSTANTS-CAMPO       AND'
                        'TEXTO1     EQ LS_CONSTANTS-VALOR1'
             INTO where SEPARATED BY space.

            TRY .
                SELECT SINGLE (select)
                  INTO ls_header_text-zz_text_head
                  FROM (from)
                  WHERE (where).

              CATCH cx_root INTO lo_error. "#EC CATCH_ALL      "#EC NO_HANDLER
            ENDTRY.
            APPEND ls_header_text TO es_head_txt-t_text_header.

            " Texto Pago con Cheque
            ADD 1 TO lw_position.
            CLEAR ls_header_text.
            ls_header_text-zz_nrodocsap   = ls_vbrk-vbeln.
            ls_header_text-zz_numeracion  = ls_vbrk-zz_numeracion.
            ls_header_text-zz_nroposicion = lw_position.

            CLEAR ls_constants.

            ls_constants-modulo     = 'FI'.
            ls_constants-aplicacion = 'CUENTA_BANCARIA'.
            ls_constants-programa   = 'ZFITR_BANCOS'.
            ls_constants-campo      = 'TEXT1'.
            ls_constants-valor1     = 'TXT02'.

            CLEAR select.
            sublist = 'TEXTO2'.
            APPEND sublist TO select.
            from    = 'ZTEXTOS'.
            CONCATENATE 'MODULO     EQ LS_CONSTANTS-MODULO      AND'
                        'APLICACION EQ LS_CONSTANTS-APLICACION  AND'
                        'PROGRAMA   EQ LS_CONSTANTS-PROGRAMA    AND'
                        'CAMPO      EQ LS_CONSTANTS-CAMPO       AND'
                        'TEXTO1     EQ LS_CONSTANTS-VALOR1'
             INTO where SEPARATED BY space.

            TRY .
                SELECT SINGLE (select)
                  INTO ls_header_text-zz_text_head
                  FROM (from)
                  WHERE (where).

              CATCH cx_root INTO lo_error. "#EC CATCH_ALL        "#EC NO_HANDLER
            ENDTRY.
            APPEND ls_header_text TO es_head_txt-t_text_header.

            " Textos Cuentas Bancarias

            " Crear Tabla interna de Posiciones
            CLEAR lt_columns.
            CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
              EXPORTING
                i_structure_name       = 'ZCONSTANTES'
                i_client_never_display = abap_true
                i_bypassing_buffer     = abap_true
              CHANGING
                ct_fieldcat            = lt_columns
              EXCEPTIONS ##FM_SUBRC_OK
                inconsistent_interface = 1
                program_error          = 2
                OTHERS                 = 3.

            IF lt_columns[] IS NOT INITIAL.
              CALL METHOD cl_alv_table_create=>create_dynamic_table
                EXPORTING
                  it_fieldcatalog           = lt_columns
                IMPORTING
                  ep_table                  = lo_table
                EXCEPTIONS
                  generate_subpool_dir_full = 1
                  OTHERS                    = 2.

              IF lo_table IS BOUND.
                ASSIGN lo_table->* TO <fs_table>.
                CREATE DATA lo_line LIKE LINE OF <fs_table>.
                ASSIGN lo_line->* TO <fs_line>.

                CLEAR ls_constants.

                ls_constants-modulo     = 'FI'.
                ls_constants-aplicacion = 'CUENTA_BANCARIA'.
                ls_constants-programa   = 'ZFITR_BANCOS'.
                ls_constants-valor1     = ls_vbrk-waerk.

                CLEAR select.
                sublist = '*'.
                APPEND sublist TO select.
                from    = 'ZCONSTANTES'.
                CONCATENATE 'MODULO     EQ LS_CONSTANTS-MODULO      AND'
                            'APLICACION EQ LS_CONSTANTS-APLICACION  AND'
                            'PROGRAMA   EQ LS_CONSTANTS-PROGRAMA    AND'
                            'VALOR4     EQ LS_CONSTANTS-VALOR1'
                 INTO where SEPARATED BY space.

                TRY .
                    SELECT (select)
                      INTO TABLE <fs_table>
                      FROM (from)
                      WHERE (where).

                    IF <fs_table>[] IS NOT INITIAL.
                      LOOP AT <fs_table> ASSIGNING <fs_line>.
                        CLEAR ls_constants.
                        MOVE-CORRESPONDING <fs_line> TO ls_constants.
                        APPEND ls_constants TO lt_constants.
                      ENDLOOP.

                      SORT lt_constants BY valor1 ASCENDING secuencia ASCENDING campo ASCENDING.
                      lt_constants1[] = lt_constants[].
                      DELETE ADJACENT DUPLICATES FROM lt_constants1 COMPARING valor1.

                      ADD 1 TO lw_position.
                      CLEAR ls_header_text.
                      ls_header_text-zz_nrodocsap   = ls_vbrk-vbeln.
                      ls_header_text-zz_numeracion  = ls_vbrk-zz_numeracion.
                      ls_header_text-zz_nroposicion = lw_position.
                      ls_header_text-zz_text_head   = 'Abonar en Cta. Ctes.'.
                      APPEND ls_header_text TO es_head_txt-t_text_header.

                      LOOP AT lt_constants1 INTO ls_constants1.
                        CLEAR ls_struct.

                        LOOP AT lt_constants INTO ls_constants WHERE valor1     EQ ls_constants1-valor1
                                                                 AND secuencia  EQ ls_constants1-secuencia.
                          CASE ls_constants-campo.
                            WHEN 'TEXT1'. ls_struct-value01 = ls_constants-valor2.
                            WHEN 'WAERX'. ls_struct-value02 = ls_constants-valor2.
                            WHEN 'HKTID'. ls_struct-value03 = ls_constants-valor2.
                          ENDCASE.
                        ENDLOOP.

                        ADD 1 TO lw_position.
                        CLEAR ls_header_text.
                        ls_header_text-zz_nrodocsap   = ls_vbrk-vbeln.
                        ls_header_text-zz_numeracion  = ls_vbrk-zz_numeracion.
                        ls_header_text-zz_nroposicion = lw_position.
                        CONCATENATE ls_struct-value02 ls_struct-value03
                          INTO ls_header_text-zz_text_head SEPARATED BY space.
                        CONCATENATE ls_struct-value01 ls_header_text-zz_text_head
                          INTO ls_header_text-zz_text_head SEPARATED BY '~'.
                        APPEND ls_header_text TO es_head_txt-t_text_header.
                      ENDLOOP.

                    ENDIF.

                  CATCH cx_root INTO lo_error. "#EC CATCH_ALL          "#EC NO_HANDLER
                ENDTRY.
              ENDIF.
            ENDIF.
          ENDIF.

        WHEN '0020886783'. "Pedregal
**********************************************************************
*         " Inicio - Contenedores
**********************************************************************
          CASE ls_vbrk-tfact.
            WHEN gc_tipdoc_fa OR gc_tipdoc_bl.
              CLEAR: lt_vbrp, lt_vttp, lt_vevw, lt_vekp.

              lt_vbrp[] = it_vbrp[].
              DELETE lt_vbrp WHERE vbeln NE ls_vbrk-vbeln.

              " Obtener Entregas
              SORT lt_vbrp BY vgbel ASCENDING.
              DELETE ADJACENT DUPLICATES FROM lt_vbrp COMPARING vgbel.

              IF lt_vbrp[] IS NOT INITIAL.
                " Obtener Transportes
                SELECT tknum tpnum vbeln
                  INTO CORRESPONDING FIELDS OF TABLE lt_vttp
                  FROM vttp
                  FOR ALL ENTRIES IN lt_vbrp
                  WHERE vbeln EQ lt_vbrp-vgbel.

                SORT lt_vttp BY tknum ASCENDING.
                DELETE ADJACENT DUPLICATES FROM lt_vttp COMPARING tknum.

                LOOP AT lt_vttp ASSIGNING <fs_vttp>.
                  <fs_vttp>-objkey = <fs_vttp>-tknum.
                ENDLOOP.

                IF lt_vttp[] IS NOT INITIAL.
                  " Obtener Manejadores
                  SELECT handle object objkey
                    INTO CORRESPONDING FIELDS OF TABLE lt_vevw
                    FROM vevw
                    FOR ALL ENTRIES IN lt_vttp
                    WHERE object EQ '04'  " Transporte
                      AND objkey EQ lt_vttp-objkey.

                  IF lt_vevw[] IS NOT INITIAL.
                    " Obtener Contenedores
                    SELECT venum exidv2
                      INTO CORRESPONDING FIELDS OF TABLE lt_vekp
                      FROM vekp
                      FOR ALL ENTRIES IN lt_vevw
                      WHERE handle EQ lt_vevw-handle.

                    DELETE lt_vekp WHERE exidv2 IS INITIAL.
                    SORT lt_vekp BY exidv2 ASCENDING.
                    DELETE ADJACENT DUPLICATES FROM lt_vekp COMPARING exidv2.
                  ENDIF.
                ENDIF.
              ENDIF.

              IF lt_vekp[] IS NOT INITIAL.
                ADD 1 TO lw_position.
                CLEAR ls_header_text.
                ls_header_text-zz_nrodocsap   = ls_vbrk-vbeln.
                ls_header_text-zz_numeracion  = ls_vbrk-zz_numeracion.
                ls_header_text-zz_nroposicion = lw_position.
                LOOP AT lt_vekp INTO ls_vekp.
                  IF ls_header_text-zz_text_head IS INITIAL.
                    ls_header_text-zz_text_head = ls_vekp-exidv2.
                  ELSE.
                    CONCATENATE ls_header_text-zz_text_head ls_vekp-exidv2
                      INTO ls_header_text-zz_text_head SEPARATED BY ','.
                  ENDIF.
                ENDLOOP.
                IF ls_header_text-zz_text_head IS NOT INITIAL.
                  CONCATENATE 'CONTENEDOR:' ls_header_text-zz_text_head
                    INTO ls_header_text-zz_text_head SEPARATED BY space.
                ENDIF.
                APPEND ls_header_text TO es_head_txt-t_text_header.
              ENDIF.
*@001
*Verificamos si es factura de exportación
              IF ls_vbrk-fkart = 'ZFEX'.
*Colocamos texto fijo de certificado
                ADD 1 TO lw_position.
                CLEAR ls_header_text.
                ls_header_text-zz_nrodocsap   = ls_vbrk-vbeln.
                ls_header_text-zz_numeracion  = ls_vbrk-zz_numeracion.
                ls_header_text-zz_nroposicion = lw_position.
                ls_header_text-zz_text_head   = 'GGN: 4049928968326'.
                APPEND ls_header_text TO es_head_txt-t_text_header.

                ADD 1 TO lw_position.
                CLEAR ls_header_text.
                ls_header_text-zz_nrodocsap   = ls_vbrk-vbeln.
                ls_header_text-zz_numeracion  = ls_vbrk-zz_numeracion.
                ls_header_text-zz_nroposicion = lw_position.
                ls_header_text-zz_text_head   = '"Producto Certificado Globalgap"'.
                APPEND ls_header_text TO es_head_txt-t_text_header.
              ENDIF.
*@001
            WHEN gc_tipdoc_nc OR gc_tipdoc_nd.
              CLEAR ls_header_text.
              ls_header_text-zz_tdobject    = 'VBBK'.
              ls_header_text-zz_tdname      = ls_vbrk-vbeln.
              ls_header_text-zz_tdid        = 'Z040'.
              ls_header_text-zz_text_head   = get_text( pi_name   = ls_header_text-zz_tdname
                                                        pi_id     = ls_header_text-zz_tdid
                                                        pi_object = ls_header_text-zz_tdobject ).
              IF ls_header_text-zz_text_head IS NOT INITIAL.
                CONCATENATE 'CONTENEDOR:' ls_header_text-zz_text_head
                  INTO ls_header_text-zz_text_head SEPARATED BY space.
                ADD 1 TO lw_position.
                ls_header_text-zz_nrodocsap   = ls_vbrk-vbeln.
                ls_header_text-zz_numeracion  = ls_vbrk-zz_numeracion.
                ls_header_text-zz_nroposicion = lw_position.
                APPEND ls_header_text TO es_head_txt-t_text_header.
              ENDIF.
          ENDCASE.
**********************************************************************
*         " Fin - Contenedores
**********************************************************************

*&========================================================================================&*
*&      INICIO PROMELSA
*&========================================================================================&*
        WHEN '0020895037'.
          " Observaciones del pedido de venta
          CLEAR ls_header_text.
          ls_header_text-zz_tdobject    = 'VBBK'.
          ls_header_text-zz_tdname      = ls_vbrk-vbeln.
          ls_header_text-zz_tdid        = 'Z009'.
          ls_header_text-zz_text_head   = get_text( pi_name   = ls_header_text-zz_tdname
                                                    pi_id     = ls_header_text-zz_tdid
                                                    pi_object = ls_header_text-zz_tdobject ).
          IF ls_header_text-zz_text_head IS NOT INITIAL.
            ADD 1 TO lw_position.
            ls_header_text-zz_nrodocsap   = ls_vbrk-vbeln.
            ls_header_text-zz_numeracion  = ls_vbrk-zz_numeracion.
            ls_header_text-zz_nroposicion = lw_position.
            APPEND ls_header_text TO es_head_txt-t_text_header.
          ENDIF.

          " Sucursal
          READ TABLE lt_vbpa INTO lwa_vbpa
               WITH KEY vbeln = ls_vbrk-vbeln
                        parvw = gc_parvw_re.
          IF sy-subrc EQ 0.
            READ TABLE lt_kna1 INTO ls_kna1
                 WITH KEY kunnr = lwa_vbpa-kunnr.
            IF sy-subrc EQ 0.
              CASE ls_kna1-ktokd.
                WHEN 'ZPCO'.  " Grupo de clientes: Punto de Cobro
                  CLEAR ls_header_text.
                  ADD 1 TO lw_position.
                  ls_header_text-zz_nrodocsap   = ls_vbrk-vbeln.
                  ls_header_text-zz_numeracion  = ls_vbrk-zz_numeracion.
                  ls_header_text-zz_nroposicion = lw_position.

                  SELECT SINGLE name1 name2 name3 name4
                    INTO CORRESPONDING FIELDS OF ls_kna1
                    FROM adrc
                    WHERE addrnumber EQ lwa_vbpa-adrnr.

                  IF ls_kna1-stkzn EQ abap_true.
                    IF ( ls_kna1-name2 IS INITIAL OR ls_kna1-name3 IS INITIAL OR ls_kna1-name4 IS INITIAL ).
                      ls_header_text-zz_text_head = ls_kna1-name1.
                    ELSE.
                      CONCATENATE ls_kna1-name2 ls_kna1-name3 ls_kna1-name4
                        INTO ls_header_text-zz_text_head SEPARATED BY space.
                    ENDIF.
                  ELSE.
                    CONCATENATE ls_kna1-name1 ls_kna1-name2 ls_kna1-name3 ls_kna1-name4
                      INTO ls_header_text-zz_text_head SEPARATED BY space.
                  ENDIF.
                  CONCATENATE 'SUCURSAL:' ls_header_text-zz_text_head
                    INTO ls_header_text-zz_text_head SEPARATED BY space.

                  APPEND ls_header_text TO es_head_txt-t_text_header.
              ENDCASE.
            ENDIF.
          ENDIF.
*&========================================================================================&*
*&      FIN PROMELSA
*&========================================================================================&*

*&========================================================================================&*
*&      INICIO AIB 3000005361
*&========================================================================================&*
        WHEN '0020311006'  "AIB
          OR '0020863116'. "AIB CLOUD
          " Observaciones
          CLEAR ls_header_text.
          CLEAR ls_thead.                                                                   "I-WMR-01042020-3000014097
          ls_header_text-zz_tdobject    = 'VBBK'.
          ls_header_text-zz_tdname      = ls_vbrk-vbeln.
          ls_header_text-zz_tdid        = '0002'.
          SELECT SINGLE spras INTO ls_thead-tdspras FROM kna1 WHERE kunnr = ls_vbrk-kunag.  "I-WMR-01042020-3000014097
          ls_header_text-zz_text_head   = get_text( pi_name   = ls_header_text-zz_tdname
                                                    pi_id     = ls_header_text-zz_tdid
                                                    pi_spras  = ls_thead-tdspras            "I-WMR-01042020-3000014097
                                                    pi_object = ls_header_text-zz_tdobject ).
          IF ls_header_text-zz_text_head IS INITIAL.                                        "I-WMR-01042020-3000014097
            ls_header_text-zz_text_head = get_text( pi_name   = ls_header_text-zz_tdname    "I-WMR-01042020-3000014097
                                                    pi_id     = ls_header_text-zz_tdid      "I-WMR-01042020-3000014097
                                                    pi_object = ls_header_text-zz_tdobject )."I-WMR-01042020-3000014097
          ENDIF.                                                                            "I-WMR-01042020-3000014097
          IF ls_header_text-zz_text_head IS NOT INITIAL.
            ADD 1 TO lw_position.
            ls_header_text-zz_nrodocsap   = ls_vbrk-vbeln.
            ls_header_text-zz_numeracion  = ls_vbrk-zz_numeracion.
            ls_header_text-zz_nroposicion = lw_position.
            APPEND ls_header_text TO es_head_txt-t_text_header.
          ENDIF.

*&========================================================================================&*
*&      FIN AIB 3000005361
*&========================================================================================&*

*&========================================================================================&*
*&      INICIO PIRAMIDE WMR-241018-3000010704
*&========================================================================================&*
        WHEN '0020886706'.
          " Textos
          CHECK ls_vbrk-tfact = gc_tipdoc_fa.         " Factura
          CHECK ls_vbrk-zz_check_expor = abap_false.  " Nacional

          lt_constants[] = lt_const[].
          DELETE lt_constants WHERE campo <> 'TCABTXTOBJ'.  " Textos de Cabecera: Objetos de Texto
          CHECK lt_constants[] IS NOT INITIAL.
          SORT lt_constants BY secuencia ASCENDING.

          LOOP AT lt_constants INTO ls_constants.
            CLEAR ls_header_text.
            ls_header_text-zz_tdobject    = 'TEXT'.
            ls_header_text-zz_tdname      = ls_constants-valor1.
            ls_header_text-zz_tdid        = 'ST'.
            ls_header_text-zz_text_head   = get_text( pi_name   = ls_header_text-zz_tdname
                                                      pi_id     = ls_header_text-zz_tdid
                                                      pi_object = ls_header_text-zz_tdobject ).
            IF ls_header_text-zz_text_head IS NOT INITIAL.
              ADD 1 TO lw_position.
              ls_header_text-zz_nrodocsap   = ls_vbrk-vbeln.
              ls_header_text-zz_numeracion  = ls_vbrk-zz_numeracion.
              ls_header_text-zz_nroposicion = lw_position.
              APPEND ls_header_text TO es_head_txt-t_text_header.
            ENDIF.
          ENDLOOP.

*&========================================================================================&*
*&      FIN PIRAMIDE WMR-241018-3000010704
*&========================================================================================&*

      ENDCASE.
    ENDLOOP.

  ENDMETHOD.


  METHOD set_header_weight.

    TYPES: BEGIN OF ty_mara_extend,
             matnr   TYPE mara-matnr,
             meins   TYPE mara-meins,
             ntgew   TYPE mara-ntgew,
             zzliqgo TYPE mara-ntgew,
           END OF ty_mara_extend.

*{  BEGIN OF INSERT WMR-280317-3000006749
    TYPES: BEGIN OF ty_vbrp_extend,
             vbeln           TYPE vbrp-vbeln,
             posnr           TYPE vbrp-posnr,
             ntgew           TYPE vbrp-ntgew,                                            "I-WMR-150617-3000007448
             zz_peso_drenado TYPE vbrp-ntgew,
             zz_peso_neto    TYPE vbrp-ntgew,
           END OF ty_vbrp_extend.

    TYPES: BEGIN OF ty_vbak_extend,
             vbeln         TYPE vbak-vbeln,
             zzpbzonpri    TYPE vbap-kwmeng,
             zzpbzonpri_um TYPE vbap-meins,
           END OF ty_vbak_extend.
*}  END OF INSERT WMR-280317-3000006749

    DATA: select          TYPE TABLE OF edpline,
          lt_mara_extend  TYPE HASHED TABLE OF ty_mara_extend WITH UNIQUE KEY matnr,
*{  BEGIN OF INSERT WMR-280317-3000006749
          lt_vbrp_extend  TYPE STANDARD TABLE OF ty_vbrp_extend,
          lt_vbak_extend  TYPE STANDARD TABLE OF ty_vbak_extend,
*}  END OF INSERT WMR-280317-3000006749
          lt_vbrp         TYPE ltt_vbrp,

          sublist         TYPE edpline,
          ls_vbrp         TYPE lty_vbrp,
          ls_likp         TYPE lty_likp,
          ls_mara_extend  TYPE ty_mara_extend,
*{  BEGIN OF INSERT WMR-280317-3000006749
          ls_vbrp_extend  TYPE ty_vbrp_extend,
          ls_vbak_extend  TYPE ty_vbak_extend,
*}  END OF INSERT WMR-280317-3000006749

          lw_peso_neto    TYPE vbrp-ntgew,
          lw_peso_bruto   TYPE vbrp-ntgew,
          lw_peso_drenado TYPE vbrp-ntgew,
          lw_quantity     TYPE vbrp-fkimg,
          lo_error        TYPE REF TO cx_root,
          l_char100       TYPE char100.                                         "I-WMR-030217-3000006519

    CLEAR es_weight.

    CASE gw_license.
      WHEN '0020311006'   " AIB
        OR '0020863116'.  " AIB CLOUD
        lt_vbrp[] = it_vbrp[].
        SORT lt_vbrp BY matnr ASCENDING.
        DELETE ADJACENT DUPLICATES FROM lt_vbrp COMPARING matnr.

        CLEAR select.
        sublist = 'MATNR'.    APPEND sublist TO select.
        sublist = 'MEINS'.    APPEND sublist TO select.
        sublist = 'NTGEW'.    APPEND sublist TO select.
        sublist = 'ZZLIQGO'.  APPEND sublist TO select.

        TRY .
            SELECT (select)
              INTO CORRESPONDING FIELDS OF TABLE lt_mara_extend
              FROM mara
              FOR ALL ENTRIES IN lt_vbrp
              WHERE matnr EQ lt_vbrp-matnr.

          CATCH cx_root INTO lo_error. "#EC CATCH_ALL       "#EC NO_HANDLER
        ENDTRY.
    ENDCASE.

    LOOP AT it_vbrp INTO ls_vbrp WHERE vbeln EQ is_vbrk-vbeln.
      " Peso Drenado
      CASE gw_license.
        WHEN '0020311006'   " AIB
          OR '0020863116'.  " AIB CLOUD
          ADD ls_vbrp-ntgew TO lw_peso_drenado.
        WHEN OTHERS.
      ENDCASE.
      " Peso Neto
      CASE gw_license.
        WHEN '0020311006'   " AIB
          OR '0020863116'.  " AIB CLOUD
          " [ Peso Neto (Maestro material) + Peso líquido gobierno (Maestro material) ] * Cantidad (UMB)
          READ TABLE lt_mara_extend INTO ls_mara_extend
               WITH TABLE KEY matnr = ls_vbrp-matnr.
          IF sy-subrc EQ 0.
            CLEAR lw_quantity.
            IF ls_mara_extend-meins EQ ls_vbrp-vrkme.
              lw_quantity = ls_vbrp-fkimg.
            ELSE.
              CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
                EXPORTING
                  i_matnr  = ls_vbrp-matnr
                  i_in_me  = ls_vbrp-vrkme
                  i_out_me = ls_mara_extend-meins
                  i_menge  = ls_vbrp-fkimg
                IMPORTING
                  e_menge  = lw_quantity
                EXCEPTIONS ##FM_SUBRC_OK
                  OTHERS   = 4.
            ENDIF.
            lw_peso_neto = lw_peso_neto + ( ( ls_mara_extend-ntgew + ls_mara_extend-zzliqgo ) * lw_quantity ).
          ENDIF.
        WHEN OTHERS.
          ADD ls_vbrp-ntgew TO lw_peso_neto.
      ENDCASE.
      " Peso Bruto
      CASE gw_license.
        WHEN '0020311006'   " AIB
          OR '0020863116'.  " AIB CLOUD
        WHEN OTHERS.
          ADD ls_vbrp-brgew TO lw_peso_bruto.
      ENDCASE.
      " Unidad de medida de peso                                                "I-WMR-221116-3000005346
      CASE gw_license.
        WHEN '0020311006'   " AIB
          OR '0020863116'.  " AIB CLOUD
        WHEN OTHERS.
          es_weight-zz_und_peso = ls_vbrp-gewei.                                "I-WMR-221116-3000005346
      ENDCASE.
    ENDLOOP.

    CASE gw_license.
      WHEN '0020311006'   " AIB
        OR '0020863116'.  " AIB CLOUD

*      LOOP AT it_vbrp INTO ls_vbrp WHERE vbeln EQ is_vbrk-vbeln. "E-NTP220618-3000010073
*{I-NTP220618-3000010073
        lt_vbrp[] = it_vbrp[].
        SORT lt_vbrp BY vgbel.
        DELETE ADJACENT DUPLICATES FROM lt_vbrp COMPARING vgbel.

        LOOP AT lt_vbrp INTO ls_vbrp WHERE vbeln EQ is_vbrk-vbeln.  "I-NTP220618-3000010073
*}I-NTP220618-3000010073

          LOOP AT lt_likp INTO ls_likp WHERE vbeln EQ ls_vbrp-vgbel.
            " Peso Bruto
            ADD ls_likp-btgew TO lw_peso_bruto.
            " Unidad de medida de peso
            es_weight-zz_und_peso = ls_likp-gewei.
          ENDLOOP.
*        EXIT.  "E-NTP220618-3000010073

        ENDLOOP.
    ENDCASE.

*{  BEGIN OF INSERT WMR-280317-3000006749
    CASE gw_license.
      WHEN '0020974592'.  " DANPER
        CLEAR: lw_peso_drenado, lw_peso_neto, lw_peso_bruto, lt_vbrp_extend, lt_vbak_extend.

        CLEAR select.
        sublist = 'VBELN'.            APPEND sublist TO select.
        sublist = 'POSNR'.            APPEND sublist TO select.
        sublist = 'NTGEW'.            APPEND sublist TO select.                       "I-WMR-150617-3000007448
        sublist = 'ZZ_PESO_DRENADO'.  APPEND sublist TO select.
        sublist = 'ZZ_PESO_NETO'.     APPEND sublist TO select.

        TRY .
            SELECT (select)
              INTO CORRESPONDING FIELDS OF TABLE lt_vbrp_extend
              FROM vbrp
              FOR ALL ENTRIES IN it_vbrp
              WHERE vbeln EQ it_vbrp-vbeln
                AND posnr EQ it_vbrp-posnr.

          CATCH cx_root INTO lo_error. "#EC CATCH_ALL        "#EC NO_HANDLER
        ENDTRY.

        LOOP AT lt_vbrp_extend INTO ls_vbrp_extend.
          " Peso Drenado
          ADD ls_vbrp_extend-zz_peso_drenado  TO lw_peso_drenado.
          " Peso Neto
*{  BEGIN OF REPLACE WMR-150617-3000007448
          ""        ADD ls_vbrp_extend-zz_peso_neto     TO lw_peso_neto.
          IF ls_vbrp_extend-zz_peso_neto NE 0.
            ADD ls_vbrp_extend-zz_peso_neto TO lw_peso_neto.
          ELSE.
            ADD ls_vbrp_extend-ntgew        TO lw_peso_neto.
          ENDIF.
*}  END OF REPLACE WMR-150617-3000007448
        ENDLOOP.

        " Peso Bruto
        lt_vbrp[] = it_vbrp[].
        SORT lt_vbrp BY aubel ASCENDING.
        DELETE ADJACENT DUPLICATES FROM lt_vbrp COMPARING aubel.

        IF lt_vbrp[] IS NOT INITIAL.
          " Obtener Pesos de Zonas Primarias
          CLEAR select.
          sublist = 'VBELN'.            APPEND sublist TO select.
          sublist = 'ZZPBZONPRI'.       APPEND sublist TO select.
          sublist = 'ZZPBZONPRI_UM'.    APPEND sublist TO select.

          TRY .
              SELECT (select)
                INTO CORRESPONDING FIELDS OF TABLE lt_vbak_extend
                FROM vbak
                FOR ALL ENTRIES IN it_vbrp
                WHERE vbeln EQ it_vbrp-aubel.

            CATCH cx_root INTO lo_error. "#EC CATCH_ALL      "#EC NO_HANDLER
          ENDTRY.

          LOOP AT lt_vbak_extend INTO ls_vbak_extend.
            " Peso Bruto
            ADD ls_vbak_extend-zzpbzonpri TO lw_peso_bruto.
            " Unidad de medida de peso
            es_weight-zz_und_peso = ls_vbak_extend-zzpbzonpri_um.
          ENDLOOP.
        ENDIF.
    ENDCASE.
*}  END OF INSERT WMR-280317-3000006749

*{  BEGIN OF REPLACE WMR-030217-3000006519
    ""  es_weight-zz_peso_neto    = lw_peso_neto.     CONDENSE es_weight-zz_peso_neto    NO-GAPS.
    ""  es_weight-zz_peso_bruto   = lw_peso_bruto.    CONDENSE es_weight-zz_peso_bruto   NO-GAPS.
    ""  es_weight-zz_peso_drenado = lw_peso_drenado.  CONDENSE es_weight-zz_peso_drenado NO-GAPS.

    CLEAR l_char100. WRITE lw_peso_neto    TO l_char100 LEFT-JUSTIFIED. "#EC UOM_IN_MES  CONDENSE l_char100 NO-GAPS.
    es_weight-zz_peso_neto    = l_char100.
    CLEAR l_char100. WRITE lw_peso_bruto   TO l_char100 LEFT-JUSTIFIED. "#EC UOM_IN_MES  CONDENSE l_char100 NO-GAPS.
    es_weight-zz_peso_bruto   = l_char100.
    CLEAR l_char100. WRITE lw_peso_drenado TO l_char100 LEFT-JUSTIFIED. "#EC UOM_IN_MES  CONDENSE l_char100 NO-GAPS.
    es_weight-zz_peso_drenado = l_char100.
*}  END OF REPLACE WMR-030217-3000006519

  ENDMETHOD.


  METHOD set_homo_cab.

    DATA: lt_vbrp_a           TYPE ltt_vbrp,                                  "I-WMR-080715
          lt_cardes_glob      TYPE ltt_cardes_glob,                           "I-3000011712-NTP220419
          ls_vbrp_a           LIKE LINE OF lt_vbrp_a,                         "I-WMR-080715
          lr_pstyv            TYPE RANGE OF vbrp-pstyv,                       "I-WMR-080715
          lr_spart            TYPE RANGE OF vbrk-spart,                       "I-WMR-171218-3000009765
          ls_spart            LIKE LINE OF lr_spart,                          "I-WMR-171218-3000009765
          ls_pstyv            LIKE LINE OF lr_pstyv,                          "I-WMR-080715
          ls_cardes_glob      LIKE LINE OF lt_cardes_glob,                    "I-3000011712-NTP220419
          lwa_cabecera_salida LIKE LINE OF es_cab-t_header,
          lwa_cabecera_sal2   LIKE LINE OF es_cab-t_header2,
          ls_cardes_salida    LIKE LINE OF es_cab-t_cardes,                   "I-3000011712-NTP100419
          ls_formapago_sal    LIKE LINE OF es_cab-t_formapago,                "I-100321-NTP-3000016017

          ls_guirem           LIKE LINE OF es_cab-t_guirem,                   "I-WMR-240117-3000006411
          ls_address          TYPE         lty_address,                       "I-WMR-230615
          ls_aplica_anticipo  LIKE LINE OF lt_aplica_anticipo,                "I-WMR-080715
          ls_weight           TYPE         zosfees_weight,                    "I-WMR-171016-3000005361
          ls_certif           TYPE         zosfees_exp_certif,                "I-WMR-171016-3000005361
          ls_export_part2     TYPE         zosfees_exp_part2,                 "I-WMR-221116-3000005346
          ls_constants        LIKE LINE OF lt_const,                          "I-WMR-171218-3000009765
          lv_kwert            TYPE         konv-kwert,
*          lv_dsctoxit         TYPE         vbrp-netwr,                       "E-3000011712-NTP110419
          lv_cont             TYPE         i,
          lv_porce            TYPE         char15,
          lw_fkdat            TYPE         fkdat,
          lw_length           TYPE         i,
          lw_guias            TYPE         c LENGTH 1300,
          lw_lines            TYPE         i,
          lw_name             TYPE         thead-tdname,
          lw_adrnr            TYPE         adrc-addrnumber,                   "I-WMR-230615
*{  BEGIN OF INSERT WMR-160915  ANTICIPOS PETRAMAS
          lw_sumigvaplicant   TYPE vbrp-netwr,
*}  END OF INSERT WMR-160915  ANTICIPOS PETRAMAS
          lw_spras            TYPE spras,                                     "I-WMR-171016-3000005361
          ls_t042z            LIKE LINE OF lt_t042z,                          "I-NTP050917-3000008049
          l_land1             TYPE land1.                                     "I-NTP050917-3000008049

*{  BEGIN OF INSERT WMR-160615
    DATA:
      ls_port_data    TYPE  zoses_data_portuarios,
      ls_fishing_data TYPE  zoses_data_pesca,
      ls_vbak         TYPE  lty_vbak,
      ls_likp         TYPE  lty_likp,
      ls_vbrp         TYPE  lty_vbrp,
*}  END OF INSERT WMR-160615
      ls_cardes       TYPE  lty_cardes,                                       "I-3000011712-NTP100419
      ls_formapago    TYPE  lty_formapago.                                    "I-100321-NTP-3000016017

    FIELD-SYMBOLS: <lfs_vbrk> LIKE LINE OF pe_vbrk,
                   <lfs_vbrp> LIKE LINE OF pi_vbrp.

    DATA: ls_knvv LIKE LINE OF lt_knvv,
          ls_kna1 LIKE LINE OF lt_kna1.

    DATA: ls_t052 TYPE lty_t052.

*{  BEGIN OF INSERT WMR-080715
    " Tipos de posición Anticipos
    LOOP AT lt_constpstyv INTO lwa_constpstyv WHERE zz_opcion01 = '3'.
      CLEAR ls_pstyv.
      ls_pstyv-low    = lwa_constpstyv-pstyv.
      ls_pstyv-sign   = 'I'.
      ls_pstyv-option = 'EQ'.
      APPEND ls_pstyv TO lr_pstyv.
    ENDLOOP.
*}  END OF INSERT WMR-080715

    LOOP AT pe_vbrk ASSIGNING <lfs_vbrk>.

      CLEAR lwa_cabecera_salida.
      CLEAR lwa_cabecera_sal2.                                                "I-WMR-171016-3000005361
*{  BEGIN OF INSERT WMR-160915  ANTICIPOS PETRAMAS
      CLEAR lw_sumigvaplicant.
*}  END OF INSERT WMR-160915  ANTICIPOS PETRAMAS

      MOVE-CORRESPONDING <lfs_vbrk> TO lwa_cabecera_salida. "#EC ENHOK
      MOVE-CORRESPONDING <lfs_vbrk> TO lwa_cabecera_sal2.   "Campos adicionales Guias

*      lv_dsctoxit = 0. "E-3000011712-NTP110419
      CLEAR lv_cont.
      LOOP AT pi_vbrp ASSIGNING <lfs_vbrp> WHERE vbeln = <lfs_vbrk>-vbeln.
*{  BEGIN OF INSERT WMR-080715
        CLEAR ls_vbrp_a.
        MOVE-CORRESPONDING <lfs_vbrp> TO ls_vbrp_a.
        APPEND ls_vbrp_a TO lt_vbrp_a.
        CASE <lfs_vbrk>-zz_verubl.                                                "I-WMR-190219-3000011108
          WHEN gc_verubl-ubl2_0.                                                  "I-WMR-190219-3000011108
            CASE <lfs_vbrk>-zz_tip_ope.
              WHEN gc_tipop_04. " gc_tipop_01.
              WHEN OTHERS.
                " Aplicación de Anticipos
                IF <lfs_vbrp>-pstyv IN lr_pstyv AND lr_pstyv[] IS NOT INITIAL.
*{  BEGIN OF REPLACE WMR-160915  ANTICIPOS PETRAMAS
                  ""              CONTINUE.
                  lw_sumigvaplicant = lw_sumigvaplicant + abs( <lfs_vbrp>-mwsbp ).
*{  END OF REPLACE WMR-160915  ANTICIPOS PETRAMAS
                ENDIF.
            ENDCASE.
*}  END OF INSERT WMR-080715
          WHEN gc_verubl-ubl2_1.                                                  "I-WMR-190219-3000011108
            IF <lfs_vbrk>-zz_check_anticp <> abap_true.                          "I-WMR-190219-3000011108
              " Aplicación de Anticipos                                          "I-WMR-190219-3000011108
              IF <lfs_vbrp>-pstyv IN lr_pstyv AND lr_pstyv[] IS NOT INITIAL.     "I-WMR-190219-3000011108
                lw_sumigvaplicant = lw_sumigvaplicant + abs( <lfs_vbrp>-mwsbp ). "I-WMR-190219-3000011108
              ENDIF.                                                             "I-WMR-190219-3000011108
            ENDIF.                                                               "I-WMR-190219-3000011108
        ENDCASE.                                                                  "I-WMR-190219-3000011108

        ADD 1 TO lv_cont.
        <lfs_vbrk>-sumaisc    = <lfs_vbrk>-sumaisc    + <lfs_vbrp>-sumaisc.
*        <lfs_vbrk>-desctoxite = <lfs_vbrk>-desctoxite + <lfs_vbrp>-desctoxite. "E-3000011712-NTP110419
*        <lfs_vbrk>-sumaotrtri = <lfs_vbrk>-sumaotrtri + <lfs_vbrp>-sumaotrtri.  "E-080920-NTP-3000014481
*        <lfs_vbrk>-sumaotrcar = <lfs_vbrk>-sumaotrcar + <lfs_vbrp>-sumaotrcar.  "E-080920-NTP-3000014481
*        <lfs_vbrk>-desctot    = <lfs_vbrk>-desctot    + <lfs_vbrp>-desctot.    "E-3000011712-NTP110419
*        <lfs_vbrk>-imptotvent = <lfs_vbrk>-imptotvent + <lfs_vbrp>-imptotvent. "E-090920-NTP-3000014481
        <lfs_vbrk>-imporpermn = <lfs_vbrk>-imporpermn + <lfs_vbrp>-imporpermn.
        <lfs_vbrk>-imporpermn_mtc = <lfs_vbrk>-imporpermn_mtc +  <lfs_vbrp>-imporpermn_mtc.
        <lfs_vbrk>-totvalveno = <lfs_vbrk>-totvalveno + <lfs_vbrp>-totvalveno.
*        <lfs_vbrk>-desctoglob = <lfs_vbrk>-desctoglob + <lfs_vbrp>-desctoglob. "E-3000011712-NTP110419
*{I-080920-NTP-3000014481
        IF <lfs_vbrk>-zz_check_tg IS INITIAL.
          <lfs_vbrk>-valvenxite = <lfs_vbrk>-valvenxite + <lfs_vbrp>-valvenxite.
        ENDIF.
        <lfs_vbrk>-desctoxite = <lfs_vbrk>-desctoxite + <lfs_vbrp>-desctoxite.  "I-290721-NTP-3000017358
        <lfs_vbrk>-cargosxite = <lfs_vbrk>-cargosxite + <lfs_vbrp>-cargosxite.  "I-290721-NTP-3000017358
        <lfs_vbrk>-desctoglob = <lfs_vbrk>-desctoglob + <lfs_vbrp>-desctoglob.
        <lfs_vbrk>-cargosglob = <lfs_vbrk>-cargosglob + <lfs_vbrp>-cargosglob.
        <lfs_vbrk>-desctotot = <lfs_vbrk>-desctotot + <lfs_vbrp>-desctotot.
        <lfs_vbrk>-cargostot = <lfs_vbrk>-cargostot + <lfs_vbrp>-cargostot.
        <lfs_vbrk>-desctotot_sabi = <lfs_vbrk>-desctotot_sabi + <lfs_vbrp>-desctotot_sabi.  "I-290721-NTP-3000017358
        <lfs_vbrk>-cargostot_sabi = <lfs_vbrk>-cargostot_sabi + <lfs_vbrp>-cargostot_sabi.  "I-290721-NTP-3000017358
        <lfs_vbrk>-desctotot_nabi = <lfs_vbrk>-desctotot_nabi + <lfs_vbrp>-desctotot_nabi.
        <lfs_vbrk>-cargostot_nabi = <lfs_vbrk>-cargostot_nabi + <lfs_vbrp>-cargostot_nabi.
*}I-080920-NTP-3000014481

*{I-PBM030120-3000013223
*        CASE gw_license.
*          WHEN '0021131379'. "Resemin
*            IF <lfs_vbrp>-t_cardes_glob[] IS NOT INITIAL.
*              <lfs_vbrk>-sumaigv = <lfs_vbrk>-mwsbk.
*            ELSE.
*              <lfs_vbrk>-sumaigv = <lfs_vbrk>-sumaigv    + <lfs_vbrp>-mwsbp.
*            ENDIF.
*          WHEN OTHERS.
*}I-PBM030120-3000013223
        <lfs_vbrk>-sumaigv = <lfs_vbrk>-sumaigv + <lfs_vbrp>-mwsbp_cab.
        <lfs_vbrk>-sumaigv_pdf = <lfs_vbrk>-sumaigv_pdf + <lfs_vbrp>-mwsbp_cab. "I-020821-NTP-3000017358
*        ENDCASE.                                                                "I-PBM030120-3000013223

*{  BEGIN OF INSERT WMR-100715
        ADD <lfs_vbrp>-valantxite TO <lfs_vbrk>-totvalanticip.
*}  END OF INSERT WMR-100715
*{  BEGIN OF INSERT WMR-160715
        ADD <lfs_vbrp>-valigvant  TO <lfs_vbrk>-totvaligvant.
*}  END OF INSERT WMR-160715
*        lv_dsctoxit           = lv_dsctoxit           + <lfs_vbrp>-desctoxite. "E-3000011712-NTP110419
        IF lv_cont = 1.
          <lfs_vbrk>-imporpermn_por = <lfs_vbrp>-imporpermn_por.
          <lfs_vbrk>-zz_codreg_per  = <lfs_vbrp>-zz_codreg_per.                             "I-WMR-161017-3000008124
        ENDIF.

*{I-3000011712-NTP100419: $CARDES
*{E-080920-NTP-3000014481
*        "Pasar de Item
*        "Total dscto global
*        LOOP AT <lfs_vbrp>-t_cardes_item INTO ls_cardes.
*          ADD ls_cardes-dscto TO <lfs_vbrk>-desctot.
*        ENDLOOP.
*        LOOP AT <lfs_vbrp>-t_cardes_glob INTO ls_cardes.
*          ADD ls_cardes-dscto TO <lfs_vbrk>-desctot.
*          ADD ls_cardes-dscto TO lwa_cabecera_salida-zz_desctoglob. "Ubl 2.0
*        ENDLOOP.
*}E-080920-NTP-3000014481

        "Collect cardes item a global
        LOOP AT <lfs_vbrp>-t_cardes_glob INTO ls_cardes.
          MOVE-CORRESPONDING ls_cardes TO ls_cardes_glob.
          COLLECT ls_cardes_glob INTO lt_cardes_glob.
        ENDLOOP.
      ENDLOOP.

      "Pasar a Cabecera
      LOOP AT lt_cardes_glob INTO ls_cardes_glob.
        MOVE-CORRESPONDING ls_cardes_glob TO ls_cardes.
*{I-130720-NTP-3000014590
        IF ls_cardes-cargo_pct IS INITIAL AND ls_cardes-cargo_base IS NOT INITIAL.
          ls_cardes-cargo_pct = ls_cardes-cargo / ls_cardes-cargo_base.
        ENDIF.
*}I-130720-NTP-3000014590
        APPEND ls_cardes TO <lfs_vbrk>-t_cardes_glob.
      ENDLOOP.

      "Pasar a Salida
      LOOP AT <lfs_vbrk>-t_cardes_glob INTO ls_cardes.
        ls_cardes_salida-zz_nrodocsap  = <lfs_vbrk>-vbeln.
        ls_cardes_salida-zz_numeracion = <lfs_vbrk>-zz_numeracion.
        ls_cardes_salida-zz_nrofila    = sy-tabix.
        ls_cardes_salida-zz_dscto      = ls_cardes-dscto.
        ls_cardes_salida-zz_dscto_base = ls_cardes-dscto_base.
        ls_cardes_salida-zz_dscto_pct  = ls_cardes-dscto_pct.
        ls_cardes_salida-zz_dscto_com  = ls_cardes-dscto_com.
        ls_cardes_salida-zz_cargo      = ls_cardes-cargo.
        ls_cardes_salida-zz_cargo_base = ls_cardes-cargo_base.
        ls_cardes_salida-zz_cargo_pct  = ls_cardes-cargo_pct.
        ls_cardes_salida-zz_cargo_com  = ls_cardes-cargo_com.
        APPEND ls_cardes_salida TO es_cab-t_cardes.
      ENDLOOP.
      FREE lt_cardes_glob.
*}I-3000011712-NTP220419

*     Total valor de venta operaciones gratuitas NO APLICA
      IF pi_tipdoc = gc_tipdoc_fa OR pi_tipdoc = gc_tipdoc_bl.
        REFRESH ltr_kschl.
        LOOP AT lt_constakonv INTO lwa_constakonv WHERE zz_opcion01 = '9' AND zz_opcion02 = '1'.
          lwa_kschl-low = lwa_constakonv-kschl.
          lwa_kschl-sign = 'I'.
          lwa_kschl-option = 'EQ'.
          APPEND lwa_kschl TO ltr_kschl.
        ENDLOOP.
        LOOP AT pi_vbrp ASSIGNING <lfs_vbrp> WHERE vbeln = <lfs_vbrk>-vbeln.
          READ TABLE lt_constpstyv INTO lwa_constpstyv WITH KEY pstyv = <lfs_vbrp>-pstyv zz_opcion01 = '2'.
          IF sy-subrc = 0 AND ltr_kschl[] IS NOT INITIAL.
            LOOP AT lt_konvv INTO lwa_konv WHERE knumv = <lfs_vbrk>-knumv AND kposn = <lfs_vbrp>-posnr AND kschl IN ltr_kschl. "
              lv_kwert = lwa_konv-kwert.
              IF lv_kwert < 0.
                lv_kwert = lv_kwert * -1.
              ENDIF.
              <lfs_vbrk>-totvalveno = <lfs_vbrk>-totvalveno + lv_kwert.
            ENDLOOP.
          ENDIF.
        ENDLOOP.
      ENDIF.

*     Si es Dscto.Global, se debe sumar total dsctos.x item
*      <lfs_vbrk>-desctot = <lfs_vbrk>-desctoglob + lv_dsctoxit.  "E-3000011712-NTP110419

*{  BEGIN OF INSERT WMR-160715
      " En la Suma IGV descontar el total de IGV de Aplicación de Anticipos
*      SUBTRACT <lfs_vbrk>-totvaligvant FROM <lfs_vbrk>-sumaigv.            "E-190421-NTP-3000016080
*}  END OF INSERT WMR-160715

*{I-110920-NTP-3000014481
      IF <lfs_vbrk>-zz_check_tg IS INITIAL.
        <lfs_vbrk>-valven = <lfs_vbrk>-totvvopgra + <lfs_vbrk>-totvvopina + <lfs_vbrk>-totvvopexo + <lfs_vbrk>-tot_ant. "Lineextensionamount Det
        <lfs_vbrk>-preven = <lfs_vbrk>-valven + <lfs_vbrk>-sumaigv + <lfs_vbrk>-sumaisc + <lfs_vbrk>-igv_ant.           "Taxinclusiveamount Det
        <lfs_vbrk>-imptotvent = <lfs_vbrk>-preven
                                "+ <lfs_vbrk>-cargostot_nabi - <lfs_vbrk>-desctotot_nabi                         "Payableamount             "E-090621-NTP-3000015973
                                "+ <lfs_vbrk>-cargostot - <lfs_vbrk>-desctotot                                   "U-310321-NTP-3000016017   "E-090621-NTP-3000015973
                                "- <lfs_vbrk>-tot_ant - <lfs_vbrk>-igv_ant.                                      "I-WMR-10122020-3000014557 "E-090621-NTP-3000015973
                                "+ <lfs_vbrk>-cargosglob_nabi - <lfs_vbrk>-desctoglob_nabi                       "I-090621-NTP-3000015973   "E-290721-NTP-3000017358
                                + <lfs_vbrk>-cargosglob - <lfs_vbrk>-desctoglob                                 "I-090621-NTP-3000015973
                                - <lfs_vbrk>-igv_ant.                                                           "I-220721-NTP-3000016828
        <lfs_vbrk>-sumaigv = <lfs_vbrk>-sumaigv.                                                                "Taxamount
        "- <lfs_vbrk>-igv_ant.                                                                                  "E-190421-NTP-3000016080
        <lfs_vbrk>-sumaigv_pdf = <lfs_vbrk>-sumaigv_pdf.                                                        "Taxamount
        "- <lfs_vbrk>-igv_ant.                                                                                  "E-020821-NTP-3000017358
        <lfs_vbrk>-totvvopgra_taxa = <lfs_vbrk>-totvvopgra.                                                     "Taxableamount
        " - <lfs_vbrk>-tot_ant                                                                                  "E-190421-NTP-3000016080
        <lfs_vbrk>-zz_saldoapagar = <lfs_vbrk>-imptotvent - <lfs_vbrk>-zz_detra_mdoc.                           "I-170122-NTP-3000018647
      ELSE.
        "<lfs_vbrk>-sumaigv_pdf = <lfs_vbrk>-sumaigv_pdf - <lfs_vbrk>-igv_ant.                                   "I-130721-NTP-3000016828 "E-020821-NTP-3000017358
        CLEAR <lfs_vbrk>-sumaigv_pdf.                                                                           "I-020821-NTP-3000017358
      ENDIF.
*}I-110920-NTP-3000014481
*{I-090120-NTP-3000013600
*      IF <lfs_vbrk>-zz_check_tg = abap_on.
      "<lfs_vbrk>-imptotvent = <lfs_vbrk>-imptotvent - <lfs_vbrk>-sumaigv.
*      ENDIF.
*}I-090120-NTP-3000013600

*{I-NTP-310117-3000006519
      CASE gw_license.
        WHEN '0020673876'. "Beta
*          IF <lfs_vbrk>-zz_tip_ope = gc_tipop_02.  "E-3000011101-NTP060319
          IF <lfs_vbrk>-zz_check_expor = abap_on.   "I-3000011101-NTP060319
          ENDIF.
*{I-030120-NTP-3000013223
        WHEN '0021131379'. "Resemin
*{E-090920-NTP-3000014481
*          "Exportacion y no transferencia con descuento
*          IF <lfs_vbrk>-zz_check_expor = abap_on AND <lfs_vbrk>-zz_check_tg IS INITIAL AND <lfs_vbrp>-t_cardes_glob[] IS NOT INITIAL.
*            CLEAR <lfs_vbrk>-totvvopina.
*            LOOP AT pi_vbrp ASSIGNING <lfs_vbrp> WHERE vbeln = <lfs_vbrk>-vbeln.
*              <lfs_vbrk>-totvvopina = <lfs_vbrk>-totvvopina + <lfs_vbrp>-kzwi1.
*            ENDLOOP.
*
*            <lfs_vbrk>-totvvopina = <lfs_vbrk>-totvvopina - lwa_cabecera_salida-zz_desctotot.
*          ENDIF.
*}E-090920-NTP-3000014481
*}I-030120-NTP-3000013223
      ENDCASE.
*}I-NTP-310117-3000006519

*{  BEGIN OF DELETE WMR-150715
      ""*{  BEGIN OF INSERT WMR-100715
      ""                              - <lfs_vbrk>-totvalanticip.                           " Menos Valor Total Anticipo
      ""*}  END OF INSERT WMR-100715
*}  END OF DELETE WMR-150715

*{  BEGIN OF INSERT WMR-160915  ANTICIPOS PETRAMAS
      " En aplicación total de Anticipos, incluir IGV de posición de Anticipos en Suma Total de IGV
      ""      IF ( <lfs_vbrk>-totvvopgra EQ 0 AND <lfs_vbrk>-totvvopina EQ 0 AND <lfs_vbrk>-totvvopexo EQ 0 )
      ""      AND lw_sumigvaplicant GT 0.
      ""        ADD lw_sumigvaplicant TO <lfs_vbrk>-sumaigv.
      ""      ENDIF.
*{  END OF INSERT WMR-160915  ANTICIPOS PETRAMAS

*     Tipo y número de otro documento y código relacionado con la operación que se factura (No Aplica Austral)

*     Leyendas
*{I-NTP230618-3000009651
      CASE lwa_cabecera_salida-zz_verubl.
        WHEN gc_verubl-ubl2_0.
          me->get_leyendas( CHANGING pe_vbrk   = <lfs_vbrk>
                                     pe_cabsal = lwa_cabecera_salida ).
        WHEN gc_verubl-ubl2_1.
          me->get_leyendas_ubl2_1( CHANGING cs_vbrk    = <lfs_vbrk>
                                            cs_cabsal  = lwa_cabecera_salida
                                            cs_cabsal2 = lwa_cabecera_sal2 ).             "I-WMR-070319-3000010823
      ENDCASE.
*}I-NTP230618-3000009651

*     Asignaciones directas
      lwa_cabecera_salida-zz_nrodocsap      = <lfs_vbrk>-vbeln.                 " Documento SAP
      lwa_cabecera_sal2-zz_nrodocsap        = <lfs_vbrk>-vbeln.                 " Documento SAP 2
      lwa_cabecera_salida-zz_fdigital       = ''.                               " Firma Digital
*      lwa_cabecera_salida-zz_nempresa       = <lfs_vbrk>-butxt.                " Apellidos y nombres, denominación o razón social
*      CONCATENATE <lfs_vbrk>-name1 <lfs_vbrk>-name2 INTO lwa_cabecera_salida-zz_nempresa. " Apellidos y nombres, denominación o razón social
      CONCATENATE <lfs_vbrk>-name1 <lfs_vbrk>-name2 INTO lwa_cabecera_sal2-zz_nempreex. " Apellidos y nombres, denominación o razón social
      lwa_cabecera_salida-zz_ncomercial     = gs_consextsun-zz_ncomercial.     " Nombre comercial
      lwa_cabecera_salida-zz_cityp_code     = gs_consextsun-zz_ubigeo.         " Domicilio Fiscal - Ubigeo
      lwa_cabecera_salida-zz_street         = gs_consextsun-zz_direccion.      " Domicilio Fiscal - Dirección
      lwa_cabecera_salida-zz_house_num1     = <lfs_vbrk>-house_num1.            " Domicilio Fiscal - Número   " ' '
      lwa_cabecera_salida-zz_str_suppl1     = gs_consextsun-zz_urbanizacion.   " Domicilio Fiscal - Urbanización
      lwa_cabecera_salida-zz_city1          = gs_consextsun-zz_distrito.       " Domicilio Fiscal - Departamento
      lwa_cabecera_salida-zz_city2          = gs_consextsun-zz_provincia.      " Domicilio Fiscal - Provincia
      lwa_cabecera_salida-zz_country        = gs_consextsun-zz_pais.           " Domicilio Fiscal - Distrito
      lwa_cabecera_salida-zz_bezei          = gs_consextsun-zz_departamento.   " Domicilio Fiscal - País
*      lwa_cabecera_salida-zz_desctoglob     = <lfs_vbrk>-desctoglob.            " Descuentos globales            "E-3000011712-NTP110419
      lwa_cabecera_salida-zz_desctotot      = <lfs_vbrk>-desctotot.            " Descuentos globales              "I-WMR-10022021-3000015973
      lwa_cabecera_salida-zz_cargostot      = <lfs_vbrk>-cargostot.            " Cargos Totales                   "I-WMR-10022021-3000015973
*      lwa_cabecera_salida-zz_verubl         = gs_ubl-zz_verubl.         "E-NTP200618-3000009651
*      lwa_cabecera_salida-zz_verestrdoc     = gs_ubl-zz_verestrdoc.     "E-NTP210618-3000009651
      lwa_cabecera_salida-zz_tipodoc        = <lfs_vbrk>-tfact.                 " Tipo de documento ( Factura )
      lwa_cabecera_salida-zz_numeracion     = <lfs_vbrk>-zz_numeracion.         " Numeración, conformada por serie y número correlativo
      lwa_cabecera_salida-zz_nombreraz      = <lfs_vbrk>-name12.                " Apellidos y nombres, denominación o razón social del adquiriente o usuario
*      lwa_cabecera_salida-zz_sumaotrcargos  = <lfs_vbrk>-cargostot_nabi.            " Sumatoria otros cargos "E-280721-NTP-3000017358
*{I-290721-NTP-3000017358
      lwa_cabecera_salida-zz_cargosxite     = <lfs_vbrk>-cargosxite.
      lwa_cabecera_salida-zz_desctoxite     = <lfs_vbrk>-desctoxite.
      lwa_cabecera_salida-zz_desctoglob     = <lfs_vbrk>-desctoglob.
      lwa_cabecera_salida-zz_cargosglob     = <lfs_vbrk>-cargosglob.
      lwa_cabecera_salida-zz_desctotot_sabi = <lfs_vbrk>-desctotot_sabi.
      lwa_cabecera_salida-zz_desctotot_nabi = <lfs_vbrk>-desctotot_nabi.
      lwa_cabecera_salida-zz_cargostot_sabi = <lfs_vbrk>-cargostot_sabi.
*}I-290721-NTP-3000017358
      lwa_cabecera_salida-zz_cargostot_nabi = <lfs_vbrk>-cargostot_nabi.        " Sumatoria otros cargos  "I-150920-NTP-3000014481
      lwa_cabecera_salida-zz_valvenxite     = <lfs_vbrk>-valvenxite.            "I-150920-NTP-3000014481
      lwa_cabecera_salida-zz_imptotvent     = <lfs_vbrk>-imptotvent.            " Importe total de la venta, cesión en uso o del servicio prestado
**      lwa_cabecera_salida-zz_preven         = <lfs_vbrk>-netwr + <lfs_vbrk>-mwsbk. " Total precio de venta (incluye impuesto) "I-3000011712-NTP210419 "E-WMR-10022021-3000015973
      lwa_cabecera_salida-zz_valven         = <lfs_vbrk>-valven.                " Total valor de venta            "I-WMR-10022021-3000015973
      lwa_cabecera_salida-zz_preven         = <lfs_vbrk>-preven.                " Total precio de venta (incluye impuesto)  "I-WMR-10022021-3000015973
      lwa_cabecera_salida-zz_moneda         = <lfs_vbrk>-waerk.                 " Moneda
      lwa_cabecera_salida-zz_tipnumeotr     = <lfs_vbrk>-tipnumeotr.            " Tipo y número de otro documento y código relacionado con la operación que se factura
      lwa_cabecera_salida-zz_tipnumothomo   = <lfs_vbrk>-tipnumothomo.          " Tipo y número de otro documento y código relacionado - Campo Homologado
      lwa_cabecera_salida-zz_fcreacion      = sy-datum.                         " Fecha de Creación
      lwa_cabecera_salida-zz_femision       = <lfs_vbrk>-fkdat.                 " Fecha Emision
      lwa_cabecera_salida-zz_hemision       = sy-timlo.                         "I-NTP201118-3000009651
      IF pi_tipdoc = gc_tipdoc_bl.
        lwa_cabecera_salida-zz_dirpaisadq     = <lfs_vbrk>-dirpaisadq.          " Dirección Pais Adquiente
      ENDIF.
      IF pi_tipdoc = gc_tipdoc_nc OR pi_tipdoc = gc_tipdoc_nd.
        lwa_cabecera_salida-zz_codmotivo      = <lfs_vbrk>-tmotivo.             " Tipo de documento ( Factura )
        lwa_cabecera_salida-zz_tipodocref     = <lfs_vbrk>-tipodocref.          " Número de Tipo de documento Referencia (XBLNR)
        lwa_cabecera_salida-zz_tipodocdesc    = <lfs_vbrk>-tipodocdesc.         " Descripción del Motivo
        lwa_cabecera_salida-zz_tipdocmodif    = <lfs_vbrk>-tipdocmodif.         " Tipo de documento del documento que modifica
        lwa_cabecera_salida-zz_tipdocmodifho  = <lfs_vbrk>-tipdocmodifho.       " Tipo de documento del documento que modifica
        lwa_cabecera_salida-zz_motivosuste    = <lfs_vbrk>-motivosuste.         " Motivo o sustento
*{  BEGIN OF INSERT WMR-130715
        lwa_cabecera_sal2-zz_fecdocmodif      = <lfs_vbrk>-fecdocmodif.         " Fecha de documento del documento que modifica
*}  END OF INSERT WMR-130715
      ENDIF.

*    Número de RUC
      lwa_cabecera_salida-zz_nroruc = <lfs_vbrk>-paval.
      lwa_cabecera_salida-zz_nroruchomo = gc_char6.                             "I-NTP-110716
*     READ TABLE lt_catahomo06 INTO lwa_catahomo06 WITH KEY stcdt = gc_stcdt.  "E-NTP-110716
*     IF sy-subrc = 0.                                                         "E-NTP-110716
*       lwa_cabecera_salida-zz_nroruchomo = lwa_catahomo06-zz_codigo_sunat.    "E-NTP-110716
*     ENDIF.                                                                   "E-NTP-110716

*    Tipo y número de documento de identidad del adquiriente o usuario
      lwa_cabecera_salida-zz_nrodociadq = <lfs_vbrk>-stcd1.
      READ TABLE lt_catahomo06 INTO lwa_catahomo06 WITH KEY stcdt = <lfs_vbrk>-stcdt.
      IF sy-subrc = 0.
        lwa_cabecera_salida-zz_tipdociadq = lwa_catahomo06-zz_codigo_sunat.
      ENDIF.

*    Total valor de venta operaciones gravadas
      IF <lfs_vbrk>-totvvopgra NE 0.
        lwa_cabecera_salida-zz_totvvopgra = <lfs_vbrk>-totvvopgra.
        lwa_cabecera_salida-zz_totvvopgra_taxa = <lfs_vbrk>-totvvopgra_taxa.  "I-3000011712-NTP210419
        READ TABLE lt_cata14 INTO lwa_cata14 WITH KEY zz_opcion01 = '1'.
        IF sy-subrc = 0.
          lwa_cabecera_salida-zz_opergravhomo = lwa_cata14-zz_codigo_sunat.
        ENDIF.
      ENDIF.

*   Total valor de venta operaciones inafectas
      IF <lfs_vbrk>-totvvopina NE 0.
        lwa_cabecera_salida-zz_totvvopinaf = <lfs_vbrk>-totvvopina.
        READ TABLE lt_cata14 INTO lwa_cata14 WITH KEY zz_opcion01 = '2'.
        IF sy-subrc = 0.
          lwa_cabecera_salida-zz_operinafhomo = lwa_cata14-zz_codigo_sunat.
        ENDIF.
*{I-NTP201118-3000009651
*        LOOP AT pi_vbrp ASSIGNING <lfs_vbrp> WHERE afigv IS NOT INITIAL.
*        ENDLOOP.
*        IF sy-subrc = 0.
*          READ TABLE lt_cata07 INTO lwa_cata07 WITH KEY zz_codigo_sunat = <lfs_vbrp>-afigv.
*          IF sy-subrc = 0.
*            READ TABLE lt_cata05 INTO lwa_cata05 WITH KEY zz_codigo_sunat = lwa_cata07-zz_tributo.
*            IF sy-subrc = 0.
*              lwa_cabecera_salida-zz_operinafhomo = lwa_cata05-zz_codigo_sunat.
*            ENDIF.
*          ENDIF.
*        ENDIF.
*}I-NTP201118-3000009651
      ENDIF.

*   Total valor de venta operaciones exoneradas
      IF <lfs_vbrk>-totvvopexo NE 0.
        lwa_cabecera_salida-zz_totvvopexo = <lfs_vbrk>-totvvopexo.
        lwa_cabecera_salida-zz_totvvopgra_taxa = <lfs_vbrk>-totvvopgra_taxa.  "I-300321-NTP-3000016017
        READ TABLE lt_cata14 INTO lwa_cata14 WITH KEY zz_opcion01 = '3'.
        IF sy-subrc = 0.
          lwa_cabecera_salida-zz_operexohomo = lwa_cata14-zz_codigo_sunat.
        ENDIF.
      ENDIF.

*{  BEGIN OF INSERT WMR-160915  ANTICIPOS PETRAMAS
      IF <lfs_vbrk>-zz_check_tg EQ abap_false
      AND ( <lfs_vbrk>-totvvopgra EQ 0 AND <lfs_vbrk>-totvvopina EQ 0 AND <lfs_vbrk>-totvvopexo EQ 0 ).
        LOOP AT pi_vbrp TRANSPORTING NO FIELDS WHERE afect_igv = gc_afecto_igv. EXIT. ENDLOOP.  "I-3000011120-NTP280119
        IF sy-subrc = 0.
          READ TABLE lt_cata14 INTO lwa_cata14 WITH KEY zz_opcion01 = '1'.
          IF sy-subrc = 0.
            lwa_cabecera_salida-zz_opergravhomo = lwa_cata14-zz_codigo_sunat.
          ENDIF.
        ENDIF.

        LOOP AT pi_vbrp TRANSPORTING NO FIELDS WHERE afect_igv = gc_inafec_igv. EXIT. ENDLOOP.  "I-3000011120-NTP280119
        IF sy-subrc = 0.
          READ TABLE lt_cata14 INTO lwa_cata14 WITH KEY zz_opcion01 = '2'.
          IF sy-subrc = 0.
            lwa_cabecera_salida-zz_operinafhomo = lwa_cata14-zz_codigo_sunat.
          ENDIF.
        ENDIF.

        LOOP AT pi_vbrp TRANSPORTING NO FIELDS WHERE afect_igv = gc_exoner_igv. EXIT. ENDLOOP.  "I-3000011120-NTP280119
        IF sy-subrc = 0.
          READ TABLE lt_cata14 INTO lwa_cata14 WITH KEY zz_opcion01 = '3'.
          IF sy-subrc = 0.
            lwa_cabecera_salida-zz_operexohomo = lwa_cata14-zz_codigo_sunat.
          ENDIF.
        ENDIF.
      ENDIF.
*}  END OF INSERT WMR-160915  ANTICIPOS PETRAMAS

*     Sumatoria IGV (Obligatorio - No aplica para NC y ND de exportación)
      lwa_cabecera_salida-zz_sumaigv = <lfs_vbrk>-sumaigv.
      lwa_cabecera_salida-zz_sumaigv_pdf = <lfs_vbrk>-sumaigv_pdf.
*{  BEGIN OF REPLACE WMR-070416
      ""      READ TABLE lt_kna1 INTO ls_kna1 INDEX 1.
      ""*{  BEGIN OF REPLACE WMR-300615
      ""      ""      IF ( pi_tipdoc = gc_tipdoc_nc OR pi_tipdoc = gc_tipdoc_nd ) AND ( ls_kna1-stcdt = gc_char0 ).         "CASO ACFARMA
      ""      ""*      IF ( pi_tipdoc = gc_tipdoc_nc OR pi_tipdoc = gc_tipdoc_nd ) AND ( <lfs_vbrk>-kalsm IN ltr_kalsm_e ). "CASO AUSTRAL
      ""      IF ( pi_tipdoc = gc_tipdoc_nc OR pi_tipdoc = gc_tipdoc_nd ) AND <lfs_vbrk>-zz_check_expor EQ abap_true.
      ""*}  END OF REPLACE WMR-300615
      ""      ELSE.
      ""        READ TABLE lt_cata05 INTO lwa_cata05 WITH KEY zz_opcion01 = '1'.
      ""        IF sy-subrc = 0.
      ""          lwa_cabecera_salida-zz_sumaigvhom03 = lwa_cata05-zz_codigo_sunat.     " Sumatoria IGV - Campo 03
      ""          lwa_cabecera_salida-zz_sumaigvhom04 = lwa_cata05-zz_desc_cod_suna.    " Sumatoria IGV - Campo 04
      ""          lwa_cabecera_salida-zz_sumaigvhom05 = lwa_cata05-zz_un_ece.           " Sumatoria IGV - Campo 05
      ""        ENDIF.
      ""      ENDIF.

      IF lwa_cabecera_salida-zz_sumaigv NE 0.
        READ TABLE lt_cata05 INTO lwa_cata05 WITH KEY zz_opcion01 = '1'.
        IF sy-subrc EQ 0.
          " Sumatoria IGV - Campo 03
          lwa_cabecera_salida-zz_codtrib_h = lwa_cabecera_salida-zz_sumaigvhom03 = lwa_cata05-zz_codigo_sunat.
          " Sumatoria IGV - Campo 04
          lwa_cabecera_salida-zz_sumaigvhom04 = lwa_cata05-zz_desc_cod_suna.
          " Sumatoria IGV - Campo 05
          lwa_cabecera_salida-zz_sumaigvhom05 = lwa_cata05-zz_un_ece.
        ENDIF.
      ENDIF.
*}  END OF REPLACE WMR-070416
      lwa_cabecera_salida-zz_sumaigvhom06 = <lfs_vbrk>-igvporcent.

*     Sumatoria ISC (No Aplica Austral)
      IF <lfs_vbrk>-sumaisc NE 0.
        lwa_cabecera_salida-zz_sumaisc = <lfs_vbrk>-sumaisc.
        READ TABLE lt_cata05 INTO lwa_cata05 WITH KEY zz_opcion01 = '2'.
        IF sy-subrc = 0.
          lwa_cabecera_salida-zz_codtrib_h = lwa_cabecera_salida-zz_sumaischom03 = lwa_cata05-zz_codigo_sunat.     " Sumatoria ISC - Campo 03
          lwa_cabecera_salida-zz_sumaischom04 = lwa_cata05-zz_desc_cod_suna.    " Sumatoria ISC - Campo 04
          lwa_cabecera_salida-zz_sumaischom05 = lwa_cata05-zz_un_ece.           " Sumatoria ISC - Campo 05
        ENDIF.
      ENDIF.

*     Sumatoria Otros Tributos (No Aplica Austral)
      IF <lfs_vbrk>-sumaotrtri NE 0.
        lwa_cabecera_salida-zz_sumaotrtri = <lfs_vbrk>-sumaotrtri.
        READ TABLE lt_cata05 INTO lwa_cata05 WITH KEY zz_opcion01 = '3'.
        IF sy-subrc = 0.
          lwa_cabecera_salida-zz_codtrib_h = lwa_cabecera_salida-zz_otrostribut3 = lwa_cata05-zz_codigo_sunat.     " Sumatoria Otros Tributos - Campo 03
          lwa_cabecera_salida-zz_otrostribut4 = lwa_cata05-zz_desc_cod_suna.    " Sumatoria Otros Tributos - Campo 04
          lwa_cabecera_salida-zz_otrostribut5 = lwa_cata05-zz_un_ece.           " Sumatoria Otros Tributos - Campo 05
        ENDIF.
      ENDIF.

*{E-3000011712-NTP060519
**    Total descuentos
*      IF <lfs_vbrk>-desctot NE 0.
*        lwa_cabecera_salida-zz_desctot = <lfs_vbrk>-desctot.
*        READ TABLE lt_cata14 INTO lwa_cata14 WITH KEY zz_opcion01 = '4' .
*        IF sy-subrc = 0.
*          lwa_cabecera_salida-zz_desctothomo = lwa_cata14-zz_codigo_sunat.
*        ENDIF.
*      ENDIF.
*}E-3000011712-NTP060519

*   Percepciones
      IF <lfs_vbrk>-imporpermn NE 0.
        CLEAR lv_porce.
        WRITE <lfs_vbrk>-imporpermn_por TO lv_porce. "#EC UOM_IN_MES      ##TOO_MANY_ITAB_FIELDS
        CONDENSE lv_porce.
        CONCATENATE lv_porce       ##TOO_MANY_ITAB_FIELDS
                    '%'
                    INTO lwa_cabecera_salida-zz_imporpermn_por.
        lwa_cabecera_salida-zz_imporpermn02 = <lfs_vbrk>-imporpermn_mtc.        " Importe de la percepción en moneda nacional - Base imponible percepción
        lwa_cabecera_salida-zz_imporpermn03 = <lfs_vbrk>-imporpermn.            " Importe de la percepción en moneda nacional - Monto de la percepción
        lwa_cabecera_salida-zz_imporpermn04 = <lfs_vbrk>-imporpermn_mtc +
                                              <lfs_vbrk>-imporpermn.            " Importe de la percepción en moneda nacional - Monto total cobrado
        lwa_cabecera_salida-zz_codreg_per   = <lfs_vbrk>-zz_codreg_per.         " Código Regimen de Percepción      I-WMR-161017-3000008124
        IF lwa_cabecera_salida-zz_imporpermn04 NE 0.
          READ TABLE lt_cata14 INTO lwa_cata14 WITH KEY zz_opcion01 = '5' .
          IF sy-subrc = 0.
            lwa_cabecera_salida-zz_imporpermnhom = lwa_cata14-zz_codigo_sunat.    " Importe de la percepción en moneda nacional - Campo Homologado
          ENDIF.
        ENDIF.
      ELSE.
        <lfs_vbrk>-imporpermn = <lfs_vbrk>-imporpermn_mtc = 0.
      ENDIF.

*   Total valor de venta operaciones gratuitas
      IF <lfs_vbrk>-totvalveno NE 0.
        lwa_cabecera_salida-zz_totvalveno = <lfs_vbrk>-totvalveno.
        READ TABLE lt_cata14 INTO lwa_cata14 WITH KEY zz_opcion01 = '0'.
        IF sy-subrc = 0.
          lwa_cabecera_salida-zz_totvalvenoh = lwa_cata14-zz_codigo_sunat.
        ENDIF.
      ENDIF.

*   Tipo y número de la guía de remisión relacionada con la operación que se factura
      IF lt_guiremi IS NOT INITIAL.
        DESCRIBE TABLE lt_guiremi LINES lw_lines.
        READ TABLE lt_cata01 INTO lwa_cata01 WITH KEY zz_opcion01 = '5'.
        IF sy-subrc = 0.
*{  BEGIN OF REPLACE WMR-240117-3000006411
          ""          lwa_cabecera_salida-zz_tipnumgrhomo = lwa_cata01-zz_codigo_sunat.
          ""        ENDIF.
          ""        LOOP AT lt_guiremi INTO lwa_guiremi.
          ""          IF lwa_guiremi-xblnr IS NOT INITIAL.
          ""            CONCATENATE '{"0":"'
          ""                        lwa_guiremi-xblnr
          ""                        '",'
          ""                        '"1":"'
          ""                        lwa_cabecera_salida-zz_tipnumgrhomo
          ""*                        '",'
          ""*                        '"2":"'
          ""*                        lwa_guiremi-wadat_ist
          ""                        '"}'
          ""                        INTO lwa_cabecera_sal2-zz_gui_rem.
          ""          ELSE.
          ""            CONCATENATE '{"0":"",'
          ""                         '"1":"'
          ""                         lwa_cabecera_salida-zz_tipnumgrhomo
          ""                         '",'
          ""                         '"2":""}'
          ""                         INTO lwa_cabecera_sal2-zz_gui_rem.
          ""          ENDIF.
          ""          CONCATENATE lwa_cabecera_sal2-zz_gui_rem lw_guias INTO lw_guias SEPARATED BY ','.
          ""          CONDENSE lw_guias.
          ""        ENDLOOP.
          ""        lw_length = strlen( lw_guias ).
          ""        lw_length = lw_length - 1.
          ""        lwa_cabecera_sal2-zz_gui_rem = lw_guias+0(lw_length).

          LOOP AT lt_guiremi INTO lwa_guiremi.
            CLEAR ls_guirem.
            MOVE-CORRESPONDING lwa_cabecera_salida TO ls_guirem.
            ls_guirem-zz_nroposicion = lines( es_cab-t_guirem ) + 1.
            ls_guirem-zztpcpsu  = lwa_cata01-zz_codigo_sunat.
            ls_guirem-xblnr     = lwa_guiremi-xblnr.
            ls_guirem-wadat_ist = lwa_guiremi-wadat_ist.
            APPEND ls_guirem TO es_cab-t_guirem.
          ENDLOOP.
        ENDIF.
*}  END OF REPLACE WMR-240117-3000006411

*{  BEGIN OF DELETE WMR-240117-3000006411
        ""      ELSE.
        ""        CONCATENATE '{"0":"",'
        ""                     '"1":"",'
        ""                     '"2":""}'
        ""*                     INTO lwa_cabecera_salida-zz_tipnumegre.
        ""                     INTO lwa_cabecera_sal2-zz_gui_rem.
*}  END OF DELETE WMR-240117-3000006411
      ENDIF.
*{  BEGIN OF INSERT WMR-140915
      CASE gw_license.
        WHEN '0020886783'. "Pedregal
          IF <lfs_vbrk>-zz_check_expor EQ abap_true.
*{  BEGIN OF REPLACE WMR-240117-3000006411
            ""            CONCATENATE '{"0":"",'
            ""                         '"1":"",'
            ""                         '"2":""}'
            ""                         INTO lwa_cabecera_sal2-zz_gui_rem.
            CLEAR es_cab-t_guirem.
*}  END OF REPLACE WMR-240117-3000006411
          ENDIF.
      ENDCASE.
*}  END OF INSERT WMR-140915

*    Pedido
      lwa_cabecera_salida-zz_vbeln = <lfs_vbrk>-zz_vbeln.

*     Orden de Compra
      lwa_cabecera_salida-zz_bstkd = <lfs_vbrk>-zz_bstkd.
      CASE gs_process-license.                                                "I-WMR-171218-3000009765
        WHEN '0021061097'.  " CMH                                             "I-WMR-171218-3000009765
          " Sector Mineral                                                    "I-WMR-171218-3000009765
          LOOP AT lt_const INTO ls_constants WHERE campo = 'SPART_MINE'.      "I-WMR-171218-3000009765
            CLEAR ls_spart.                                                   "I-WMR-171218-3000009765
            ls_spart-sign   = ls_constants-signo.                             "I-WMR-171218-3000009765
            ls_spart-option = ls_constants-opcion.                            "I-WMR-171218-3000009765
            ls_spart-low    = ls_constants-valor1.                            "I-WMR-171218-3000009765
            ls_spart-high   = ls_constants-valor2.                            "I-WMR-171218-3000009765
            APPEND ls_spart TO lr_spart.                                      "I-WMR-171218-3000009765
          ENDLOOP.                                                            "I-WMR-171218-3000009765
          IF <lfs_vbrk>-spart IN lr_spart AND lr_spart[] IS NOT INITIAL.      "I-WMR-171218-3000009765
          ELSE.                                                               "I-WMR-171218-3000009765
            CLEAR lwa_cabecera_salida-zz_bstkd.                               "I-WMR-171218-3000009765
          ENDIF.                                                              "I-WMR-171218-3000009765
      ENDCASE.                                                                "I-WMR-171218-3000009765

*    Indicador Retención (solo facturas nacionales)
*{  BEGIN OF REPLACE WMR-300615
      ""      IF pi_tipdoc = gc_tipdoc_fa AND <lfs_vbrk>-kalsm NOT IN ltr_kalsm_e.
      IF pi_tipdoc = gc_tipdoc_fa AND <lfs_vbrk>-zz_check_expor EQ abap_false.
*}  END OF REPLACE WMR-300615
        IF <lfs_vbrk>-totvvopgra NE 0.
          READ TABLE lt_cata14 INTO lwa_cata14 WITH KEY zz_opcion01 = '6'.
          IF sy-subrc = 0.
            lwa_cabecera_salida-zz_retenhomo = lwa_cata14-zz_codigo_sunat.
          ENDIF.
        ENDIF.
      ENDIF.

*    Indicador Detracción (solo facturas nacionales)
*{  BEGIN OF REPLACE WMR-300615
      ""      IF pi_tipdoc = gc_tipdoc_fa AND <lfs_vbrk>-kalsm NOT IN ltr_kalsm_e.
      IF pi_tipdoc = gc_tipdoc_fa AND <lfs_vbrk>-zz_check_expor EQ abap_false.
*}  END OF REPLACE WMR-300615
        IF <lfs_vbrk>-zz_detra IS NOT INITIAL.
*          <lfs_vbrk>-zz_saldoapagar = <lfs_vbrk>-imptotvent - <lfs_vbrk>-zz_detra.        "I-151021-NTP-3000017917 "-301122-NTP-3000020536

          lwa_cabecera_salida-zz_detra = <lfs_vbrk>-zz_detra.
          READ TABLE lt_cata14 INTO lwa_cata14 WITH KEY zz_opcion01 = '7'.
          IF sy-subrc = 0.
            lwa_cabecera_salida-zz_detrahomo = lwa_cata14-zz_codigo_sunat.
            " Código Bien/ Servicio sujeto a detracción                                   "I-WMR-070319-3000010823
            lwa_cabecera_sal2-zz_detracodbs = <lfs_vbrk>-zz_detracodbs.                   "I-WMR-070319-3000010823
            " Porcentaje de detracción                                                    "I-WMR-120619-3000010823
            lwa_cabecera_sal2-zz_detraporc  = <lfs_vbrk>-zz_detraporc.                    "I-WMR-120619-3000010823
            " Cuenta en Banco de la Nación                                                "I-WMR-120619-3000010823
            lwa_cabecera_sal2-zz_detractabn = <lfs_vbrk>-zz_detractabn.                   "I-WMR-120619-3000010823
            " Monto base de la detracción                                                 "I-WMR-130819-3000010823
            lwa_cabecera_sal2-zz_detra_base = <lfs_vbrk>-imporpermn_mtc.                  "I-WMR-130819-3000010823
            " Importe Total incluido la detracción                                        "I-WMR-130819-3000010823
            lwa_cabecera_sal2-zz_detra_itid = <lfs_vbrk>-imporpermn_mtc -                 "I-WMR-130819-3000010823
                                              <lfs_vbrk>-zz_detra.                        "I-WMR-130819-3000010823
            " Medio de Pago                                                               "I-WMR-260819-3000010823
            lwa_cabecera_sal2-zz_detra_mdpg = <lfs_vbrk>-zz_detra_mdpg.                   "I-WMR-260819-3000010823
            lwa_cabecera_sal2-zz_detra_mdoc = <lfs_vbrk>-zz_detra_mdoc.                   "I-151021-NTP-3000017917
*            lwa_cabecera_sal2-zz_saldoapagar = <lfs_vbrk>-zz_saldoapagar.                 "I-151021-NTP-3000017917 "-301122-NTP-3000020536
          ENDIF.
        ENDIF.
      ENDIF.

*{I-170122-NTP-3000018647
      "Saldo a pagar
      IF <lfs_vbrk>-zz_saldoapagar <> <lfs_vbrk>-imptotvent.
        lwa_cabecera_sal2-zz_saldoapagar = <lfs_vbrk>-zz_saldoapagar.
      ENDIF.
*}I-170122-NTP-3000018647

*     Forma de Pago
      lwa_cabecera_salida-zz_zterm = <lfs_vbrk>-zterm.

*{  BEGIN OF INSERT WMR-250915
      " No mostrar Forma de Pago para:
      CASE gw_license.
        WHEN '0020886783'.  "Pedregal
          IF <lfs_vbrk>-zz_check_expor EQ abap_true.
            CLEAR lwa_cabecera_salida-zz_zterm.
          ENDIF.
      ENDCASE.
*}  END OF INSERT WMR-250915

*     Incoterm
      lwa_cabecera_salida-zz_inco1 = <lfs_vbrk>-inco1.

*{  BEGIN OF INSERT WMR-100715
      " Incoterm 2
      ""      lwa_cabecera_sal2-zz_inco2   = <lfs_vbrk>-inco2.                      "E-WMR-230915
      get_incoterms_part_2( EXPORTING is_vbrk = <lfs_vbrk>       "I-WMR-230915
                                      it_vbrp = pi_vbrp          "I-WMR-280417-3000007140
                            RECEIVING r_inco2 = lwa_cabecera_sal2-zz_inco2 ).
*}  END OF INSERT WMR-100715

*     Número Factura interna
      lwa_cabecera_sal2-zz_fac_inte = <lfs_vbrk>-vbeln.

*     Última Factura SUNAT anulada
      lwa_cabecera_sal2-zz_ult_fac = gw_xblnr.
*{  BEGIN OF INSERT WMR-121015
      CASE gw_license.
        WHEN '0020316164'.  " Modasa
        WHEN OTHERS.
          CLEAR lwa_cabecera_sal2-zz_ult_fac.
      ENDCASE.
*}  END OF INSERT WMR-121015

*     Entrega
      READ TABLE pi_vbrp ASSIGNING <lfs_vbrp> INDEX 1.
*{  BEGIN OF REPLACE WMR-020216
      ""      lwa_cabecera_sal2-zz_entrega = <lfs_vbrp>-vgbel.
      IF sy-subrc EQ 0.
        CASE <lfs_vbrp>-vgtyp.
          WHEN gc_charj OR gc_chart.
            lwa_cabecera_sal2-zz_entrega = <lfs_vbrp>-vgbel.
        ENDCASE.
      ENDIF.
*}  END OF REPLACE WMR-020216

*     Zona de Venta
*{  BEGIN OF REPLACE WMR-020216
      ""      READ TABLE lt_knvv INTO ls_knvv WITH KEY kunnr = <lfs_vbrk>-kunrg
      ""                                               vkorg = <lfs_vbrk>-vkorg
      ""                                               vtweg = <lfs_vbrk>-vtweg
      ""                                               spart = <lfs_vbrk>-spart.
      ""      IF sy-subrc = 0.
      ""        lwa_cabecera_sal2-zz_zona_vta = ls_knvv-bzirk.
      ""      ENDIF.
      lwa_cabecera_sal2-zz_zona_vta = <lfs_vbrk>-bzirk.
*}  END OF REPLACE WMR-020216
*{  BEGIN OF INSERT WMR-101115
      " No mostrar Zona de Ventas para:
      CASE gw_license.
        WHEN '0020758614'.  " LSA
          CLEAR lwa_cabecera_sal2-zz_zona_vta.
      ENDCASE.
*}  END OF INSERT WMR-101115

*     Codigo de Cliente
*{  BEGIN OF REPLACE WMR-071015
      ""      lwa_cabecera_sal2-zz_cod_clie = <lfs_vbrk>-kunrg.
      CASE gw_license.
        WHEN '0020744072'   " Medrock
          OR '0020895037'.  " Promelsa
          lwa_cabecera_sal2-zz_cod_clie = <lfs_vbrk>-kunrg.
        WHEN OTHERS.
          lwa_cabecera_sal2-zz_cod_clie = <lfs_vbrk>-kunre.
      ENDCASE.
*}  END OF REPLACE WMR-071015

*     Código de Vendedor
      lwa_cabecera_sal2-zz_cod_vend = gw_pernr .

*{E-120321-NTP-3000016017
**     Fecha de Vencimiento de Fac./Bol/NC/ND
*      READ TABLE gt_t052 INTO ls_t052 WITH KEY zterm = <lfs_vbrk>-zterm.
*      IF sy-subrc = 0.
*        lw_fkdat  = <lfs_vbrk>-fkdat + ls_t052-ztag1.
*        CONCATENATE lw_fkdat+0(4) lw_fkdat+4(2) lw_fkdat+6(2) INTO lwa_cabecera_sal2-zz_fec_vto SEPARATED BY '-'.
*      ENDIF.
*}E-120321-NTP-3000016017
      lwa_cabecera_sal2-zz_fec_vto = <lfs_vbrk>-zz_fp_fec_vto. "I-120321-NTP-3000016017

*{  BEGIN OF INSERT WMR-200815
      " No mostrar Fecha de Vencimiento para:
      CASE gw_license.
        WHEN '0020879177'.  "Petramas
          CLEAR lwa_cabecera_sal2-zz_fec_vto.
        WHEN '0020886783'.  "Pedregal
          IF <lfs_vbrk>-zz_check_expor EQ abap_true.
            CLEAR lwa_cabecera_sal2-zz_fec_vto.
          ENDIF.
      ENDCASE.
*}  END OF INSERT WMR-200815

*     Direccion de llega del Documento
      lwa_cabecera_salida-zz_dir_lle = gw_dir_lle.

*     Destino Nacional para exportación
      CLEAR: lw_name.
      lw_name = <lfs_vbrk>-vbeln.
      lwa_cabecera_sal2-zz_des_nex = me->get_text( pi_name   = lw_name
                                                   pi_id     = 'Z046'
                                                   pi_object = 'VBBK' ).
*     Número de entrega mercadería
      CLEAR: lw_name.
      lw_name = <lfs_vbrk>-vbeln.
      lwa_cabecera_sal2-zz_nro_eme = me->get_text( pi_name   = lw_name
                                                   pi_id     = 'Z045'
                                                   pi_object = 'VBBK' ).

*{  BEGIN OF DELETE WMR-080715
      ""*     Anticipo no Aplica en ACFARMA
      ""*     Tipo de Operación (Anticipo)
      ""      lwa_cabecera_sal2-zz_tip_ope = me->get_tip_op( pi_vbrk = <lfs_vbrk> ).

      ""*     Monto Anticipo
      ""      lwa_cabecera_sal2-zz_mto_pre = 0.

      ""*     Total Anticipo
      ""      lwa_cabecera_sal2-zz_tot_ant = 0.
*}  END OF DELETE WMR-080715

*{  BEGIN OF INSERT WMR-160615
      CASE gw_license.
        WHEN '0020758614'.  " LSA
          CLEAR: ls_vbrp, ls_vbak, ls_likp, ls_port_data, ls_fishing_data.
          READ TABLE pi_vbrp INTO ls_vbrp WITH KEY vbeln = <lfs_vbrk>-vbeln.
          IF sy-subrc EQ 0.
            READ TABLE lt_vbak INTO ls_vbak WITH KEY vbeln = ls_vbrp-aubel.
            IF sy-subrc EQ 0.
              " Datos Portuarios
              get_port_data( EXPORTING i_vbeln      = <lfs_vbrk>-vbeln
                                       is_vbak      = ls_vbak
                             IMPORTING es_port_data = ls_port_data ).

              IF ls_port_data IS NOT INITIAL.
                MOVE-CORRESPONDING ls_port_data TO lwa_cabecera_sal2.
              ENDIF.

              CLEAR ls_likp.
              READ TABLE lt_likp INTO ls_likp WITH KEY vbeln = ls_vbrp-vgbel.
              " Datos de Pesca
              get_fishery_data( EXPORTING is_vbak         = ls_vbak
                                          is_likp         = ls_likp
                                IMPORTING es_fishery_data = ls_fishing_data ).

              IF ls_fishing_data IS NOT INITIAL.
                MOVE-CORRESPONDING ls_fishing_data TO lwa_cabecera_sal2.
              ENDIF.
            ENDIF.
          ENDIF.

        WHEN '0020311006'   " AIB
          OR '0020863116'   " AIB CLOUD
          OR '0020673876'   " BETA                                              "I-WMR-241116-3000005346
          OR '0020974592'   " DANPER                                            "I-WMR-270317-3000006749
          OR '0021061097'.  " CMH                                               "I-WMR-191018-3000009765
          CLEAR: ls_vbrp, ls_vbak, ls_likp, ls_port_data.
          READ TABLE pi_vbrp INTO ls_vbrp WITH KEY vbeln = <lfs_vbrk>-vbeln.
          IF sy-subrc EQ 0.
            READ TABLE lt_likp INTO ls_likp WITH KEY vbeln = ls_vbrp-vgbel.
            " Datos Portuarios
            get_port_data( EXPORTING i_vbeln      = <lfs_vbrk>-vbeln
                                     is_likp      = ls_likp
                                     is_vbrk      = <lfs_vbrk>
                                     is_vbrp      = ls_vbrp                     "I-WMR-191018-3000009765
                           IMPORTING es_port_data = ls_port_data ).

            IF ls_port_data IS NOT INITIAL.
              MOVE-CORRESPONDING ls_port_data TO lwa_cabecera_sal2.
            ENDIF.
          ENDIF.

*{I-NTP050917-3000008049: set
          IF gw_license EQ '0020311006' OR  " AIB
             gw_license EQ '0020863116'.    " AIB CLOUD
            CLEAR l_land1.
            "Via de pago en idioma del solicitante
            READ TABLE lt_kna1 INTO ls_kna1 WITH KEY kunnr = <lfs_vbrk>-kunrg.
            IF sy-subrc = 0.
              "El idioma determina el pais
              CASE ls_kna1-spras.
                WHEN gc_espanol. l_land1 = gc_peru.
                WHEN gc_ingles.  l_land1 = gc_eeuu.
                WHEN OTHERS.
              ENDCASE.

              IF l_land1 IS NOT INITIAL.
                READ TABLE lt_t042z INTO ls_t042z WITH TABLE KEY land1 = l_land1
                                                                 zlsch = <lfs_vbrk>-zlsch.
                IF sy-subrc = 0.
                  lwa_cabecera_sal2-zz_viapagodesc = ls_t042z-text1.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
*}I-NTP050917-3000008049

*{  BEGIN OF INSERT WMR-241116-3000005346
        WHEN '0020673876'.  " BETA
          CLEAR: ls_vbrp, ls_vbak, ls_likp, ls_port_data.
          READ TABLE pi_vbrp INTO ls_vbrp WITH KEY vbeln = <lfs_vbrk>-vbeln.
          IF sy-subrc EQ 0.
            READ TABLE lt_likp INTO ls_likp WITH KEY vbeln = ls_vbrp-vgbel.
            IF sy-subrc EQ 0.
              " Datos Portuarios
              get_port_data( EXPORTING i_vbeln      = <lfs_vbrk>-vbeln
                                       is_likp      = ls_likp
                                       is_vbrk      = <lfs_vbrk>
                             IMPORTING es_port_data = ls_port_data ).

              IF ls_port_data IS NOT INITIAL.
                MOVE-CORRESPONDING ls_port_data TO lwa_cabecera_sal2.
              ENDIF.
            ENDIF.
          ENDIF.
*}  END OF INSERT WMR-241116-3000005346

*{  BEGIN OF INSERT WMR-270317-3000006749
        WHEN '0020974592'.  " DANPER
          CLEAR: ls_vbrp, ls_vbak, ls_likp, ls_port_data.
          READ TABLE pi_vbrp INTO ls_vbrp WITH KEY vbeln = <lfs_vbrk>-vbeln.
          IF sy-subrc EQ 0.
            READ TABLE lt_likp INTO ls_likp WITH KEY vbeln = ls_vbrp-vgbel.
            " Datos Portuarios
            get_port_data( EXPORTING i_vbeln      = <lfs_vbrk>-vbeln
                                     is_likp      = ls_likp
                                     is_vbrk      = <lfs_vbrk>
                           IMPORTING es_port_data = ls_port_data ).

            IF ls_port_data IS NOT INITIAL.
              MOVE-CORRESPONDING ls_port_data TO lwa_cabecera_sal2.
            ENDIF.
          ENDIF.
*}  END OF INSERT WMR-270317-3000006749

      ENDCASE.
*}  END OF INSERT WMR-160615

*{  BEGIN OF INSERT WMR-230615
      " Dirección Punto de Emisión
      LOOP AT pi_vbrp ASSIGNING <lfs_vbrp> WHERE vbeln = <lfs_vbrk>-vbeln.
        EXIT.
      ENDLOOP.
      IF sy-subrc EQ 0.
*{  BEGIN OF REPLACE WMR-140915
        ""        SELECT SINGLE adrnr
        ""          INTO lw_adrnr
        ""          FROM t001w
        ""          WHERE werks EQ <lfs_vbrp>-werks.
        CASE gw_license.
          WHEN '0020886783'.  "Pedregal
            " Punto de Emisión: Oficina de Ventas
            SELECT SINGLE adrnr
              INTO lw_adrnr
              FROM tvbur
              WHERE vkbur EQ <lfs_vbrp>-vkbur.
          WHEN OTHERS.
            " Punto de Emisión: Centro
            SELECT SINGLE adrnr
              INTO lw_adrnr
              FROM t001w
              WHERE werks EQ <lfs_vbrp>-werks.
        ENDCASE.
*}  END OF REPLACE WMR-140915
        IF sy-subrc EQ 0.
          ls_address = get_address_data( lw_adrnr ).
          lwa_cabecera_salida-zz_cityp_code2  = ls_address-ubigeo.
          lwa_cabecera_salida-zz_street2      = ls_address-street.
          lwa_cabecera_salida-zz_house_num12  = ls_address-stnumb.
          lwa_cabecera_salida-zz_str_suppl12  = ls_address-str_suppl1.
          lwa_cabecera_salida-zz_city12       = ls_address-distri.
          lwa_cabecera_salida-zz_city22       = ls_address-provin.
          lwa_cabecera_salida-zz_bezei2       = ls_address-depmto.
          lwa_cabecera_salida-zz_country2     = ls_address-pais.
          lwa_cabecera_salida-zz_taxjurcode2  = ls_address-taxjurcode.
        ENDIF.
      ENDIF.
*}  END OF INSERT WMR-230615

*{  BEGIN OF INSERT WMR-140219-3000009765
      " Código de Establecimiento Sunat
      CASE lwa_cabecera_salida-zz_verubl.
        WHEN gc_verubl-ubl2_1.
          get_codigo_estab_sunat( EXPORTING is_vbrk   = <lfs_vbrk>
                                            it_vbrp   = pi_vbrp
                                            is_cabsal = lwa_cabecera_salida
                                  RECEIVING r_taxjurcode2_ho = lwa_cabecera_salida-zz_taxjurcode2_ho ).
      ENDCASE.
*}  END OF INSERT WMR-140219-3000009765

*{  BEGIN OF INSERT WMR-080715
*    Tipo de Operación
      lwa_cabecera_sal2-zz_tip_ope = <lfs_vbrk>-zz_tip_ope.

      " Aplicación de Anticipos
      CASE <lfs_vbrk>-zz_verubl.                                                  "I-WMR-190219-3000011108
        WHEN gc_verubl-ubl2_0.                                                    "I-WMR-190219-3000011108
          CASE lwa_cabecera_sal2-zz_tip_ope.
            WHEN gc_tipop_04.
            WHEN OTHERS.
              get_fact_anticipos( EXPORTING is_cabsal2 = lwa_cabecera_sal2
                                            is_vbrk    = <lfs_vbrk>
                                            it_vbrp    = lt_vbrp_a
*{  BEGIN OF REPLACE WMR-240117-3000006411
      ""                              CHANGING  ct_fact    = lt_aplica_anticipo ).

      ""          READ TABLE lt_aplica_anticipo INTO ls_aplica_anticipo INDEX 1.
      ""          IF sy-subrc EQ 0.
      ""            lwa_cabecera_sal2-zz_tot_ant = ls_aplica_anticipo-zz_tot_ant.
      ""          ENDIF.
                                  IMPORTING e_tot_ant  = lwa_cabecera_sal2-zz_tot_ant
                                  CHANGING  ct_fact    = es_cab-t_aplant ).
*}  END OF REPLACE WMR-240117-3000006411
          ENDCASE.
        WHEN gc_verubl-ubl2_1.                                                    "I-WMR-190219-3000011108
          IF <lfs_vbrk>-zz_check_anticp <> abap_true.                             "I-WMR-190219-3000011108
            get_fact_anticipos(                                                 "I-WMR-190219-3000011108
              EXPORTING is_cabsal2 = lwa_cabecera_sal2                          "I-WMR-190219-3000011108
                        is_vbrk    = <lfs_vbrk>                                 "I-WMR-190219-3000011108
                        it_vbrp    = lt_vbrp_a                                  "I-WMR-190219-3000011108
              IMPORTING e_tot_ant  = lwa_cabecera_sal2-zz_tot_ant               "I-WMR-190219-3000011108
              CHANGING  ct_fact    = es_cab-t_aplant ).                         "I-WMR-190219-3000011108
          ENDIF.                                                                  "I-WMR-190219-3000011108
      ENDCASE.                                                                    "I-WMR-190219-3000011108

      " Total opcional: Flete
      lwa_cabecera_sal2-zz_tot_flete  = <lfs_vbrk>-zz_tot_flete.

      " Total opcional: Seguro
      lwa_cabecera_sal2-zz_tot_seguro = <lfs_vbrk>-zz_tot_seguro.
*}  END OF INSERT WMR-080715

*{  BEGIN OF INSERT WMR-140715
      " Código Formato PDF
      IF <lfs_vbrk>-zz_check_expor EQ abap_false.
        lwa_cabecera_sal2-zz_pdffrm = '01'.   " Venta Nacional
      ELSE.
        lwa_cabecera_sal2-zz_pdffrm = '02'.   " Venta al Exterior
      ENDIF.
*}  END OF INSERT WMR-140715

*{  BEGIN OF INSERT WMR-290415
      " Dirección de Lugar de Entrega
*{  BEGIN OF DELETE WMR-071215
      ""      CASE lwa_cabecera_sal2-zz_tip_ope.
      ""        WHEN gc_tipop_05.   " Venta Itinerante
*}  END OF DELETE WMR-071215
      ls_address = obtener_lugar_entrega( <lfs_vbrk> ).
      lwa_cabecera_sal2-zz_dp_ubigeo  = ls_address-ubigeo.
      lwa_cabecera_sal2-zz_dp_calle   = ls_address-street.
      lwa_cabecera_sal2-zz_dp_nropri  = ls_address-stnumb.
      lwa_cabecera_sal2-zz_dp_nroint  = ls_address-str_suppl1.
      lwa_cabecera_sal2-zz_dp_distri  = ls_address-distri.
      lwa_cabecera_sal2-zz_dp_provin  = ls_address-provin.
      lwa_cabecera_sal2-zz_dp_depart  = ls_address-depmto.
      lwa_cabecera_sal2-zz_dp_pais    = ls_address-pais.
*{  BEGIN OF DELETE WMR-071215
      ""      ENDCASE.
*}  END OF DELETE WMR-071215

      " Número de Placa
      lwa_cabecera_sal2-zz_placa = obtener_numero_placa( <lfs_vbrk> ).
*}  END OF INSERT WMR-290415

*{  BEGIN OF INSERT WMR-171016-3000005361
      " Peso Neto, Peso Bruto, Peso Drenado
      set_header_weight( EXPORTING is_vbrk   = <lfs_vbrk>
                                   it_vbrp   = pi_vbrp
                         IMPORTING es_weight = ls_weight ).
      MOVE-CORRESPONDING ls_weight TO lwa_cabecera_sal2.

      " Certificaciones para Exportación
      set_header_expcertif( EXPORTING is_vbrk   = <lfs_vbrk>
                                      it_vbrp   = pi_vbrp
                            IMPORTING es_certif = ls_certif ).
      MOVE-CORRESPONDING ls_certif TO lwa_cabecera_sal2.

      " Importe en Letras en idioma Inglés
      ""      CASE pi_tipdoc.                                                           "E-WMR-290317-3000006749
      ""        WHEN gc_tipdoc_fa.  " Facturas                                          "E-WMR-290317-3000006749
      IF <lfs_vbrk>-zz_check_expor EQ abap_true. " Exportación
        lw_spras = 'EN'.
        lwa_cabecera_sal2-zz_amoiwen = get_spell_amount(           i_amount = <lfs_vbrk>-imptotvent
                                                                   i_waers  = <lfs_vbrk>-waerk
                                                                   i_fkdat  = <lfs_vbrk>-fkdat
                                                                   i_spras  = lw_spras ).
      ENDIF.
      ""      ENDCASE.                                                                  "E-WMR-290317-3000006749
*}  END OF INSERT WMR-171016-3000005361

*{  BEGIN OF INSERT WMR-221116-3000005346
      " Factura/ Boleta SD referencia de NC/ ND
      lwa_cabecera_sal2-zz_sdrefer  = <lfs_vbrk>-zz_sdrefer.

      " Exportación Parte 2 SET_AGROINDUSTRY_DATA_PART2
      set_agroindustry_data_part2( EXPORTING is_vbrk     = <lfs_vbrk>
                                             it_vbrp     = pi_vbrp
                                             it_likp     = lt_likp
                                   IMPORTING es_exppart2 = ls_export_part2 ).
      MOVE-CORRESPONDING ls_export_part2 TO lwa_cabecera_sal2.

      " Usuario
      lwa_cabecera_sal2-zz_ernam = <lfs_vbrk>-ernam.

      " Dirección de Sede Productiva
      lwa_cabecera_sal2-zz_dir_sdpr = get_dir_sede_productiva( is_vbrk = <lfs_vbrk>
                                                               it_vbrp = pi_vbrp
                                                               it_likp = lt_likp ).

      " Texto antes del final de posiciones
      lwa_cabecera_sal2-zz_text_bep = get_text_export_bep( <lfs_vbrk> ).

      " Documento Contable
      CASE pi_tipdoc.
        WHEN gc_tipdoc_fa OR gc_tipdoc_bl.
          lwa_cabecera_sal2-zz_nrodocfi = get_fi_document( lwa_cabecera_sal2-zz_fac_inte ).
        WHEN gc_tipdoc_nc OR gc_tipdoc_nd.
          lwa_cabecera_sal2-zz_nrodocfi = get_fi_document( lwa_cabecera_sal2-zz_sdrefer ).
      ENDCASE.

      " Texto Incoterm 3: Texto para Total Exportación
      lwa_cabecera_sal2-zz_inco3 = get_text_totexp( <lfs_vbrk> ).
*}  END OF INSERT WMR-221116-3000005346

*{  BEGIN OF INSERT WMR-270317-3000006749
      " Exportación: Tipo de Envío
      lwa_cabecera_sal2-zz_exp_tpenv = get_tipo_envio_export( is_vbrk = <lfs_vbrk>
                                                              it_vbrp = pi_vbrp ).
*}  END OF INSERT WMR-270317-3000006749

*{  BEGIN OF INSERT WMR-150617-3000007448
      " Exportación: Versión
      CASE gw_license.
        WHEN '0020974592'.  " DANPER
          lwa_cabecera_sal2-zz_exp_versi = <lfs_vbrk>-inco2.
      ENDCASE.

      " Exportación: Pallets y Unidades
      CASE gw_license.
        WHEN '0020974592'.  " DANPER
          get_pallets_and_units_export( EXPORTING is_vbrk      = <lfs_vbrk>
                                                  it_vbrp      = pi_vbrp
                                        IMPORTING e_exp_pallet = lwa_cabecera_sal2-zz_exp_palet
                                                  e_exp_units  = lwa_cabecera_sal2-zz_exp_unida ).
      ENDCASE.

*{  BEGIN OF DELETE WMR-191018-3000009765
      ""      " Observaciones
      ""      CASE gw_license.
      ""        WHEN '0020974592'.  " DANPER
      ""          lwa_cabecera_sal2-zz_text_obs = get_text_observations( <lfs_vbrk> ).
      ""      ENDCASE.
*}  END OF DELETE WMR-191018-3000009765

*{  BEGIN OF INSERT WMR-191018-3000009765
      " Observaciones
      get_text_observations( EXPORTING is_vbrk = <lfs_vbrk>
                             CHANGING  cs_cab2 = lwa_cabecera_sal2 ).
*}  END OF INSERT WMR-191018-3000009765

*}  END OF INSERT WMR-150617-3000007448

*{I-NTP260318-3000009389
      CASE gw_license.
        WHEN '0020974592'  " DANPER
          OR '0021061097'. " CMH        "I-PBM211118-3000010907
          lwa_cabecera_sal2-zz_text_ctabank = get_text_ctabank( <lfs_vbrk> ).
      ENDCASE.
*}I-NTP260318-3000009389

*{  BEGIN OF INSERT WMR-191018-3000009765
      get_data_mining( EXPORTING is_vbrk = <lfs_vbrk>
                                 it_vbrp = pi_vbrp
                       CHANGING  cs_cab2 = lwa_cabecera_sal2 ).
*}  END OF INSERT WMR-191018-3000009765

*{  BEGIN OF INSERT WMR-150218-3000009072
      " Si Boleta o NC/ND referido a Boleta con Rebate, No imprimir N°doc identidad del adquirente
      IF <lfs_vbrk>-zz_bolreb EQ abap_true.
        lwa_cabecera_sal2-zz_bol_npnad = abap_true.
      ENDIF.
*}  END OF INSERT WMR-150218-3000009072

      DESCRIBE TABLE pi_vbrp LINES lwa_cabecera_salida-zz_nrolines_det. "I-3000010823-NTP070219

*{I-100321-NTP-3000016017: Forma de pago
      lwa_cabecera_sal2-zz_fp_tipo = <lfs_vbrk>-zz_fp_tipo.
      lwa_cabecera_sal2-zz_fp_total  = <lfs_vbrk>-zz_fp_total.

      LOOP AT <lfs_vbrk>-t_formapago INTO ls_formapago.
        ls_formapago_sal-bukrs          = lwa_cabecera_sal2-bukrs.                        "I-WMR-19032021-3000016455
        ls_formapago_sal-zz_nrodocsap   = lwa_cabecera_sal2-zz_nrodocsap.
        ls_formapago_sal-zz_numeracion  = lwa_cabecera_sal2-zz_numeracion.
        ls_formapago_sal-zz_nrofila     = sy-tabix.
        ls_formapago_sal-zz_cuota       = ls_formapago-cuota.
        ls_formapago_sal-zz_fec_vto     = ls_formapago-fec_vto.
        APPEND ls_formapago_sal TO es_cab-t_formapago.
      ENDLOOP.
*}I-100321-NTP-3000016017

*     Adicionar registro
      APPEND lwa_cabecera_salida TO es_cab-t_header.
      APPEND lwa_cabecera_sal2   TO es_cab-t_header2.  "Campos adicionales Guia
    ENDLOOP.

    es_cab-s_ubl = gs_ubl.  "I-3000010823-NTP110219

  ENDMETHOD.                    "set_cab


  METHOD set_homo_cli.

    DATA: lt_vbrk    TYPE STANDARD TABLE OF lty_vbrk,
          lt_adrc    TYPE STANDARD TABLE OF ty_adrc,
          lt_adr6    TYPE STANDARD TABLE OF ty_adr6,
          lt_adrc1   TYPE STANDARD TABLE OF ty_adrc,
          lt_t005t   TYPE HASHED TABLE OF   t005t WITH UNIQUE KEY land1,
          lt_t005u   TYPE HASHED TABLE OF   t005u WITH UNIQUE KEY land1 bland,
          lt_bp_pers TYPE TABLE OF ty_bp_pers,                                                  "I-WMR-271118-3000010852

          lr_reltyp  TYPE RANGE OF but051-reltyp,                                               "I-WMR-271118-3000010852
          lr_pafkt   TYPE RANGE OF but051-pafkt,                                                "I-WMR-271118-3000010852

          ls_adrc    TYPE ty_adrc,
          ls_t005t   TYPE t005t,
          ls_t005u   TYPE t005u,
          ls_adr6    TYPE ty_adr6,
          ls_cliente LIKE LINE OF es_cli-t_customer,
          ls_vbpa_ag LIKE LINE OF lt_vbpa,                                                      "I-WMR-040517-3000007114
          ls_vbpa_rg LIKE LINE OF lt_vbpa,                                                      "I-WMR-040517-3000007114
          ls_bp_pers LIKE LINE OF lt_bp_pers,                                                   "I-WMR-271118-3000010852
          ls_const   LIKE LINE OF lt_const,                                                     "I-WMR-271118-3000010852
          ls_reltyp  LIKE LINE OF lr_reltyp,                                                    "I-WMR-271118-3000010852
          ls_pafkt   LIKE LINE OF lr_pafkt,                                                     "I-WMR-271118-3000010852

          lv_lcnum   TYPE vbkd-lcnum,
          lv_texto   TYPE string,
          lv_name    TYPE thead-tdname.

    FIELD-SYMBOLS:
      <fs_adrc> TYPE ty_adrc,
      <fs_vbrk> LIKE LINE OF pi_vbrk,
      <fs_cab>  LIKE LINE OF cs_cab-t_header,
      <fs_cab2> LIKE LINE OF cs_cab-t_header2.                                                           "I-WMR-231116-3000005346

    lt_vbrk[] = pi_vbrk[].
    CASE gw_license.
      WHEN '0020744072'   " Medrock
        OR '0020895037'.  " Promelsa
        SORT lt_vbrk BY adrnr_rg ASCENDING.
        DELETE ADJACENT DUPLICATES FROM lt_vbrk COMPARING adrnr_rg.
      WHEN OTHERS.
        SORT lt_vbrk BY adrnr_re ASCENDING.
        DELETE ADJACENT DUPLICATES FROM lt_vbrk COMPARING adrnr_re.
    ENDCASE.

    IF lt_vbrk[] IS NOT INITIAL.
      CASE gw_license.
        WHEN '0020744072'   " Medrock
          OR '0020895037'.  " Promelsa
          " Datos de dirección y nombres
          SELECT addrnumber cityp_code street house_num1 str_suppl1 str_suppl2 str_suppl3
                 city1 city2 country region name1 name2 name3 name4 tel_number
                 location                                                                       "I-WMR-301015
                 fax_number                                                                     "I-WMR-231116-3000005346
            INTO CORRESPONDING FIELDS OF TABLE lt_adrc
            FROM adrc
            FOR ALL ENTRIES IN lt_vbrk
            WHERE addrnumber EQ lt_vbrk-adrnr_rg.

          " Correo electrónico
          SELECT addrnumber persnumber smtp_addr
            INTO TABLE lt_adr6
            FROM adr6
            FOR ALL ENTRIES IN lt_vbrk
            WHERE addrnumber EQ lt_vbrk-adrnr_rg
              AND persnumber EQ space
*{  BEGIN OF INSERT WMR-090816-3000005457
              AND flgdefault EQ abap_true.
*}  END OF INSERT WMR-090816-3000005457

*{  BEGIN OF INSERT WMR-271118-3000010852
        WHEN '0021061097'.  " CMH
          " Datos de dirección y nombres
          SELECT addrnumber cityp_code street house_num1 str_suppl1 str_suppl2 str_suppl3
                 city1 city2 country region name1 name2 name3 name4 tel_number
                 location
                 fax_number
            INTO CORRESPONDING FIELDS OF TABLE lt_adrc
            FROM adrc
            FOR ALL ENTRIES IN lt_vbrk
            WHERE addrnumber EQ lt_vbrk-adrnr_re.

          " Correo electrónico
          LOOP AT lt_const INTO ls_const.
            CASE ls_const-campo.
              WHEN 'RELTYP'.  " Tipo de relación de interlocutor comercial
                CLEAR ls_reltyp.
                ls_reltyp-sign   = ls_const-signo.
                ls_reltyp-option = ls_const-opcion.
                ls_reltyp-low    = ls_const-valor1.
                ls_reltyp-high   = ls_const-valor2.
                APPEND ls_reltyp TO lr_reltyp.
              WHEN 'PAFKT_CLIE'.   " Función de interlocutor
                CLEAR ls_pafkt.
                ls_pafkt-sign   = ls_const-signo.
                ls_pafkt-option = ls_const-opcion.
                ls_pafkt-low    = ls_const-valor1.
                ls_pafkt-high   = ls_const-valor2.
                APPEND ls_pafkt TO lr_pafkt.
            ENDCASE.
          ENDLOOP.

          IF lr_reltyp[] IS NOT INITIAL AND lr_pafkt[] IS NOT INITIAL.
            SELECT l~customer t~relnr t~partner1 t~partner2 t~date_to t~reltyp t~pafkt t~smtp_address
              INTO TABLE lt_bp_pers
              FROM cvi_cust_link AS l
              INNER JOIN but000 AS b ON ( l~partner_guid = b~partner_guid )
              INNER JOIN but051 AS t ON ( t~partner1 = b~partner )
              FOR ALL ENTRIES IN lt_vbrk
              WHERE l~customer = lt_vbrk-kunre
                AND t~reltyp   IN lr_reltyp
                AND t~pafkt    IN lr_pafkt.

            IF lt_bp_pers[] IS INITIAL.
              LOOP AT lt_const INTO ls_const.
                CASE ls_const-campo.
                  WHEN 'PAFKT_VEND'.   " Función de interlocutor
                    CLEAR ls_pafkt.
                    ls_pafkt-sign   = ls_const-signo.
                    ls_pafkt-option = ls_const-opcion.
                    ls_pafkt-low    = ls_const-valor1.
                    ls_pafkt-high   = ls_const-valor2.
                    APPEND ls_pafkt TO lr_pafkt.
                ENDCASE.
              ENDLOOP.

              SELECT l~customer t~relnr t~partner1 t~partner2 t~date_to t~reltyp t~pafkt t~smtp_address
                INTO TABLE lt_bp_pers
                FROM cvi_cust_link AS l
                INNER JOIN but000 AS b ON ( l~partner_guid = b~partner_guid )
                INNER JOIN but051 AS t ON ( t~partner1 = b~partner )
                FOR ALL ENTRIES IN lt_vbrk
                WHERE l~customer = lt_vbrk-kunre
                  AND t~reltyp   IN lr_reltyp
                  AND t~pafkt    IN lr_pafkt.
            ENDIF.
          ENDIF.

*}  END OF INSERT WMR-271118-3000010852
        WHEN OTHERS.
          " Datos de dirección y nombres
          SELECT addrnumber cityp_code street house_num1 str_suppl1 str_suppl2 str_suppl3
                 city1 city2 country region name1 name2 name3 name4 tel_number
                 location                                                                       "I-WMR-301015
                 fax_number                                                                     "I-WMR-231116-3000005346
            INTO CORRESPONDING FIELDS OF TABLE lt_adrc
            FROM adrc
            FOR ALL ENTRIES IN lt_vbrk
            WHERE addrnumber EQ lt_vbrk-adrnr_re.

          " Correo electrónico
          SELECT addrnumber persnumber smtp_addr
            INTO TABLE lt_adr6
            FROM adr6
            FOR ALL ENTRIES IN lt_vbrk
            WHERE addrnumber EQ lt_vbrk-adrnr_re
              AND persnumber EQ space
*{  BEGIN OF INSERT WMR-090816-3000005457
              AND flgdefault EQ abap_true.
*}  END OF INSERT WMR-090816-3000005457
      ENDCASE.

      " Denominación de Departamento
      lt_adrc1[] = lt_adrc[].
      SORT lt_adrc1 BY country ASCENDING region ASCENDING.
      DELETE ADJACENT DUPLICATES FROM lt_adrc1 COMPARING country region.

      IF lt_adrc1[] IS NOT INITIAL.
        SELECT *
          INTO TABLE lt_t005u
          FROM t005u
          FOR ALL ENTRIES IN lt_adrc1
          WHERE spras EQ sy-langu
            AND land1 EQ lt_adrc1-country
            AND bland EQ lt_adrc1-region.
      ENDIF.

      " Denominación de País
      lt_adrc1[] = lt_adrc[].
      SORT lt_adrc1 BY country ASCENDING.
      DELETE ADJACENT DUPLICATES FROM lt_adrc1 COMPARING country.

      IF lt_adrc1[] IS NOT INITIAL.
        SELECT *
          INTO TABLE lt_t005t
          FROM t005t
          FOR ALL ENTRIES IN lt_adrc1
          WHERE spras EQ sy-langu
            AND land1 EQ lt_adrc1-country.
      ENDIF.

      LOOP AT lt_adrc ASSIGNING <fs_adrc>.
        " Denominación de Departamento
        READ TABLE lt_t005t INTO ls_t005t
             WITH TABLE KEY land1 = <fs_adrc>-country.
        IF sy-subrc EQ 0.
          <fs_adrc>-countr_txt = ls_t005t-landx.
        ENDIF.
        " Denominación de País
        READ TABLE lt_t005u INTO ls_t005u
             WITH TABLE KEY land1 = <fs_adrc>-country
                            bland = <fs_adrc>-region.
        IF sy-subrc EQ 0.
          <fs_adrc>-region_txt = ls_t005u-bezei.
        ENDIF.
        " Correo electrónico
        READ TABLE lt_adr6 INTO ls_adr6
             WITH KEY addrnumber = <fs_adrc>-addrnumber.
        IF sy-subrc = 0.
          <fs_adrc>-smtp_addr = ls_adr6-smtp_addr.
        ENDIF.
      ENDLOOP.
    ENDIF.

    LOOP AT pi_vbrk ASSIGNING <fs_vbrk>.
      CLEAR ls_cliente.
      ls_cliente-zz_nrodocsap  = <fs_vbrk>-vbeln.
      ls_cliente-zz_numeracion = <fs_vbrk>-zz_numeracion.

      CLEAR ls_adrc.
      CASE gw_license.
        WHEN '0020744072'   " Medrock
          OR '0020895037'.  " Promelsa
          READ TABLE lt_adrc INTO ls_adrc
               WITH KEY addrnumber = <fs_vbrk>-adrnr_rg.
        WHEN OTHERS.
          READ TABLE lt_adrc INTO ls_adrc
               WITH KEY addrnumber = <fs_vbrk>-adrnr_re.
      ENDCASE.
      IF sy-subrc EQ 0.
        " RUC
        CASE gw_license.
          WHEN '0020744072'   " Medrock
            OR '0020895037'.  " Promelsa
            ls_cliente-ruc   = <fs_vbrk>-kunrg.
          WHEN OTHERS.
            ls_cliente-ruc   = <fs_vbrk>-kunre.
        ENDCASE.
        " Teléfono
        ls_cliente-telefono  = ls_adrc-tel_number.
        " Correo Electrónico
*{  BEGIN OF INSERT WMR-271118-3000010852
        CASE gs_process-license.
          WHEN '0021061097'.  " CMH
            LOOP AT lt_bp_pers INTO ls_bp_pers WHERE kunnr = <fs_vbrk>-kunre.
              IF ls_cliente-email IS INITIAL.
                ls_cliente-email = ls_bp_pers-smtp_address.
              ELSE.
                CONCATENATE ls_cliente-email ls_bp_pers-smtp_address
                  INTO ls_cliente-email SEPARATED BY ';'.
              ENDIF.
            ENDLOOP.
            " Correo de Seguimiento - Facturación Electrónica                                 "I-PBM061218-3000009765
            CLEAR ls_cliente-email_seg.                                                       "I-PBM061218-3000009765
            LOOP AT lt_const INTO ls_const WHERE valor1 = <fs_vbrk>-bukrs.                    "I-PBM061218-3000009765
              CASE ls_const-campo.                                                            "I-PBM061218-3000009765
                WHEN 'MAILSEG_FE'.                                                            "I-PBM061218-3000009765
                  IF ls_cliente-email_seg IS INITIAL.                                         "I-PBM061218-3000009765
                    ls_cliente-email_seg = ls_const-valor2.                                   "I-PBM061218-3000009765
                  ELSE.                                                                       "I-PBM061218-3000009765
                    CONCATENATE ls_cliente-email_seg ls_const-valor2                          "I-PBM061218-3000009765
                      INTO ls_cliente-email_seg SEPARATED BY ';'.                             "I-PBM061218-3000009765
                  ENDIF.                                                                      "I-PBM061218-3000009765
              ENDCASE.                                                                        "I-PBM061218-3000009765
            ENDLOOP.                                                                          "I-PBM061218-3000009765
          WHEN OTHERS.
*}  END OF INSERT WMR-271118-3000010852
            ls_cliente-email     = ls_adrc-smtp_addr.
        ENDCASE.                                                                              "I-WMR-271118-3000010852
        " Razón Social
        CONCATENATE ls_adrc-name1
                    ls_adrc-name2
                    ls_adrc-name3
                    INTO ls_cliente-razon_social SEPARATED BY space.
        IF <fs_vbrk>-zz_check_expor EQ abap_true.
          ls_cliente-razon_social = <fs_vbrk>-name12.
        ENDIF.

*{  BEGIN OF INSERT WMR-040517-3000007114
        CASE gw_license.
          WHEN '0020673876'. "Beta
            CLEAR: ls_vbpa_ag, ls_vbpa_rg.
            " Datos del Solicitante
            READ TABLE lt_vbpa INTO ls_vbpa_ag WITH KEY vbeln = <fs_vbrk>-vbeln parvw = gc_parvw_ag.
            " Datos del Responsable de Pago
            READ TABLE lt_vbpa INTO ls_vbpa_rg WITH KEY vbeln = <fs_vbrk>-vbeln parvw = gc_parvw_rg.

            " Si Solicitante del Extranjero y Responsable de Pago Nacional: No tomar Departamento
            IF ( ls_vbpa_ag-land1 NE gc_peru ) AND ( ls_vbpa_rg-land1 EQ gc_peru ).
              CLEAR ls_adrc-region_txt.
            ENDIF.
        ENDCASE.

*}  END OF INSERT WMR-040517-3000007114

        " Dirección
        IF <fs_vbrk>-zz_check_expor EQ abap_true.       " Exportacion
          CONCATENATE ls_adrc-street
                      ls_adrc-house_num1
                      ls_adrc-str_suppl1
                      ls_adrc-str_suppl2
                      ls_adrc-str_suppl3
                      ls_adrc-city2
                      ls_adrc-city1
                      ls_adrc-region_txt
                      ls_adrc-countr_txt
                      INTO ls_cliente-direccion SEPARATED BY space.
          CONDENSE ls_cliente-direccion.
          TRANSLATE ls_cliente-direccion TO UPPER CASE.
        ELSE.                                           " Nacional
*{  BEGIN OF INSERT WMR-271118-3000010852
          CASE gs_process-license.
            WHEN '0021061097'.  " CMH
              CONCATENATE ls_adrc-street
                          ls_adrc-house_num1
                          ls_adrc-str_suppl1
                          ls_adrc-str_suppl2
                          ls_adrc-str_suppl3
                          '-' ls_adrc-city2
                          '-' ls_adrc-city1
                          INTO ls_cliente-direccion SEPARATED BY space.
            WHEN OTHERS.
*}  END OF INSERT WMR-271118-3000010852
              CONCATENATE ls_adrc-street
                          ls_adrc-house_num1
                          ls_adrc-str_suppl1
                          ls_adrc-str_suppl2
                          ls_adrc-str_suppl3
                          ls_adrc-city2
                          ls_adrc-city1
                          ls_adrc-region_txt
                          INTO ls_cliente-direccion SEPARATED BY space.
          ENDCASE.                                                                              "I-WMR-271118-3000010852
          CONDENSE ls_cliente-direccion.
          TRANSLATE ls_cliente-direccion TO UPPER CASE.
        ENDIF.

        " Exportación
        IF <fs_vbrk>-zz_check_expor EQ abap_true.
          CASE gw_license.
            WHEN '0020729594'.  " Austral
              SELECT SINGLE lcnum
              FROM vbkd
              INTO lv_lcnum
              WHERE vbeln EQ <fs_vbrk>-zz_vbeln.
              IF sy-subrc EQ 0.
                lv_name = lv_lcnum.
                lv_texto = me->get_text( pi_name   = lv_name
                                         pi_id     = 'Z14'
                                         pi_object = 'AKKP' ).
                IF lv_texto IS NOT INITIAL.
                  CONDENSE lv_texto.
                  ls_cliente-direccion = lv_texto.
                ENDIF.
              ENDIF.
            WHEN '0020886783'.  " Pedregal
              " Calle/ Número + Calle 4 + Calle 5
              CONCATENATE ls_adrc-street
                          ls_adrc-str_suppl3
                          ls_adrc-location                                                      "I-WMR-301015
                          INTO ls_cliente-direccion.
              TRANSLATE ls_cliente-direccion TO UPPER CASE.
          ENDCASE.
        ENDIF.

      ENDIF.

      " Asignar Dirección de cliente a Cabecera y Json
      READ TABLE cs_cab-t_header ASSIGNING <fs_cab>
           WITH KEY bukrs         = <fs_vbrk>-bukrs
                    zz_nrodocsap  = <fs_vbrk>-vbeln
                    zz_numeracion = <fs_vbrk>-zz_numeracion.
      IF sy-subrc EQ 0.
        <fs_cab>-zz_dir_usuad = ls_cliente-direccion.

        IF ls_cliente-email IS NOT INITIAL.                                         "I-PBM131218-3000009765
          CONCATENATE ls_cliente-email ls_cliente-email_seg                         "I-PBM131218-3000009765
              INTO ls_cliente-email SEPARATED BY ';'.                               "I-PBM131218-3000009765
        ENDIF.                                                                      "I-PBM131218-3000009765
        <fs_cab>-zz_maildest  = ls_cliente-email.
      ENDIF.

*{  BEGIN OF INSERT WMR-231116-3000005346
      " Asignar Datos ampliados de Cliente
      READ TABLE cs_cab-t_header2 ASSIGNING <fs_cab2>
           WITH KEY bukrs         = <fs_vbrk>-bukrs
                    zz_nrodocsap  = <fs_vbrk>-vbeln
                    zz_numeracion = <fs_vbrk>-zz_numeracion.
      IF sy-subrc EQ 0.
        <fs_cab2>-zz_clie_tel  = ls_adrc-tel_number.
        <fs_cab2>-zz_clie_fax  = ls_adrc-fax_number.
        <fs_cab2>-zz_clie_mail = ls_adrc-smtp_addr.
        CASE gw_license.
          WHEN '0020673876'.  " Beta
            SELECT SINGLE name1 INTO <fs_cab2>-zz_clie_cnt
              FROM knvk
              WHERE kunnr EQ <fs_vbrk>-kunre.
        ENDCASE.
      ENDIF.
*}  END OF INSERT WMR-231116-3000005346

      " Adicionar registro
      APPEND ls_cliente TO es_cli-t_customer.
    ENDLOOP.

  ENDMETHOD.                    "set_cli


  METHOD set_homo_det.

    DATA: lt_vbrp_f          TYPE         ltt_vbrp_f,
          lt_cardes          TYPE ltt_cardes,                                          "I-3000011712-NTP210419
          lwa_detalle_salida LIKE LINE OF es_det-t_detail,
          ls_cardes_salida   LIKE LINE OF es_det-t_cardes,                             "I-3000011712-NTP100419
          lt_vbrp            TYPE ltt_vbrp,                                            "I-WMR-100715
          ls_vbrp            LIKE LINE OF lt_vbrp,                                     "I-WMR-100715
          ls_cardes          TYPE lty_cardes.                                          "I-3000011712-NTP100419
    FIELD-SYMBOLS: <lfs_vbrk> LIKE LINE OF pi_vbrk,
                   <lfs_vbrp> LIKE LINE OF lt_vbrp_f.

    DATA: ls_lips LIKE LINE OF lt_lips,
          ls_mara LIKE LINE OF gt_mara.

    DATA: lw_lfimg  TYPE char16,
          lw_lote   TYPE char80,
          lw_length TYPE i,
          lw_lines  TYPE i,
          lw_posit  TYPE zostb_docexposde-zz_nroposicion.                             "I-WMR-061118-3000010860
*          l_percent TYPE dmbtr.                                                       "I-3000011712-NTP220419 "E-070921-NTP-3000017358

    FIELD-SYMBOLS: <fs_cabsal> LIKE LINE OF es_det-t_header,                          "I-3000011712-NTP210419
                   <fs_aplant> LIKE LINE OF es_det-t_aplant.                          "I-3000011712-NTP210419

*{  BEGIN OF DELETE WMR-051216-3000006175
    ""*Constantes para ZNCA
    ""    CLEAR:ltr_fkart3.
    ""    LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '9'
    ""                                                AND zz_opcion02 = '5'.
    ""      lwa_fkart-low = lwa_constfkart-fkart.
    ""      lwa_fkart-sign = 'I'.
    ""      lwa_fkart-option = 'EQ'.
    ""      APPEND lwa_fkart TO ltr_fkart3.
    ""    ENDLOOP.
*}  END OF DELETE WMR-051216-3000006175

*{  BEGIN OF INSERT WMR-100715
    " Tipos de posición de aplicación de anticipos
    CLEAR ltr_pstyv.
    LOOP AT lt_constpstyv INTO lwa_constpstyv WHERE zz_opcion01 = '3'.
      lwa_pstyv-low     = lwa_constpstyv-pstyv.
      lwa_pstyv-sign    = 'I'.
      lwa_pstyv-option  = 'EQ'.
      APPEND lwa_pstyv TO ltr_pstyv.
    ENDLOOP.

    " No se informan posiciones de aplicación de anticipos
    LOOP AT pi_vbrp INTO ls_vbrp.
      READ TABLE pi_vbrk ASSIGNING <lfs_vbrk>
           WITH KEY vbeln = ls_vbrp-vbeln.
      IF sy-subrc EQ 0.
        CASE <lfs_vbrk>-zz_verubl.                                              "I-WMR-190219-3000011108
          WHEN gc_verubl-ubl2_0.                                                "I-WMR-190219-3000011108
            CASE <lfs_vbrk>-zz_tip_ope.
              WHEN gc_tipop_04.
              WHEN OTHERS.
                " Aplicación de Anticipos
                IF ls_vbrp-pstyv IN ltr_pstyv AND ltr_pstyv[] IS NOT INITIAL.
                  CONTINUE.
                ENDIF.
            ENDCASE.
          WHEN gc_verubl-ubl2_1.                                                "I-WMR-190219-3000011108
            IF <lfs_vbrk>-zz_check_anticp <> abap_true.                         "I-WMR-190219-3000011108
              " Aplicación de Anticipos                                         "I-WMR-190219-3000011108
              IF ls_vbrp-pstyv IN ltr_pstyv AND ltr_pstyv[] IS NOT INITIAL.     "I-WMR-190219-3000011108
                CONTINUE.                                                       "I-WMR-190219-3000011108
              ENDIF.                                                            "I-WMR-190219-3000011108
            ENDIF.                                                              "I-WMR-190219-3000011108
        ENDCASE.                                                                "I-WMR-190219-3000011108
        APPEND ls_vbrp TO lt_vbrp.
      ENDIF.
    ENDLOOP.
*}  END OF INSERT WMR-100715

*   Casuisticas especiales: Agrupamiento de Pos o proceso normal
    me->set_vbrp_final( EXPORTING pi_tipdoc = pi_tipdoc
                                  pi_vbrk   = pi_vbrk
*{  BEGIN OF REPLACE WMR-100715
""                                  pi_vbrp   = pi_vbrp
                                  pi_vbrp   = lt_vbrp
*}  END OF REPLACE WMR-100715
                        IMPORTING pe_vbrp_f = lt_vbrp_f ).

*   Armar tabla de salida
    LOOP AT lt_vbrp_f ASSIGNING <lfs_vbrp>.

      CLEAR lwa_detalle_salida.

*     Leer cabecera
      READ TABLE pi_vbrk ASSIGNING <lfs_vbrk> WITH KEY vbeln = <lfs_vbrp>-vbeln.

      MOVE-CORRESPONDING <lfs_vbrp> TO lwa_detalle_salida.
      lwa_detalle_salida-zz_nrodocsap       = <lfs_vbrp>-vbeln.          " Número de documento SAP
*      lwa_detalle_salida-zz_nroposicion     = <lfs_vbrp>-posnr.          " Número de Posición en el detalle "E-WMR-061118-3000010860
      ADD 1 TO lw_posit.                                                              "I-WMR-061118-3000010860
      lwa_detalle_salida-zz_nroposicion     = lw_posit.                  " Posición   "I-WMR-061118-3000010860
      lwa_detalle_salida-zz_numeracion      = <lfs_vbrk>-zz_numeracion.  " Número generado para SUNAT
      lwa_detalle_salida-zz_material        = <lfs_vbrp>-matnr.          " Código SAP del material

*{I-3000010993-NTP271218: Cubso
      get_material_codigo_cubso( EXPORTING is_vbrk = <lfs_vbrk>
                                           is_vbrp = <lfs_vbrp>
                                 RECEIVING r_material_sunat = lwa_detalle_salida-zz_material_sunat ).

      IF lwa_detalle_salida-zz_material_sunat IS NOT INITIAL.                                      "I-PBM281218-3000010993
        IF strlen( lwa_detalle_salida-zz_material_sunat ) > 8.                                     "I-PBM281218-3000010993
          lwa_detalle_salida-zz_material_sunat = lwa_detalle_salida-zz_material_sunat(8).          "I-PBM281218-3000010993
        ENDIF.                                                                                     "I-PBM281218-3000010993
      ENDIF.                                                                                       "I-PBM281218-3000010993
*}I-3000010993-NTP271218

*{  BEGIN OF REPLACE WMR-051216-3000006175
      ""      IF ( ltr_fkart3[] IS NOT INITIAL ) AND ( <lfs_vbrk>-fkart IN ltr_fkart3[] ). "'ZNCA'. /NC Anticipo (AUSTRAL)
      ""        lwa_detalle_salida-zz_valunitario = <lfs_vbrp>-netwr.              "Valor Unitario por item: CASO CAFARMA
      ""        lwa_detalle_salida-zz_cantidad        = 1.                         "Cantidad de unidades por ítem
      ""      ELSE.
      ""        lwa_detalle_salida-zz_valunitario     = <lfs_vbrp>-kbetr.          " Valor Unitario por item
      ""        lwa_detalle_salida-zz_cantidad        = <lfs_vbrp>-fkimg.          " Cantidad de unidades por ítem
      ""      ENDIF.
      lwa_detalle_salida-zz_valunitario     = <lfs_vbrp>-kbetr.          " Valor Unitario por item
      CASE gs_process-license.                                                          "I-WMR-231118-3000010907
        WHEN '0021061097'.  " CMH                                                       "I-WMR-231118-3000010907
          " Valor Unitario por item a 4 decimales                                       "I-WMR-231118-3000010907
          lwa_detalle_salida-zz_valunit_4d  = <lfs_vbrp>-zz_valunit_4d.                 "I-WMR-231118-3000010907
      ENDCASE.                                                                          "I-WMR-231118-3000010907
      lwa_detalle_salida-zz_cantidad        = <lfs_vbrp>-fkimg.          " Cantidad de unidades por ítem
*}  END OF REPLACE WMR-051216-3000006175
      lwa_detalle_salida-zz_unimed          = <lfs_vbrp>-vrkme.          " Unidad de medida por ítem
      lwa_detalle_salida-zz_descservicio    = <lfs_vbrp>-arktx.          " Descripción detallada del servicio prestado, bien vendido o cedido en uso, indicando las características
*{  BEGIN OF INSERT WMR-221216-3000006022

      CASE gw_license.
*{I-NTP-310117-3000006519
        WHEN '0020673876'. "Beta
*          IF <lfs_vbrk>-zz_tip_ope = gc_tipop_02.  "E-3000011101-NTP060319
          IF <lfs_vbrk>-zz_check_expor = abap_on.   "I-3000011101-NTP060319
*{E-WMR-07092021-3000016539
**            lwa_detalle_salida-zz_valvenxite      = <lfs_vbrp>-kzwi1.     " Valor de venta por ítem
**            lwa_detalle_salida-zz_valvenxite_taxa = <lfs_vbrp>-kzwi1.     " Valor de venta por ítem base "I-3000011712-NTP210419
*{E-WMR-07092021-3000016539
*{I-WMR-07092021-3000016539
            lwa_detalle_salida-zz_valvenxite      = <lfs_vbrp>-valvenxite.      " Valor de venta por ítem
            lwa_detalle_salida-zz_valvenxite_taxa = <lfs_vbrp>-valvenxite.      " Valor de venta por ítem
*{I-WMR-07092021-3000016539
          ELSE.
            lwa_detalle_salida-zz_valvenxite      = <lfs_vbrp>-valvenxite.      " Valor de venta por ítem
            lwa_detalle_salida-zz_valvenxite_taxa = <lfs_vbrp>-valvenxite_taxa. " Valor de venta por ítem base "I-3000011712-NTP210419
          ENDIF.
*}I-NTP-310117-3000006519

*{  BEGIN OF INSERT WMR-290719-3000010823
        WHEN '0020262397'   " ARTESCO
          OR '0020299975'.  "Acfarma                                                                            "I-160421-NTP-3000016125
          lwa_detalle_salida-zz_valvenxite      = <lfs_vbrp>-valvenxite.      " Valor de venta por ítem
          lwa_detalle_salida-zz_valvenxite_taxa = <lfs_vbrp>-valvenxite_taxa. " Valor de venta por ítem base
          IF <lfs_vbrk>-zz_check_tg = abap_true.
            lwa_detalle_salida-zz_valvenxite      = <lfs_vbrp>-totvalveno.
            lwa_detalle_salida-zz_valvenxite_taxa = <lfs_vbrp>-totvalveno.
          ENDIF.
*}  END OF INSERT WMR-290719-3000010823
**{I-100120-NTP-3000013600
*        WHEN '0021131379'. " RESEMIN
*          "Verificar SI es exportación y tiene desc.global
*          IF <lfs_vbrp>-t_cardes_glob IS NOT INITIAL AND <lfs_vbrk>-zz_check_expor = abap_on.
*            lwa_detalle_salida-zz_valvenxite      = <lfs_vbrp>-kzwi1.
*            lwa_detalle_salida-zz_valvenxite_base = <lfs_vbrp>-kzwi3.
*            CLEAR <lfs_vbrp>-mwsbp.
*
*            "Transferencia gratuita
*            IF <lfs_vbrk>-zz_check_tg IS NOT INITIAL OR                                           "I-SVM170120-3000013703
*               <lfs_vbrk>-tfact = gc_tipdoc_nc.                                                   "I-140720-NTP-3000014590
*              IF <lfs_vbrp>-fkimg IS NOT INITIAL.                                                 "I-SVM170120-3000013703
*                <lfs_vbrp>-pventa      = <lfs_vbrp>-kzwi1 / <lfs_vbrp>-fkimg.                       "I-SVM170120-3000013703
*              ENDIF.
*            ENDIF.                                                                                "I-SVM170120-3000013703
*          ELSE.
*            lwa_detalle_salida-zz_valvenxite      = <lfs_vbrp>-valvenxite.
*            lwa_detalle_salida-zz_valvenxite_base = <lfs_vbrp>-valvenxite_base.
*          ENDIF.
**}I-100120-NTP-3000013600
*{I-WMR-10082021-3000017358
        WHEN '0020311006'   " AIB
          OR '0020863116'.  " AIB CLOUD
          lwa_detalle_salida-zz_valvenxite      = <lfs_vbrp>-valvenxite.        " Valor de venta por ítem
          IF <lfs_vbrk>-zz_check_expor = abap_on.
            lwa_detalle_salida-zz_valvenxite_taxa = <lfs_vbrp>-valvenxite.      " Valor de venta por ítem Base
          ELSE.
            lwa_detalle_salida-zz_valvenxite_taxa = <lfs_vbrp>-valvenxite_taxa. " Valor de venta por ítem base
          ENDIF.
*}I-WMR-10082021-3000017358
        WHEN OTHERS.
          lwa_detalle_salida-zz_valvenxite      = <lfs_vbrp>-valvenxite.     " Valor de venta por ítem
          lwa_detalle_salida-zz_valvenxite_taxa = <lfs_vbrp>-valvenxite_taxa. " Valor de venta por ítem base
      ENDCASE.

      " Reemplazar '"' para evitar problemas en la decodificación del JSon
      REPLACE ALL OCCURRENCES OF '\' IN lwa_detalle_salida-zz_descservicio WITH '\\'.       "I-WMR-050218-3000009155
      REPLACE ALL OCCURRENCES OF '/' IN lwa_detalle_salida-zz_descservicio WITH '\/'.       "I-WMR-050218-3000009155
      REPLACE ALL OCCURRENCES OF gc_double_quotes IN lwa_detalle_salida-zz_descservicio WITH gc_backslash_doublequotes.
*}  END OF INSERT WMR-221216-3000006022

      lwa_detalle_salida-zz_precioventa     = <lfs_vbrp>-pventa.         " Precio de venta unitario por item y código
      CONDENSE lwa_detalle_salida-zz_descservicio.

*     Material Controlado "C"
      READ TABLE gt_mara INTO ls_mara WITH KEY matnr = <lfs_vbrp>-matnr.
      IF sy-subrc = 0 AND ls_mara-labor = gw_labor. "101
        lwa_detalle_salida-zz_mat_cont  = gw_ctrol. "C
      ENDIF.

*     Unidad de Medida
      IF lwa_detalle_salida-zz_unimed IS NOT INITIAL.
        READ TABLE lt_t006 INTO lwa_t006 WITH KEY msehi = <lfs_vbrp>-vrkme.
*{  BEGIN OF INSERT WMR-270715
        IF sy-subrc NE 0.
          SELECT SINGLE msehi isocode
            INTO CORRESPONDING FIELDS OF lwa_t006
            FROM t006
            WHERE msehi EQ <lfs_vbrp>-vrkme.
        ENDIF.
*}  END OF INSERT WMR-270715
        IF sy-subrc EQ 0.
          lwa_detalle_salida-zz_unimedhom = lwa_t006-isocode.

*{  BEGIN OF INSERT WMR-190615
          " Unidad de Medida de Impresión PDF
          IF gw_und_prnt_sap EQ abap_true.
            CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
              EXPORTING
                input          = <lfs_vbrp>-vrkme
              IMPORTING
                output         = lwa_detalle_salida-zz_und_prnt
              EXCEPTIONS ##FM_SUBRC_OK
                unit_not_found = 1
                OTHERS         = 2.
          ELSE.
            lwa_detalle_salida-zz_und_prnt = lwa_detalle_salida-zz_unimedhom.
          ENDIF.
*}  END OF INSERT WMR-190615
        ENDIF.
      ENDIF.

*{  BEGIN OF DELETE WMR-050615
      ""*     Transferencia Gratuita
      ""      REFRESH ltr_fkart.
      ""      LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '2' AND zz_opcion02 = ' '.
      ""        lwa_fkart-low = lwa_constfkart-fkart.
      ""        lwa_fkart-sign = 'I'.
      ""        lwa_fkart-option = 'EQ'.
      ""        APPEND lwa_fkart TO ltr_fkart.
      ""      ENDLOOP.
*}  END OF DELETE WMR-050615

*     Precio de venta unitario por ítem y código
      IF <lfs_vbrp>-pventa NE 0
      OR <lfs_vbrp>-valrefunit NE 0   " Posición bonificada                           "I-WMR-240915
      OR <lfs_vbrp>-zz_valrefunit_4d <> 0                                             "I-WMR-05052020-3000014434
      OR <lfs_vbrk>-t_formapago IS NOT INITIAL                                        "I-120321-NTP-3000016017
      OR <lfs_vbrk>-zz_check_nccero IS NOT INITIAL.                                   "I-040521-NTP-3000016917
*{I-090120-NTP-3000013600
        IF <lfs_vbrk>-zz_check_tg IS NOT INITIAL.
          READ TABLE lt_cata16 INTO lwa_cata16 WITH KEY zz_opcion01 = '2'.
        ELSE.
          READ TABLE lt_cata16 INTO lwa_cata16 WITH KEY zz_opcion01 = '1'.
        ENDIF.
*}I-090120-NTP-3000013600
        IF sy-subrc = 0.
          lwa_detalle_salida-zz_precioventaho = lwa_cata16-zz_codigo_sunat.
        ENDIF.
      ENDIF.

*     Afectación al IGV (obligatorio)
      lwa_detalle_salida-zz_afectigv0102  = <lfs_vbrp>-mwsbp.          " Afectacion al IGV, Campo 01 y 02
      lwa_detalle_salida-zz_codafecigv_h  = lwa_detalle_salida-zz_afectigv03      = <lfs_vbrp>-afigv.          " Afectacion al IGV, Campo 02
      lwa_detalle_salida-zz_afectigv07    = <lfs_vbrk>-igvporcent.     " % IGV z "I-3000010823-NTP060219

*{I-100920-NTP-3000014481
      CASE gs_ubl-zz_verubl.
        WHEN gc_verubl-ubl2_0.
          READ TABLE lt_cata05 INTO lwa_cata05 WITH KEY zz_codigo_sunat = <lfs_vbrp>-tributo.
          IF sy-subrc = 0.
            lwa_detalle_salida-zz_afectigv04   = lwa_cata05-zz_codigo_sunat. " Sumatoria IGV - Campo 03
            lwa_detalle_salida-zz_afectigv05   = lwa_cata05-zz_desc_cod_suna." Sumatoria IGV - Campo 04
            lwa_detalle_salida-zz_afectigv06   = lwa_cata05-zz_un_ece.       " Sumatoria IGV - Campo 05
          ENDIF.
*}I-3000011108-NTP180219
        WHEN gc_verubl-ubl2_1.
*{I-NTP191118-3000009651
*{I-170220-NTP-3000013785
          READ TABLE lt_catahomo07 INTO lwa_catahomo07 WITH KEY taxm1 = <lfs_vbrp>-taxm1              "I-210420-SVM-3000014302
                                                                augru = <lfs_vbrp>-augru_auft
                                                                zz_codigo_sunat = lwa_detalle_salida-zz_afectigv03.
          IF lwa_catahomo07-zz_tributo IS NOT INITIAL.
            lwa_cata07-zz_tributo = lwa_catahomo07-zz_tributo.
          ELSE.
*}I-170220-NTP-3000013785
            READ TABLE lt_cata07 INTO lwa_cata07 WITH KEY zz_codigo_sunat = lwa_detalle_salida-zz_afectigv03.
          ENDIF.
          IF sy-subrc = 0.
            READ TABLE lt_cata05 INTO lwa_cata05 WITH KEY zz_codigo_sunat = lwa_cata07-zz_tributo.
*}I-NTP191118-3000009651
            IF sy-subrc = 0.
              lwa_detalle_salida-zz_codtrib_h  = lwa_detalle_salida-zz_afectigv04   = lwa_cata05-zz_codigo_sunat. " Sumatoria IGV - Campo 03
              lwa_detalle_salida-zz_afectigv05 = lwa_cata05-zz_desc_cod_suna." Sumatoria IGV - Campo 04
              lwa_detalle_salida-zz_afectigv06 = lwa_cata05-zz_un_ece.       " Sumatoria IGV - Campo 05
            ENDIF.
          ENDIF.
      ENDCASE.

*     Sistema de ISC por item (No Aplica Austral)
      IF <lfs_vbrp>-sumaiscsv NE 0.
        lwa_detalle_salida-zz_tipisc03        = <lfs_vbrp>-tipisc.         " Sistema de ISC por item
        lwa_detalle_salida-zz_tipisc0102      = <lfs_vbrp>-sumaiscsv.      " Sistema de ISC por item, suma ISC total
        READ TABLE lt_cata05 INTO lwa_cata05 WITH KEY zz_opcion01 = '2'.
        IF sy-subrc = 0.
          lwa_detalle_salida-zz_tipisc04   = lwa_cata05-zz_codigo_sunat.   " Sumatoria ISC - Campo 03
          lwa_detalle_salida-zz_tipisc05   = lwa_cata05-zz_desc_cod_suna.  " Sumatoria ISC - Campo 04
          lwa_detalle_salida-zz_tipisc06   = lwa_cata05-zz_un_ece.         " Sumatoria ISC - Campo 05
        ENDIF.
      ENDIF.

*     Valor referencial unitario por ítem en operaciones no onerosas
      IF <lfs_vbrp>-valrefunit NE 0
      OR <lfs_vbrp>-zz_valrefunit_4d <> 0.                                              "I-WMR-05052020-3000014434
        READ TABLE lt_cata16 INTO lwa_cata16 WITH KEY zz_opcion01 = '2'.
        IF sy-subrc = 0.
          lwa_detalle_salida-zz_valrefunit     = <lfs_vbrp>-valrefunit.
          lwa_detalle_salida-zz_valrefunit_4d  = <lfs_vbrp>-zz_valrefunit_4d.           "I-WMR-181019-3000012593
          lwa_detalle_salida-zz_valrefunithom  = lwa_cata16-zz_codigo_sunat.
        ENDIF.
      ENDIF.

*     Material
*{  BEGIN OF REPLACE WMR-180915
      ""      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      CALL FUNCTION 'CONVERSION_EXIT_MATN1_OUTPUT'
*}  END OF REPLACE WMR-180915
        EXPORTING
          input  = lwa_detalle_salida-zz_material
        IMPORTING
          output = lwa_detalle_salida-zz_material.

*{I-3000011712-NTP060519
*     Cargos y Descuentos por item
      LOOP AT <lfs_vbrp>-t_cardes_item INTO ls_cardes.
        ls_cardes_salida-zz_nrodocsap   = lwa_detalle_salida-zz_nrodocsap.
        ls_cardes_salida-zz_nroposicion = lwa_detalle_salida-zz_nroposicion.
        ls_cardes_salida-zz_numeracion  = lwa_detalle_salida-zz_numeracion.
        ls_cardes_salida-zz_nrofila     = sy-tabix.
        ls_cardes_salida-zz_dscto       = ls_cardes-dscto.
        ls_cardes_salida-zz_dscto_base  = ls_cardes-dscto_base.
        ls_cardes_salida-zz_dscto_pct   = ls_cardes-dscto_pct.
        ls_cardes_salida-zz_dscto_com   = ls_cardes-dscto_com.
        ls_cardes_salida-zz_cargo       = ls_cardes-cargo.
        ls_cardes_salida-zz_cargo_base  = ls_cardes-cargo_base.
        ls_cardes_salida-zz_cargo_pct   = ls_cardes-cargo_pct.
        ls_cardes_salida-zz_cargo_com   = ls_cardes-cargo_com.

        CASE gs_ubl-zz_verubl.
          WHEN gc_verubl-ubl2_0.
            ls_cardes_salida-zz_dscto_com = gs_consextsun-zz_desctoxitehom.
        ENDCASE.
        APPEND ls_cardes_salida TO es_det-t_cardes.
      ENDLOOP.
*}I-3000011712-NTP060519

*     Lotes y Cantidad x Lote
      lwa_detalle_salida-zz_lot_mat = <lfs_vbrp>-zjson.

*{  BEGIN OF INSERT WMR-170615
      " Texto de posición
      lwa_detalle_salida-zz_text_pos = <lfs_vbrp>-text_pos.
*}  END OF INSERT WMR-170615

*{  BEGIN OF INSERT WMR-250116
      " Descuento 01
      lwa_detalle_salida-zz_dscto_01 = <lfs_vbrp>-zz_dscto_01.

      " Descuento 02
      lwa_detalle_salida-zz_dscto_02 = <lfs_vbrp>-zz_dscto_02.
*}  END OF INSERT WMR-250116

*{  BEGIN OF INSERT WMR-20042020-3000014097
      " Descripción detallada del servicio prestado: Alternativo
      lwa_detalle_salida-zz_dessrv_alt = <lfs_vbrp>-zz_dessrv_alt.
      REPLACE ALL OCCURRENCES OF '/' IN lwa_detalle_salida-zz_dessrv_alt WITH '\/'.
      REPLACE ALL OCCURRENCES OF '\' IN lwa_detalle_salida-zz_dessrv_alt WITH '\\'.
      REPLACE ALL OCCURRENCES OF '/' IN lwa_detalle_salida-zz_dessrv_alt WITH '\/'.
      REPLACE ALL OCCURRENCES OF gc_double_quotes IN lwa_detalle_salida-zz_dessrv_alt WITH gc_backslash_doublequotes.
      CONDENSE lwa_detalle_salida-zz_dessrv_alt.

      " Texto de Posición: Alternativo
      lwa_detalle_salida-zz_txtpos_alt = <lfs_vbrp>-zz_txtpos_alt.
*}  END OF INSERT WMR-20042020-3000014097

*     Adicionar registro
      APPEND lwa_detalle_salida TO es_det-t_detail.

    ENDLOOP.

*{I-3000011712-NTP210419: $CARDES
**********************************************************************
*   Adicionar anticipo a descuentos globales
**********************************************************************
    LOOP AT es_det-t_header ASSIGNING <fs_cabsal>.
      "Valor venta
      LOOP AT es_det-t_detail INTO lwa_detalle_salida WHERE zz_nrodocsap = <fs_cabsal>-zz_nrodocsap.
*        ADD lwa_detalle_salida-zz_valvenxite TO <fs_cabsal>-zz_valven. "U-090920-NTP-3000014481
      ENDLOOP.

      "Construir cardes
      FREE lt_cardes.
      LOOP AT es_det-t_aplant ASSIGNING <fs_aplant> WHERE zz_nrodocsap = <fs_cabsal>-zz_nrodocsap.
        ls_cardes-pstyv = <fs_aplant>-pstyv.
        ls_cardes-dscto = <fs_aplant>-zz_mto_neto.
        COLLECT ls_cardes INTO lt_cardes.
      ENDLOOP.

      "Homologar cardes y pasar a salida
      LOOP AT lt_cardes INTO ls_cardes.
        ls_cardes_salida-zz_nrodocsap   = <fs_cabsal>-zz_nrodocsap.
        ls_cardes_salida-zz_numeracion  = <fs_cabsal>-zz_numeracion.
        ls_cardes_salida-zz_nrofila     = sy-tabix.
        ls_cardes_salida-zz_dscto       = ls_cardes-dscto.
        ls_cardes_salida-zz_dscto_base  = <fs_cabsal>-zz_valven.
        IF ls_cardes-dscto IS NOT INITIAL.
*          l_percent                       = ls_cardes-dscto * 100 / <fs_cabsal>-zz_valven.           "D-PBM130821-3000016828
*          l_percent                       = ls_cardes-dscto / <fs_cabsal>-zz_valven.                  "I-PBM130821-3000016828  "E-070921-NTP-3000017358
          ls_cardes_salida-zz_dscto_pct   = ls_cardes-dscto / ls_cardes_salida-zz_dscto_base.         "I-070921-NTP-3000017358
        ENDIF.
*        ls_cardes_salida-zz_dscto_pct   = l_percent.                                                 "E-070921-NTP-3000017358

        READ TABLE lt_catahomo53 INTO lwa_catahomo53 WITH KEY pstyv = ls_cardes-pstyv
                                                              zz_codtrib_h = lwa_detalle_salida-zz_codtrib_h.
        IF sy-subrc = 0.
          ls_cardes_salida-zz_dscto_com = lwa_catahomo53-zz_codigo_sunat.
        ENDIF.
        APPEND ls_cardes_salida TO es_det-t_cardes.
        CLEAR ls_cardes_salida.

        "Total dscto global
        "ADD ls_cardes-dscto TO <lfs_vbrk>-desctotot_nabi. "E-040220-NTP-3000013808
      ENDLOOP.

      "Total descuentos
      IF <lfs_vbrk>-desctotot_nabi NE 0.
        <fs_cabsal>-zz_desctotot_nabi = <lfs_vbrk>-desctotot_nabi.
        READ TABLE lt_cata14 INTO lwa_cata14 WITH KEY zz_opcion01 = '4' .
        IF sy-subrc = 0.
*          <fs_cabsal>-zz_desctotot_nabi_homo = lwa_cata14-zz_codigo_sunat. "E-290721-NTP-3000017358
        ENDIF.
      ENDIF.
    ENDLOOP.
*}I-3000011712-NTP210419

  ENDMETHOD.                    "set_det


  METHOD set_homo_res.

    DATA: lt_temp             TYPE ltt_desalres,
          lwa_cabecera_salida LIKE LINE OF pe_cab,
          lwa_detalle_salida  LIKE LINE OF pe_det,
          lv_correl           TYPE numc7,
          lv_corrin           TYPE numc7.

    FIELD-SYMBOLS: <lfs_detalle_salida> LIKE LINE OF pi_det,
                   <fs_temp>            LIKE LINE OF lt_temp.

*   Obtener primera posicion y su correlativo
    READ TABLE pi_det INTO lwa_detalle_salida INDEX 1.
    IF sy-subrc EQ 0.
      lv_correl = lwa_detalle_salida-zz_correla_low - 1.
      lv_corrin = lwa_detalle_salida-zz_correla_low.
    ENDIF.

*   Eliminar valores diferentes
    lt_temp[] = pi_det[].
    LOOP AT lt_temp ASSIGNING <fs_temp>.
      CLEAR: <fs_temp>-zz_nrodocsap,
             <fs_temp>-zz_numeracion,
             <fs_temp>-zz_femision,
             <fs_temp>-zz_correla_high.
    ENDLOOP.

*   Sumarizar
    SORT lt_temp BY zz_tipodoc zz_serie "CSM-04.12.2015
                               zz_correla_low.  "I-WMR-291116-3000006194
    LOOP AT lt_temp ASSIGNING <fs_temp>.
      ADD 1 TO lv_correl.
      IF lv_correl NE <fs_temp>-zz_correla_low.
        lv_corrin = <fs_temp>-zz_correla_low.
        lv_correl = <fs_temp>-zz_correla_low.
      ENDIF.
*      AT NEW zz_tipodoc. "CSM-04.12.2015
      AT NEW zz_serie.    "CSM-04.12.2015
        lv_corrin = <fs_temp>-zz_correla_low.
        lv_correl = <fs_temp>-zz_correla_low.
      ENDAT.
      CLEAR lwa_detalle_salida.
      MOVE-CORRESPONDING <fs_temp> TO lwa_detalle_salida.
      lwa_detalle_salida-zz_correla_low = lv_corrin.
      COLLECT lwa_detalle_salida INTO pe_det.
    ENDLOOP.

*   Detalle salida
    LOOP AT pe_det ASSIGNING <lfs_detalle_salida>.

*     Correlativo Superior
      CLEAR lv_correl.
      lv_correl = <lfs_detalle_salida>-zz_correla_low - 1.
      LOOP AT pi_det INTO lwa_detalle_salida WHERE zz_serie   = <lfs_detalle_salida>-zz_serie
                                               AND zz_tipodoc = <lfs_detalle_salida>-zz_tipodoc
                                               AND zz_waerk   = <lfs_detalle_salida>-zz_waerk.
        IF lwa_detalle_salida-zz_correla_low LT lv_correl.
          CONTINUE.
        ENDIF.
        ADD 1 TO lv_correl.
        IF lv_correl LT lwa_detalle_salida-zz_correla_low.
          lv_correl = lv_correl - 1.
          EXIT.
        ENDIF.
      ENDLOOP.
      <lfs_detalle_salida>-zz_correla_high = lv_correl.

*     Total valor de venta operaciones gravadas
      READ TABLE lt_cata11 INTO lwa_cata11 WITH KEY zz_opcion01 = '1'.
      IF sy-subrc EQ 0.
        <lfs_detalle_salida>-zz_opergravhomo = lwa_cata11-zz_codigo_sunat.
      ENDIF.

*     Sumatoria ISC
      READ TABLE lt_cata05 INTO lwa_cata05 WITH KEY zz_opcion01 = '2'.
      IF sy-subrc = 0.
        <lfs_detalle_salida>-zz_sumaischom03   = lwa_cata05-zz_codigo_sunat.
        <lfs_detalle_salida>-zz_sumaischom04   = lwa_cata05-zz_desc_cod_suna.
        <lfs_detalle_salida>-zz_sumaischom05   = lwa_cata05-zz_un_ece.
      ENDIF.

*     Total valor de venta operaciones exoneradas
      READ TABLE lt_cata11 INTO lwa_cata11 WITH KEY zz_opcion01 = '2'.
      IF sy-subrc EQ 0.
        <lfs_detalle_salida>-zz_operexohomo = lwa_cata11-zz_codigo_sunat.
      ENDIF.

*     Total valor de venta operaciones inafectas
      READ TABLE lt_cata11 INTO lwa_cata11 WITH KEY zz_opcion01 = '3'.
      IF sy-subrc EQ 0.
        <lfs_detalle_salida>-zz_operinafhomo = lwa_cata11-zz_codigo_sunat.
      ENDIF.

*     Sumatoria IGV
      READ TABLE lt_cata05 INTO lwa_cata05 WITH KEY zz_opcion01 = '1'.
      IF sy-subrc = 0.
        <lfs_detalle_salida>-zz_sumaigvhom03   = lwa_cata05-zz_codigo_sunat.
        <lfs_detalle_salida>-zz_sumaigvhom04   = lwa_cata05-zz_desc_cod_suna.
        <lfs_detalle_salida>-zz_sumaigvhom05   = lwa_cata05-zz_un_ece.
      ENDIF.

*     Otros Tributos (No Aplica Austral)
      READ TABLE lt_cata05 INTO lwa_cata05 WITH KEY zz_opcion01 = '3'.
      IF sy-subrc = 0.
        <lfs_detalle_salida>-zz_otrostribut3 = lwa_cata05-zz_codigo_sunat.     " Sumatoria Otros Tributos - Campo 03
        <lfs_detalle_salida>-zz_otrostribut4 = lwa_cata05-zz_desc_cod_suna.    " Sumatoria Otros Tributos - Campo 04
        <lfs_detalle_salida>-zz_otrostribut5 = lwa_cata05-zz_un_ece.           " Sumatoria Otros Tributos - Campo 05
      ENDIF.

    ENDLOOP.

*   Cabecera Salida
    LOOP AT pi_cab INTO lwa_cabecera_salida.
      CLEAR: lwa_cabecera_salida-zz_nrodocsap,
             lwa_cabecera_salida-zz_numeracion.
*{  BEGIN OF REPLACE WMR-110816-3000005346
      ""      READ TABLE lt_catahomo06 INTO lwa_catahomo06 WITH KEY stcdt = gc_stcdt.
      ""      IF sy-subrc = 0.
      ""        lwa_cabecera_salida-zz_nroruchomo = lwa_catahomo06-zz_codigo_sunat.
      ""      ENDIF.
      lwa_cabecera_salida-zz_nroruchomo = '6'.
*}  END OF REPLACE WMR-110816-3000005346
      COLLECT lwa_cabecera_salida INTO pe_cab.
    ENDLOOP.

  ENDMETHOD.                    "set_det_ws_res


  METHOD set_homo_res_v2.

    FIELD-SYMBOLS: <fs_cab> LIKE LINE OF pc_cab,
                   <fs_det> LIKE LINE OF pc_det.


*   Cabecera Salida
    LOOP AT pc_cab ASSIGNING <fs_cab>.

*     Número de RUC y tipo de documento del emisor
*{  BEGIN OF REPLACE WMR-271217-3000008865
      ""      READ TABLE lt_catahomo06 INTO lwa_catahomo06 WITH KEY stcdt = '6'.
      ""      IF sy-subrc = 0.
      ""        <fs_cab>-zz_nroruc_h = lwa_catahomo06-zz_codigo_sunat.
      ""      ENDIF.
      <fs_cab>-zz_nroruc_h = '6'.
*}  END OF REPLACE WMR-271217-3000008865
    ENDLOOP.


*   Detalle salida
    LOOP AT pc_det ASSIGNING <fs_det>.

*     Total valor de venta operaciones gravadas
      READ TABLE lt_cata11 INTO lwa_cata11 WITH KEY zz_opcion01 = '1'.
      IF sy-subrc EQ 0.
        <fs_det>-zz_totvvopgra_h = lwa_cata11-zz_codigo_sunat.
      ENDIF.

*     Sumatoria ISC
      READ TABLE lt_cata05 INTO lwa_cata05 WITH KEY zz_opcion01 = '2'.
      IF sy-subrc = 0.
        <fs_det>-zz_sumaisc_h  = lwa_cata05-zz_codigo_sunat.
      ENDIF.

*     Total valor de venta operaciones exoneradas
      READ TABLE lt_cata11 INTO lwa_cata11 WITH KEY zz_opcion01 = '2'.
      IF sy-subrc EQ 0.
        <fs_det>-zz_totvvopexo_h = lwa_cata11-zz_codigo_sunat.
      ENDIF.

*     Total valor de venta operaciones inafectas
      READ TABLE lt_cata11 INTO lwa_cata11 WITH KEY zz_opcion01 = '3'.
      IF sy-subrc EQ 0.
        <fs_det>-zz_totvvopinaf_h = lwa_cata11-zz_codigo_sunat.
      ENDIF.

*     Total valor de venta operaciones gratuitas
      <fs_det>-zz_totvalveno_h = '05'.

*     Sumatoria IGV
      READ TABLE lt_cata05 INTO lwa_cata05 WITH KEY zz_opcion01 = '1'.
      IF sy-subrc = 0.
        <fs_det>-zz_sumaigv_h  = lwa_cata05-zz_codigo_sunat.
      ENDIF.

*     Otros Tributos (No Aplica Austral)
      READ TABLE lt_cata05 INTO lwa_cata05 WITH KEY zz_opcion01 = '3'.
      IF sy-subrc = 0.
        <fs_det>-zz_sumaotrtri_h  = lwa_cata05-zz_codigo_sunat.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.                    "set_det_ws_res


  METHOD set_jeison_baj.

    DATA: lwa_bacab       LIKE LINE OF pe_bacab,
          lwa_badet       LIKE LINE OF pe_badet,
          lwa_vbfa_aux    LIKE LINE OF lt_vbfa_aux,
          lw_spras        TYPE         kna1-spras,                                      "I-WMR-040118-3000008929
          lv_identifibaja TYPE         zosed_identifibaja,
          lv_nfila        TYPE         char03,
          lv_posi         TYPE         numc3,
          lv_true         TYPE         char01,
          lv_name         TYPE         thead-tdname,
          lw_nrofila      TYPE         numc3,
          lw_identifibaja TYPE         zosed_identifibaja,
          lt_numeracion   TYPE         tt_numeracion.                                   "I-WMR-010316

    DATA: l_serie TYPE string,                                                   "I-WMR-190918-3000009765
          l_corre TYPE string.                                                   "I-WMR-190918-3000009765

    DATA: lt_badet_aux TYPE STANDARD TABLE OF zostb_badet.

    DATA: rl_identifibaja TYPE RANGE OF zosed_identifibaja,
          rs_identifibaja LIKE LINE OF  rl_identifibaja.

    FIELD-SYMBOLS: <lfs_vbrk> LIKE LINE OF pi_vbrk.

*   Clases de Bolestas incluidas
    REFRESH ltr_fkart3.
    LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '9' AND zz_opcion02 = '1'.
      lwa_fkart-low = lwa_constfkart-fkart.
      lwa_fkart-sign = 'I'.
      lwa_fkart-option = 'EQ'.
      APPEND lwa_fkart TO ltr_fkart3.
    ENDLOOP.

*   Notas de Credito
    REFRESH ltr_fkart7.
    LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '9' AND zz_opcion02 = '2'.
      lwa_fkart-low = lwa_constfkart-fkart.
      lwa_fkart-sign = 'I'.
      lwa_fkart-option = 'EQ'.
      APPEND lwa_fkart TO ltr_fkart7.
    ENDLOOP.

*   Notas de Debito
    REFRESH ltr_fkart8.
    LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '9' AND zz_opcion02 = '3'.
      lwa_fkart-low = lwa_constfkart-fkart.
      lwa_fkart-sign = 'I'.
      lwa_fkart-option = 'EQ'.
      APPEND lwa_fkart TO ltr_fkart8.
    ENDLOOP.

    LOOP AT pi_vbrk ASSIGNING <lfs_vbrk>.

      CLEAR: lwa_bacab, lwa_badet.

      split_xblnr( EXPORTING i_xblnr  = <lfs_vbrk>-xblnr                          "I-WMR-190918-3000009765
                   IMPORTING e_serie  = l_serie                                   "I-WMR-190918-3000009765
                             e_corre  = l_corre ).                                "I-WMR-190918-3000009765

***************************************************************
*   Datos Cabecera                                            *
***************************************************************

      AT FIRST.

*       Identificador de la Comunicación
*        CONCATENATE 'RA-' pi_fecfac INTO lwa_bacab-zz_identifibaja.
*{  BEGIN OF REPLACE WMR-250815
        ""        CONCATENATE 'RA-' sy-datum INTO lwa_bacab-zz_identifibaja.
        CONCATENATE 'RA-' pi_fecfac INTO lwa_bacab-zz_identifibaja.
*}  END OF REPLACE WMR-250815
        CONCATENATE lwa_bacab-zz_identifibaja '*' INTO lv_identifibaja.
        rs_identifibaja-sign   = 'I'.
        rs_identifibaja-option = 'CP'.
        rs_identifibaja-low    = lv_identifibaja.
        APPEND rs_identifibaja TO rl_identifibaja.
*{  BEGIN OF REPLACE WMR-151015
        ""        IF pi_repro = '1'.
        ""          SELECT MAX( zzt_identifibaja )
        ""            INTO lv_identifibaja
        ""            FROM zostb_balog
        ""             WHERE  bukrs           EQ <lfs_vbrk>-bukrs   AND                   "I-WMR-200715
        ""                    zzt_femision     = pi_fecfac          AND
        ""                    zzt_identifibaja IN  rl_identifibaja  AND
        ""                    zzt_status_cdr   IN  ltr_status.
        ""          lwa_bacab-zz_identifibaja = lv_identifibaja.
        ""        ELSE.
        ""          SELECT MAX( zzt_identifibaja )
        ""            INTO lv_identifibaja
        ""            FROM zostb_balog
        ""             WHERE  bukrs           EQ <lfs_vbrk>-bukrs   AND                   "I-WMR-200715
        ""                    zzt_femision     = pi_fecfac          AND
        ""                    zzt_identifibaja IN  rl_identifibaja  AND
        ""              NOT ( zzt_status_cdr   IN  ltr_status ).
        ""          IF sy-subrc NE 0 OR lv_identifibaja IS INITIAL.
        ""            lv_nfila = 0.
        ""          ELSE.
        ""            MOVE lv_identifibaja+12(3) TO lv_nfila.
        ""          ENDIF.
        ""          ADD 1 TO lv_nfila. CONDENSE lv_nfila.
        ""          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        ""            EXPORTING
        ""              input  = lv_nfila
        ""            IMPORTING
        ""              output = lv_nfila.
        ""*          CONCATENATE 'RA-' pi_fecfac '-' lv_nfila INTO lwa_bacab-zz_identifibaja.
        ""*{  BEGIN OF REPLACE WMR-250815
        ""          ""          CONCATENATE 'RA-' sy-datum '-' lv_nfila INTO lwa_bacab-zz_identifibaja.
        ""          CONCATENATE 'RA-' pi_fecfac '-' lv_nfila INTO lwa_bacab-zz_identifibaja.
        ""*}  END OF REPLACE WMR-250815
        ""          CONDENSE lwa_bacab-zz_identifibaja.
        ""        ENDIF.
*{  BEGIN OF REPLACE WMR-010316
        ""        SELECT MAX( zzt_identifibaja )
        ""          INTO lv_identifibaja
        ""          FROM zostb_balog
        ""          WHERE bukrs            EQ <lfs_vbrk>-bukrs
        ""            AND zzt_identifibaja IN rl_identifibaja.
        ""        IF sy-subrc NE 0 OR lv_identifibaja IS INITIAL.
        ""          lv_nfila = 0.
        ""        ELSE.
        ""          MOVE lv_identifibaja+12(3) TO lv_nfila.
        ""        ENDIF.

        CLEAR lt_numeracion.
        SELECT bukrs zzt_identifibaja
          INTO TABLE lt_numeracion
          FROM zostb_balog
          WHERE bukrs            EQ <lfs_vbrk>-bukrs
            AND zzt_identifibaja IN rl_identifibaja.

        lv_nfila = get_last_identify( lt_numeracion ).
*}  END OF REPLACE WMR-010316

        ADD 1 TO lv_nfila. CONDENSE lv_nfila.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lv_nfila
          IMPORTING
            output = lv_nfila.
        CONCATENATE 'RA-' pi_fecfac '-' lv_nfila INTO lwa_bacab-zz_identifibaja.
        CONDENSE lwa_bacab-zz_identifibaja.
*}  END OF REPLACE WMR-151015
*{  BEGIN OF INSERT WMR-200715
        lwa_bacab-bukrs = <lfs_vbrk>-bukrs.
*}  END OF INSERT WMR-200715
        pe_identicomun = lwa_bacab-zz_identifibaja.

*       Busco Número de RUC (PAVAL)
        READ TABLE lt_t001z INTO lwa_t001z WITH KEY bukrs = <lfs_vbrk>-bukrs.
        IF sy-subrc = 0.
*{  BEGIN OF REPLACE WMR-110816-3000005346
          ""          READ TABLE lt_catahomo06 INTO lwa_catahomo06 WITH KEY stcdt = gc_stcdt.
          ""          IF sy-subrc = 0.
          ""            CONCATENATE '{"0":"' lwa_t001z-paval                   '",'
          ""                        '"1":"'  lwa_catahomo06-zz_codigo_sunat    '"}'
          ""                        INTO lwa_bacab-zz_nroruc.
          ""          ENDIF.
*{I-3000010823-NTP110219
*          CONCATENATE '{"0":"' lwa_t001z-paval '","1":"6"}'
          lwa_bacab-zz_nrorucsap = lwa_t001z-paval.
          lwa_bacab-zz_nroruchomo = 6.
          CONCATENATE '{"0":"' lwa_bacab-zz_nrorucsap '","1":"' lwa_bacab-zz_nroruchomo '"}'
*}I-3000010823-NTP110219
                      INTO lwa_bacab-zz_nroruc.
*}  END OF REPLACE WMR-110816-3000005346
        ENDIF.

*       Datos adicionales cabecera
        lwa_bacab-zz_femision      = pi_fecfac.                                               " Fecha Emisión
        lwa_bacab-zz_versiubl      = gs_ubl-zz_verubl.                                " Versión del UBL
        lwa_bacab-zz_versiestrudoc = gs_ubl-zz_verestrdoc.                            " Versión de la estructura del documento
        lwa_bacab-zz_firdigital    = 'FD'.                                                    " Firma Digital
        lwa_bacab-zz_nempresa      = gs_consextsun-zz_ncomercial.                            " Nombre de Empresa
*{  BEGIN OF REPLACE WMR-260716-3000005612
        ""        CONCATENATE sy-datum(4) sy-datum+4(2) sy-datum+6(2) INTO lwa_bacab-zz_fgenerabaja.    " Fecha Generación
        lwa_bacab-zz_fgenerabaja   = pi_fecfac.
*}  END OF REPLACE WMR-260716-3000005612

        DESCRIBE TABLE pe_badet LINES lwa_bacab-zz_nrolines_det. "I-3000010823-NTP110219

*       Añadir registro cabecera
        APPEND lwa_bacab TO pe_bacab.

      ENDAT.

***************************************************************
*   Datos Posicion                                            *
***************************************************************

*     Incrementar contador de posicion
      ADD 1 TO lv_posi.

      MOVE: pe_identicomun            TO lwa_badet-zz_identifibaja,
            lv_posi                   TO lwa_badet-zz_nrofila,
*            <lfs_vbrk>-xblnr+4(4)     TO lwa_badet-zz_serie,                      "E-WMR-190918-3000009765
*            <lfs_vbrk>-xblnr+9(7)     TO lwa_badet-zz_correlativo.                "E-WMR-190918-3000009765
            l_serie                   TO lwa_badet-zz_serie,                      "I-WMR-190918-3000009765
            l_corre                   TO lwa_badet-zz_correlativo.                "I-WMR-190918-3000009765

*{  BEGIN OF INSERT WMR-200715
      lwa_badet-bukrs = <lfs_vbrk>-bukrs.
*}  END OF INSERT WMR-200715

      IF <lfs_vbrk>-vbeln <> gc_vbeln.
*     Tipo de Documento
*{  BEGIN OF REPLACE WMR-250815
        ""        CLEAR lv_true.
        ""        IF ltr_fkart3[] IS NOT INITIAL.
        ""          IF <lfs_vbrk>-fkart IN ltr_fkart3[].
        ""            lwa_badet-zz_tipodoc = gs_consextsun-zz_tdocboleta.
        ""            lv_true = abap_true.
        ""          ENDIF.
        ""        ENDIF.
        ""        IF lv_true IS INITIAL.
        ""          IF ltr_fkart7[] IS NOT INITIAL.
        ""            IF <lfs_vbrk>-fkart IN ltr_fkart7[].
        ""              lwa_badet-zz_tipodoc = gs_consextsun-zz_tdocnotacre.
        ""              lv_true = abap_true.
        ""            ENDIF.
        ""          ENDIF.
        ""        ENDIF.
        ""        IF lv_true IS INITIAL.
        ""          IF ltr_fkart8[] IS NOT INITIAL.
        ""            IF <lfs_vbrk>-fkart IN ltr_fkart8[].
        ""              lwa_badet-zz_tipodoc = gs_consextsun-zz_tdocnotadeb.
        ""              lv_true = abap_true.
        ""            ENDIF.
        ""          ENDIF.
        ""        ENDIF.
        ""        IF lv_true IS INITIAL.
        ""          lwa_badet-zz_tipodoc = gs_consextsun-zz_tdocfactura.
        ""          lv_true = abap_true.
        ""        ENDIF.

        CASE <lfs_vbrk>-xblnr(2).
          WHEN gc_tipdoc_fa.  lwa_badet-zz_tipodoc = gs_consextsun-zz_tdocfactura.
          WHEN gc_tipdoc_bl.  lwa_badet-zz_tipodoc = gs_consextsun-zz_tdocboleta.
          WHEN gc_tipdoc_nc.  lwa_badet-zz_tipodoc = gs_consextsun-zz_tdocnotacre.
          WHEN gc_tipdoc_nd.  lwa_badet-zz_tipodoc = gs_consextsun-zz_tdocnotadeb.
        ENDCASE.
*}  END OF REPLACE WMR-250815

*     Motivo de Baja
*{  BEGIN OF REPLACE WMR-100815
        ""        READ TABLE lt_vbfa_aux INTO lwa_vbfa_aux WITH KEY vbelv = <lfs_vbrk>-vbeln.
        ""        IF sy-subrc = 0.
        ""          lv_name = lwa_vbfa_aux-vbeln.
        lv_name = <lfs_vbrk>-vbeln.
*}  END OF REPLACE WMR-100815
*{  BEGIN OF REPLACE WMR-160815
        ""*{  BEGIN OF INSERT WMR-230615
        ""        CASE gw_license.
        ""          WHEN '0020316164'.  "Modasa
        ""            lwa_badet-zz_motivobaja = me->get_text( pi_name   = lv_name
        ""                                                    pi_id     = 'Z037'
        ""                                                    pi_object = 'VBBK' ).
        ""          WHEN OTHERS.
        ""*}  END OF INSERT WMR-230615
        ""            lwa_badet-zz_motivobaja = me->get_text( pi_name   = lv_name
        ""                                                    pi_id     = 'Z044'
        ""                                                    pi_object = 'VBBK' ).
        ""        ENDCASE.
        ""*}  END OF REPLACE WMR-100815
        CLEAR lw_spras.                                                                 "I-WMR-040118-3000008929
        SELECT SINGLE spras INTO lw_spras                                               "I-WMR-040118-3000008929
          FROM kna1                                                                     "I-WMR-040118-3000008929
          WHERE kunnr EQ <lfs_vbrk>-kunag.                                              "I-WMR-040118-3000008929
        IF lw_spras IS NOT INITIAL.                                                     "I-WMR-040118-3000008929
          lwa_badet-zz_motivobaja = get_text( pi_name   = lv_name                       "I-WMR-040118-3000008929
                                              pi_id     = gs_consextsun-zz_tdidbaj      "I-WMR-040118-3000008929
                                              pi_object = 'VBBK'                        "I-WMR-040118-3000008929
                                              pi_spras  = lw_spras ).                   "I-WMR-040118-3000008929
        ENDIF.                                                                          "I-WMR-040118-3000008929
        IF lwa_badet-zz_motivobaja IS INITIAL.                                          "I-WMR-040118-3000008929
          lwa_badet-zz_motivobaja = me->get_text( pi_name   = lv_name
                                                  pi_id     = gs_consextsun-zz_tdidbaj
                                                  pi_object = 'VBBK' ).
        ENDIF.                                                                          "I-WMR-040118-3000008929
*{  BEGIN OF DELETE WMR-160815
        ""        ENDIF.
*}  END OF DELETE WMR-100815
      ELSE.
        lwa_badet-zz_tipodoc = <lfs_vbrk>-fkart.
        READ TABLE lt_idcn_excp INTO ls_idcn_excp WITH KEY xblnr = <lfs_vbrk>-xblnr.
        IF  sy-subrc = 0.
          lwa_badet-zz_motivobaja = ls_idcn_excp-excif.
        ENDIF.
      ENDIF.
      APPEND lwa_badet TO pe_badet.
    ENDLOOP.
  ENDMETHOD.                    "set_jeison_baj


  METHOD set_jeison_res.

    DATA: lt_det   TYPE ltt_desalres,                                "I-WMR-070116
          lt_tcurt TYPE STANDARD TABLE OF zostb_tcurt,               "I-WMR-070116
          ls_tcurt TYPE zostb_tcurt.                                 "I-WMR-070116

    DATA: lwa_cabecera_salida LIKE LINE OF pi_cab,
          lwa_detalle_salida  LIKE LINE OF pi_det,
          lwa_rbcab           LIKE LINE OF pe_rbcab,
          lwa_rbdet           LIKE LINE OF pe_rbdet,
          lv_nfila            TYPE         c LENGTH 3.

    DATA: lv_totvvopgra  TYPE char15,
          lv_totvvopinaf TYPE char15,
          lv_totvvopexo  TYPE char15,
          lv_sumaigv     TYPE char15,
          lv_sumaisc     TYPE char15,
          lv_sumaotrtri  TYPE char15,
          lv_totvvopgrat TYPE char15.

**************************************************************************
*   Cabecera                                                             *
**************************************************************************

    LOOP AT pi_cab INTO lwa_cabecera_salida.
      CLEAR lwa_rbcab.
*{  BEGIN OF INSERT WMR-200715
      lwa_rbcab-bukrs            = lwa_cabecera_salida-bukrs.
*}  END OF INSERT WMR-200715
      lwa_rbcab-zz_identifiresu  = lwa_cabecera_salida-zz_identifiresu.
      lwa_rbcab-zz_femision      = lwa_cabecera_salida-zz_femision.
      lwa_rbcab-zz_fecgenresume  = lwa_cabecera_salida-zz_fecgenresume.
      lwa_rbcab-zz_nempresa      = lwa_cabecera_salida-zz_nempresa.
      lwa_rbcab-zz_firdigital    = 'FD'. " TEMPORAL MIENTRAS SE ASIGNA FIRMA DIGITAL
      lwa_rbcab-zz_versiubl      = lwa_cabecera_salida-zz_versiubl.
      lwa_rbcab-zz_versiestrudoc = lwa_cabecera_salida-zz_versiestrudoc.
      CONCATENATE '{"0":"' lwa_cabecera_salida-zz_nroruc        '",'
                  '"1":"'  lwa_cabecera_salida-zz_nroruchomo    '"}' INTO lwa_rbcab-zz_nroruc.
      APPEND lwa_rbcab TO pe_rbcab.
    ENDLOOP.

    " Obtener Vigencia de Monedas                                               "I-WMR-070116
    lt_det[] = pi_det[].                                                        "I-WMR-070116
    SORT lt_det BY zz_waerk ASCENDING.                                          "I-WMR-070116
    DELETE ADJACENT DUPLICATES FROM lt_det COMPARING zz_waerk.                  "I-WMR-070116

    IF lt_det[] IS NOT INITIAL.                                                 "I-WMR-070116
      SELECT *                                                                  "I-WMR-070116
        INTO TABLE lt_tcurt                                                     "I-WMR-070116
        FROM zostb_tcurt                                                        "I-WMR-070116
        FOR ALL ENTRIES IN lt_det                                               "I-WMR-070116
        WHERE waers EQ lt_det-zz_waerk                                          "I-WMR-070116
          AND begda LE lwa_cabecera_salida-zz_femision                          "I-WMR-070116
          AND endda GE lwa_cabecera_salida-zz_femision.                         "I-WMR-070116
    ENDIF.                                                                      "I-WMR-070116

**************************************************************************
*   Detalle                                                              *
**************************************************************************

    LOOP AT pi_det INTO lwa_detalle_salida.

*     Limpiar variables
      CLEAR: lwa_rbdet, lv_totvvopgra, lv_totvvopinaf, lv_totvvopexo,
             lv_sumaigv, lv_sumaisc, lv_sumaotrtri, lv_totvvopgrat. "lv_imptotvent.

*     Incrementar contador
      ADD 1 TO lv_nfila.

*     Asignaciones directas
*{  BEGIN OF INSERT WMR-200715
      lwa_rbdet-bukrs            = lwa_cabecera_salida-bukrs.
*}  END OF INSERT WMR-200715
      lwa_rbdet-zz_identifiresu  = lwa_cabecera_salida-zz_identifiresu.
      lwa_rbdet-zz_nrofila       = lv_nfila.
      lwa_rbdet-zz_tipodoc       = lwa_detalle_salida-zz_tipodoc.
      lwa_rbdet-zz_serie         = lwa_detalle_salida-zz_serie.
      lwa_rbdet-zz_correla_low   = lwa_detalle_salida-zz_correla_low.
      lwa_rbdet-zz_correla_high  = lwa_detalle_salida-zz_correla_high.
      lwa_rbdet-zz_waerk         = lwa_detalle_salida-zz_waerk.
      lwa_rbdet-zz_sumaotrcargos = lwa_detalle_salida-zz_sumaotrcargos.
      lwa_rbdet-zz_imptotvent    = lwa_detalle_salida-zz_imptotvent.

*     Valores numéricos
      lv_totvvopgra    = lwa_detalle_salida-zz_totvvopgra.
      lv_totvvopexo    = lwa_detalle_salida-zz_totvvopexo.
      lv_totvvopinaf   = lwa_detalle_salida-zz_totvvopinaf.
      lv_sumaigv       = lwa_detalle_salida-zz_sumaigv.
      lv_sumaisc       = lwa_detalle_salida-zz_sumaisc.
      lv_sumaotrtri    = lwa_detalle_salida-zz_sumaotrtri.
      lv_totvvopgrat   = lwa_detalle_salida-zz_totvvopgrat.

      CONDENSE: lv_totvvopgra, lv_totvvopinaf, lv_totvvopexo, lv_sumaigv,
                lv_sumaisc, lv_sumaotrtri,lv_totvvopgrat.

*     Valores Jeison
      CONCATENATE '{"0":"' lv_totvvopgra                        '",'
                  '"1":"'  lwa_detalle_salida-zz_opergravhomo   '"}' INTO lwa_rbdet-zz_totvvopgra.
      CONCATENATE '{"0":"' lv_totvvopexo                        '",'
                  '"1":"'  lwa_detalle_salida-zz_operexohomo    '"}' INTO lwa_rbdet-zz_totvvopexo.
      CONCATENATE '{"0":"' lv_totvvopinaf                       '",'
                  '"1":"'  lwa_detalle_salida-zz_operinafhomo   '"}' INTO lwa_rbdet-zz_totvvopinaf.
      CONCATENATE '{"0":"' lv_sumaisc                           '",'
                  '"1":"'  lv_sumaisc                           '",'
                  '"2":"'  lwa_detalle_salida-zz_sumaischom03   '",'
                  '"3":"'  lwa_detalle_salida-zz_sumaischom04   '",'
                  '"4":"'  lwa_detalle_salida-zz_sumaischom05   '"}' INTO lwa_rbdet-zz_sumaisc.
      CONCATENATE '{"0":"' lv_sumaigv                           '",'
                  '"1":"'  lv_sumaigv                           '",'
                  '"2":"'  lwa_detalle_salida-zz_sumaigvhom03   '",'
                  '"3":"'  lwa_detalle_salida-zz_sumaigvhom04   '",'
                  '"4":"'  lwa_detalle_salida-zz_sumaigvhom05   '"}' INTO lwa_rbdet-zz_sumaigv.
      CONCATENATE '{"0":"' lv_sumaotrtri                        '",'
                  '"1":"'  lv_sumaotrtri                        '",'
                  '"2":"'  lwa_detalle_salida-zz_otrostribut3   '",'
                  '"3":"'  lwa_detalle_salida-zz_otrostribut4   '",'
                  '"4":"'  lwa_detalle_salida-zz_otrostribut5   '"}' INTO lwa_rbdet-zz_sumaotrtri.
      lwa_rbdet-zz_sumaotrcargos = '{"0":"true","1":"0.00"}'.

      CONCATENATE '{"0":"' lv_totvvopgrat                      '",'
                   '"1":"' lwa_detalle_salida-zz_opergrathomo  '"}' INTO lwa_rbdet-zz_totvvopgrat. "Total valor venta operaciones gratuitas.

      " Obtener Vigencia de Monedas                                               "I-WMR-070116
      READ TABLE lt_tcurt INTO ls_tcurt                                         "I-WMR-070116
           WITH KEY waers = lwa_detalle_salida-zz_waerk.                        "I-WMR-070116
      IF sy-subrc EQ 0.                                                         "I-WMR-070116
        CONCATENATE '{"0":"'  lwa_detalle_salida-zz_waerk   '",'                "I-WMR-070116
                    '"1":"'   ls_tcurt-nomsun               '",'                "I-WMR-070116
                    '"2":"'   ls_tcurt-sigmon               '"}'                "I-WMR-070116
                    INTO lwa_rbdet-zz_moneda.                                   "I-WMR-070116
      ENDIF.                                                                    "I-WMR-070116

*     Adicionar registro
      APPEND lwa_rbdet TO pe_rbdet.

    ENDLOOP.

  ENDMETHOD.                    "set_det_ws_res


  METHOD set_json_cab.

    DATA: lwa_cabecera_salida LIKE LINE OF is_data-t_header,
          lwa_cabecera_sal2   LIKE LINE OF is_data-t_header2,
          lwa_guiremi         LIKE LINE OF lt_guiremi,
          ls_guirem           LIKE LINE OF is_data-t_guirem,                    "I-WMR-240117-3000006411
          ls_header_text      LIKE LINE OF is_data-t_text_header,               "I-NTP111218-3000009651
          lwa_t052u           LIKE LINE OF lt_t052u,
          ls_vbrk             LIKE LINE OF pi_vbrk,                             "I-WMR-090715
          ls_tcurt            TYPE zostb_tcurt,                                 "I-WMR-231215
          ls_t001             TYPE t001,                                        "I-WMR-280417-3000007140

          ls_jsoncab_tc       LIKE LINE OF et_jsoncab_tc,
          ls_jsoncab_gr       LIKE LINE OF et_jsoncab_gr,
          ls_jsoncab_aa       LIKE LINE OF et_jsoncab_aa.

    DATA: lv_totvvopgra    TYPE char15,
          lv_totvvopinaf   TYPE char15,
          lv_totvvopexo    TYPE char15,
          lv_sumaigv       TYPE char15,
          lv_sumaisc       TYPE char15,
          lv_sumaotrtri    TYPE char15,
          lv_sumaotrcargos TYPE char15,
          lv_desctot       TYPE char15,
          lv_imptotvent    TYPE char15,
          lv_imporpermn02  TYPE char15,
          lv_imporpermn03  TYPE char15,
          lv_imporpermn04  TYPE char15,
          lv_totvalveno    TYPE char15,
          lv_desctoglob    TYPE char15,
          lv_igvkbetrtxt   TYPE char15,
          lv_bezei         TYPE bezei30,
          lv_detra         TYPE char15,
          lw_landx         TYPE t005t-landx,                                    "I-WMR-010715
          lt_anticipos     TYPE ltt_aplic_anticipo,                             "I-WMR-080715
          ls_anticipos     LIKE LINE OF lt_aplica_anticipo,                     "I-WMR-080715
          lw_string        TYPE string,                                         "I-WMR-080715
          lw_line_row      TYPE string,                                         "I-WMR-080715
          lw_pto_origen    TYPE string,                                         "I-WMR-270715
          lw_pto_destino   TYPE string,                                         "I-WMR-270715
          lw_fecha         TYPE char10.                                         "I-WMR-270715

    LOOP AT is_data-t_header INTO lwa_cabecera_salida
      WHERE zz_nrodocsap = pi_vbeln. "I-NTP250618-3000009651

      CLEAR: es_jsoncab.                                                      "I-WMR-241116-3000005346
      CLEAR: lv_totvvopgra, lv_totvvopinaf, lv_totvvopexo, lv_sumaigv, lv_sumaisc, lv_sumaotrtri, lv_sumaotrcargos, lv_desctot,
             lv_imptotvent, lv_imporpermn02, lv_imporpermn03, lv_imporpermn04, lv_totvalveno, lv_desctoglob, lv_igvkbetrtxt, lv_detra.

      READ TABLE is_data-t_header2 INTO lwa_cabecera_sal2 WITH KEY  bukrs         = lwa_cabecera_salida-bukrs
                                                                    zz_nrodocsap  = lwa_cabecera_salida-zz_nrodocsap
                                                                    zz_numeracion = lwa_cabecera_salida-zz_numeracion.
      IF sy-subrc = 0.
      ENDIF.

      lv_totvvopgra    = lwa_cabecera_salida-zz_totvvopgra.
      lv_totvvopinaf   = lwa_cabecera_salida-zz_totvvopinaf.
      lv_totvvopexo    = lwa_cabecera_salida-zz_totvvopexo.
      lv_sumaigv       = lwa_cabecera_salida-zz_sumaigv.
      lv_sumaisc       = lwa_cabecera_salida-zz_sumaisc.
      lv_sumaotrtri    = lwa_cabecera_salida-zz_sumaotrtri.
      lv_sumaotrcargos = lwa_cabecera_salida-zz_sumaotrcargos.
      lv_desctot       = lwa_cabecera_salida-zz_desctot.
      lv_imptotvent    = lwa_cabecera_salida-zz_imptotvent.
      lv_imporpermn02  = lwa_cabecera_salida-zz_imporpermn02.
      lv_imporpermn03  = lwa_cabecera_salida-zz_imporpermn03.
      lv_imporpermn04  = lwa_cabecera_salida-zz_imporpermn04.
      lv_totvalveno    = lwa_cabecera_salida-zz_totvalveno.
      lv_desctoglob    = lwa_cabecera_salida-zz_desctoglob.
      lv_igvkbetrtxt   = lwa_cabecera_salida-zz_sumaigvhom06.
      IF lwa_cabecera_salida-zz_detra IS NOT INITIAL.
        lv_detra = lwa_cabecera_salida-zz_detra.
*{  BEGIN OF INSERT WMR-170715
**        " No enviar Monto de Detracción
**        CASE gw_license.
**          WHEN '0020316164'.  "Modasa
**            CLEAR lv_detra.
**        ENDCASE.
*}  END OF INSERT WMR-170715
      ENDIF.

      CONDENSE: lv_totvvopgra,
                lv_totvvopinaf,
                lv_totvvopexo,
                lv_sumaigv,
                lv_sumaisc,
                lv_sumaotrtri,
                lv_sumaotrcargos,
                lv_desctot,
                lv_imptotvent,
                lv_imporpermn02,
                lv_imporpermn03,
                lv_imporpermn04,
                lv_totvalveno,
                lv_desctoglob,
                lv_igvkbetrtxt,
                lv_detra.

*{  BEGIN OF INSERT WMR-171016-3000005361
      " Denominación País de Dirección de Emisor de Factura
      CLEAR lw_landx.
      SELECT SINGLE landx
        INTO lw_landx
        FROM t005t
        WHERE spras EQ sy-langu
          AND land1 EQ lwa_cabecera_salida-zz_country.
      TRANSLATE lw_landx TO UPPER CASE.
*}  END OF INSERT WMR-171016-3000005361

      lwa_cabecera_salida-zz_cityp_code     = gs_consextsun-zz_ubigeo.        " Domicilio Fiscal - Ubigeo
      lwa_cabecera_salida-zz_street         = gs_consextsun-zz_direccion.     " Domicilio Fiscal - Dirección
      lwa_cabecera_salida-zz_house_num1     = ''.                              " Domicilio Fiscal - Número
      lwa_cabecera_salida-zz_str_suppl1     = gs_consextsun-zz_urbanizacion.  " Domicilio Fiscal - Urbanización
      lwa_cabecera_salida-zz_city1          = gs_consextsun-zz_distrito.      " Domicilio Fiscal - Departamento
      lwa_cabecera_salida-zz_country        = gs_consextsun-zz_pais.          " Domicilio Fiscal - Distrito
      lwa_cabecera_salida-zz_bezei          = gs_consextsun-zz_departamento.  " Domicilio Fiscal - País

      MOVE: lwa_cabecera_salida-zz_nrodocsap          TO   es_jsoncab-zzt_nrodocsap,
            lwa_cabecera_salida-zz_numeracion         TO   es_jsoncab-zzt_numeracion,

            lwa_cabecera_salida-zz_nrodocsap          TO   es_jsoncab-zzt_nrodocsap,  "Campos adicionales para ZOSTB_FECAB2
            lwa_cabecera_salida-zz_numeracion         TO   es_jsoncab-zzt_numeracion, "Campos adicionales para ZOSTB_FECAB2

            lwa_cabecera_salida-zz_femision           TO   es_jsoncab-zzt_femision,
            lwa_cabecera_salida-zz_fdigital           TO   es_jsoncab-zzt_fdigital,
*            lwa_cabecera_salida-zz_nempresa           TO   es_jsoncab-zzt_nempresa,
            lwa_cabecera_sal2-zz_nempreex             TO   es_jsoncab-zzt_nempresa,
            lwa_cabecera_salida-zz_ncomercial         TO   es_jsoncab-zzt_ncomercial,
            lwa_cabecera_salida-zz_verubl             TO   es_jsoncab-zzt_verubl,
            lwa_cabecera_salida-zz_verestrdoc         TO   es_jsoncab-zzt_verestrdoc,
            lv_desctoglob                             TO   es_jsoncab-zzt_desctoglob,
            gs_consextsun-zz_estaregdoc               TO   es_jsoncab-zzt_estadoregis,         "I-NTP201118-3000009651
            lwa_cabecera_salida-zz_tipodoc            TO   es_jsoncab-zzt_tipodoc,
            lwa_cabecera_salida-zz_nombreraz          TO   es_jsoncab-zzt_nombreraz,
            lv_sumaotrcargos                          TO   es_jsoncab-zzt_sumaotrcargos,      "I-NTP201118-3000009651
            lv_imptotvent                             TO   es_jsoncab-zzt_imptotvent,
            lwa_cabecera_salida-zz_moneda             TO   es_jsoncab-zzt_moneda,
            lwa_cabecera_salida-zz_dir_usuad          TO   es_jsoncab-zzt_dir_usuad.  "Direccion de Usuario o Adquiriente "I-NTP201118-3000009651

      CASE pi_tipdoc.
        WHEN gc_tipdoc_fa OR gc_tipdoc_bl.
          MOVE: lwa_cabecera_salida-zz_nrodocsap          TO   es_jsoncab-zzt_nrodocsap,
                lwa_cabecera_salida-zz_dirpaisadq         TO   es_jsoncab-zzt_dirpaisadq,     "I-NTP201118-3000009651
*                lwa_cabecera_salida-zz_tipnumegre         TO   es_jsoncab-zzt_tipnumegre,   No Aplica Austral
                lwa_cabecera_salida-zz_valrefser          TO   es_jsoncab-zzt_valrefser,
                lwa_cabecera_salida-zz_nommatemn          TO   es_jsoncab-zzt_nommatemn,
                lwa_cabecera_salida-zz_descrtcev          TO   es_jsoncab-zzt_descrtcev,
                lwa_cabecera_salida-zz_lugdesc            TO   es_jsoncab-zzt_lugdesc,
                lwa_cabecera_salida-zz_fecdescar          TO   es_jsoncab-zzt_fecdescar,
                lwa_cabecera_salida-zz_numregist          TO   es_jsoncab-zzt_numregist,
                lwa_cabecera_salida-zz_configveh          TO   es_jsoncab-zzt_configveh,
                lwa_cabecera_salida-zz_puntoorig          TO   es_jsoncab-zzt_puntoorig,
                lwa_cabecera_salida-zz_puntdesti          TO   es_jsoncab-zzt_puntdesti,
                lwa_cabecera_salida-zz_valrefpre          TO   es_jsoncab-zzt_valrefpre,
                lwa_cabecera_salida-zz_fechconsu          TO   es_jsoncab-zzt_fechconsu.      "I-NTP201118-3000009651
        WHEN gc_tipdoc_nc OR gc_tipdoc_nd.
          MOVE: lwa_cabecera_salida-zz_tipdocmodif        TO   es_jsoncab-zzt_tipdocmodif,    "I-NTP201118-3000009651
                lwa_cabecera_salida-zz_tipdocmodifho      TO   es_jsoncab-zzt_tipdocmodifho,  "I-NTP201118-3000009651
                lwa_cabecera_salida-zz_motivosuste        TO   es_jsoncab-zzt_motivosuste.    "I-NTP201118-3000009651
*{  BEGIN OF INSERT WMR-130715
          CONCATENATE lwa_cabecera_sal2-zz_fecdocmodif+0(4)
                      lwa_cabecera_sal2-zz_fecdocmodif+4(2)
                      lwa_cabecera_sal2-zz_fecdocmodif+6(2)
                      INTO es_jsoncab-zzt_fecdocmodif SEPARATED BY '-'.
*}  END OF INSERT WMR-130715
      ENDCASE.

*     Verificar datos de las variables
      IF lv_totvvopgra EQ '0.00'.
        CLEAR lv_totvvopgra.
      ENDIF.
      IF lv_totvvopinaf EQ '0.00'.
        CLEAR lv_totvvopinaf.
      ENDIF.
      IF lv_totvvopexo EQ '0.00'.
        CLEAR lv_totvvopexo.
      ENDIF.
      IF lv_sumaigv EQ '0.00'.
        CLEAR lv_sumaigv.
      ENDIF.
      IF lv_sumaisc EQ '0.00'.
        CLEAR lv_sumaisc.
      ENDIF.
      IF lv_sumaotrtri EQ '0.00'.
        CLEAR lv_sumaotrtri.
      ENDIF.
      IF lv_sumaotrcargos EQ '0.00'.
        CLEAR lv_sumaotrcargos.
      ENDIF.
      IF lv_desctot EQ '0.00'.
        CLEAR lv_desctot.
      ENDIF.
      IF lv_imptotvent EQ '0.00'.
        CLEAR lv_imptotvent.
      ENDIF.
      IF lv_imporpermn02 EQ '0.00'.
        CLEAR lv_imporpermn02.
      ENDIF.
      IF lv_imporpermn03 EQ '0.00'.
        CLEAR lv_imporpermn03.
      ENDIF.
      IF lv_imporpermn04 EQ '0.00'.
        CLEAR lv_imporpermn04.
      ENDIF.
      IF lv_totvalveno EQ '0.00'.
        CLEAR lv_totvalveno.
      ENDIF.
      IF lv_igvkbetrtxt EQ '0.00'.
        CLEAR lv_igvkbetrtxt.
      ENDIF.

*{  BEGIN OF INSERT WMR-160915  ANTICIPOS PETRAMAS
      READ TABLE pi_vbrk INTO ls_vbrk
           WITH KEY vbeln = lwa_cabecera_salida-zz_nrodocsap.
      IF sy-subrc EQ 0.
        IF ls_vbrk-zz_check_tg EQ abap_false
        AND ( lwa_cabecera_salida-zz_totvvopgra   EQ 0 AND
              lwa_cabecera_salida-zz_totvvopinaf  EQ 0 AND
              lwa_cabecera_salida-zz_totvvopexo   EQ 0 ).
          lv_totvvopgra = lv_totvvopinaf = lv_totvvopexo = '0.00'.
        ENDIF.
      ENDIF.
*}  END OF INSERT WMR-160915  ANTICIPOS PETRAMAS

*     Armar datos de salida
      CONCATENATE '{"0":"' lwa_cabecera_salida-zz_cityp_code    '",'
                  '"1":"'  lwa_cabecera_salida-zz_street ' '    lwa_cabecera_salida-zz_house_num1 '",'
                  '"2":"'  lwa_cabecera_salida-zz_str_suppl1    '",'
                  '"3":"'  lwa_cabecera_salida-zz_city1         '",'
                  '"4":"'  lwa_cabecera_salida-zz_city2         '",'
                  '"5":"'  lwa_cabecera_salida-zz_bezei         '",'
*{  BEGIN OF REPLACE WMR-171016-3000005361
""                  '"6":"'  lwa_cabecera_salida-zz_country       '"}' INTO es_jsoncab-zzt_direccion.
                  '"6":"'  lwa_cabecera_salida-zz_country       '",'
                  '"7":"'  lw_landx                             '"}' INTO es_jsoncab-zzt_direccion.
*}  END OF REPLACE WMR-171016-3000005361
      CONCATENATE '{"0":"' lwa_cabecera_salida-zz_nroruc        '",'
                  '"1":"'  lwa_cabecera_salida-zz_nroruchomo    '"}' INTO es_jsoncab-zzt_nroruc.
      CONCATENATE '{"0":"' lwa_cabecera_salida-zz_nrodociadq    '",'
                  '"1":"'  lwa_cabecera_salida-zz_tipdociadq    '"}' INTO es_jsoncab-zzt_nrodociadq.
      CONCATENATE '{"0":"' lwa_cabecera_salida-zz_opergravhomo  '",'
                   '"1":"' lv_totvvopgra                        '"}' INTO es_jsoncab-zzt_totvvopgra.
      CONCATENATE '{"0":"' lwa_cabecera_salida-zz_operinafhomo  '",'
                  '"1":"'  lv_totvvopinaf                       '"}' INTO es_jsoncab-zzt_totvvopinaf.
      CONCATENATE '{"0":"' lwa_cabecera_salida-zz_operexohomo   '",'
                  '"1":"'  lv_totvvopexo                        '"}' INTO es_jsoncab-zzt_totvvopexo.
      CONCATENATE '{"0":"' lv_sumaigv                           '",'
                  '"1":"'  lv_sumaigv                           '",'
                  '"2":"'  lwa_cabecera_salida-zz_sumaigvhom03  '",'
                  '"3":"'  lwa_cabecera_salida-zz_sumaigvhom04  '",'
                  '"4":"'  lwa_cabecera_salida-zz_sumaigvhom05  '",'
                  '"5":"'  lv_igvkbetrtxt                       '"}' INTO es_jsoncab-zzt_sumaigv.
      CONCATENATE '{"0":"' lv_sumaisc                           '",'
                  '"1":"'  lv_sumaisc                           '",'
                  '"2":"'  lwa_cabecera_salida-zz_sumaischom03  '",'
                  '"3":"'  lwa_cabecera_salida-zz_sumaischom04  '",'
                  '"4":"'  lwa_cabecera_salida-zz_sumaischom05  '"}' INTO es_jsoncab-zzt_sumaisc.
      CONCATENATE '{"0":"' lv_sumaotrtri                        '",'
                  '"1":"'  lv_sumaotrtri                        '",'
                  '"2":"'  lwa_cabecera_salida-zz_otrostribut3  '",'
                  '"3":"'  lwa_cabecera_salida-zz_otrostribut4  '",'
                  '"4":"'  lwa_cabecera_salida-zz_otrostribut5  '"}' INTO es_jsoncab-zzt_sumaotrtri.  "I-NTP201118-3000009651
*      CONCATENATE '{"0":"' lwa_cabecera_salida-zz_desctotot_nabi_homo   '",'                         "E-290721-NTP-3000017358
*                  '"1":"'  lv_desctot                           '"}' INTO es_jsoncab-zzt_desctotot.  "E-290721-NTP-3000017358
      CONCATENATE '{"0":"' lwa_cabecera_salida-zz_leyendashomo  '",'
                  '"1":"'  lwa_cabecera_salida-zz_leyendas      '"}' ','
                  '{"0":"' lwa_cabecera_salida-zz_leyendashom02 '",'
                  '"1":"'  lwa_cabecera_salida-zz_leyendas02    '"}' ','
                  '{"0":"' lwa_cabecera_salida-zz_leyendashom03 '",'
*{  BEGIN OF REPLACE WMR-171016-3000005361
""                  '"1":"'  lwa_cabecera_salida-zz_leyendas03    '"}'
                  '"1":"'  lwa_cabecera_salida-zz_leyendas03    '"}' ','
                  '{"0":"' lwa_cabecera_salida-zz_leyendashomo  '",'  " Código Monto en Letras
                  '"1":"'  lwa_cabecera_sal2-zz_amoiwen         '"}'  " Monto en Letras en inglés
                  INTO es_jsoncab-zzt_leyendas.
*}  END OF REPLACE WMR-171016-3000005361
      CONCATENATE '{"0":"' lwa_cabecera_salida-zz_imporpermnhom   '",'
                  '"1":"'  lv_imporpermn02                        '",'
                  '"2":"'  lv_imporpermn03                        '",'
                  '"3":"'  lv_imporpermn04                        '",'
                  '"4":"'  lwa_cabecera_salida-zz_imporpermn_por  '"},'
                  '{"0":"' lwa_cabecera_salida-zz_detrahomo       '",'
                  '"1":"'  lv_detra                               '"}'   INTO es_jsoncab-zzt_imporpermn.

      CASE pi_tipdoc.
        WHEN gc_tipdoc_fa OR gc_tipdoc_bl.
          CONCATENATE '{"0":"' lwa_cabecera_salida-zz_tipnumeotr    '",'
                      '"1":"'  lwa_cabecera_salida-zz_tipnumothomo  '"}' INTO es_jsoncab-zzt_tipnumeotr.
          CONCATENATE '{"0":"' lwa_cabecera_salida-zz_totvalvenoh   '",'
                      '"1":"'  lv_totvalveno                        '"}' INTO es_jsoncab-zzt_totvalveno.
        WHEN gc_tipdoc_nc OR gc_tipdoc_nd.
          CONCATENATE '{"0":"' lwa_cabecera_salida-zz_tipdocmodif   '",'
                      '"1":"'  lwa_cabecera_salida-zz_codmotivo     '"}' INTO es_jsoncab-zzt_codmotivo.
      ENDCASE.

****     Transferencia Gratuita (REVISAR)

*     Tipo y número de la Guía de remisión relacionada con la operación que se factura
*{  BEGIN OF REPLACE WMR-240117-3000006411
      ""      es_jsoncab-zzt_gui_rem = lwa_cabecera_sal2-zz_gui_rem.
      ""      CONDENSE es_jsoncab-zzt_gui_rem NO-GAPS.
      ""      IF ( pi_tipdoc EQ gc_tipdoc_nc ) OR ( pi_tipdoc EQ gc_tipdoc_nd ).
      ""        es_jsoncab-zzt_gui_rem = '{"0":"", "1":""},{"0":"", "1":""}'.
      ""      ENDIF.

      CASE pi_tipdoc.
        WHEN gc_tipdoc_fa OR gc_tipdoc_bl.
          LOOP AT is_data-t_guirem INTO ls_guirem.
            CLEAR lw_string.
            IF ls_guirem-xblnr IS NOT INITIAL.
              CONCATENATE '{"0":"' ls_guirem-xblnr    '",'
                          '"1":"'  ls_guirem-zztpcpsu '"}'
                          INTO lw_string.
            ELSE.
              CONCATENATE '{"0":"",'
                           '"1":"' ls_guirem-zztpcpsu '",'
                           '"2":""}'
                           INTO lw_string.
            ENDIF.

            ls_jsoncab_gr-zzt_nrodocsap   = es_jsoncab-zzt_nrodocsap.
            ls_jsoncab_gr-zzt_numeracion  = es_jsoncab-zzt_numeracion.
            ls_jsoncab_gr-zzt_nroposicion = ls_guirem-zz_nroposicion.
            ls_jsoncab_gr-zzt_grasociada  = lw_string.
            APPEND ls_jsoncab_gr TO et_jsoncab_gr.
*{E-NTP111218-3000009651
*            IF es_jsoncab-zzt_gr_asociadas IS INITIAL.
*              es_jsoncab-zzt_gr_asociadas = lw_string.
*            ELSE.
*              CONCATENATE es_jsoncab-zzt_gr_asociadas lw_string
*                INTO es_jsoncab-zzt_gr_asociadas SEPARATED BY ','.
*            ENDIF.
*}E-NTP111218-3000009651
          ENDLOOP.
          IF sy-subrc NE 0.
            lw_string = '{"0":"","1":"","2":""}'.
            ls_jsoncab_gr-zzt_nrodocsap  = es_jsoncab-zzt_nrodocsap.
            ls_jsoncab_gr-zzt_numeracion = es_jsoncab-zzt_numeracion.
            ls_jsoncab_gr-zzt_grasociada = lw_string.
            APPEND ls_jsoncab_gr TO et_jsoncab_gr.
          ENDIF.
        WHEN gc_tipdoc_nc OR gc_tipdoc_nd.
          lw_string = '{"0":"", "1":""},{"0":"", "1":""}'.
          ls_jsoncab_gr-zzt_nrodocsap  = es_jsoncab-zzt_nrodocsap.
          ls_jsoncab_gr-zzt_numeracion = es_jsoncab-zzt_numeracion.
          ls_jsoncab_gr-zzt_grasociada = lw_string.
          APPEND ls_jsoncab_gr TO et_jsoncab_gr.
      ENDCASE.
*}  END OF REPLACE WMR-240117-3000006411

*     Pedido / Entrega /Orden de Compra / Factura Interma / Ultima Factura SUNAT Anulada
      IF ( pi_tipdoc EQ gc_tipdoc_fa ) OR ( pi_tipdoc EQ gc_tipdoc_bl ) OR ( pi_tipdoc EQ gc_tipdoc_nc ) OR ( pi_tipdoc EQ gc_tipdoc_nd ).
        CONCATENATE  '{"0":"'
                     lwa_cabecera_salida-zz_vbeln
                     '",'
                     '"1":"'
                     lwa_cabecera_sal2-zz_entrega
                     '",'
                     '"2":"'
                     lwa_cabecera_salida-zz_bstkd
                     '",'
                     '"3":"'
                     lwa_cabecera_sal2-zz_fac_inte
                     '",'
                     '"4":"'
                     lwa_cabecera_sal2-zz_ult_fac
                     '"}'
*{  BEGIN OF REPLACE WMR-110615
""                     INTO es_jsoncab-zzt_ref_sap_fct.
                     INTO es_jsoncab-zzt_refsapfct.
*}  END OF REPLACE WMR-110615
      ELSE.
*{  BEGIN OF REPLACE WMR-110615
        ""        es_jsoncab-zzt_ref_sap_fct = '{"0":"","1":"","2":"","3":"","4":""}'.
        es_jsoncab-zzt_refsapfct  = '{"0":"","1":"","2":"","3":"","4":""}'.
*}  END OF REPLACE WMR-110615
      ENDIF.

*     Forma de Pago
      IF ( pi_tipdoc EQ gc_tipdoc_fa ) OR ( pi_tipdoc EQ gc_tipdoc_bl ).
        READ TABLE lt_t052u INTO lwa_t052u WITH KEY spras = sy-langu
                                                    zterm = lwa_cabecera_salida-zz_zterm.
        IF sy-subrc = 0.
*{  BEGIN OF INSERT WMR-280417-3000007140
          CASE gw_license.
            WHEN '0020974592'.  " DANPER
              " Obtener País de la Sociedad
              CLEAR ls_t001.
              SELECT SINGLE land1 INTO ls_t001-land1 FROM t001 WHERE bukrs EQ ls_vbrk-bukrs.
              IF sy-subrc EQ 0.
                " Obtener Descripción de la Vía de Pago
                CLEAR lw_string.
                SELECT SINGLE text2 INTO lw_string FROM t042zt
                  WHERE spras EQ sy-langu AND land1 EQ ls_t001-land1 AND zlsch EQ ls_vbrk-zlsch.
                IF lw_string IS NOT INITIAL.
                  " Concatenar Denominación de Condición de Pago y Descripción de la Vía de Pago
                  IF lwa_t052u-text1 IS NOT INITIAL.
                    CONCATENATE lwa_t052u-text1 '-' lw_string INTO lwa_t052u-text1 SEPARATED BY space.
                  ELSE.
                    lwa_t052u-text1 = lw_string.
                  ENDIF.
                ENDIF.
              ENDIF.
          ENDCASE.
*}  END OF INSERT WMR-280417-3000007140

*{  BEGIN OF INSERT WMR-171016-3000005361
          CASE gw_license.
            WHEN '0020311006'   " AIB
              OR '0020863116'.  " AIB CLOUD
              CONCATENATE '{"0":"",'
                          '"1":"' lwa_t052u-text1               '",'
                          '"2":"' lwa_cabecera_sal2-zz_fec_vto  '"}'
                          INTO es_jsoncab-zzt_cnd_sap_fct.
            WHEN OTHERS.
*}  END OF INSERT WMR-171016-3000005361
              CONCATENATE '{"0":"'
                          lwa_cabecera_salida-zz_zterm
                          '",'
                          '"1":"'
                          lwa_t052u-text1
                          '",'
                          '"2":"'
                          lwa_cabecera_sal2-zz_fec_vto
                          '"}'
*                          INTO es_jsoncab-zzt_cnd_sap_fct.
                          INTO es_jsoncab-zzt_cnd_sap_fct.              "Campo que existe en la FACAB pero es muy chico se agrego en la FECAB2
*{  BEGIN OF INSERT WMR-171016-3000005361
          ENDCASE.
*}  END OF INSERT WMR-171016-3000005361
        ENDIF.
      ELSE.
*        es_jsoncab-zzt_cnd_sap_fct = '{"0":"","1":""}'.
        es_jsoncab-zzt_cnd_sap_fct = '{"0":"","1":"","2":""}'.     "Campo que existe en la FACAB pero es muy chico se agrego en la FECAB2
      ENDIF.

*     Incoterm
      IF pi_tipdoc EQ gc_tipdoc_fa.
*{  BEGIN OF REPLACE WMR-100715
        ""        SELECT SINGLE bezei INTO lv_bezei
        ""          FROM tinct
        ""          WHERE spras = sy-langu AND
        ""                inco1 = lwa_cabecera_salida-zz_inco1.
        ""        CONCATENATE '{"0":"'
        ""                    lwa_cabecera_salida-zz_inco1
        ""                    '",'
        ""                    '"1":"'
        ""                    lv_bezei
        ""                    '"}'
        ""                    INTO es_jsoncab-zzt_inc_sap_fct.
        CASE gw_license.                                                      "I-WMR-241116-3000005346
          WHEN '0020311006'   " AIB                                           "I-WMR-241116-3000005346
            OR '0020863116'.  " AIB CLOUD
            CONCATENATE '{"0":"'  lwa_cabecera_salida-zz_inco1  '",'          "I-WMR-241116-3000005346
                        '"1":"'   lwa_cabecera_sal2-zz_inco2    '",'          "I-WMR-241116-3000005346
                        '"2":"'   lwa_cabecera_sal2-zz_inco3    '"}'          "I-WMR-241116-3000005346
                        INTO es_jsoncab-zzt_inc_sap_fct.                       "I-WMR-241116-3000005346
          WHEN OTHERS.                                                        "I-WMR-241116-3000005346
            CONCATENATE '{"0":"'
                        lwa_cabecera_salida-zz_inco1
                        '",'
                        '"1":"'
                        lwa_cabecera_sal2-zz_inco2
                        '"}'
                        INTO es_jsoncab-zzt_inc_sap_fct.
        ENDCASE.                                                              "I-WMR-241116-3000005346
*}  END OF REPLACE WMR-100715

      ENDIF.

*     Datos adicionales: 0:Zona venta 1: cod Cliente 2 :Cod vendedor
      IF gw_sw_pernr IS INITIAL .
        CONCATENATE  '{"0":"'
               lwa_cabecera_sal2-zz_zona_vta
               '",'
               '"1":"'
               lwa_cabecera_sal2-zz_cod_clie
               '",'
               '"2":"'
               lwa_cabecera_sal2-zz_cod_vend
               '"}'
               INTO es_jsoncab-zzt_dsd_sap.
      ELSE.
        CONCATENATE  '{"0":"'
            lwa_cabecera_sal2-zz_zona_vta
            '",'
            '"1":"'
            lwa_cabecera_sal2-zz_cod_clie
            '",'
            '"2":""}'
            INTO es_jsoncab-zzt_dsd_sap.
      ENDIF.
*     Direccion de llega del Documento
      es_jsoncab-zzt_dir_lle = lwa_cabecera_salida-zz_dir_lle.

*     Destino Nacional para exportación
      es_jsoncab-zzt_des_nex = lwa_cabecera_sal2-zz_des_nex.

*     Número de entrega mercadería
      es_jsoncab-zzt_nro_eme = lwa_cabecera_sal2-zz_nro_eme.

*{  BEGIN OF DELETE WMR-080715
      ""*     Tipo de Operacion (Anticipo)
      ""      es_jsoncab-zzt_tip_ope = lwa_cabecera_sal2-zz_tip_ope.

      ""*     Monto anticipo
      ""      es_jsoncab-zzt_mto_ant = '{"0":"","1":"","2":""}'.

      ""*     Total Anticipo
      ""      es_jsoncab-zzt_tot_ant = '0.00'.
*}  END OF DELETE WMR-080715

*{  BEGIN OF INSERT WMR-230615
      " Dirección Punto de Emisión
      CLEAR lw_landx.
      SELECT SINGLE landx
        INTO lw_landx
        FROM t005t
        WHERE spras EQ sy-langu
          AND land1 EQ lwa_cabecera_salida-zz_country2.
      IF lw_landx IS INITIAL.
        lw_landx = lwa_cabecera_salida-zz_country2.
      ENDIF.
      TRANSLATE lwa_cabecera_salida-zz_cityp_code2  TO UPPER CASE.
      TRANSLATE lwa_cabecera_salida-zz_street2      TO UPPER CASE.
      TRANSLATE lwa_cabecera_salida-zz_house_num12  TO UPPER CASE.
      TRANSLATE lwa_cabecera_salida-zz_str_suppl12  TO UPPER CASE.
      TRANSLATE lwa_cabecera_salida-zz_city12       TO UPPER CASE.
      TRANSLATE lwa_cabecera_salida-zz_city22       TO UPPER CASE.
      TRANSLATE lwa_cabecera_salida-zz_bezei2       TO UPPER CASE.
      TRANSLATE lw_landx                            TO UPPER CASE.
      CONCATENATE '{"0":"' lwa_cabecera_salida-zz_cityp_code2    '",'
                  '"1":"'  lwa_cabecera_salida-zz_street2 ' '    lwa_cabecera_salida-zz_house_num12 '",'
                  '"2":"'  lwa_cabecera_salida-zz_str_suppl12    '",'
                  '"3":"'  lwa_cabecera_salida-zz_city12         '",'
                  '"4":"'  lwa_cabecera_salida-zz_city22         '",'
                  '"5":"'  lwa_cabecera_salida-zz_bezei2         '",'
                  '"6":"'  lw_landx                              '"}' INTO es_jsoncab-zzt_direcemis.
*}  END OF INSERT WMR-230615

*{  BEGIN OF INSERT WMR-080715
      " Tipo de Operacion
      es_jsoncab-zzt_tip_ope = lwa_cabecera_sal2-zz_tip_ope.

*{  BEGIN OF REPLACE WMR-240117-3000006411
      ""      lt_anticipos[] = lt_aplica_anticipo[].
      lt_anticipos[] = is_data-t_aplant[].
*}  END OF REPLACE WMR-240117-3000006411
      DELETE lt_anticipos WHERE bukrs         NE lwa_cabecera_salida-bukrs
                             OR zz_nrodocsap  NE lwa_cabecera_salida-zz_nrodocsap
                             OR zz_numeracion NE lwa_cabecera_salida-zz_numeracion.

      IF lt_anticipos[] IS NOT INITIAL.
*{  BEGIN OF REPLACE WMR-240117-3000006411
        ""        " Monto anticipo
        ""        LOOP AT lt_anticipos INTO ls_anticipos.
        ""          CLEAR lw_line_row.

        ""          lw_string = ls_anticipos-zz_mto_pre.
        ""          CONDENSE lw_string NO-GAPS.
        ""          CONCATENATE '{"0":"' lw_string                  '",'
        ""                      '"1":"'  ls_anticipos-zz_tidocre    '",'
        ""                      '"2":"'  ls_anticipos-zz_ser_ant    '"}'
        ""                      INTO lw_line_row.

        ""          IF es_jsoncab-zzt_mto_ant IS INITIAL.
        ""            es_jsoncab-zzt_mto_ant = lw_line_row.
        ""          ELSE.
        ""            CONCATENATE es_jsoncab-zzt_mto_ant lw_line_row
        ""              INTO es_jsoncab-zzt_mto_ant SEPARATED BY ','.
        ""          ENDIF.
        ""        ENDLOOP.

        ""        " Total Anticipo
        ""        lw_string = ls_anticipos-zz_tot_ant.
        ""        CONDENSE lw_string NO-GAPS.
        ""        es_jsoncab-zzt_tot_ant = lw_string.

        " Anticipos
        LOOP AT lt_anticipos INTO ls_anticipos.
          CLEAR lw_line_row.

          lw_string = ls_anticipos-zz_mto_pre.
          CONDENSE lw_string NO-GAPS.
          CONCATENATE '{"0":"' lw_string                  '",'
                      '"1":"'  ls_anticipos-zz_tidocre    '",'
                      '"2":"'  ls_anticipos-zz_ser_ant    '"}'
                      INTO lw_line_row.

*{I-NTP111218-3000009651
          ls_jsoncab_aa-zzt_nrodocsap   = es_jsoncab-zzt_nrodocsap.
          ls_jsoncab_aa-zzt_numeracion  = es_jsoncab-zzt_numeracion.
          ls_jsoncab_aa-zzt_nroposicion = ls_anticipos-zz_nroposicion.
          ls_jsoncab_aa-zzt_aaasociada  = lw_line_row.
          APPEND ls_jsoncab_aa TO et_jsoncab_aa.
*}I-NTP111218-3000009651
*{E-NTP111218-3000009651
*          IF es_jsoncab-zzt_aa_asociadas IS INITIAL.
*            es_jsoncab-zzt_aa_asociadas = lw_line_row.
*          ELSE.
*            CONCATENATE es_jsoncab-zzt_aa_asociadas lw_line_row
*              INTO es_jsoncab-zzt_aa_asociadas SEPARATED BY ','.
*          ENDIF.
*}E-NTP111218-3000009651
        ENDLOOP.

        " Total Anticipo
        es_jsoncab-zzt_tot_ant = lwa_cabecera_sal2-zz_tot_ant.
*}  END OF REPLACE WMR-240117-3000006411
      ELSE.
*{  BEGIN OF REPLACE WMR-240117-3000006411
        ""        " Monto anticipo
        ""        es_jsoncab-zzt_mto_ant = '{"0":"","1":"","2":""}'.
        lw_line_row = '{"0":"","1":"","2":""}'.
*{I-NTP111218-3000009651
        ls_jsoncab_aa-zzt_nrodocsap   = es_jsoncab-zzt_nrodocsap.
        ls_jsoncab_aa-zzt_numeracion  = es_jsoncab-zzt_numeracion.
        ls_jsoncab_aa-zzt_aaasociada  = lw_line_row.
        APPEND ls_jsoncab_aa TO et_jsoncab_aa.
*}I-NTP111218-3000009651
*}  END OF REPLACE WMR-240117-3000006411

        " Total Anticipo
        es_jsoncab-zzt_tot_ant = '0.00'.
      ENDIF.

*{  BEGIN OF INSERT WMR-241115
      " E-mail destino
      es_jsoncab-zzt_maildest = lwa_cabecera_salida-zz_maildest.
*}  END OF INSERT WMR-241115

      " Totales Opcionales 01: Flete y Seguro
      READ TABLE pi_vbrk INTO ls_vbrk
           WITH KEY vbeln = lwa_cabecera_salida-zz_nrodocsap.
      IF sy-subrc EQ 0.
        IF ls_vbrk-zz_check_expor EQ abap_false.
          CLEAR: lwa_cabecera_sal2-zz_tot_flete,
                 lwa_cabecera_sal2-zz_tot_seguro.
        ENDIF.
      ENDIF.
      CLEAR lw_line_row.
      CONCATENATE '{"0":"' lwa_cabecera_sal2-zz_tot_flete    '",'
                  '"1":"'  lwa_cabecera_sal2-zz_tot_seguro   '",'
                  '"2":"'  lwa_cabecera_sal2-zz_tot_otros   '"}' "OFV 23.07.2015
                  INTO lw_line_row.
      es_jsoncab-zzt_tot_opt = lw_line_row.
*}  END OF INSERT WMR-080715

*{  BEGIN OF INSERT WMR-140715
      " Código Formato PDF
      es_jsoncab-zzt_pdffrm = lwa_cabecera_sal2-zz_pdffrm.

      " Puerto Origen y Puerto Destino
      CASE gw_license.                                                        "I-WMR-241116-3000005346
        WHEN '0020673876'   " Beta                                            "I-WMR-241116-3000005346
          OR '0021061097'.  " CMH                                             "I-WMR-191018-3000009765
          CONCATENATE '{"0":"' lwa_cabecera_sal2-zzpueoritxt '",'             "I-WMR-241116-3000005346
                      '"1":"'  lwa_cabecera_sal2-zzpuedestxt '",'             "I-WMR-241116-3000005346
                      '"2":"'  lwa_cabecera_sal2-zzpaisori   '",'             "I-WMR-241116-3000005346
                      '"3":"'  lwa_cabecera_sal2-zzpaisdes   '"}'             "I-WMR-241116-3000005346
                      INTO es_jsoncab-zzt_pue_orde.                           "I-WMR-241116-3000005346

        WHEN OTHERS.                                                          "I-WMR-241116-3000005346
          CLEAR: lw_pto_origen, lw_pto_destino.
          lw_pto_origen = lwa_cabecera_sal2-zzpueoritxt.
          IF lwa_cabecera_sal2-zzpaisori IS NOT INITIAL.
            CONCATENATE lw_pto_origen '-' lwa_cabecera_sal2-zzpaisori
              INTO lw_pto_origen SEPARATED BY space.
          ENDIF.
          lw_pto_destino = lwa_cabecera_sal2-zzpuedestxt.
          IF lwa_cabecera_sal2-zzpaisdes IS NOT INITIAL.
            CONCATENATE lw_pto_destino '-' lwa_cabecera_sal2-zzpaisdes
              INTO lw_pto_destino SEPARATED BY space.
          ENDIF.
          CONCATENATE '{"0":"' lw_pto_origen  '",'
                      '"1":"'  lw_pto_destino '"}'
                      INTO es_jsoncab-zzt_pue_orde.
      ENDCASE.                                                                "I-WMR-241116-3000005346

      " Datos de Embarque
      IF  lwa_cabecera_sal2-zzblfec IS NOT INITIAL
      AND lwa_cabecera_sal2-zzblfec NE '00000000'.
        CONCATENATE lwa_cabecera_sal2-zzblfec(4) '-'  lwa_cabecera_sal2-zzblfec+4(2) '-' lwa_cabecera_sal2-zzblfec+6(2)
          INTO lw_fecha.
      ENDIF.
      CONCATENATE '{"0":"' lwa_cabecera_sal2-zzvaportxt   '",'
                  '"1":"'  lwa_cabecera_sal2-zzblnro      '",'
                  '"2":"'  lw_fecha                       '",'
                  '"3":"'  lwa_cabecera_sal2-zzcondic     '"}'
                  INTO es_jsoncab-zzt_datembar.

      " Datos de Pesca
      CONCATENATE '{"0":"' lwa_cabecera_sal2-zzmatembtxt  '",'
                  '"1":"'  lwa_cabecera_sal2-zzpesfec     '",'
                  '"2":"'  lwa_cabecera_sal2-zzpessem     '"}'
                  INTO es_jsoncab-zzt_datpesca.
*}  END OF INSERT WMR-140715

*{  BEGIN OF INSERT WMR-290415
      " Dirección de Lugar de Entrega
      CONCATENATE '{"0":"' lwa_cabecera_sal2-zz_dp_ubigeo     '",'
                  '"1":"'  lwa_cabecera_sal2-zz_dp_calle ' '    lwa_cabecera_sal2-zz_dp_nropri '",'
                  '"2":"'  lwa_cabecera_sal2-zz_dp_nroint     '",'
                  '"3":"'  lwa_cabecera_sal2-zz_dp_distri     '",'
                  '"4":"'  lwa_cabecera_sal2-zz_dp_provin     '",'
                  '"5":"'  lwa_cabecera_sal2-zz_dp_depart     '",'
                  '"6":"'  lwa_cabecera_sal2-zz_dp_pais       '"}'
                  INTO es_jsoncab-zzt_dir_dp.

      " Número de Placa
      es_jsoncab-zzt_placa = lwa_cabecera_sal2-zz_placa.
*}  END OF INSERT WMR-290415

*{  BEGIN OF INSERT WMR-231215
      " Moneda Json
      CLEAR: ls_vbrk, ls_tcurt.
      READ TABLE pi_vbrk INTO ls_vbrk
           WITH KEY vbeln = lwa_cabecera_salida-zz_nrodocsap.
      IF sy-subrc EQ 0.
        SELECT SINGLE *
          INTO ls_tcurt
          FROM zostb_tcurt
          WHERE waers EQ lwa_cabecera_salida-zz_moneda
            AND begda LE ls_vbrk-fkdat
            AND endda GE ls_vbrk-fkdat.
      ENDIF.
      CONCATENATE '{"0":"'  lwa_cabecera_salida-zz_moneda '",'
                  '"1":"'   ls_tcurt-nomsun               '",'
                  '"2":"'   ls_tcurt-sigmon               '"}'
                  INTO es_jsoncab-zzt_moneda.
*}  END OF INSERT WMR-231215

*{  BEGIN OF INSERT WMR-171016-3000005361
      " Peso Neto, Peso Bruto, Peso Drenado
      CONCATENATE '{"0":"'  lwa_cabecera_sal2-zz_peso_neto    '",'
                  '"1":"'   lwa_cabecera_sal2-zz_peso_bruto   '",'
                  '"2":"'   lwa_cabecera_sal2-zz_peso_drenado '",'
                  '"3":"'   lwa_cabecera_sal2-zz_und_peso     '"}'
                  INTO es_jsoncab-zzt_weight.

      " Certificaciones para Exportación
      CASE gw_license.                                                        "I-WMR-241116-3000005346
        WHEN '0020311006'   " AIB
          OR '0020863116'.  " AIB CLOUD
          CONCATENATE '{"0":"'  lwa_cabecera_sal2-zz_certif_fce   '",'
                      '"1":"'   lwa_cabecera_sal2-zz_certif_fda   '"}'
                      INTO es_jsoncab-zzt_expcert.

          "Via de pago en idioma de solicitante
          es_jsoncab-zzt_viapagodesc = lwa_cabecera_sal2-zz_viapagodesc.      "I-NTP050917-3000008049
        WHEN '0020673876'.  " Beta                                            "I-WMR-241116-3000005346
          CONCATENATE '{"0":"'  lwa_cabecera_sal2-zz_certif_fce   '",'
                      '"1":"'   lwa_cabecera_sal2-zz_certif_fda   '",'
                      '"2":"'   lwa_cabecera_sal2-zz_certif_ggn   '"}'
                      INTO es_jsoncab-zzt_expcert.
      ENDCASE.                                                                "I-WMR-241116-3000005346
*}  END OF INSERT WMR-171016-3000005361

*{  BEGIN OF INSERT WMR-241116-3000005346
      " Dirección Sede Productiva
      es_jsoncab-zzt_dir_sdpr = lwa_cabecera_sal2-zz_dir_sdpr.

      " Datos varios de Exportación
      CONCATENATE '{"0":"'  lwa_cabecera_sal2-zz_cod_lote   '",'
                  '"1":"'   lwa_cabecera_sal2-zz_part_ara   '",'
                  '"2":"'   lwa_cabecera_sal2-zz_etiqueta   '",'
                  '"3":"'   lwa_cabecera_sal2-zz_nrcl_bul   '",'
                  '"4":"'   lwa_cabecera_sal2-zz_awb        '",'
                  '"5":"'   lwa_cabecera_sal2-zz_ctacte     '",'
                  '"6":"'   lwa_cabecera_sal2-zz_dua        '"}'
                  INTO es_jsoncab-zzt_datexp2.

      " Notify
      concatenate_json(
        EXPORTING
          id0    = lwa_cabecera_sal2-zz_notify_name
          id1    = lwa_cabecera_sal2-zz_notify_dir
          id2    = lwa_cabecera_sal2-zz_notify_tel
          id3    = lwa_cabecera_sal2-zz_notify_fax
          id4    = lwa_cabecera_sal2-zz_notify_cnt
          id5    = lwa_cabecera_sal2-zz_notify_mail
        RECEIVING
          r_json = es_jsoncab-zzt_notify
      ).

      " Usuario
      es_jsoncab-zzt_ernam    = lwa_cabecera_sal2-zz_ernam.

      " Texto antes del final de posiciones
      es_jsoncab-zzt_text_bep = lwa_cabecera_sal2-zz_text_bep.

      " Cliente y/o Adquiriente: Dirección, Teléfono, Fax, Contacto y Mail
      CASE gw_license.
        WHEN '0020673876'.  " Beta
          CONCATENATE '{"0":"'  lwa_cabecera_salida-zz_dir_usuad  '",'
                      '"1":"'   lwa_cabecera_sal2-zz_clie_tel     '",'
                      '"2":"'   lwa_cabecera_sal2-zz_clie_fax     '",'
                      '"3":"'   lwa_cabecera_sal2-zz_clie_cnt     '",'
                      '"4":"'   lwa_cabecera_sal2-zz_clie_mail    '"}'
                      INTO es_jsoncab-zzt_clie_dir.
        WHEN OTHERS.
          es_jsoncab-zzt_clie_dir = lwa_cabecera_salida-zz_dir_usuad.
      ENDCASE.

      " Referencia SD y FI
      CASE pi_tipdoc.
        WHEN gc_tipdoc_fa OR gc_tipdoc_bl.
          CONCATENATE '{"0":"'  lwa_cabecera_sal2-zz_fac_inte   '",'
                      '"1":"'   lwa_cabecera_sal2-zz_nrodocfi   '"}'
                      INTO es_jsoncab-zzt_ref_sdfi.
        WHEN gc_tipdoc_nc OR gc_tipdoc_nd.
          CONCATENATE '{"0":"'  lwa_cabecera_sal2-zz_sdrefer    '",'
                      '"1":"'   lwa_cabecera_sal2-zz_nrodocfi   '"}'
                      INTO es_jsoncab-zzt_ref_sdfi.
      ENDCASE.
*}  END OF INSERT WMR-241116-3000005346

*{  BEGIN OF INSERT WMR-270317-3000006749
      " Exportación: Tipo de Envío
*{  BEGIN OF REPLACE WMR-150617-3000007448
      ""      es_jsoncab-zzt_exp_tpenv = lwa_cabecera_sal2-zz_exp_tpenv.
      CONCATENATE '{"0":"'  lwa_cabecera_sal2-zz_exp_tpenv    '",'
                  '"1":"'   lwa_cabecera_sal2-zz_exp_versi    '",'
                  '"2":"'   lwa_cabecera_sal2-zz_exp_palet    '",'
                  '"3":"'   lwa_cabecera_sal2-zz_exp_unida    '"}'
                  INTO es_jsoncab-zzt_exp_tpenv.
*}  END OF REPLACE WMR-150617-3000007448
*}  END OF INSERT WMR-270317-3000006749

*{  BEGIN OF INSERT WMR-220617-3000007448
      " Observaciones
      CASE gs_process-license.                                                  "I-WMR-191018-3000009765
        WHEN '0020974592'   " DANPER                                            "I-WMR-191018-3000009765
          OR '0020886706'.  " PIRAMIDE                                          "I-WMR-241018-3000010704
          es_jsoncab-zzt_text_obs = lwa_cabecera_sal2-zz_text_obs.
        WHEN '0021061097'.  " CMH                                               "I-WMR-191018-3000009765
          CONCATENATE '{"0":"'  lwa_cabecera_sal2-zz_text_obs     '",'          "I-WMR-191018-3000009765
                      '"1":"'   lwa_cabecera_sal2-zz_text_obs_02  '"}'          "I-WMR-191018-3000009765
                      INTO es_jsoncab-zzt_text_obs.                             "I-WMR-191018-3000009765
      ENDCASE.                                                                  "I-WMR-191018-3000009765
*}  END OF INSERT WMR-20617-3000007448

*{I-NTP260318-3000009389
      CASE gw_license.
        WHEN '0020974592'.  " DANPER
          " Text Cuenta Bank
          es_jsoncab-zzt_text_ctabank = lwa_cabecera_sal2-zz_text_ctabank.
      ENDCASE.
*}I-NTP260318-3000009389

*{I-NTP310317-3000006891
      " Boletas: Mostrar Importe Total de Venta incluido IGV
      IF gw_imp_boigv EQ abap_on.
        es_jsoncab-zzt_columns_igv = '0.00'.
        IF ( pi_tipdoc EQ gc_tipdoc_bl )                                " Boletas
        OR ( ( pi_tipdoc EQ gc_tipdoc_nc OR pi_tipdoc EQ gc_tipdoc_nd )
              AND ls_vbrk-tipdocmodifho EQ gc_tipdoc_bl ).           " NC y ND referidos a Boletas
          es_jsoncab-zzt_columns_igv = es_jsoncab-zzt_imptotvent.
        ENDIF.
      ELSE.
        es_jsoncab-zzt_columns_igv = '0.00'.
      ENDIF.
*}I-NTP310317-3000006891

*{  BEGIN OF INSERT WMR-150218-3000009072
      " Si Boleta o NC/ND referido a Boleta con Rebate, No imprimir N°doc identidad del adquirente
      es_jsoncab-zzt_bol_npnad = lwa_cabecera_sal2-zz_bol_npnad.
*}  END OF INSERT WMR-150218-3000009072

*{I-NTP111218-3000009651
      " Textos Adicionales
      LOOP AT is_data-t_text_header INTO ls_header_text.
        ls_jsoncab_tc-zzt_nrodocsap   = es_jsoncab-zzt_nrodocsap.
        ls_jsoncab_tc-zzt_numeracion  = es_jsoncab-zzt_numeracion.
        ls_jsoncab_tc-zzt_nroposicion = ls_header_text-zz_nroposicion.
        ls_jsoncab_tc-zzt_text_head   = ls_header_text-zz_text_head.
        APPEND ls_jsoncab_tc TO et_jsoncab_tc.
      ENDLOOP.
*}I-NTP111218-3000009651

*{  BEGIN OF INSERT WMR-191018-3000009765
      " Datos Minería
      CONCATENATE '{"0":"'  lwa_cabecera_sal2-zz_min_ctdpcp   '",'
                  '"1":"'   lwa_cabecera_sal2-zz_min_swap01   '",'
                  '"2":"'   lwa_cabecera_sal2-zz_min_swap02   '"}'
                  INTO es_jsoncab-zzt_data_mineria.
*}  END OF INSERT WMR-191018-3000009765

    ENDLOOP.

  ENDMETHOD.                    "set_cab_ws


  METHOD set_json_cab_main.

    DATA: ls_cabsal LIKE LINE OF is_data-t_header.

    LOOP AT is_data-t_header INTO ls_cabsal.
      CASE ls_cabsal-zz_verubl.
        WHEN gc_verubl-ubl2_0.
          set_json_cab(
            EXPORTING
              pi_vbeln  = ls_cabsal-zz_nrodocsap
              pi_tipdoc = i_tipdoc
              is_data   = is_data
              pi_vbrk   = it_vbrk
            IMPORTING
              es_jsoncab  = es_jsoncab
              et_jsoncab_gr = et_jsoncab_gr
              et_jsoncab_tc = et_jsoncab_tc
              et_jsoncab_aa = et_jsoncab_aa
          ).
        WHEN gc_verubl-ubl2_1.
          set_json_cab_ubl2_1(
            EXPORTING
              i_vbeln   = ls_cabsal-zz_nrodocsap
              i_tipdoc  = i_tipdoc
              is_data   = is_data
              it_vbrk   = it_vbrk
            IMPORTING
              es_jsoncab    = es_jsoncab
              et_jsoncab_gr = et_jsoncab_gr
              et_jsoncab_tc = et_jsoncab_tc
              et_jsoncab_aa = et_jsoncab_aa
          ).
      ENDCASE.
    ENDLOOP.

  ENDMETHOD.                    "set_cab_ws


  METHOD set_json_cab_ubl2_1.

    DATA: ls_cabsal      LIKE LINE OF is_data-t_header,
          ls_cabsal2     LIKE LINE OF is_data-t_header2,
          ls_detsal      LIKE LINE OF is_data-t_detail,

          ls_guirem      LIKE LINE OF is_data-t_guirem,
          lt_aplant      TYPE ltt_aplic_anticipo,
          ls_aplant      LIKE LINE OF lt_aplica_anticipo,
          ls_header_text LIKE LINE OF is_data-t_text_header,
          ls_vbrk        LIKE LINE OF it_vbrk,
          ls_tcurt       TYPE zostb_tcurt,

          ls_jsoncab_tc  LIKE LINE OF et_jsoncab_tc,
          ls_jsoncab_gr  LIKE LINE OF et_jsoncab_gr,
          ls_jsoncab_aa  LIKE LINE OF et_jsoncab_aa,

          ls_catacons    LIKE LINE OF lt_catacons,
          ls_catacon2    LIKE LINE OF lt_catacons.

    DATA: lv_totvvopgra       TYPE char15,
          lv_totvvopgra_taxa  TYPE char15,
          lv_totvvopinaf      TYPE char15,
          lv_totvvopexo       TYPE char15,
          lv_sumaigv          TYPE char15,
          lv_sumaigv_pdf      TYPE char15,
          lv_sumaigv_subtotal TYPE char15, "I-090120-NTP-3000013600
          lv_sumaisc          TYPE char15,
          lv_sumaotrtri       TYPE char15,
          lv_desctoxite       TYPE char15,  "I-290721-NTP-3000017358
          lv_cargosxite       TYPE char15,  "I-290721-NTP-3000017358
          lv_desctoglob       TYPE char15,  "I-290721-NTP-3000017358
          lv_cargosglob       TYPE char15,  "I-290721-NTP-3000017358
          lv_cargostot        TYPE char15,  "I-100920-NTP-3000014481
          lv_cargostot_sabi   TYPE char15,  "I-290721-NTP-3000017358
          lv_cargostot_nabi   TYPE char15,
*          lv_sumaotrcargos    TYPE char15,
*          lv_desctot          TYPE char15,
          lv_desctotot        TYPE char15,  "I-100920-NTP-3000014481
          lv_desctotot_sabi   TYPE char15,  "I-290721-NTP-3000017358
          lv_desctotot_nabi   TYPE char15,
          lv_imptotvent       TYPE char15,
          lv_valvenxite       TYPE char15, "I-150920-NTP-3000014481
          lv_totvalvent       TYPE char15,
          lv_totprevent       TYPE char15,
          lv_imporpermn02     TYPE char15,
          lv_imporpermn03     TYPE char15,
          lv_imporpermn04     TYPE char15,
          lv_totvalveno       TYPE char15,
          lv_igvkbetrtxt      TYPE char15,
          lv_tot_ant          TYPE char15,
          lv_bezei            TYPE bezei30,
          lv_detra            TYPE char15,
          lw_landx            TYPE t005t-landx,
          lw_string           TYPE string,
          lw_line_row         TYPE string,
          lw_line_row2        TYPE string,
          lw_pto_origen       TYPE string,
          lw_pto_destino      TYPE string,
          lw_fecha            TYPE char10,
          l_tabix             TYPE string,
          l_numc2             TYPE numc2,
          lv_pct_igv_pdf      TYPE char15,                                                               "I-WMR-270619-3000012056
          lv_detraporc        TYPE char15,                                                               "I-270120-NTP-3000013706
          lv_tpcapl           TYPE string,                                                                      "I-WMR-14122020-3000014557
          l_saldoapagar       TYPE string.                                                               "I-151021-NTP-3000017917

    LOOP AT is_data-t_header INTO ls_cabsal WHERE zz_nrodocsap = i_vbeln.

      CLEAR: lv_totvvopgra, lv_totvvopgra_taxa, lv_totvvopinaf, lv_totvvopexo, lv_sumaigv, lv_sumaisc, lv_sumaotrtri,
             lv_desctoxite, lv_cargosxite, lv_desctoglob, lv_cargosglob, lv_cargostot_sabi, lv_desctotot_sabi,  "I-290721-NTP-3000017358
             lv_cargostot, lv_desctotot, lv_cargostot_nabi, lv_desctotot_nabi,                                "I-150920-NTP-3000014481
             lv_imptotvent, lv_totvalvent, lv_totprevent, lv_imporpermn02, lv_imporpermn03, lv_imporpermn04, lv_totvalveno, lv_igvkbetrtxt,
             lv_tot_ant, lv_detra,
             lv_pct_igv_pdf,                                                                            "I-WMR-270619-3000012056
             lv_valvenxite.                                                                                   "I-150920-NTP-3000014481

      READ TABLE is_data-t_header2 INTO ls_cabsal2 WITH KEY  bukrs         = ls_cabsal-bukrs
                                                             zz_nrodocsap  = ls_cabsal-zz_nrodocsap
                                                             zz_numeracion = ls_cabsal-zz_numeracion.

      READ TABLE it_vbrk INTO ls_vbrk WITH KEY vbeln = ls_cabsal-zz_nrodocsap.

      lv_totvvopgra       = ls_cabsal-zz_totvvopgra.
      lv_totvvopgra_taxa  = ls_cabsal-zz_totvvopgra_taxa.
      lv_totvvopinaf      = ls_cabsal-zz_totvvopinaf.
      lv_totvvopexo       = ls_cabsal-zz_totvvopexo.
*      lv_sumaigv          = ls_cabsal-zz_sumaigv.             "E-090120-NTP-3000013600
      lv_sumaigv_subtotal = lv_sumaigv = ls_cabsal-zz_sumaigv. "I-090120-NTP-3000013600
      lv_sumaigv_pdf      = ls_cabsal-zz_sumaigv_pdf.          "I-090120-NTP-3000013600
      lv_sumaisc          = ls_cabsal-zz_sumaisc.
      lv_sumaotrtri       = ls_cabsal-zz_sumaotrtri.
*{I-290721-NTP-3000017358
      lv_desctoxite       = ls_cabsal-zz_desctoxite.
      lv_cargosxite       = ls_cabsal-zz_cargosxite.
      lv_desctoglob       = ls_cabsal-zz_desctoglob.
      lv_cargosglob       = ls_cabsal-zz_cargosglob.
*}I-290721-NTP-3000017358
      lv_cargostot        = ls_cabsal-zz_cargostot.       "I-100920-NTP-3000014481
      lv_cargostot_sabi   = ls_cabsal-zz_cargostot_sabi.  "I-290721-NTP-3000017358
      lv_cargostot_nabi   = ls_cabsal-zz_cargostot_nabi.  "I-100920-NTP-3000014481
      lv_desctotot        = ls_cabsal-zz_desctotot.       "I-100920-NTP-3000014481
      lv_desctotot_sabi   = ls_cabsal-zz_desctotot_sabi.  "I-290721-NTP-3000017358
      lv_desctotot_nabi   = ls_cabsal-zz_desctotot_nabi.  "I-100920-NTP-3000014481
      lv_imptotvent       = ls_cabsal-zz_imptotvent.
      lv_valvenxite       = ls_cabsal-zz_valvenxite.      "I-150920-NTP-3000014481
      lv_imporpermn02     = ls_cabsal-zz_imporpermn02.
      lv_imporpermn03     = ls_cabsal-zz_imporpermn03.
      lv_imporpermn04     = ls_cabsal-zz_imporpermn04.
      lv_totvalveno       = ls_cabsal-zz_totvalveno.
      lv_igvkbetrtxt      = ls_cabsal-zz_sumaigvhom06.
      lv_tot_ant          = ls_cabsal2-zz_tot_ant.
      lv_totvalvent       = ls_cabsal-zz_valven.
      lv_totprevent       = ls_cabsal-zz_preven.
      lv_pct_igv_pdf      = ls_cabsal2-zz_sumaigvhom07.                                                 "I-WMR-270619-3000012056
      lv_detraporc        = ls_cabsal2-zz_detraporc.                                                    "I-270120-NTP-3000013706
      l_saldoapagar       = ls_cabsal2-zz_saldoapagar.                                                  "I-151021-NTP-3000017917
      IF ls_cabsal-zz_detra IS NOT INITIAL.
        lv_detra = ls_cabsal-zz_detra.
      ENDIF.

      CONDENSE: lv_totvvopgra,
                lv_totvvopgra_taxa,
                lv_totvvopinaf,
                lv_totvvopexo,
                lv_sumaigv,
                lv_sumaigv_pdf,       "I-180920-NTP-3000014481
                lv_sumaigv_subtotal,  "I-090120-NTP-3000013600
                lv_sumaisc,
                lv_sumaotrtri,
                lv_desctoxite,        "I-290721-NTP-3000017358
                lv_cargosxite,        "I-290721-NTP-3000017358
                lv_desctoglob,        "I-290721-NTP-3000017358
                lv_cargosglob,        "I-290721-NTP-3000017358
                lv_cargostot,         "I-100920-NTP-3000014481
                lv_cargostot_sabi,    "I-290721-NTP-3000017358
                lv_cargostot_nabi,    "I-100920-NTP-3000014481
                lv_desctotot,         "I-100920-NTP-3000014481
                lv_desctotot_sabi,    "I-290721-NTP-3000017358
                lv_desctotot_nabi,    "I-100920-NTP-3000014481
                lv_imptotvent,
                lv_valvenxite,        "I-150920-NTP-3000014481
                lv_totvalvent,
                lv_totprevent,
                lv_imporpermn02,
                lv_imporpermn03,
                lv_imporpermn04,
                lv_totvalveno,
                lv_igvkbetrtxt,
                lv_tot_ant,           "I-150920-NTP-3000014481
                lv_detra,
                lv_pct_igv_pdf,                                                                         "I-WMR-270619-3000012056
                lv_detraporc,                                                                           "I-270120-NTP-3000013706
                l_saldoapagar.                                                                          "I-151021-NTP-3000017917

      "Verificar datos de las variables
      IF lv_totvvopgra EQ '0.00'.
        CLEAR lv_totvvopgra.
      ENDIF.
      IF lv_totvvopgra_taxa EQ '0.00'.
        CLEAR lv_totvvopgra_taxa.
      ENDIF.
      IF lv_totvvopinaf EQ '0.00'.
        CLEAR lv_totvvopinaf.
      ENDIF.
      IF lv_totvvopexo EQ '0.00'.
        CLEAR lv_totvvopexo.
      ENDIF.
      "No debe ir vacio, ya que significa el total de impuesto TODO
*      IF lv_sumaigv EQ '0.00'.
*        CLEAR lv_sumaigv.
*      ENDIF.
      IF lv_sumaisc EQ '0.00'.
        CLEAR lv_sumaisc.
      ENDIF.
      IF lv_sumaotrtri EQ '0.00'.
        CLEAR lv_sumaotrtri.
      ENDIF.
*{I-290721-NTP-3000017358
      IF lv_desctoxite EQ '0.00'.
        CLEAR lv_desctoxite.
      ENDIF.
      IF lv_cargosxite EQ '0.00'.
        CLEAR lv_cargosxite.
      ENDIF.
      IF lv_desctoglob EQ '0.00'.
        CLEAR lv_desctoglob.
      ENDIF.
      IF lv_cargosglob EQ '0.00'.
        CLEAR lv_cargosglob.
      ENDIF.
*}I-290721-NTP-3000017358
      IF lv_cargostot EQ '0.00'.                "I-100920-NTP-3000014481
        CLEAR lv_cargostot.                     "I-100920-NTP-3000014481
      ENDIF.                                    "I-100920-NTP-3000014481
      IF lv_cargostot_sabi EQ '0.00'.           "I-290721-NTP-3000017358
        CLEAR lv_cargostot_sabi.                "I-290721-NTP-3000017358
      ENDIF.                                    "I-290721-NTP-3000017358
      IF lv_cargostot_nabi EQ '0.00'.           "I-100920-NTP-3000014481
        "CLEAR lv_cargostot_nabi.               "I-100920-NTP-3000014481
      ENDIF.                                    "I-100920-NTP-3000014481
      IF lv_desctotot EQ '0.00'.                "I-100920-NTP-3000014481
        CLEAR lv_desctotot.                     "I-100920-NTP-3000014481
      ENDIF.                                    "I-100920-NTP-3000014481
      IF lv_desctotot_sabi EQ '0.00'.           "I-290721-NTP-3000017358
        CLEAR lv_desctotot_sabi.                "I-290721-NTP-3000017358
      ENDIF.                                    "I-290721-NTP-3000017358
      IF lv_desctotot_nabi EQ '0.00'.           "I-100920-NTP-3000014481
        "CLEAR lv_desctotot_nabi.               "I-100920-NTP-3000014481
      ENDIF.                                    "I-100920-NTP-3000014481
*      IF lv_imptotvent EQ '0.00'.
*        CLEAR lv_imptotvent.
*      ENDIF.
*      IF lv_totvalvent EQ '0.00'.
*        CLEAR lv_totvalvent.
*      ENDIF.
*      IF lv_totprevent EQ '0.00'.
*        CLEAR lv_totprevent.
*      ENDIF.
      IF lv_imporpermn02 EQ '0.00'.
        CLEAR lv_imporpermn02.
      ENDIF.
      IF lv_imporpermn03 EQ '0.00'.
        CLEAR lv_imporpermn03.
      ENDIF.
      IF lv_imporpermn04 EQ '0.00'.
        CLEAR lv_imporpermn04.
      ENDIF.
      IF lv_totvalveno EQ '0.00'.
        CLEAR lv_totvalveno.
      ENDIF.
      IF lv_igvkbetrtxt EQ '0.00'.
        CLEAR lv_igvkbetrtxt.
      ENDIF.
      IF lv_tot_ant EQ '0.00'.
        CLEAR lv_tot_ant.
      ENDIF.
      IF ls_cabsal2-zz_saldoapagar IS INITIAL.    "I-151021-NTP-3000017917
        CLEAR l_saldoapagar.                      "I-151021-NTP-3000017917
      ENDIF.                                      "I-151021-NTP-3000017917

*{E-300321-NTP-3000016017
**{I-090120-NTP-3000013600
*      IF ls_vbrk-zz_check_tg EQ abap_true.
*        lv_sumaigv_subtotal = '0.00'.
*        CLEAR lv_igvkbetrtxt.
*      ENDIF.
**}I-090120-NTP-3000013600
*}E-300321-NTP-3000016017

      MOVE: ls_cabsal-zz_nrodocsap          TO   es_jsoncab-zzt_nrodocsap,    "Key
            ls_cabsal-zz_numeracion         TO   es_jsoncab-zzt_numeracion,   "Key
            ls_cabsal-zz_nrodocsap          TO   es_jsoncab-zzt_nrodocsap,   "Key
            ls_cabsal-zz_numeracion         TO   es_jsoncab-zzt_numeracion,  "Key
            ls_cabsal-zz_nrodocsap          TO   es_jsoncab-zzt_nrodocsap,   "Key
            ls_cabsal-zz_numeracion         TO   es_jsoncab-zzt_numeracion,  "Key

            ls_cabsal-zz_fdigital           TO   es_jsoncab-zzt_fdigital,     "1 UBLExtensions                        Firma Digital
            ls_cabsal-zz_verubl             TO   es_jsoncab-zzt_verubl,       "2 UBLVersionID                         Versión del UBL
            ls_cabsal-zz_verestrdoc         TO   es_jsoncab-zzt_verestrdoc,   "3 CustomizationID                      Versión de la estructura del documento
            ls_cabsal-zz_numeracion         TO   es_jsoncab-zzt_numeracion,   "5 ID                                   Numeración, conformada por serie y número correlativo
            ls_cabsal-zz_femision           TO   es_jsoncab-zzt_femision,     "6 IssueDate                            Fecha de emisión
            ls_cabsal-zz_hemision           TO   es_jsoncab-zzt_hemision,     "7 IssueTime                            Hora de emisión
*           AccountingSupplierParty
            ls_cabsal-zz_ncomercial         TO   es_jsoncab-zzt_ncomercial,   "14 AccountingSupplierParty-Name        Nombre Comercial del emisor
            ls_cabsal2-zz_nempreex          TO   es_jsoncab-zzt_nempresa,     "15 AccountingSupplierParty-CompanyID   Apellidos y nombres, denominación o razón social del emisor
*           AccountingCustomerParty
            ls_cabsal-zz_nombreraz          TO   es_jsoncab-zzt_nombreraz,    "19 AccountingCustomerParty-RegistrationName        RegistrationName Apellidos y nombres, denominación o razón social del adquirente o usuario
*           Adicional
            gs_consextsun-zz_estaregdoc     TO   es_jsoncab-zzt_estadoregis.

      CASE i_tipdoc.
        WHEN gc_tipdoc_fa OR gc_tipdoc_bl.
*         Info
          MOVE: ls_cabsal-zz_dirpaisadq         TO   es_jsoncab-zzt_dirpaisadq,
*                ls_cabsal-zz_tipnumegre         TO   es_jsoncab-zzt_tipnumegre,   No Aplica Austral
                ls_cabsal-zz_valrefser          TO   es_jsoncab-zzt_valrefser,
                ls_cabsal-zz_nommatemn          TO   es_jsoncab-zzt_nommatemn,
                ls_cabsal-zz_descrtcev          TO   es_jsoncab-zzt_descrtcev,
                ls_cabsal-zz_lugdesc            TO   es_jsoncab-zzt_lugdesc,
                ls_cabsal-zz_fecdescar          TO   es_jsoncab-zzt_fecdescar,
                ls_cabsal-zz_numregist          TO   es_jsoncab-zzt_numregist,
                ls_cabsal-zz_configveh          TO   es_jsoncab-zzt_configveh,
                ls_cabsal-zz_puntoorig          TO   es_jsoncab-zzt_puntoorig,
                ls_cabsal-zz_puntdesti          TO   es_jsoncab-zzt_puntdesti,
                ls_cabsal-zz_valrefpre          TO   es_jsoncab-zzt_valrefpre,
                ls_cabsal-zz_fechconsu          TO   es_jsoncab-zzt_fechconsu.
        WHEN gc_tipdoc_nc OR gc_tipdoc_nd.
          MOVE: ls_cabsal-zz_tipdocmodif        TO   es_jsoncab-zzt_tipdocmodif,
                ls_cabsal-zz_tipdocmodifho      TO   es_jsoncab-zzt_tipdocmodifho,
                ls_cabsal-zz_motivosuste        TO   es_jsoncab-zzt_motivosuste.
          CONCATENATE ls_cabsal2-zz_fecdocmodif+0(4)
                      ls_cabsal2-zz_fecdocmodif+4(2)
                      ls_cabsal2-zz_fecdocmodif+6(2)
                      INTO es_jsoncab-zzt_fecdocmodif SEPARATED BY '-'.
      ENDCASE.

      "TaxTotal-TaxSubtotal
      IF ls_vbrk-zz_check_tg EQ abap_false
      AND ( ls_cabsal-zz_totvvopgra       EQ 0 AND
            ls_cabsal-zz_totvvopgra_taxa  EQ 0 AND
            ls_cabsal-zz_totvvopinaf      EQ 0 AND
            ls_cabsal-zz_totvvopexo       EQ 0 ).
*            lv_totvvopgra = lv_totvvopinaf = lv_totvvopexo = '0.00'. "E-3000011120-NTP280119
*{I-3000011120-NTP280119
        IF ls_cabsal-zz_opergravhomo IS NOT INITIAL. lv_totvvopgra = '0.00'. ENDIF.
        IF ls_cabsal-zz_opergravhomo IS NOT INITIAL. lv_totvvopgra_taxa = '0.00'. ENDIF.
        IF ls_cabsal-zz_operinafhomo IS NOT INITIAL. lv_totvvopinaf = '0.00'. ENDIF.
        IF ls_cabsal-zz_operexohomo IS NOT INITIAL. lv_totvvopexo = '0.00'. ENDIF.

*{I-231020-NTP-3000015579
        IF ls_vbrk-zz_check_nccero IS NOT INITIAL.
          lv_totvvopgra_taxa = '0.00'.
        ENDIF.
*}I-231020-NTP-3000015579
*}I-3000011120-NTP280119
      ENDIF.


      "4 InvoiceTypeCode Código de tipo de operación
      READ TABLE lt_catacons INTO ls_catacons WITH KEY zz_catalogo = gc_cat-catalogo51.
      IF sy-subrc = 0.
        CONCATENATE '{"0":"' ls_cabsal2-zz_tip_ope                '",'                              "0101
                    '"1":"'  ls_catacons-zz_tagagencyname         '",'                              "PE:SUNAT
                    '"2":"'  ls_catacons-zz_tagname               '",'                              "Tipo de Operación
                    '"3":"'  ls_catacons-zz_taguri                '"}' INTO es_jsoncab-zzt_tip_ope.  "urn:pe:gob:sunat:cpe:see:gem:catalogos:catalogo51
      ENDIF.

      "9 InvoiceTypeCode Tipo de documento (Factura)
      READ TABLE lt_catacons INTO ls_catacons WITH KEY zz_catalogo = gc_cat-catalogo01.
      IF sy-subrc = 0.
        CONCATENATE '{"0":"' ls_cabsal-zz_tipodoc                 '",'
                    '"1":"'  ls_catacons-zz_tagagencyname         '",'
                    '"2":"'  ls_catacons-zz_tagname               '",'
                    '"3":"'  ls_catacons-zz_taguri                '"}' INTO es_jsoncab-zzt_tipodoc.
      ENDIF.

      "10 Note Leyendas
      CONCATENATE '{"0":"' ls_cabsal-zz_leyendashomo            '",'  "1000
                  '"1":"'  ls_cabsal-zz_leyendas                '"},' "QUINIENTOS DIECINUEVE CON 20/100 SOLES
                  '{"0":"' ls_cabsal-zz_leyendashom02           '",'  "2000
                  '"1":"'  ls_cabsal-zz_leyendas02              '"},'
                  '{"0":"' ls_cabsal-zz_leyendashom03           '",'  "1002
                  '"1":"'  ls_cabsal-zz_leyendas03              '"},'
                  '{"0":"' ls_cabsal-zz_leyendashomo            '",'  " Código Monto en Letras
                  '"1":"'  ls_cabsal2-zz_amoiwen                '"},' " Monto en Letras en inglés
                  '{"0":"' ls_cabsal2-zz_leyendashom04          '",'  " 2006              "I-WMR-070319-3000010823
                  '"1":"'  ls_cabsal2-zz_leyendas04             '"}'                      "I-WMR-070319-3000010823
                  INTO es_jsoncab-zzt_leyendas. "string

      "11 DocumentCurrencyCode Tipo de moneda en la cual se emite la factura electrónica
      CLEAR: ls_tcurt.
      SELECT SINGLE *
        INTO ls_tcurt
        FROM zostb_tcurt
        WHERE waers EQ ls_cabsal-zz_moneda
          AND begda LE ls_vbrk-fkdat
          AND endda GE ls_vbrk-fkdat.

      READ TABLE lt_catacons INTO ls_catacons WITH KEY zz_catalogo = gc_cat-catalogo02.
      IF sy-subrc = 0.
        CONCATENATE '{"0":"' ls_cabsal-zz_moneda                  '",'                            "Pen
                    '"1":"'  ls_tcurt-nomsun                      '",'                            "
                    '"2":"'  ls_tcurt-sigmon                      '",'                            "
                    '"3":"'  ls_catacons-zz_tagid                 '",'                            "
                    '"4":"'  ls_catacons-zz_tagagencyname         '",'                            "
                    '"5":"'  ls_catacons-zz_tagname               '"}' INTO es_jsoncab-zzt_moneda. "
      ENDIF.

      "12 DespatchDocumentReference Tipo y número de la guía de remisión relacionada con la operación que se factura
      CASE i_tipdoc.
        WHEN gc_tipdoc_fa OR gc_tipdoc_bl.
          READ TABLE lt_catacons INTO ls_catacons WITH KEY zz_catalogo = gc_cat-catalogo01.
          LOOP AT is_data-t_guirem INTO ls_guirem.
            CLEAR lw_string.
            IF ls_guirem-xblnr IS NOT INITIAL.
              CONCATENATE '{"0":"' ls_guirem-xblnr                      '",'
                          '"1":"'  ls_guirem-zztpcpsu                   '",'
                          '"2":"'  ls_catacons-zz_tagagencyname         '",'
                          '"3":"'  ls_catacons-zz_tagname               '",'
                          '"4":"'  ls_catacons-zz_taguri                '"}' INTO lw_string.
            ELSE.
              CONCATENATE '{"0":"",'
                           '"1":"' ls_guirem-zztpcpsu '",'
                           '"2":""}'
                           '"3":""}'
                           '"4":""}'                       INTO lw_string.
            ENDIF.

            ls_jsoncab_gr-zzt_nrodocsap   = es_jsoncab-zzt_nrodocsap.
            ls_jsoncab_gr-zzt_numeracion  = es_jsoncab-zzt_numeracion.
            ls_jsoncab_gr-zzt_nroposicion = ls_guirem-zz_nroposicion.
            ls_jsoncab_gr-zzt_grasociada  = lw_string.
            APPEND ls_jsoncab_gr TO et_jsoncab_gr.
*{E-NTP111218-3000009651
*            IF es_jsoncab-zzt_gr_asociadas IS INITIAL.
*              es_jsoncab-zzt_gr_asociadas = lw_string.
*            ELSE.
*              CONCATENATE es_jsoncab-zzt_gr_asociadas lw_string INTO es_jsoncab-zzt_gr_asociadas SEPARATED BY ','.
*            ENDIF.
*}E-NTP111218-3000009651
          ENDLOOP.
          IF sy-subrc NE 0.
            lw_string = '{"0":"","1":"","2":"","3":"","4":""}'.
            ls_jsoncab_gr-zzt_nrodocsap  = es_jsoncab-zzt_nrodocsap.
            ls_jsoncab_gr-zzt_numeracion = es_jsoncab-zzt_numeracion.
            ls_jsoncab_gr-zzt_grasociada = lw_string.
            APPEND ls_jsoncab_gr TO et_jsoncab_gr.
          ENDIF.
        WHEN gc_tipdoc_nc OR gc_tipdoc_nd.
          lw_string = '{"0":"", "1":"", "2":"", "3":"", "4":""},{"0":"", "1":"", "2":"", "3":"", "4":""}'.
          ls_jsoncab_gr-zzt_nrodocsap  = es_jsoncab-zzt_nrodocsap.
          ls_jsoncab_gr-zzt_numeracion = es_jsoncab-zzt_numeracion.
          ls_jsoncab_gr-zzt_grasociada = lw_string.
          APPEND ls_jsoncab_gr TO et_jsoncab_gr.
      ENDCASE.

      "13 AdditionalDocumentReference Tipo y número de otro documento y código relacionado con la operación que se factura
      CASE i_tipdoc.
        WHEN gc_tipdoc_fa OR gc_tipdoc_bl.
          READ TABLE lt_catacons INTO ls_catacons WITH KEY zz_catalogo = gc_cat-catalogo12.
          IF sy-subrc = 0.
            IF ls_cabsal-zz_tipnumothomo IS INITIAL.
              CLEAR ls_catacons.
            ENDIF.
            CONCATENATE '{"0":"' ls_cabsal-zz_tipnumeotr              '",'
                        '"1":"'  ls_cabsal-zz_tipnumothomo            '",'
                        '"2":"'  ls_catacons-zz_tagagencyname         '",'
                        '"3":"'  ls_catacons-zz_tagname               '",'
                        '"4":"'  ls_catacons-zz_taguri                '"}' INTO es_jsoncab-zzt_tipnumeotr.
          ENDIF.
      ENDCASE.


*      AccountingSupplierParty
      "16 PartyTaxScheme Tipo y Número de RUC del emisor
      READ TABLE lt_catacons INTO ls_catacons WITH KEY zz_catalogo = gc_cat-catalogo06.
      IF sy-subrc = 0.
        CONCATENATE '{"0":"' ls_cabsal-zz_nroruc                  '",'
                    '"1":"'  ls_cabsal-zz_nroruchomo              '",'
                    '"2":"'  ls_catacons-zz_tagagencyname         '",'
                    '"3":"'  ls_catacons-zz_tagname               '",'
                    '"4":"'  ls_catacons-zz_taguri                '",'
                    '"5":"'  '-'                                  '"}' INTO es_jsoncab-zzt_nroruc.
      ENDIF.

      "Adicional - Denominación País de Dirección de Emisor de Factura
      CLEAR lw_landx.
      SELECT SINGLE landx
        INTO lw_landx
        FROM t005t
        WHERE spras EQ sy-langu
          AND land1 EQ ls_cabsal-zz_country.
      TRANSLATE lw_landx TO UPPER CASE.

      ls_cabsal-zz_cityp_code     = gs_consextsun-zz_ubigeo.        " Domicilio Fiscal - Ubigeo
      ls_cabsal-zz_street         = gs_consextsun-zz_direccion.     " Domicilio Fiscal - Dirección
      ls_cabsal-zz_house_num1     = ''.                             " Domicilio Fiscal - Número
      ls_cabsal-zz_str_suppl1     = gs_consextsun-zz_urbanizacion.  " Domicilio Fiscal - Urbanización
      ls_cabsal-zz_bezei          = gs_consextsun-zz_departamento.  " Domicilio Fiscal - Departamento
      ls_cabsal-zz_city2          = gs_consextsun-zz_provincia.     " Domicilio Fiscal - Provincia
      ls_cabsal-zz_city1          = gs_consextsun-zz_distrito.      " Domicilio Fiscal - Distrito
      ls_cabsal-zz_country        = gs_consextsun-zz_pais.          " Domicilio Fiscal - País
      READ TABLE lt_catacons INTO ls_catacons WITH KEY zz_catalogo = gc_cat-catalogo04.
      IF sy-subrc = 0.
        CONCATENATE '{"0":"' ls_cabsal-zz_cityp_code              '",'
                    '"1":"'  ls_cabsal-zz_street ' '    ls_cabsal-zz_house_num1 '",'
                    '"2":"'  ls_cabsal-zz_str_suppl1              '",'
                    '"3":"'  ls_cabsal-zz_city1                   '",'
                    '"4":"'  ls_cabsal-zz_city2                   '",'
                    '"5":"'  ls_cabsal-zz_bezei                   '",'
                    '"6":"'  ls_cabsal-zz_country                 '",'
                    '"7":"'  lw_landx                             '",'
                    '"8":"'  ls_cabsal-zz_taxjurcode2_ho          '",'    "17 RegistrationAddress Código del domicilio fiscal o de local anexo del emisor "cubso
                    '"9":"'  ls_catacons-zz_tagid                 '",'
                    '"10":"' ls_catacons-zz_tagagencyname         '",'
                    '"11":"' ls_catacons-zz_tagname               '"}'
                    INTO es_jsoncab-zzt_direccion.
      ENDIF.

*      AccountingCustomerParty
      "18 CompanyID Tipo y número de documento de identidad del adquirente o usuario
      READ TABLE lt_catacons INTO ls_catacons WITH KEY zz_catalogo = gc_cat-catalogo06.
      IF sy-subrc = 0.
        CONCATENATE '{"0":"' ls_cabsal-zz_nrodociadq            '",'
                    '"1":"'  ls_cabsal-zz_tipdociadq            '",'
                    '"2":"'  ls_catacons-zz_tagagencyname       '",'
                    '"3":"'  ls_catacons-zz_tagname             '",'
                    '"4":"'  ls_catacons-zz_taguri              '",'
                    '"5":"'  '-'                                '"}' INTO es_jsoncab-zzt_nrodociadq.
      ENDIF.

*      DeliveryTerms
      "20 Address Dirección del lugar en el que se entrega el bien
      READ TABLE lt_catacons INTO ls_catacons WITH KEY zz_catalogo = gc_cat-catalogo04.
      IF sy-subrc = 0.
        CONCATENATE '{"0":"' ls_cabsal2-zz_dp_ubigeo            '",'
                    '"1":"'  ls_cabsal2-zz_dp_calle ' '    ls_cabsal2-zz_dp_nropri '",'
                    '"2":"'  ls_cabsal2-zz_dp_nroint            '",'
                    '"3":"'  ls_cabsal2-zz_dp_distri            '",'
                    '"4":"'  ls_cabsal2-zz_dp_provin            '",'
                    '"5":"'  ls_cabsal2-zz_dp_depart            '",'
                    '"6":"'  ls_cabsal2-zz_dp_pais              '",'
                    '"7":"'  ls_catacons-zz_tagid               '",'
                    '"8":"'  ls_catacons-zz_tagagencyname       '",'
                    '"9":"'  ls_catacons-zz_tagname             '"}' INTO es_jsoncab-zzt_dir_dp.
      ENDIF.

      "23 Total valor de venta - operaciones gravadas (Monto las operaciones gravadas)
      READ TABLE lt_cata05 INTO ls_cata05 WITH KEY zz_opcion01 = '1'.
      IF sy-subrc = 0.
        READ TABLE lt_catacons INTO ls_catacons WITH KEY zz_catalogo = gc_cat-catalogo05.
        IF sy-subrc = 0.
          IF ls_cabsal-zz_totvvopgra IS INITIAL.
            CLEAR: ls_cata05, ls_catacons.
          ENDIF.
          CONCATENATE '{"0":"' ls_cabsal-zz_opergravhomo            '",' "9 1000
                      '"1":"'  lv_totvvopgra                        '"}'  "1 TaxTotal-TaxSubtotal-TaxableAmount
                      INTO es_jsoncab-zzt_totvvopgra.
        ENDIF.
      ENDIF.

      "24 (Monto las operaciones Exoneradas)
      READ TABLE lt_cata05 INTO ls_cata05 WITH KEY zz_opcion01 = '6'.
      IF sy-subrc = 0.
        READ TABLE lt_catacons INTO ls_catacons WITH KEY zz_catalogo = gc_cat-catalogo07.
        IF sy-subrc = 0.
          READ TABLE lt_catacons INTO ls_catacon2 WITH KEY zz_catalogo = gc_cat-catalogo05.
          IF sy-subrc = 0.
            IF ls_cabsal-zz_totvvopexo IS INITIAL.
              CLEAR: ls_cata05, ls_catacons.
            ENDIF.
            CONCATENATE '{"0":"'  lv_totvvopexo                  '",'  "0  TaxTotal-TaxSubtotal-TaxableAmount
                        '"1":"'  '0.00'                          '",'  "1  TaxTotal-TaxSubtotal-TaxAmount
                        '"2":"'  ls_catacon2-zz_tagagencyname    '",'  "2  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-schemeAgencyName
                        '"3":"'  ls_catacon2-zz_tagname          '",'  "3  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-schemeName
                        '"4":"'  ls_catacon2-zz_taguri           '",'  "4  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-schemeURI
                        '"5":"'  ls_cata05-zz_codigo_sunat       '",'  "5  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-Id                "1000
                        '"6":"'  ls_cata05-zz_desc_cod_suna(3)   '",'  "6  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-Name              "IGV
                        '"7":"'  ls_cata05-zz_un_ece             '"}'  "7  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-TaxTypeCode       "VAT
                        INTO es_jsoncab-zzt_totvvopexo.
          ENDIF.
        ENDIF.
      ENDIF.

      "25 Total valor de venta - operaciones inafectas (Monto las operaciones inafectas del impuesto)
      "Exportación
      IF ls_vbrk-zz_check_expor = abap_on.
        READ TABLE lt_cata05 INTO ls_cata05 WITH KEY zz_opcion01 = '4'.
      ELSE.
        READ TABLE lt_cata05 INTO ls_cata05 WITH KEY zz_opcion01 = '7'.
      ENDIF.
      IF sy-subrc = 0.
        READ TABLE lt_catacons INTO ls_catacons WITH KEY zz_catalogo = gc_cat-catalogo07.
        IF sy-subrc = 0.
          READ TABLE lt_catacons INTO ls_catacon2 WITH KEY zz_catalogo = gc_cat-catalogo05.
          IF sy-subrc = 0.
            IF ls_cabsal-zz_totvvopinaf IS INITIAL AND
             ( ls_vbrk-zz_fp_nc_ajuste IS INITIAL OR "I-040521-NTP-3000016917
               ls_vbrk-zz_check_nccero IS INITIAL ). "I-050521-NTP-3000016920
              CLEAR: ls_cata05, ls_catacons, ls_catacon2.
            ENDIF.
            CONCATENATE '{"0":"'  lv_totvvopinaf                 '",'  "0  TaxTotal-TaxSubtotal-TaxableAmount
                        '"1":"'  '0.00'                          '",'  "1  TaxTotal-TaxSubtotal-TaxAmount
                        '"2":"'  ls_catacon2-zz_tagagencyname    '",'  "2  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-schemeAgencyName
                        '"3":"'  ls_catacon2-zz_tagname          '",'  "3  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-schemeName
                        '"4":"'  ls_catacon2-zz_taguri           '",'  "4  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-schemeURI
                        '"5":"'  ls_cata05-zz_codigo_sunat       '",'  "5  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-Id                "1000
                        '"6":"'  ls_cata05-zz_desc_cod_suna(3)   '",'  "6  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-Name              "IGV
                        '"7":"'  ls_cata05-zz_un_ece             '"}'  "7  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-TaxTypeCode       "VAT
                        INTO es_jsoncab-zzt_totvvopinaf.
          ENDIF.
        ENDIF.
      ENDIF.

      "26 Total Valor de Venta de Operaciones gratuitas (Monto las operaciones gratuitas)
**      CASE i_tipdoc.                                                                                "E-WMR-07052020-3000014444
**        WHEN gc_tipdoc_fa OR gc_tipdoc_bl.                                                          "E-WMR-07052020-3000014444
      READ TABLE lt_cata05 INTO ls_cata05 WITH KEY zz_opcion01 = '5'.
      IF sy-subrc = 0.
        READ TABLE lt_catacons INTO ls_catacons WITH KEY zz_catalogo = gc_cat-catalogo07.
        IF sy-subrc = 0.
          READ TABLE lt_catacons INTO ls_catacon2 WITH KEY zz_catalogo = gc_cat-catalogo05.
          IF sy-subrc = 0.
            IF ls_cabsal-zz_totvalvenoh IS INITIAL.
              CLEAR: ls_cata05, ls_catacons.
            ENDIF.
            CONCATENATE '{"0":"' lv_totvalveno                   '",'  "0  TaxTotal-TaxSubtotal-TaxableAmount
*                        '"1":"'  '0.00'                          '",'  "1  TaxTotal-TaxSubtotal-TaxAmount  "E-090120-NTP-3000013600
                        '"1":"'  lv_sumaigv                      '",'  "1  TaxTotal-TaxSubtotal-TaxAmount   "I-090120-NTP-3000013600
                        '"2":"'  ls_catacon2-zz_tagagencyname    '",'  "2  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-schemeAgencyName
                        '"3":"'  ls_catacon2-zz_tagname          '",'  "3  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-schemeName
                        '"4":"'  ls_catacon2-zz_taguri           '",'  "4  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-schemeURI
                        '"5":"'  ls_cata05-zz_codigo_sunat       '",'  "5  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-Id                "1000
                        '"6":"'  ls_cata05-zz_desc_cod_suna(3)   '",'  "6  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-Name              "IGV
                        '"7":"'  ls_cata05-zz_un_ece             '"}'  "7  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-TaxTypeCode       "VAT
                        INTO es_jsoncab-zzt_totvalveno.
*{I-PBM120721-3000016828
            IF lv_totvalveno IS NOT INITIAL AND ls_vbrk-zz_check_tg IS NOT INITIAL. "I-160921-NTP-3000017358
              lv_sumaigv_subtotal = lv_sumaigv = '0.00'.                            "+NTP030423-3000021571
              CLEAR lv_igvkbetrtxt.                                                 "+NTP030423-3000021571
            ENDIF.
*}I-PBM120721-3000016828
          ENDIF.
        ENDIF.
      ENDIF.
**      ENDCASE.                                                                                      "E-WMR-07052020-3000014444

      "27 TaxTotal-TaxSubtotal-Name="IGV" - Sumatoria de IGV
      READ TABLE lt_cata05 INTO ls_cata05 WITH KEY zz_opcion01 = '1'.
      IF sy-subrc = 0.
        READ TABLE lt_catacons INTO ls_catacons WITH KEY zz_catalogo = gc_cat-catalogo07.
        IF sy-subrc = 0.
          READ TABLE lt_catacons INTO ls_catacon2 WITH KEY zz_catalogo = gc_cat-catalogo05.
          IF sy-subrc = 0.
            IF lv_sumaigv IS INITIAL.
              CLEAR: ls_cata05, ls_catacons, ls_catacon2.
            ENDIF.
*            IF lv_totvvopgra_taxa IS INITIAL AND ls_vbrk-t_formapago[] IS NOT INITIAL. "I-230321-SVM-3000016091
*              lv_totvvopgra_taxa = '0.00'.                                             "I-230321-SVM-3000016091
*            ENDIF.                                                                     "I-230321-SVM-3000016091
*            IF lv_igvkbetrtxt IS INITIAL AND ls_vbrk-t_formapago[] IS NOT INITIAL.     "I-230321-SVM-3000016091
*              lv_igvkbetrtxt = '0.00'.                                                 "I-230321-SVM-3000016091
*            ENDIF.                                                                     "I-230321-SVM-3000016091
*{D-PBM120721-3000016828
***{I-300321-NTP-3000016017
**            IF ls_vbrk-zz_check_tg IS NOT INITIAL AND lv_igvkbetrtxt IS NOT INITIAL.
**              lv_totvvopgra_taxa = lv_totvalveno.
**            ENDIF.
***}I-300321-NTP-3000016017
*}D-PBM120721-3000016828

            "Total de impuestos
            CONCATENATE '{"0":"' lv_sumaigv                        '",'  "0  TaxTotal-TaxAmount

                        "Subtotal de gravadas
                        '"1":"'  lv_totvvopgra_taxa                '",'  "1  TaxTotal-TaxSubtotal-TaxableAmount
*                        '"2":"'  lv_sumaigv                        '",'  "2  TaxTotal-TaxSubtotal-TaxAmount  "E-090120-NTP-3000013600
                        '"2":"'  lv_sumaigv_subtotal               '",'  "2  TaxTotal-TaxSubtotal-TaxAmount   "I-090120-NTP-3000013600
                        '"3":"'  lv_igvkbetrtxt                    '",'  "3  TaxTotal-TaxSubtotal-TaxCategory-Percent                                "18%
                        '"4":"'  ls_catacon2-zz_tagagencyname      '",'  "4  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-schemeAgencyName
                        '"5":"'  ls_catacon2-zz_tagname            '",'  "5  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-schemeName
                        '"6":"'  ls_catacon2-zz_taguri             '",'  "6  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-schemeURI
                        '"7":"'  ls_cata05-zz_codigo_sunat         '",'  "7  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-Id                           "1000
                        '"8":"'  ls_cata05-zz_desc_cod_suna(3)     '",'  "8  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-Name                         "IGV
                        '"9":"'  ls_cata05-zz_un_ece               '"}'  "9  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-TaxTypeCode                  "VAT
                        INTO es_jsoncab-zzt_sumaigv.
          ENDIF.
        ENDIF.
      ENDIF.

      "28 Sumatoria de ISC
      "Ningun cliente tiene isc
      READ TABLE lt_cata05 INTO ls_cata05 WITH KEY zz_codigo_sunat = ls_cabsal-zz_sumaischom03.
      IF sy-subrc = 0.
        READ TABLE lt_catacons INTO ls_catacons WITH KEY zz_catalogo = gc_cat-catalogo05.
        IF sy-subrc = 0.
          IF ls_cabsal-zz_sumaisc IS INITIAL.
            CLEAR: ls_cata05, ls_catacons, ls_catacon2.
          ENDIF.

          CONCATENATE '{"0":"' lv_sumaisc                        '",'  "0  TaxTotal-TaxSubtotal-TaxableAmount
                      '"1":"'  '0.00'                            '",'  "1  TaxTotal-TaxSubtotal-TaxAmount
                      '"2":"'  ls_catacon2-zz_tagagencyname      '",'  "2  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-schemeAgencyName
                      '"3":"'  ls_catacon2-zz_tagname            '",'  "3  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-schemeName
                      '"4":"'  ls_catacon2-zz_taguri             '",'  "4  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-schemeURI
                      '"5":"'  ls_cata05-zz_codigo_sunat         '",'  "5  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-Id                           "1000
                      '"6":"'  ls_cata05-zz_desc_cod_suna(3)     '",'  "6  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-Name                         "IGV
                      '"7":"'  ls_cata05-zz_un_ece               '"}'  "7  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-TaxTypeCode                  "VAT
                    INTO es_jsoncab-zzt_sumaisc.                       "U-300321-NTP-3000016475
        ENDIF.
      ENDIF.

      "29 Sumatoria de Otros Tributos
      "Ningun cliente tiene este item
      READ TABLE lt_cata05 INTO ls_cata05 WITH KEY zz_codigo_sunat = ls_cabsal-zz_otrostribut3.
      IF sy-subrc = 0.
        READ TABLE lt_catacons INTO ls_catacons WITH KEY zz_catalogo = gc_cat-catalogo05.
        IF sy-subrc = 0.
          IF ls_cabsal-zz_sumaotrtri IS INITIAL.
            CLEAR: ls_cata05, ls_catacons.
          ENDIF.

          CONCATENATE '{"0":"' lv_sumaotrtri                     '",'  "0  TaxTotal-TaxSubtotal-TaxableAmount
                      '"1":"'  '0.00'                            '",'  "1  TaxTotal-TaxSubtotal-TaxAmount
                      '"2":"'  ls_catacon2-zz_tagagencyname      '",'  "2  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-schemeAgencyName
                      '"3":"'  ls_catacon2-zz_tagname            '",'  "3  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-schemeName
                      '"4":"'  ls_catacon2-zz_taguri             '",'  "4  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-schemeURI
                      '"5":"'  ls_cata05-zz_codigo_sunat         '",'  "5  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-Id                           "1000
                      '"6":"'  ls_cata05-zz_desc_cod_suna(3)     '",'  "6  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-Name                         "IGV
                      '"7":"'  ls_cata05-zz_un_ece               '"}'  "7  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-TaxTypeCode                  "VAT
                    INTO es_jsoncab-zzt_sumaotrtri.                    "U-300321-NTP-3000016475
        ENDIF.
      ENDIF.

      CONCATENATE '{"0":"' lv_imptotvent                        '",'  "34 LegalMonetaryTotal-PayableAmount        Importe total de la venta, cesión en uso o del servicio prestado = 31-32+33
                  '"1":"'  lv_totvalvent                        '",'  "30 LegalMonetaryTotal-LineExtensionAmount  Total valor de venta
                  '"2":"'  lv_totprevent                        '",'  "31 LegalMonetaryTotal-TaxInclusiveAmount   Total precio de venta (incluye impuestos)
                  '"3":"'  lv_valvenxite                        '",'  "Neto     "I-180920-NTP-3000014481
                  '"4":"'  lv_sumaigv_pdf                       '",'  "Impuesto "I-180920-NTP-3000014481
                  '"5":"'  l_saldoapagar                        '"}'  "Saldo a pagar  "I-151021-NTP-3000017917
                  INTO es_jsoncab-zzt_imptotvent.

      "21 AllowanceCharge  Información de descuentos Globales
*{I-3000011712-NTP110419
      set_json_cardes_ubl2_1(
        EXPORTING
          i_nrodocsap  = ls_cabsal-zz_nrodocsap
          it_cardes    = is_data-t_cardes
        IMPORTING
          e_dscto_json = es_jsoncab-zzt_desctoglob
          e_cargo_json = es_jsoncab-zzt_cargosglob
      ).
*}I-3000011712-NTP110419

      "32 AllowanceTotalAmount Monto total de descuentos del comprobante
      IF ls_vbrk-zz_check_tg IS INITIAL.                                "I-100621-NTP-3000015973
*{I-290721-NTP-3000017358
        CONCATENATE '{"0":"' lv_desctotot  '",'
                    '"1":"'  lv_desctoxite '",'
                    '"2":"'  lv_desctoglob '",'
                    '"3":"'  lv_desctotot_sabi '",'
                    '"4":"'  lv_desctotot_nabi '"}' INTO es_jsoncab-zzt_desctotot.
*}I-290721-NTP-3000017358
      ENDIF.

      "33 ChargeTotalAmount    Monto total de otros cargos del comprobante
*{I-290721-NTP-3000017358
      CONCATENATE '{"0":"' lv_cargostot  '",'
                  '"1":"'  lv_cargosxite '",'
                  '"2":"'  lv_cargosglob '",'
                  '"3":"'  lv_cargostot_sabi '",'
                  '"4":"'  lv_cargostot_nabi '"}' INTO es_jsoncab-zzt_cargostot.
*}I-290721-NTP-3000017358

      "32 PrepaidPayment       Importe total de anticipos(monto del descuento)
      lt_aplant[] = is_data-t_aplant[].
      DELETE lt_aplant WHERE bukrs         NE ls_cabsal-bukrs
                          OR zz_nrodocsap  NE ls_cabsal-zz_nrodocsap
                          OR zz_numeracion NE ls_cabsal-zz_numeracion.

      IF lt_aplant[] IS NOT INITIAL.
        " Anticipos
        LOOP AT lt_aplant INTO ls_aplant.
          l_numc2 = sy-tabix.
          lw_string = ls_aplant-zz_mto_pre.
          CONDENSE lw_string NO-GAPS.
          READ TABLE lt_catacons INTO ls_catacons WITH KEY zz_catalogo = gc_cat-catalogo12.
          IF sy-subrc = 0.
            CONCATENATE '{"0":"' ls_catacons-zz_tagagencyname '",'        "1  PrepaidPayment-ID-schemeAgencyName
                        '"1":"'  'Anticipo'                   '",'        "2  PrepaidPayment-ID-schemeName
                        '"2":"'  ls_aplant-zz_tidocre         '",'        "3  PrepaidPayment-ID
                        '"3":"'  lw_string                    '",'        "4  PrepaidPayment-PaidAmount
                        '"4":"'                               '",'        "5  PrepaidPayment-PaidDate
                        '"5":"'  ls_aplant-zz_ser_ant         '",'        "6  PrepaidPayment-Reference
                        '"6":"'  l_numc2                      '"}'        "7  PrepaidPayment-Correlative
                        INTO lw_line_row.                                 "MTO_ANT_FCT

            CONCATENATE '{"0":"' ls_aplant-zz_ser_ant        '",'         "1  AdditionalDocumentReference-Id
                        '"1":"'  ls_catacons-zz_tagagencyname '",'        "2  AdditionalDocumentReference-DocumentTypeCode-listAgencyName
                        '"2":"'  ls_catacons-zz_tagname       '",'        "3  AdditionalDocumentReference-DocumentTypeCode-listName
                        '"3":"'  ls_catacons-zz_taguri        '",'        "4  AdditionalDocumentReference-DocumentTypeCode-listURI
                        '"4":"'  ls_aplant-zz_tidocre         '",'        "5  AdditionalDocumentReference-DocumentTypeCode
                        '"5":"'  ls_catacons-zz_tagagencyname '",'        "6  AdditionalDocumentReference-DocumentStatusCode-listAgencyName
                        '"6":"'  'Anticipo'                   '",'        "7  AdditionalDocumentReference-DocumentStatusCode-listName
                        '"7":"'  ls_aplant-zz_tidocre         '",'        "8  AdditionalDocumentReference-DocumentStatusCode
                        '"8":"'  l_numc2                      '"}'        "8  AdditionalDocumentReference-DocumentCorrelative
                        INTO lw_line_row2.                                "TNM_OTR_FCT

            ls_jsoncab_aa-zzt_nrodocsap   = es_jsoncab-zzt_nrodocsap.
            ls_jsoncab_aa-zzt_numeracion  = es_jsoncab-zzt_numeracion.
            ls_jsoncab_aa-zzt_nroposicion = ls_aplant-zz_nroposicion.
            ls_jsoncab_aa-zzt_aaasociada  = lw_line_row.
            ls_jsoncab_aa-zzt_tipnumeotr  = lw_line_row2.
            APPEND ls_jsoncab_aa TO et_jsoncab_aa.
          ENDIF.
        ENDLOOP.

        es_jsoncab-zzt_tot_ant = lv_tot_ant.
      ELSE.
        " Total Anticipo
        es_jsoncab-zzt_tot_ant = '0.00'.
      ENDIF.


*--------------------------------------------------------------------*
*     Adicional
*--------------------------------------------------------------------*
      "Percepciones / Detracciones
*{I-250120-NTP-3000013706
      READ TABLE lt_catacons INTO ls_catacons WITH KEY zz_catalogo = gc_cat-catalogo54.
      READ TABLE lt_catacons INTO ls_catacon2 WITH KEY zz_catalogo = gc_cat-catalogo59.
      IF sy-subrc = 0.
*}I-250120-NTP-3000013706
        CONCATENATE '{"0":"' ls_cabsal-zz_imporpermnhom           '",'  "Indicador
                    '"1":"'  lv_imporpermn02                      '",'  "Base
                    '"2":"'  lv_imporpermn03                      '",'  "Impuesto
                    '"3":"'  lv_imporpermn04                      '",'  "Total
                    '"4":"'  ls_cabsal-zz_imporpermn_por          '"},' "%

*{I-250120-NTP-3000013706
                    "Detracción
                    '{"0":"' ls_cabsal2-zz_detracodbs             '",'  "PaymentTerms-PaymentMeansID
                    '"1":"'  lv_detraporc                         '",'  "PaymentTerms-PaymentPercent
                    '"2":"'  lv_detra                             '",'  "PaymentTerms-Amount
                    '"3":"'  gc_waers_pen                         '",'  "PaymentTerms-CurrencyID
                    '"4":"'  ls_catacons-zz_tagid                 '",'
                    '"5":"'  ls_catacons-zz_tagagencyname         '",'
                    '"6":"'  ls_catacons-zz_tagname               '",'
                    '"7":"'  ls_catacons-zz_taguri                '",'
                    "Medio de Pago
                    '"8":"'  ls_cabsal2-zz_detra_mdpg             '",'  "PaymentMeans-PaymentMeansCode
                    '"9":"'  ls_cabsal2-zz_detractabn             '",'  "PaymentMeans-PayeeFinancialAccounts
                    '"10":"' ls_catacons-zz_tagid                 '",'
                    '"11":"' ls_catacon2-zz_tagagencyname         '",'
                    '"12":"' ls_catacon2-zz_tagname               '",'
                    '"13":"' ls_catacon2-zz_taguri                '"}'
*}I-250120-NTP-3000013706
                    INTO es_jsoncab-zzt_imporpermn.
      ENDIF.

      CASE i_tipdoc.
        WHEN gc_tipdoc_fa OR gc_tipdoc_bl.
        WHEN gc_tipdoc_nc OR gc_tipdoc_nd.
          CONCATENATE '{"0":"' ls_cabsal-zz_tipdocmodif         '",'
                      '"1":"'  ls_cabsal-zz_codmotivo           '"}' INTO es_jsoncab-zzt_codmotivo.
      ENDCASE.

      "Pedido / Entrega /Orden de Compra / Factura Interma / Ultima Factura SUNAT Anulada
      IF ( i_tipdoc EQ gc_tipdoc_fa ) OR ( i_tipdoc EQ gc_tipdoc_bl ) OR ( i_tipdoc EQ gc_tipdoc_nc ) OR ( i_tipdoc EQ gc_tipdoc_nd ).
        CONCATENATE  '{"0":"' ls_cabsal-zz_vbeln      '",'
                     '"1":"'  ls_cabsal2-zz_entrega   '",'
                     '"2":"'  ls_cabsal-zz_bstkd      '",'
                     '"3":"'  ls_cabsal2-zz_fac_inte  '",'
                     '"4":"'  ls_cabsal2-zz_ult_fac   '"}' INTO es_jsoncab-zzt_refsapfct.
      ELSE.
        es_jsoncab-zzt_refsapfct  = '{"0":"","1":"","2":"","3":"","4":""}'.
      ENDIF.

      "Datos adicionales: 0:Zona venta 1: cod Cliente 2 :Cod vendedor
      IF gw_sw_pernr IS INITIAL .
        CONCATENATE '{"0":"'  ls_cabsal2-zz_zona_vta  '",'
                    '"1":"'   ls_cabsal2-zz_cod_clie  '",'
                    '"2":"'   ls_cabsal2-zz_cod_vend  '"}' INTO es_jsoncab-zzt_dsd_sap.
      ELSE.
        CONCATENATE '{"0":"'  ls_cabsal2-zz_zona_vta  '",'
                    '"1":"'   ls_cabsal2-zz_cod_clie  '",'
                    '"2":""}'                              INTO es_jsoncab-zzt_dsd_sap.
      ENDIF.

      es_jsoncab-zzt_dir_lle = ls_cabsal-zz_dir_lle.    "Direccion de llega del Documento
      es_jsoncab-zzt_des_nex = ls_cabsal2-zz_des_nex.  "Destino Nacional para exportación
      es_jsoncab-zzt_nro_eme = ls_cabsal2-zz_nro_eme.  "Número de entrega mercadería

*{  BEGIN OF INSERT WMR-230615
      " Dirección Punto de Emisión
      CLEAR lw_landx.
      SELECT SINGLE landx
        INTO lw_landx
        FROM t005t
        WHERE spras EQ sy-langu
          AND land1 EQ ls_cabsal-zz_country2.
      IF lw_landx IS INITIAL.
        lw_landx = ls_cabsal-zz_country2.
      ENDIF.
      TRANSLATE ls_cabsal-zz_cityp_code2  TO UPPER CASE.
      TRANSLATE ls_cabsal-zz_street2      TO UPPER CASE.
      TRANSLATE ls_cabsal-zz_house_num12  TO UPPER CASE.
      TRANSLATE ls_cabsal-zz_str_suppl12  TO UPPER CASE.
      TRANSLATE ls_cabsal-zz_city12       TO UPPER CASE.
      TRANSLATE ls_cabsal-zz_city22       TO UPPER CASE.
      TRANSLATE ls_cabsal-zz_bezei2       TO UPPER CASE.
      TRANSLATE lw_landx                  TO UPPER CASE.
      CONCATENATE '{"0":"' ls_cabsal-zz_cityp_code2    '",'
                  '"1":"'  ls_cabsal-zz_street2 ' '    ls_cabsal-zz_house_num12 '",'
                  '"2":"'  ls_cabsal-zz_str_suppl12    '",'
                  '"3":"'  ls_cabsal-zz_city12         '",'
                  '"4":"'  ls_cabsal-zz_city22         '",'
                  '"5":"'  ls_cabsal-zz_bezei2         '",'
                  '"6":"'  lw_landx                    '"}' INTO es_jsoncab-zzt_direcemis.
*}  END OF INSERT WMR-230615

      " E-mail destino
      es_jsoncab-zzt_maildest = ls_cabsal-zz_maildest.

      " Totales Opcionales 01: Flete y Seguro
      IF ls_vbrk-zz_check_expor EQ abap_false.
        CLEAR: ls_cabsal2-zz_tot_flete,
               ls_cabsal2-zz_tot_seguro.
      ENDIF.

      CLEAR lw_line_row.
      CONCATENATE '{"0":"' ls_cabsal2-zz_tot_flete    '",'
                  '"1":"'  ls_cabsal2-zz_tot_seguro   '",'
                  '"2":"'  ls_cabsal2-zz_tot_otros   '"}'
                  INTO lw_line_row.
      es_jsoncab-zzt_tot_opt = lw_line_row.

      " Código Formato PDF
      es_jsoncab-zzt_pdffrm = ls_cabsal2-zz_pdffrm.

      " Datos de Embarque
      IF  ls_cabsal2-zzblfec IS NOT INITIAL
      AND ls_cabsal2-zzblfec NE '00000000'.
        CONCATENATE ls_cabsal2-zzblfec(4) '-'  ls_cabsal2-zzblfec+4(2) '-' ls_cabsal2-zzblfec+6(2)
          INTO lw_fecha.
      ENDIF.
      CONCATENATE '{"0":"' ls_cabsal2-zzvaportxt   '",'
                  '"1":"'  ls_cabsal2-zzblnro      '",'
                  '"2":"'  lw_fecha                '",'
                  '"3":"'  ls_cabsal2-zzcondic     '"}'
                  INTO es_jsoncab-zzt_datembar.

      " Datos de Pesca
      CONCATENATE '{"0":"' ls_cabsal2-zzmatembtxt  '",'
                  '"1":"'  ls_cabsal2-zzpesfec     '",'
                  '"2":"'  ls_cabsal2-zzpessem     '"}'
                  INTO es_jsoncab-zzt_datpesca.

      " Número de Placa
      es_jsoncab-zzt_placa = ls_cabsal2-zz_placa.

      " Peso Neto, Peso Bruto, Peso Drenado
      CONCATENATE '{"0":"'  ls_cabsal2-zz_peso_neto    '",'
                  '"1":"'   ls_cabsal2-zz_peso_bruto   '",'
                  '"2":"'   ls_cabsal2-zz_peso_drenado '",'
                  '"3":"'   ls_cabsal2-zz_und_peso     '"}'
                  INTO es_jsoncab-zzt_weight.

      " Dirección Sede Productiva
      es_jsoncab-zzt_dir_sdpr = ls_cabsal2-zz_dir_sdpr.

      " Datos varios de Exportación
      CONCATENATE '{"0":"'  ls_cabsal2-zz_cod_lote   '",'
                  '"1":"'   ls_cabsal2-zz_part_ara   '",'
                  '"2":"'   ls_cabsal2-zz_etiqueta   '",'
                  '"3":"'   ls_cabsal2-zz_nrcl_bul   '",'
                  '"4":"'   ls_cabsal2-zz_awb        '",'
                  '"5":"'   ls_cabsal2-zz_ctacte     '",'
                  '"6":"'   ls_cabsal2-zz_dua        '"}'
                  INTO es_jsoncab-zzt_datexp2.

      " Notify
      concatenate_json(
        EXPORTING
          id0    = ls_cabsal2-zz_notify_name
          id1    = ls_cabsal2-zz_notify_dir
          id2    = ls_cabsal2-zz_notify_tel
          id3    = ls_cabsal2-zz_notify_fax
          id4    = ls_cabsal2-zz_notify_cnt
          id5    = ls_cabsal2-zz_notify_mail
        RECEIVING
          r_json = es_jsoncab-zzt_notify
      ).

      " Usuario
      es_jsoncab-zzt_ernam    = ls_cabsal2-zz_ernam.

      " Texto antes del final de posiciones
      es_jsoncab-zzt_text_bep = ls_cabsal2-zz_text_bep.

      " Referencia SD y FI
      CASE i_tipdoc.
        WHEN gc_tipdoc_fa OR gc_tipdoc_bl.
          CONCATENATE '{"0":"'  ls_cabsal2-zz_fac_inte   '",'
                      '"1":"'   ls_cabsal2-zz_nrodocfi   '"}'
                      INTO es_jsoncab-zzt_ref_sdfi.
        WHEN gc_tipdoc_nc OR gc_tipdoc_nd.
          CONCATENATE '{"0":"'  ls_cabsal2-zz_sdrefer    '",'
                      '"1":"'   ls_cabsal2-zz_nrodocfi   '"}'
                      INTO es_jsoncab-zzt_ref_sdfi.
      ENDCASE.

      " Exportación: Tipo de Envío
      CONCATENATE '{"0":"'  ls_cabsal2-zz_exp_tpenv    '",'
                  '"1":"'   ls_cabsal2-zz_exp_versi    '",'
                  '"2":"'   ls_cabsal2-zz_exp_palet    '",'
                  '"3":"'   ls_cabsal2-zz_exp_unida    '"}'
                  INTO es_jsoncab-zzt_exp_tpenv.

      " Observaciones
      es_jsoncab-zzt_text_obs = ls_cabsal2-zz_text_obs.

      " Boletas: Mostrar Importe Total de Venta incluido IGV
      IF gw_imp_boigv EQ abap_on.
        es_jsoncab-zzt_columns_igv = '{"0":"","1":"","2":""}'.
        IF ( i_tipdoc EQ gc_tipdoc_bl )                                " Boletas
        OR ( ( i_tipdoc EQ gc_tipdoc_nc OR i_tipdoc EQ gc_tipdoc_nd )
              AND ls_vbrk-tipdocmodifho EQ gc_tipdoc_bl ).           " NC y ND referidos a Boletas
          es_jsoncab-zzt_columns_igv = es_jsoncab-zzt_imptotvent.
        ENDIF.
      ELSE.
        es_jsoncab-zzt_columns_igv = '{"0":"","1":"","2":""}'.
      ENDIF.

*{  BEGIN OF INSERT WMR-150218-3000009072
      " Si Boleta o NC/ND referido a Boleta con Rebate, No imprimir N°doc identidad del adquirente
      es_jsoncab-zzt_bol_npnad = ls_cabsal2-zz_bol_npnad.
*}  END OF INSERT WMR-150218-3000009072

*{  BEGIN OF INSERT WMR-191018-3000009765
      " Datos Minería
      CONCATENATE '{"0":"'  ls_cabsal2-zz_min_ctdpcp   '",'
                  '"1":"'   ls_cabsal2-zz_min_swap01   '",'
                  '"2":"'   ls_cabsal2-zz_min_swap02   '"}'
                  INTO es_jsoncab-zzt_data_mineria.
*}  END OF INSERT WMR-191018-3000009765

      " Textos Adicionales
      LOOP AT is_data-t_text_header INTO ls_header_text.
        ls_jsoncab_tc-zzt_nrodocsap   = es_jsoncab-zzt_nrodocsap.
        ls_jsoncab_tc-zzt_numeracion  = es_jsoncab-zzt_numeracion.
        ls_jsoncab_tc-zzt_nroposicion = ls_header_text-zz_nroposicion.
        ls_jsoncab_tc-zzt_text_head   = ls_header_text-zz_text_head.
        APPEND ls_jsoncab_tc TO et_jsoncab_tc.
      ENDLOOP.

      set_json_cab_ubl2_1_customer(
        EXPORTING
          i_tipdoc   = i_tipdoc
          is_vbrk    = ls_vbrk
          is_cabsal  = ls_cabsal
          is_cabsal2 = ls_cabsal2
          it_formapago = is_data-t_formapago "I-150321-NTP-3000016017
        CHANGING
          cs_jsoncab   = es_jsoncab
      ).

    ENDLOOP.

  ENDMETHOD.


  METHOD set_json_cab_ubl2_1_customer.

    DATA: lt_comp TYPE TABLE OF string.                                                 "I-WMR-24062020-3000014621

    DATA: ls_guiremi   LIKE LINE OF lt_guiremi,
          ls_t052u     LIKE LINE OF lt_t052u,
          ls_t001      TYPE t001,
          ls_const     LIKE LINE OF lt_const,                                             "I-WMR-24062020-3000014621
          ls_comp      LIKE LINE OF lt_comp,                                              "I-WMR-24062020-3000014621
          ls_formapago LIKE LINE OF it_formapago.                                         "I-110321-NTP-3000016017

    DATA: lw_string      TYPE string,
          lw_pto_origen  TYPE string,
          lw_pto_destino TYPE string,
          lw_fecha       TYPE char10,
          l_fp_tipo      TYPE string, "I-110321-NTP-3000016017
          l_formapago    TYPE string, "I-110321-NTP-3000016017
          l_importe      TYPE char15, "I-110321-NTP-3000016017
          l_num3         TYPE numc3,  "I-120321-NTP-3000016017
          l_zz_fec_vto   TYPE char10, "I-120321-NTP-3000016017
          l_cuota        TYPE string. "I-120321-NTP-3000016017

    FIELD-SYMBOLS: <fs_value> TYPE any.                                                 "I-WMR-24062020-3000014621

*   Forma de Pago
    READ TABLE lt_t052u INTO ls_t052u WITH KEY spras = sy-langu                         "I-WMR-09122020-3000014557
                                                zterm = is_cabsal-zz_zterm.             "I-WMR-09122020-3000014557
    CASE i_tipdoc.                                                                      "I-WMR-20112020-3000014557
      WHEN gc_tipdoc_fa OR gc_tipdoc_bl OR                                              "I-WMR-20112020-3000014557
           is_vbrk-zz_fp_nc_ajuste.                                                     "I-WMR-19032021-3000016455
**    IF ( i_tipdoc EQ gc_tipdoc_fa ) OR ( i_tipdoc EQ gc_tipdoc_bl ).                    "E-WMR-20112020-3000014557
**        READ TABLE lt_t052u INTO ls_t052u WITH KEY spras = sy-langu                     "E-WMR-09122020-3000014557
**                                                    zterm = is_cabsal-zz_zterm.         "E-WMR-09122020-3000014557
        IF sy-subrc = 0.
          CASE gw_license.
            WHEN '0020974592'.  " DANPER
              " Obtener País de la Sociedad
              CLEAR ls_t001.
              SELECT SINGLE land1 INTO ls_t001-land1 FROM t001 WHERE bukrs EQ is_vbrk-bukrs.
              IF sy-subrc EQ 0.
                " Obtener Descripción de la Vía de Pago
                CLEAR lw_string.
                SELECT SINGLE text2 INTO lw_string FROM t042zt
                  WHERE spras EQ sy-langu AND land1 EQ ls_t001-land1 AND zlsch EQ is_vbrk-zlsch.
                IF lw_string IS NOT INITIAL.
                  " Concatenar Denominación de Condición de Pago y Descripción de la Vía de Pago
                  IF ls_t052u-text1 IS NOT INITIAL.
                    CONCATENATE ls_t052u-text1 '-' lw_string INTO ls_t052u-text1 SEPARATED BY space.
                  ELSE.
                    ls_t052u-text1 = lw_string.
                  ENDIF.
                ENDIF.
              ENDIF.
*{  BEGIN OF INSERT WMR-28042020-3000014301
            WHEN '0021131379'.  " RESEMIN
              IF ( is_vbrk-zz_check_expor = abap_true                 " Exportación
              AND  is_vbrk-adq_spras <> sy-langu ).                   " Adquirente Idioma <> Idioma sistema
                SELECT SINGLE text1 INTO lw_string FROM t052u
                  WHERE spras = is_vbrk-adq_spras
                    AND zterm = is_vbrk-zterm
                    AND ztagg = 0.
                CONCATENATE ls_t052u-text1 lw_string INTO ls_t052u-text1 SEPARATED BY ' / '. "I-020720-NTP-3000014585
              ENDIF.
*}  END OF INSERT WMR-28042020-3000014301
          ENDCASE.

          "8 DueDate  Fecha de Vencimiento
          CASE gw_license.
            WHEN '0020311006'   " AIB
              OR '0020863116'.  " AIB CLOUD
              CONCATENATE '{"0":"",'
                          '"1":"' ls_t052u-text1            '",'
                          '"2":"' is_cabsal2-zz_fec_vto     '",'
                          '"3":"","4":"","5":"","6":"","7":""}'
                          INTO cs_jsoncab-zzt_cnd_sap_fct.
            WHEN OTHERS.
              CONCATENATE '{"0":"'  is_cabsal-zz_zterm      '",'
                          '"1":"'   ls_t052u-text1          '",'
                          '"2":"'   is_cabsal2-zz_fec_vto   '",'
                          '"3":"","4":"","5":"","6":"","7":""}'
                          INTO cs_jsoncab-zzt_cnd_sap_fct.
          ENDCASE.
        ELSE.
*{I-3000012479-NTP-140819
          CASE gw_license.
            WHEN '0020299975'. "Acfarma
              "Si solo tiene fecha de vencimiento
              CONCATENATE '{"0":"", "1":"", "2":"' is_cabsal2-zz_fec_vto
                           '","3":"","4":"","5":"","6":"","7":""}' INTO cs_jsoncab-zzt_cnd_sap_fct.
            WHEN OTHERS.
              cs_jsoncab-zzt_cnd_sap_fct = '{"0":"","1":"","2":"","3":"","4":"","5":"","6":"","7":""}'.
          ENDCASE.
*}I-3000012479-NTP-140819
        ENDIF.

*{  BEGIN OF INSERT WMR-20112020-3000014557
      WHEN gc_tipdoc_nc OR gc_tipdoc_nd.

        CASE gs_process-license.
          WHEN '0021154274'   " ILENDER
            OR '0021137469'   " CONSENSO                                    "I-PBM050721-3000016828
            OR '0020311006'   " AIB                                         "I-281021-NTP-3000017871
            OR '0020863116'   " AIB CLOUD
            OR '0021061097'.   " CMH                                         "I-PBM210521-3000016441
            CONCATENATE '{"0":"",'
                        '"1":"'   ls_t052u-text1          '",'
                        '"2":"' is_cabsal2-zz_fec_vto     '",'
                        '"3":"",'                                       "I-281021-NTP-3000017871
                        '"4":"' is_vbrk-zz_fp_tipo        '",'          "I-281021-NTP-3000017871
                        '"5":"","6":"",'                                "I-281021-NTP-3000017871
                        '"7":"' ls_t052u-text1            '"}'          "I-281021-NTP-3000017871 "Mostrar concatenado 4 y 7 en pdf
                        ',{"0":"","1":"","2":"","3":"","4":"","5":""}'  "I-281021-NTP-3000017871
                        INTO cs_jsoncab-zzt_cnd_sap_fct.
          WHEN OTHERS.
            cs_jsoncab-zzt_cnd_sap_fct = '{"0":"","1":"","2":"","3":"","4":"","5":"","6":"","7":""}'.
        ENDCASE.
    ENDCASE.

*{I-090321-NTP-3000016017
    CASE gw_license.
      WHEN OTHERS.
        IF ( i_tipdoc EQ gc_tipdoc_fa OR is_vbrk-zz_fp_nc_ajuste IS NOT INITIAL )                       "I-040521-NTP-3000016917
*        AND is_vbrk-zz_check_tg = abap_false      " No TG                                               "I-WMR-25032021-3000016091  "E-WMR-16082021-3000017358
*        AND is_cabsal2-zz_tot_ant = 0             " No Aplicación de anticipos                          "I-WMR-25032021-3000016091   "D-PBM130821-3000016828
        AND zconst-formapago_isactive = abap_on.  " Se envia si solo esta activa                        "I-270421-NTP-3000016091
          l_formapago = 'FormaPago'.
        ENDIF.
    ENDCASE.

    IF l_formapago IS NOT INITIAL.
      IF is_cabsal2-zz_fp_total > 0.
        l_importe = is_cabsal2-zz_fp_total. CONDENSE l_importe.
      ENDIF.
      TRANSLATE ls_t052u-text1 TO UPPER CASE.                                                                                             "I-190321-SVM-3000016091
      l_fp_tipo = is_vbrk-zz_fp_tipo.                     "Se toma del VBRK debido a que la otra estrctura lo esta pasando a mayusculas   "I-190321-SVM-3000016091

      "FP: Formas de pago
      CONCATENATE '{"0":"'  is_cabsal-zz_zterm      '",'  "Condicion de Pago
                  '"1":"'   ls_t052u-text1          '",'  "Texto-Condicion de Pago - ES
                  '"2":"'   is_cabsal2-zz_fec_vto   '",'  "PaymentTerms-PaymentDueDate
                  '"3":"'   l_formapago             '",'  "PaymentTerms-ID
                  '"4":"'   l_fp_tipo               '",'  "PaymentTerms-PaymentMeansID
                  '"5":"'   l_importe               '",'  "PaymentTerms-Amount
                  '"6":"'   is_cabsal-zz_moneda     '",'  "PaymentTerms-CurrencyID
                  '"7":"'   ls_t052u-text1          '"}'  "Texto-Condicion de Pago 2 - ES
                  INTO cs_jsoncab-zzt_cnd_sap_fct.

      "PC: Pago de cuotas
      LOOP AT it_formapago INTO ls_formapago.
        l_importe = ls_formapago-zz_cuota. CONDENSE l_importe.
        CONCATENATE ls_formapago-zz_fec_vto+0(4)
                    ls_formapago-zz_fec_vto+4(2)
                    ls_formapago-zz_fec_vto+6(2)
                    INTO l_zz_fec_vto SEPARATED BY '-'.

        l_num3 = ls_formapago-zz_nrofila.
        CONCATENATE 'Cuota' l_num3 INTO l_cuota.

        CONCATENATE cs_jsoncab-zzt_cnd_sap_fct
                    ',{"0":"'  ls_formapago-zz_nrofila '",'  "Correlativo
                    '"1":"'   l_formapago             '",'  "PaymentTerms-ID
                    '"2":"'   l_cuota                 '",'  "PaymentTerms-PaymentMeansID
                    '"3":"'   l_importe               '",'  "PaymentTerms-Amount
                    '"4":"'   is_cabsal-zz_moneda     '",'  "PaymentTerms-CurrencyID
                    '"5":"'   l_zz_fec_vto            '"}'  "PaymentTerms-PaymentDueDate
               INTO cs_jsoncab-zzt_cnd_sap_fct.
      ENDLOOP.
    ENDIF.
*}I-090321-NTP-3000016017

*     Incoterm
    IF i_tipdoc EQ gc_tipdoc_fa
    OR i_tipdoc = gc_tipdoc_nc OR i_tipdoc = gc_tipdoc_nd.          "I-261021-NTP-3000017871
      CASE gw_license.
        WHEN '0020311006'   " AIB
          OR '0020863116'.  " AIB CLOUD
          CONCATENATE '{"0":"'  is_cabsal-zz_inco1      '",'
                      '"1":"'   is_cabsal2-zz_inco2     '",'
                      '"2":"'   is_cabsal2-zz_inco3     '"}'
                      INTO cs_jsoncab-zzt_inc_sap_fct.
        WHEN OTHERS.
          CONCATENATE '{"0":"'  is_cabsal-zz_inco1      '",'
                      '"1":"'   is_cabsal2-zz_inco2     '"}'
                      INTO cs_jsoncab-zzt_inc_sap_fct.
      ENDCASE.

    ENDIF.

    " Puerto Origen y Puerto Destino
    CASE gw_license.
      WHEN '0020673876'   " Beta
        OR '0021061097'.  " CMH
        CONCATENATE '{"0":"' is_cabsal2-zzpueoritxt '",'
                    '"1":"'  is_cabsal2-zzpuedestxt '",'
                    '"2":"'  is_cabsal2-zzpaisori   '",'
                    '"3":"'  is_cabsal2-zzpaisdes   '"}'
                    INTO cs_jsoncab-zzt_pue_orde.

      WHEN OTHERS.
        CLEAR: lw_pto_origen, lw_pto_destino.
        lw_pto_origen = is_cabsal2-zzpueoritxt.
        IF is_cabsal2-zzpaisori IS NOT INITIAL.
          CONCATENATE lw_pto_origen '-' is_cabsal2-zzpaisori
            INTO lw_pto_origen SEPARATED BY space.
        ENDIF.
        lw_pto_destino = is_cabsal2-zzpuedestxt.
        IF is_cabsal2-zzpaisdes IS NOT INITIAL.
          CONCATENATE lw_pto_destino '-' is_cabsal2-zzpaisdes
            INTO lw_pto_destino SEPARATED BY space.
        ENDIF.
        CONCATENATE '{"0":"' lw_pto_origen  '",'
                    '"1":"'  lw_pto_destino '"}'
                    INTO cs_jsoncab-zzt_pue_orde.
    ENDCASE.

    " Certificaciones para Exportación
    CASE gw_license.
      WHEN '0020311006'   " AIB
        OR '0020863116'.  " AIB CLOUD
        CONCATENATE '{"0":"'  is_cabsal2-zz_certif_fce   '",'
                    '"1":"'   is_cabsal2-zz_certif_fda   '"}'
                    INTO cs_jsoncab-zzt_expcert.

        "Via de pago en idioma de solicitante
        cs_jsoncab-zzt_viapagodesc = is_cabsal2-zz_viapagodesc.      "I-NTP050917-3000008049
      WHEN '0020673876'.  " Beta
        CONCATENATE '{"0":"'  is_cabsal2-zz_certif_fce   '",'
                    '"1":"'   is_cabsal2-zz_certif_fda   '",'
                    '"2":"'   is_cabsal2-zz_certif_ggn   '"}'
                    INTO cs_jsoncab-zzt_expcert.
    ENDCASE.

    " Cliente y/o Adquiriente: Dirección, Teléfono, Fax, Contacto y Mail
    CASE gw_license.
      WHEN '0020673876'.  " Beta
        CONCATENATE '{"0":"'  is_cabsal-zz_dir_usuad  '",'
                    '"1":"'   is_cabsal2-zz_clie_tel     '",'
                    '"2":"'   is_cabsal2-zz_clie_fax     '",'
                    '"3":"'   is_cabsal2-zz_clie_cnt     '",'
                    '"4":"'   is_cabsal2-zz_clie_mail    '"}'
                    INTO cs_jsoncab-zzt_clie_dir.
      WHEN OTHERS.
        cs_jsoncab-zzt_clie_dir = is_cabsal-zz_dir_usuad.
    ENDCASE.

    CASE gw_license.
      WHEN '0020974592'.  " DANPER
        " Text Cuenta Bank
        cs_jsoncab-zzt_text_ctabank = is_cabsal2-zz_text_ctabank.
    ENDCASE.

  ENDMETHOD.


  METHOD set_json_cardes_ubl2_1. "CARDES

    DATA: ls_cardes     LIKE LINE OF it_cardes,
          ls_catacons   LIKE LINE OF lt_catacons.
    DATA: lv_dscto      TYPE char15,
          lv_dscto_base TYPE char15,
          lv_dscto_pct  TYPE char15,
          lv_cargo      TYPE char15,
          lv_cargo_base TYPE char15,
          lv_cargo_pct  TYPE char15.

    LOOP AT it_cardes INTO ls_cardes WHERE zz_nrodocsap = i_nrodocsap
                                       AND zz_nroposicion = i_posicion
                                       AND ( zz_cargo_pct IS NOT INITIAL OR zz_dscto_pct IS NOT INITIAL ). "I-190421-NTP-3000016080

      lv_dscto      = ls_cardes-zz_dscto.
      lv_dscto_pct  = ls_cardes-zz_dscto_pct.
      lv_dscto_base = ls_cardes-zz_dscto_base.
      lv_cargo      = ls_cardes-zz_cargo.
      lv_cargo_pct  = ls_cardes-zz_cargo_pct.
      lv_cargo_base = ls_cardes-zz_cargo_base.

*{I-WMR-06092021-3000016539
      CONDENSE: lv_dscto,
                lv_dscto_pct,
                lv_dscto_base,
                lv_cargo,
                lv_cargo_pct,
                lv_cargo_base.
*}I-WMR-06092021-3000016539

*{E-WMR-03092021-3000017707
**      IF lv_dscto = '0.00'.       CLEAR lv_dscto.       ENDIF.
**      IF lv_dscto_base = '0.00'.  CLEAR lv_dscto_base.  ENDIF.
**      IF lv_dscto_pct = '0.00'.   CLEAR lv_dscto_pct.   ENDIF.
**      IF lv_cargo = '0.00'.       CLEAR lv_cargo.       ENDIF.
**      IF lv_cargo_base = '0.00'.  CLEAR lv_cargo_base.  ENDIF.
**      IF lv_cargo_pct = '0.00'.   CLEAR lv_cargo_pct.   ENDIF.
*}E-WMR-03092021-3000017707
*{I-WMR-03092021-3000017707
      IF ls_cardes-zz_dscto = 0.       CLEAR lv_dscto.       ENDIF.
      IF ls_cardes-zz_dscto_base = 0.  CLEAR lv_dscto_base.  ENDIF.
      IF ls_cardes-zz_dscto_pct = 0.   CLEAR lv_dscto_pct.   ENDIF.
      IF ls_cardes-zz_cargo = 0.       CLEAR lv_cargo.       ENDIF.
      IF ls_cardes-zz_cargo_base = 0.  CLEAR lv_cargo_base.  ENDIF.
      IF ls_cardes-zz_cargo_pct = 0.   CLEAR lv_cargo_pct.   ENDIF.
*}I-WMR-03092021-3000017707

      READ TABLE lt_catacons INTO ls_catacons WITH KEY zz_catalogo = gc_cat-catalogo53.

      "Descuentos
      IF ls_cardes-zz_dscto_com IS NOT INITIAL.
        READ TABLE lt_catahomo53 INTO ls_catahomo53 WITH KEY zz_codigo_sunat = ls_cardes-zz_dscto_com.
        IF sy-subrc = 0.
          IF ls_cardes-zz_dscto IS INITIAL.
            CLEAR ls_catahomo53.
          ENDIF.
          IF e_dscto_json IS NOT INITIAL.
            CONCATENATE e_dscto_json ',' INTO e_dscto_json.
          ENDIF.
          CONCATENATE e_dscto_json
                      '{"0":"' ls_catahomo53-zz_chargeindicador '",'  "1 AllowanceCharge-ChargeIndicator
                      '"1":"'  ls_catacons-zz_tagagencyname     '",'  "2 AllowanceCharge-AllowanceChargeReasonCode-listAgencyName
                      '"2":"'  ls_catacons-zz_tagname           '",'  "3 AllowanceCharge-AllowanceChargeReasonCode-listName
                      '"3":"'  ls_catacons-zz_taguri            '",'  "4 AllowanceCharge-AllowanceChargeReasonCode-listURI
                      '"4":"'  ls_cardes-zz_dscto_com           '",'  "5 AllowanceCharge-AllowanceChargeReasonCode
                      '"5":"'  lv_dscto_pct                     '",'  "6 AllowanceCharge-MultiplierFactorNumeric
                      '"6":"'  lv_dscto                         '",'  "7 AllowanceCharge-Amount
                      '"7":"'  lv_dscto_base                    '"}'  "8 AllowanceCharge-BaseAmount
                      INTO e_dscto_json.
        ENDIF.
      ENDIF.

      "Cargos
      IF ls_cardes-zz_cargo_com IS NOT INITIAL.
        READ TABLE lt_catahomo53 INTO ls_catahomo53 WITH KEY zz_codigo_sunat = ls_cardes-zz_cargo_com.
        IF sy-subrc = 0.
          IF ls_cardes-zz_cargo IS INITIAL.
            CLEAR ls_catahomo53.
          ENDIF.
          IF e_cargo_json IS NOT INITIAL.
            CONCATENATE e_cargo_json ',' INTO e_cargo_json.
          ENDIF.
          CONCATENATE e_cargo_json
                      '{"0":"' ls_catahomo53-zz_chargeindicador '",'  "1 AllowanceCharge-ChargeIndicator
                      '"1":"'  ls_catacons-zz_tagagencyname     '",'  "2 AllowanceCharge-AllowanceChargeReasonCode-listAgencyName
                      '"2":"'  ls_catacons-zz_tagname           '",'  "3 AllowanceCharge-AllowanceChargeReasonCode-listName
                      '"3":"'  ls_catacons-zz_taguri            '",'  "4 AllowanceCharge-AllowanceChargeReasonCode-listURI
                      '"4":"'  ls_cardes-zz_cargo_com           '",'  "5 AllowanceCharge-AllowanceChargeReasonCode
                      '"5":"'  lv_cargo_pct                     '",'  "6 AllowanceCharge-MultiplierFactorNumeric
                      '"6":"'  lv_cargo                         '",'  "7 AllowanceCharge-Amount
                      '"7":"'  lv_cargo_base                    '"}'  "8 AllowanceCharge-BaseAmount
                      INTO e_cargo_json.
        ENDIF.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.


  METHOD set_json_cli.

    DATA: lwa_cliente LIKE LINE OF is_data-t_customer.
*          lwa_jsoncli LIKE LINE OF es_jsoncli-t_jsoncli.

    LOOP AT is_data-t_customer INTO lwa_cliente.
*      CLEAR lwa_jsoncli.
      es_jsoncli-zzt_nrodocsap    = lwa_cliente-zz_nrodocsap.
      es_jsoncli-zzt_numeracion   = lwa_cliente-zz_numeracion.
      es_jsoncli-zzt_ruc          = lwa_cliente-ruc.
      es_jsoncli-zzt_razon_social = lwa_cliente-razon_social.
      es_jsoncli-zzt_direccion    = lwa_cliente-direccion.
      es_jsoncli-zzt_telefono     = lwa_cliente-telefono.
      es_jsoncli-zzt_email        = lwa_cliente-email.
      es_jsoncli-zzt_email_seg    = lwa_cliente-email_seg.   "I-PBM061218-3000009765
      IF lwa_cliente-email_seg IS NOT INITIAL AND            "I-PBM061218-3000009765
         es_jsoncli-zzt_email IS NOT INITIAL.                "I-PBM061218-3000009765
        CONCATENATE es_jsoncli-zzt_email lwa_cliente-email_seg"I-PBM061218-3000009765
          INTO es_jsoncli-zzt_email SEPARATED BY ';'.        "I-PBM061218-3000009765
      ENDIF.                                                 "I-PBM061218-3000009765
*      APPEND lwa_jsoncli TO es_jsoncli-t_jsoncli.
    ENDLOOP.

  ENDMETHOD.                    "set_cli_ws


  METHOD set_json_det.

    DATA: lwa_jsondet        LIKE LINE OF et_jsondet,
          lwa_detalle_salida LIKE LINE OF is_data-t_detail,
          ls_vbrk            LIKE LINE OF pi_vbrk,
          ls_lips            LIKE LINE OF lt_lips,
          lw_lfimg           TYPE         char16,
*{  BEGIN OF INSERT WMR-170615
          lw_value           TYPE         string,
*}  END OF INSERT WMR-170615
          ls_catacons        LIKE LINE OF lt_catacons.  "I-3000010993-NTP271218

    FIELD-SYMBOLS: <lfs_vbrk> LIKE LINE OF pi_vbrk.

    DATA: lv_cantidad     TYPE char15,
          lv_valunitario  TYPE char15,
          lv_precioventa  TYPE char15,
          lv_afectigv0102 TYPE char15,
          lv_tipisc0102   TYPE char15,
          lv_valvenxite   TYPE char15,
          lv_valrefunit   TYPE char15,
          lv_desctoxite   TYPE char15,
          lv_nroposicion  TYPE char03,
          lw_item         TYPE i.

    LOOP AT is_data-t_detail INTO lwa_detalle_salida
      WHERE zz_nrodocsap = pi_vbeln. "I-NTP250618-3000009651

      CLEAR lwa_jsondet.

      lv_cantidad      = lwa_detalle_salida-zz_cantidad.
      lv_valunitario   = lwa_detalle_salida-zz_valunitario.
      CASE gs_process-license.                                                          "I-WMR-231118-3000010907
        WHEN '0021061097'.  " CMH                                                       "I-WMR-231118-3000010907
          " Valor Unitario por item a 4 decimales                                       "I-WMR-231118-3000010907
          lv_valunitario = lwa_detalle_salida-zz_valunit_4d.                            "I-WMR-231118-3000010907
      ENDCASE.                                                                          "I-WMR-231118-3000010907
      lv_precioventa   = lwa_detalle_salida-zz_precioventa.
      lv_afectigv0102  = lwa_detalle_salida-zz_afectigv0102.
      lv_tipisc0102    = lwa_detalle_salida-zz_tipisc0102.
      lv_valvenxite    = lwa_detalle_salida-zz_valvenxite.
      lv_valrefunit    = lwa_detalle_salida-zz_valrefunit.
      lv_desctoxite    = lwa_detalle_salida-zz_desctoxite.
      IF ( pi_tipdoc = gc_tipdoc_nc ) OR ( pi_tipdoc = gc_tipdoc_nd ).
        lw_item  = lw_item + 1.
        lv_nroposicion = lw_item.
      ELSE.
        lv_nroposicion   = lwa_detalle_salida-zz_nroposicion+3(3).
      ENDIF.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lv_nroposicion
        IMPORTING
          output = lv_nroposicion.

      CONDENSE: lv_cantidad,
                lv_valunitario,
                lv_precioventa,
                lv_afectigv0102,
                lv_tipisc0102,
                lv_valvenxite,
                lv_valrefunit,
                lv_desctoxite.

*     Verificar valores de las variables
      IF lv_valunitario IS INITIAL.
        lv_valunitario = '0.00'.
        CASE gs_process-license.                                                        "I-WMR-231118-3000010907
          WHEN '0021061097'.  " CMH                                                     "I-WMR-231118-3000010907
            lv_valunitario = '0.0000'.                                                  "I-WMR-231118-3000010907
        ENDCASE.                                                                        "I-WMR-231118-3000010907
      ENDIF.
      IF lv_precioventa = '0.00'.
        CLEAR lv_precioventa.
      ENDIF.
      IF lv_tipisc0102 = '0.00'.
        CLEAR lv_tipisc0102.
      ENDIF.
      IF lv_valrefunit = '0.00'.
        CLEAR lv_valrefunit.
      ENDIF.
      IF lv_desctoxite = '0.00'.
        CLEAR lv_desctoxite.
      ENDIF.

      CLEAR: ls_vbrk.

      MOVE: lwa_detalle_salida-zz_nrodocsap            TO   lwa_jsondet-zzt_nrodocsap,
            lwa_detalle_salida-zz_numeracion           TO   lwa_jsondet-zzt_numeracion,
            lv_nroposicion                             TO   lwa_jsondet-zzt_nroposicion,
            lwa_detalle_salida-zz_unimedhom            TO   lwa_jsondet-zzt_unimed,
*{  BEGIN OF INSERT WMR-190615
            lwa_detalle_salida-zz_und_prnt             TO   lwa_jsondet-zzt_und_prnt,
*}  END OF INSERT WMR-190615
            lv_cantidad                                TO   lwa_jsondet-zzt_cantidad,
            lv_valunitario                             TO   lwa_jsondet-zzt_valunitario,
            lv_valvenxite                              TO   lwa_jsondet-zzt_valvenxite.
*            lwa_detalle_salida-zz_material             TO   lwa_jsondet-zzt_material.  "E-3000010993-NTP271218: cubso

*{I-3000010993-NTP271218: cubso
      READ TABLE lt_catacons INTO ls_catacons WITH KEY zz_catalogo = gc_cat-catalogo25.
      IF sy-subrc = 0.
        CONCATENATE '{"0":"' lwa_detalle_salida-zz_material       '",'  "45 SellersItemIdentification  Código de producto
                    '"1":"'  lwa_detalle_salida-zz_material_sunat '",'
                    '"2":"'  ls_catacons-zz_tagid                 '",'
                    '"3":"'  ls_catacons-zz_tagagencyname         '",'
                    '"4":"'  ls_catacons-zz_tagname               '"}' INTO lwa_jsondet-zzt_material.
      ENDIF.
*}I-3000010993-NTP271218

*     Descripcion de Material y Material Controlado
      CONDENSE lwa_detalle_salida-zz_descservicio.
      CONCATENATE '{"0":"' lwa_detalle_salida-zz_descservicio          '",'
                  '"1":"'  lwa_detalle_salida-zz_mat_cont              '"}' INTO  lwa_jsondet-zzt_descservicio.
*     Armar datos de salida
      CONCATENATE '{"0":"' lv_precioventa                        '",'
                  '"1":"'  lwa_detalle_salida-zz_precioventaho   '"}' INTO lwa_jsondet-zzt_precioventa.
      CONCATENATE '{"0":"' lv_afectigv0102                       '",'
                  '"1":"'  lv_afectigv0102                       '",'
                  '"2":"'  lwa_detalle_salida-zz_afectigv03      '",'
                  '"3":"'  lwa_detalle_salida-zz_afectigv04      '",'
                  '"4":"'  lwa_detalle_salida-zz_afectigv05      '",'
                  '"5":"'  lwa_detalle_salida-zz_afectigv06      '"}' INTO lwa_jsondet-zzt_afectigv.
      CONCATENATE '{"0":"' lv_tipisc0102                         '",'
                  '"1":"'  lv_tipisc0102                         '",'
                  '"2":"'  lwa_detalle_salida-zz_tipisc03        '",'
                  '"3":"'  lwa_detalle_salida-zz_tipisc04        '",'
                  '"4":"'  lwa_detalle_salida-zz_tipisc05        '",'
                  '"5":"'  lwa_detalle_salida-zz_tipisc06        '"}' INTO lwa_jsondet-zzt_tipisc.
      CONCATENATE '{"0":"' lv_valrefunit                         '",'
                  '"1":"'  lwa_detalle_salida-zz_valrefunithom   '"}' INTO lwa_jsondet-zzt_valrefunit.
*      CONCATENATE '{"0":"' lwa_detalle_salida-zz_desctoxitehom   '",'
*                  '"1":"'  lv_desctoxite                         '"}' INTO lwa_jsondet-zzt_desctoxite.

*     Transferencia Gratuita
*{  BEGIN OF REPLACE WMR-050615
      ""      IF pi_tipdoc = gc_tipdoc_fa OR pi_tipdoc = gc_tipdoc_bl.
      ""        REFRESH ltr_fkart.
      ""        LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '2' AND zz_opcion02 = ' '.
      ""          lwa_fkart-low = lwa_constfkart-fkart.
      ""          lwa_fkart-sign = 'I'.
      ""          lwa_fkart-option = 'EQ'.
      ""          APPEND lwa_fkart TO ltr_fkart.
      ""        ENDLOOP.
      ""        IF ltr_fkart[] IS NOT INITIAL.
      ""          READ TABLE pi_vbrk ASSIGNING <lfs_vbrk> WITH KEY zz_numeracion = lwa_jsondet-zzt_numeracion.
      ""          IF sy-subrc = 0.
      ""            IF <lfs_vbrk>-fkart IN ltr_fkart.
      ""              lv_valrefunit = lv_valunitario.
      ""              lv_precioventa = lv_valvenxite = lv_valunitario = '0.00'.
      ""              CONCATENATE '{"0":"'
      ""                          lv_precioventa
      ""                          '",'
      ""                          '"1":"'
      ""                          lwa_detalle_salida-zz_precioventaho
      ""                          '"}'
      ""                          INTO lwa_jsondet-zzt_precioventa.
      ""              MOVE: lv_valvenxite   TO   lwa_jsondet-zzt_valvenxite,
      ""                    lv_valunitario  TO   lwa_jsondet-zzt_valunitario.
      ""            ENDIF.
      ""          ENDIF.
      ""        ENDIF.
      ""      ENDIF.

*{  BEGIN OF INSERT WMR-051016-3000005856
      " Setear Valores de Importes de Boletas TG
      lwa_jsondet-zzt_columns_tg = '{"0":"","1":"","2":""}'.
*}  END OF INSERT WMR-051016-3000005856

      READ TABLE pi_vbrk ASSIGNING <lfs_vbrk> WITH KEY zz_numeracion = lwa_jsondet-zzt_numeracion.
      IF sy-subrc = 0.
        IF <lfs_vbrk>-zz_check_tg EQ abap_true
        OR lwa_detalle_salida-zz_valrefunit NE 0.   " Bonificados                           "I-WMR-240915
          lv_valrefunit = lv_valunitario.
          lv_precioventa = lv_valvenxite = lv_valunitario = '0.00'.
          CASE gs_process-license.                                                      "I-WMR-231118-3000010907
            WHEN '0021061097'.  " CMH                                                   "I-WMR-231118-3000010907
              lv_valunitario = '0.0000'.                                                "I-WMR-231118-3000010907
          ENDCASE.                                                                      "I-WMR-231118-3000010907
          CONCATENATE '{"0":"'
                      lv_precioventa
                      '",'
                      '"1":"'
                      lwa_detalle_salida-zz_precioventaho
                      '"}'
                      INTO lwa_jsondet-zzt_precioventa.
          MOVE: lv_valvenxite   TO   lwa_jsondet-zzt_valvenxite,
                lv_valunitario  TO   lwa_jsondet-zzt_valunitario.

*{  BEGIN OF INSERT WMR-300916-3000005856
          " Mostrar Precio Venta Unitario, Valor Unitario y Valor Venta por Item
          IF gw_imp_botg EQ abap_true.
            IF ( pi_tipdoc EQ gc_tipdoc_bl )                                " Boletas
            OR ( ( pi_tipdoc EQ gc_tipdoc_nc OR pi_tipdoc EQ gc_tipdoc_nd )
                  AND <lfs_vbrk>-tipdocmodifho EQ gc_tipdoc_bl ).           " NC y ND referidos a Boletas
              lv_precioventa   = lwa_detalle_salida-zz_precioventa. CONDENSE lv_precioventa.
              IF lv_precioventa EQ '0.00'. CLEAR lv_precioventa. ENDIF.
              lv_valunitario   = lwa_detalle_salida-zz_valunitario. CONDENSE lv_valunitario.
              IF lv_valunitario EQ '0.00'. CLEAR lv_valunitario. ENDIF.
              CASE gs_process-license.                                                  "I-WMR-231118-3000010907
                WHEN '0021061097'.  " CMH                                               "I-WMR-231118-3000010907
                  lv_valunitario = lwa_detalle_salida-zz_valunit_4d. CONDENSE lv_valunitario. "I-WMR-231118-3000010907
                  IF lv_valunitario = '0.0000'. CLEAR lv_valunitario. ENDIF.            "I-WMR-231118-3000010907
              ENDCASE.                                                                  "I-WMR-231118-3000010907
              lv_valvenxite    = lwa_detalle_salida-zz_valvenxite.  CONDENSE lv_valvenxite.
              IF lv_valvenxite EQ '0.00'. CLEAR lv_valvenxite. ENDIF.
              CONCATENATE '{"0":"' lv_precioventa '",'
                          '"1":"'  lv_valunitario '",'
                          '"2":"'  lv_valvenxite  '"}' INTO lwa_jsondet-zzt_columns_tg.
            ENDIF.
          ENDIF.
*}  END OF INSERT WMR-300916-3000005856
        ENDIF.

*{I-NTP310317-3000006891
        " Boletas: Mostrar Precio Venta Unitario, Valor Unitario y Valor Venta por Item incluídos IGV
        IF gw_imp_boigv EQ abap_on.
          lwa_jsondet-zzt_columns_igv = '{"0":"0.00","1":"0.00","2":"0.00"}'.
          IF ( pi_tipdoc EQ gc_tipdoc_bl )                                " Boletas
          OR ( ( pi_tipdoc EQ gc_tipdoc_nc OR pi_tipdoc EQ gc_tipdoc_nd )
                AND <lfs_vbrk>-tipdocmodifho EQ gc_tipdoc_bl ).           " NC y ND referidos a Boletas
            lv_precioventa   = lwa_detalle_salida-zz_precioventa. CONDENSE lv_precioventa.
            IF lv_precioventa EQ '0.00'. CLEAR lv_precioventa. ENDIF.
            lv_valunitario   = lwa_detalle_salida-zz_valunitario. CONDENSE lv_valunitario.
            IF lv_valunitario EQ '0.00'. CLEAR lv_valunitario. ENDIF.
            CASE gs_process-license.                                                    "I-WMR-231118-3000010907
              WHEN '0021061097'.  " CMH                                                 "I-WMR-231118-3000010907
                lv_valunitario = lwa_detalle_salida-zz_valunit_4d. CONDENSE lv_valunitario. "I-WMR-231118-3000010907
                IF lv_valunitario = '0.0000'. CLEAR lv_valunitario. ENDIF.              "I-WMR-231118-3000010907
            ENDCASE.                                                                    "I-WMR-231118-3000010907
            lv_valvenxite    = lwa_detalle_salida-zz_valvenxite + lwa_detalle_salida-zz_afectigv0102.  CONDENSE lv_valvenxite.
            IF lv_valvenxite EQ '0.00'. CLEAR lv_valvenxite. ENDIF.
            CONCATENATE '{"0":"' lv_precioventa '",'
                        '"1":"'  lv_valunitario '",'
                        '"2":"'  lv_valvenxite  '"}' INTO lwa_jsondet-zzt_columns_igv.
          ENDIF.
        ENDIF.
*}I-NTP310317-3000006891

      ENDIF.
*}  END OF REPLACE WMR-050615

*     LOte y Cantidad x Lote
      lwa_jsondet-zzt_lot_mat = lwa_detalle_salida-zz_lot_mat.

      TRANSLATE: lwa_jsondet-zzt_desctoxite   TO LOWER CASE,
                 gs_consextsun-zz_desctoxitehom TO LOWER CASE.

*{  BEGIN OF INSERT WMR-170615
      " Texto de posición
      lwa_jsondet-zzt_text_pos = lwa_detalle_salida-zz_text_pos.
*}  END OF INSERT WMR-170615

*{  BEGIN OF INSERT WMR-250116
      " Descuento 01
      CASE gw_license.
        WHEN '0020895037'.  " Promelsa
          CLEAR lw_value.
          IF lwa_detalle_salida-zz_dscto_01 IS NOT INITIAL.
            lw_value = lwa_detalle_salida-zz_dscto_01.
          ENDIF.
          CONCATENATE '{"0":"dscto1","1":"' lw_value '"}' INTO lw_value.
          CONDENSE lw_value NO-GAPS.

          IF lwa_jsondet-zzt_desctoxite IS NOT INITIAL.
            CONCATENATE lwa_jsondet-zzt_desctoxite lw_value
                        INTO lwa_jsondet-zzt_desctoxite SEPARATED BY ','.
          ELSE.
            lwa_jsondet-zzt_desctoxite = lw_value.
          ENDIF.

          " Descuento 02
          CLEAR lw_value.
          IF lwa_detalle_salida-zz_dscto_02 IS NOT INITIAL.
            lw_value = lwa_detalle_salida-zz_dscto_02.
          ENDIF.
          CONCATENATE '{"0":"dscto2","1":"' lw_value '"}' INTO lw_value.
          CONDENSE lw_value NO-GAPS.

          IF lwa_jsondet-zzt_desctoxite IS NOT INITIAL.
            CONCATENATE lwa_jsondet-zzt_desctoxite lw_value
                        INTO lwa_jsondet-zzt_desctoxite SEPARATED BY ','.
          ELSE.
            lwa_jsondet-zzt_desctoxite = lw_value.
          ENDIF.
      ENDCASE.
*}  END OF INSERT WMR-250116

*     Adicionar registro
      APPEND lwa_jsondet TO et_jsondet.

    ENDLOOP.

  ENDMETHOD.                    "set_det_ws


  METHOD set_json_det_main.

    DATA: ls_cabsal LIKE LINE OF is_data-t_header.

    LOOP AT is_data-t_header INTO ls_cabsal.
      CASE ls_cabsal-zz_verubl.
        WHEN gc_verubl-ubl2_0.
          set_json_det(
            EXPORTING
              pi_vbeln  = ls_cabsal-zz_nrodocsap
              pi_tipdoc = i_tipdoc
              is_data   = is_data
              pi_vbrk   = it_vbrk
              pi_vbrp   = it_vbrp
            IMPORTING
              et_jsondet  = et_jsondet
          ).
        WHEN gc_verubl-ubl2_1.
          set_json_det_ubl2_1(
            EXPORTING
              i_vbeln   = ls_cabsal-zz_nrodocsap
              i_tipdoc  = i_tipdoc
              is_data   = is_data
              it_vbrk   = it_vbrk
              it_vbrp   = it_vbrp
            CHANGING
              et_jsondet  = et_jsondet
          ).
      ENDCASE.
    ENDLOOP.

  ENDMETHOD.                    "set_det_ws


  METHOD set_json_det_ubl2_1.

    DATA: ls_jsondet  LIKE LINE OF et_jsondet,
          ls_detsal   LIKE LINE OF is_data-t_detail,
          ls_cabsal   LIKE LINE OF is_data-t_header,
          ls_vbrk     LIKE LINE OF it_vbrk,
          ls_lips     LIKE LINE OF lt_lips,
          lw_lfimg    TYPE         char16,
          lw_value    TYPE         string,
          ls_catacons LIKE LINE OF lt_catacons,
          ls_catacon2 LIKE LINE OF lt_catacons,
          ls_catacon3 LIKE LINE OF lt_catacons.

    FIELD-SYMBOLS: <lfs_vbrk> LIKE LINE OF it_vbrk.

*{E-WMR-13082021-3000017358
**    DATA: lv_cantidad        TYPE char25,
****          lv_valunitario  TYPE char15,                                                      "E-WMR-19112020-3000015768
**          lv_valunitario     TYPE char30,                                                      "I-WMR-19112020-3000015768
**          lv_precioventa     TYPE char25,
**          lv_afectigv0102    TYPE char25,
**          lv_afectigv_pdf    TYPE char25,                                               "I-160421-NTP-3000016125
**          lv_taxtotal_amount TYPE char25,                                               "I-160920-NTP-3000014481
**          lv_igvkbetrtxt     TYPE char25,
**          lv_tipisc0102      TYPE char25,
****          lv_valvenxite      TYPE char15,                                               "E-WMR-181119-3000013223
**          lv_valvenxite      TYPE char30,                                               "I-WMR-181119-3000013223
**          lv_valvenxite_taxa TYPE char25,
**          lv_valrefunit      TYPE char25,
**          lv_nroposicion     TYPE char03,
**          lw_item            TYPE i,
**          lv_precioventa2    TYPE char25,
****          lv_valunitario2 TYPE char15,                                                      "E-WMR-19112020-3000015768
****          lv_valvenxite2     TYPE char15.                                                   "E-WMR-181119-3000013223
**          lv_valunitario2    TYPE char30,                                                      "I-WMR-19112020-3000015768
**          lv_valvenxite2     TYPE char30,
**          lv_icbp_cant       TYPE char25, "I-070421-NTP-3000016475 "E-010921-NTP-3000017358
**          lv_icbp            TYPE char25, "I-070421-NTP-3000016475 "E-010921-NTP-3000017358
**          lv_icbp_tasa       TYPE char25, "I-070421-NTP-3000016475 "E-010921-NTP-3000017358
**          l_precioventa_pdf  TYPE char25, "I-130721-NTP-3000016828
**          l_valvenxite_pdf   TYPE char25, "I-130721-NTP-3000016828
**          l_valrefunit_pdf   TYPE char25. "I-130721-NTP-3000016828
*}E-WMR-13082021-3000017358
*{I-WMR-13082021-3000017358
    DATA: lw_item            TYPE i,
          lv_cantidad        TYPE string,
          lv_valunitario     TYPE string,
          lv_precioventa     TYPE string,
          lv_afectigv0102    TYPE string,
          lv_afectigv_pdf    TYPE string,
          lv_taxtotal_amount TYPE string,
          lv_igvkbetrtxt     TYPE string,
          lv_tipisc0102      TYPE string,
          lv_valvenxite      TYPE string,
          lv_valvenxite_taxa TYPE string,
          lv_valrefunit      TYPE string,
          lv_nroposicion     TYPE string,
          lv_precioventa2    TYPE string,
          lv_valunitario2    TYPE string,
          lv_valvenxite2     TYPE string,
          l_precioventa_pdf  TYPE string,
          l_valvenxite_pdf   TYPE string,
          l_valrefunit_pdf   TYPE string,
*}I-WMR-13082021-3000017358
*{I-010921-NTP-3000017358
          lv_icbp_cant       TYPE char30,
          lv_icbp            TYPE string,
          lv_icbp_tasa       TYPE string.
*}I-010921-NTP-3000017358

    LOOP AT is_data-t_detail INTO ls_detsal WHERE zz_nrodocsap = i_vbeln.

      CLEAR ls_jsondet.
      READ TABLE is_data-t_header INTO ls_cabsal WITH KEY zz_nrodocsap = ls_detsal-zz_nrodocsap.

      lv_cantidad      = ls_detsal-zz_cantidad.
      lv_valunitario   = ls_detsal-zz_valunitario.
      lv_precioventa   = ls_detsal-zz_precioventa.
      lv_afectigv0102  = ls_detsal-zz_afectigv0102.
      lv_tipisc0102    = ls_detsal-zz_tipisc0102.
      lv_igvkbetrtxt   = ls_cabsal-zz_sumaigvhom06.
      lv_valvenxite    = ls_detsal-zz_valvenxite.
**      lv_valvenxite_taxa = ls_detsal-zz_valvenxite_taxa = ls_detsal-zz_valvenxite. "I-160920-NTP-3000014481 "E-WMR-12022021-3000015973
      lv_valvenxite_taxa = ls_detsal-zz_valvenxite_taxa.                                "I-WMR-12022021-3000015973
      lv_valrefunit    = ls_detsal-zz_valrefunit.
      IF ( i_tipdoc = gc_tipdoc_nc ) OR ( i_tipdoc = gc_tipdoc_nd ).
        lw_item  = lw_item + 1.
        lv_nroposicion = lw_item.
      ELSE.
        lv_nroposicion   = ls_detsal-zz_nroposicion+3(3).
      ENDIF.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lv_nroposicion
        IMPORTING
          output = lv_nroposicion.

      CONDENSE: lv_cantidad,
                lv_valunitario,
                lv_precioventa,
                lv_afectigv0102,
                lv_igvkbetrtxt,
                lv_tipisc0102,
                lv_valvenxite,
                lv_valvenxite_taxa,
                lv_valrefunit.

      "Verificar valores de las variables
**      IF lv_valunitario IS INITIAL.                                                                               "E-WMR-13082021-3000017358
      IF ls_detsal-zz_valunitario = 0.                                                                            "I-WMR-13082021-3000017358
        lv_valunitario = '0.00'.
      ENDIF.
**      IF lv_precioventa CP '0.0*'.                                                   "I-290721-NTP-3000017358 "E-WMR-13082021-3000017358
      IF ls_detsal-zz_precioventa = 0.                                                                            "I-WMR-13082021-3000017358
        CLEAR lv_precioventa.
      ENDIF.
**      IF lv_tipisc0102 CP '0.0*'.                                                    "I-290721-NTP-3000017358 "E-WMR-13082021-3000017358
      IF ls_detsal-zz_tipisc0102 = 0.                                                                             "I-WMR-13082021-3000017358
        CLEAR lv_tipisc0102.
      ENDIF.
*      IF lv_igvkbetrtxt = '0.00'.
*        CLEAR lv_igvkbetrtxt.
*      ENDIF.
**      IF lv_valrefunit CP '0.0*'.                                                    "I-290721-NTP-3000017358 "E-WMR-13082021-3000017358
      IF ls_detsal-zz_valrefunit = 0.                                                                             "I-WMR-13082021-3000017358
        CLEAR lv_valrefunit.
      ENDIF.

*      CLEAR: ls_vbrk.
      READ TABLE it_vbrk ASSIGNING <lfs_vbrk> WITH KEY zz_numeracion = ls_detsal-zz_numeracion.
      IF sy-subrc = 0.
        IF <lfs_vbrk>-zz_check_tg EQ abap_true
        OR ls_detsal-zz_valrefunit NE 0.   " Bonificados
*{E-290721-NTP-3000017358
**          lv_valrefunit = lv_valunitario.                                               "E-WMR-18122020-3000014557
*          CASE gw_license.
*            WHEN '0021131379'  "Resemin                                                   "I-240720-NTP-3000014924
*              OR '0020744072'  "Medrock                                                   "I-270720-NTP-3000014913
*              OR '0021137469'.  " CONSENSO                                                "I-PBM120721-3000016828
*              lv_valunitario = '0.0000000000'.                                            "I-240720-NTP-3000014924
*              l_valrefunit_pdf = l_valvenxite_pdf = l_precioventa_pdf = '0.0000000000'.   "I-130721-NTP-3000016828
*            WHEN OTHERS.
**          lv_precioventa = lv_valvenxite_taxa = lv_valvenxite = lv_valunitario = '0.00'. "E-090120-NTP-3000013600
*              lv_precioventa = '0.00'.                                                        "I-090120-NTP-3000013600
*              lv_valunitario = lv_valvenxite = '0.0000000000'.                              "I-WMR-181119-3000013223
*          ENDCASE.
*}E-290721-NTP-3000017358
          lv_valunitario = l_valrefunit_pdf = l_valvenxite_pdf = l_precioventa_pdf = '0.0000000000'.  "I-290721-NTP-3000017358

          " Mostrar Precio Venta Unitario, Valor Unitario y Valor Venta por Item
          IF gw_imp_botg EQ abap_true.
            IF ( i_tipdoc EQ gc_tipdoc_bl )                                " Boletas
            OR ( ( i_tipdoc EQ gc_tipdoc_nc OR i_tipdoc EQ gc_tipdoc_nd )
                  AND <lfs_vbrk>-tipdocmodifho EQ gc_tipdoc_bl ).           " NC y ND referidos a Boletas
              lv_precioventa2   = ls_detsal-zz_precioventa. CONDENSE lv_precioventa2.
**              IF lv_precioventa2 CP '0.0*'. CLEAR lv_precioventa2. ENDIF.                                       "I-290721-NTP-3000017358  "E-WMR-13082021-3000017358
              IF ls_detsal-zz_precioventa = 0.  CLEAR lv_precioventa2.  ENDIF.                                  "I-WMR-13082021-3000017358
              lv_valunitario2   = ls_detsal-zz_valunitario. CONDENSE lv_valunitario2.
**              IF lv_valunitario2 CP '0.0*'. CLEAR lv_valunitario2. ENDIF.                                       "I-290721-NTP-3000017358  "E-WMR-13082021-3000017358
              IF ls_detsal-zz_valunitario = 0.  CLEAR lv_valunitario2. ENDIF.                                   "I-WMR-13082021-3000017358
              lv_valvenxite2    = ls_detsal-zz_valvenxite.  CONDENSE lv_valvenxite2.
**              IF lv_valvenxite2 CP '0.0*'. CLEAR lv_valvenxite2. ENDIF.                                         "I-290721-NTP-3000017358  "E-WMR-13082021-3000017358
              IF ls_detsal-zz_valvenxite = 0. CLEAR lv_valvenxite2. ENDIF.                                      "I-WMR-13082021-3000017358
              CONCATENATE '{"0":"' lv_precioventa2 '",'
                          '"1":"'  lv_valunitario2 '",'
                          '"2":"'  lv_valvenxite2  '"}' INTO ls_jsondet-zzt_columns_tg.
            ENDIF.
          ENDIF.
        ENDIF.

        " Boletas: Mostrar Precio Venta Unitario, Valor Unitario y Valor Venta por Item incluídos IGV
        IF gw_imp_boigv EQ abap_on.
          ls_jsondet-zzt_columns_igv = '{"0":"0.00","1":"0.00","2":"0.00"}'.
          IF ( i_tipdoc EQ gc_tipdoc_bl )                                " Boletas
          OR ( ( i_tipdoc EQ gc_tipdoc_nc OR i_tipdoc EQ gc_tipdoc_nd )
                AND <lfs_vbrk>-tipdocmodifho EQ gc_tipdoc_bl ).           " NC y ND referidos a Boletas
            lv_precioventa2   = ls_detsal-zz_precioventa. CONDENSE lv_precioventa2.
**            IF lv_precioventa CP '0.0*'. CLEAR lv_precioventa2. ENDIF.                                          "I-290721-NTP-3000017358  "E-WMR-13082021-3000017358
            IF ls_detsal-zz_precioventa = 0.  CLEAR lv_precioventa2. ENDIF.                                     "I-WMR-13082021-3000017358
            lv_valunitario2   = ls_detsal-zz_valunitario. CONDENSE lv_valunitario2.
**            IF lv_valunitario CP '0.0*'. CLEAR lv_valunitario2. ENDIF.                                          "I-290721-NTP-3000017358  "E-WMR-13082021-3000017358
            IF ls_detsal-zz_valunitario = 0.  CLEAR lv_valunitario2. ENDIF.                                     "I-WMR-13082021-3000017358
            lv_valvenxite2    = ls_detsal-zz_valvenxite + ls_detsal-zz_afectigv0102.  CONDENSE lv_valvenxite2.
**            IF lv_valvenxite CP '0.0*'. CLEAR lv_valvenxite2. ENDIF.                                            "I-290721-NTP-3000017358  "E-WMR-13082021-3000017358
            IF ( ls_detsal-zz_valvenxite + ls_detsal-zz_afectigv0102 ) = 0. CLEAR lv_valvenxite2. ENDIF.        "I-WMR-13082021-3000017358
            CONCATENATE '{"0":"' lv_precioventa2 '",'
                        '"1":"'  lv_valunitario2 '",'
                        '"2":"'  lv_valvenxite2  '"}' INTO ls_jsondet-zzt_columns_igv.
          ENDIF.
        ENDIF.

*{I-120321-NTP-3000016017
        "NC cero
        IF lv_precioventa IS INITIAL AND <lfs_vbrk>-zz_fp_nc_ajuste IS NOT INITIAL. "I-040521-NTP-3000016917
          lv_precioventa = lv_valvenxite_taxa = '0.00'.                         "U-070421-NTP-3000016163
        ENDIF.
*}I-120321-NTP-3000016017
*{I-050521-NTP-3000016920
        IF lv_precioventa IS INITIAL AND <lfs_vbrk>-zz_check_nccero IS NOT INITIAL.
          lv_precioventa = '0.00'.
        ENDIF.
*}I-050521-NTP-3000016920
*{I-PBM030621-3000017155
        IF  <lfs_vbrk>-zz_check_nc_corr IS NOT INITIAL.
          lv_valvenxite_taxa = '0.00'.
        ENDIF.
*}I-PBM030621-3000017155
      ENDIF.

      MOVE: ls_detsal-zz_nrodocsap            TO   ls_jsondet-zzt_nrodocsap,
            ls_detsal-zz_numeracion           TO   ls_jsondet-zzt_numeracion,
            ls_detsal-zz_und_prnt             TO   ls_jsondet-zzt_und_prnt.

      "35 ID                   Número de orden del Ítem
      ls_jsondet-zzt_nroposicion = lv_nroposicion.

      "36 InvoicedQuantity     Cantidad y Unidad de medida por ítem
      ls_jsondet-zzt_cantidad = lv_cantidad.
      READ TABLE lt_catacons INTO ls_catacons WITH KEY zz_catalogo = gc_cat-catalogo03.
      IF sy-subrc = 0.
        CONCATENATE '{"0":"' ls_detsal-zz_unimedhom               '",'
                    '"1":"'  ls_catacons-zz_tagid                 '",'
                    '"2":"'  ls_catacons-zz_tagagencyname         '"}' INTO ls_jsondet-zzt_unimed.
      ENDIF.

      "37 LineExtensionAmount  Valor de venta del ítem
      CONCATENATE '{"0":"' lv_valvenxite    '",'
                  '"1":"'  l_valvenxite_pdf '"}' INTO ls_jsondet-zzt_valvenxite. "I-130721-NTP-3000016828

      "38 PricingReference 01  Precio de venta unitario por item y código
      READ TABLE lt_catacons INTO ls_catacons WITH KEY zz_catalogo = gc_cat-catalogo16.
      IF sy-subrc = 0.
        CONCATENATE '{"0":"' lv_precioventa                       '",'
                    '"1":"'  ls_detsal-zz_precioventaho           '",'
                    '"2":"'  ls_catacons-zz_tagagencyname         '",'
                    '"3":"'  ls_catacons-zz_tagname               '",'
                    '"4":"'  ls_catacons-zz_taguri                '",'
                    '"5":"'  l_precioventa_pdf                    '"}' INTO ls_jsondet-zzt_precioventa. "I-130721-NTP-3000016828
      ENDIF.

      "39 PricingReference 02  Valor referencial unitario en operaciones no onerosas
      READ TABLE lt_catacons INTO ls_catacons WITH KEY zz_catalogo = gc_cat-catalogo16.
      IF sy-subrc = 0.
        CONCATENATE '{"0":"' lv_valrefunit                        '",'
                    '"1":"'  ls_detsal-zz_valrefunithom           '",'
                    '"2":"'  ls_catacons-zz_tagagencyname         '",'
                    '"3":"'  ls_catacons-zz_tagname               '",'
                    '"4":"'  ls_catacons-zz_taguri                '",'
                    '"5":"'  l_valrefunit_pdf                     '"}' INTO ls_jsondet-zzt_valrefunit. "I-130721-NTP-3000016828
      ENDIF.

*{I-3000011712-NTP110419
      "40 AllowanceCharge 00   Descuentos por Ítem
      "41 AllowanceCharge 00   Cargos por Ítem
      set_json_cardes_ubl2_1(
        EXPORTING
          i_nrodocsap  = ls_detsal-zz_nrodocsap
          i_posicion   = ls_detsal-zz_nroposicion
          it_cardes    = is_data-t_cardes
        IMPORTING
          e_dscto_json = ls_jsondet-zzt_desctoxite
          e_cargo_json = ls_jsondet-zzt_cargosxite
      ).
*}I-3000011712-NTP110419

      "42 TaxTotal-TaxSubtotal IGV         Afectación al IGV por ítem
      READ TABLE lt_cata05 INTO ls_cata05 WITH KEY zz_codigo_sunat = ls_detsal-zz_afectigv04.
      IF sy-subrc = 0.
        READ TABLE lt_catacons INTO ls_catacons WITH KEY zz_catalogo = gc_cat-catalogo07.
        IF sy-subrc = 0.
          READ TABLE lt_catacons INTO ls_catacon2 WITH KEY zz_catalogo = gc_cat-catalogo05.
          IF sy-subrc = 0.
            IF ls_detsal-zz_afectigv03 IS INITIAL.
              CLEAR: ls_cata05, ls_catacons, ls_catacon2.
            ENDIF.

*{E-300321-NTP-3000016017
**{I-160920-NTP-3000014481
*            if <lfs_vbrk>-zz_check_tg IS INITIAL.
*              lv_taxtotal_amount = lv_afectigv0102.
*            else.
*              lv_taxtotal_amount = '0.0'.
*            endif.
**}I-160920-NTP-3000014481
*}E-300321-NTP-3000016017
            IF <lfs_vbrk>-zz_check_tg EQ abap_false.
              lv_taxtotal_amount = lv_afectigv0102. "I-300321-NTP-3000016017
            ELSE.                                                                         "I-PBM120721-3000016828
              lv_taxtotal_amount = '0.00'.                                                "I-PBM120721-3000016828
            ENDIF.                                                                        "I-PBM120721-3000016828
            CONCATENATE '{"0":"' lv_taxtotal_amount                   '",'  "0  TaxTotal-TaxAmount                                  "U-WMR-24032021-3000014481
                        '"1":"'  lv_valvenxite_taxa                   '",'  "1  TaxTotal-TaxSubtotal-TaxableAmount
                        '"2":"'  lv_afectigv0102                      '",'  "2  TaxTotal-TaxSubtotal-TaxAmount
                        '"3":"'  lv_igvkbetrtxt                       '",'  "3  TaxTotal-TaxSubtotal-TaxCategory-Percent                                "18%
                        '"4":"'  ls_catacons-zz_tagagencyname         '",'  "4  TaxTotal-TaxSubtotal-TaxCategory-TaxExemptionReasonCode-listAgencyName
                        '"5":"'  ls_catacons-zz_tagname               '",'  "5  TaxTotal-TaxSubtotal-TaxCategory-TaxExemptionReasonCode-listName
                        '"6":"'  ls_catacons-zz_taguri                '",'  "6  TaxTotal-TaxSubtotal-TaxCategory-TaxExemptionReasonCode-listURI
                        '"7":"'  ls_detsal-zz_afectigv03              '",'  "7  TaxTotal-TaxSubtotal-TaxCategory-TaxExemptionReasonCode                 "10
                        '"8":"'  ls_catacon2-zz_tagagencyname         '",'  "8  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-schemeAgencyName
                        '"9":"'  ls_catacon2-zz_tagname               '",'  "9  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-schemeName
                        '"10":"' ls_catacon2-zz_taguri                '",'  "10 TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-schemeURI
                        '"11":"' ls_cata05-zz_codigo_sunat            '",'  "11 TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-Id                           "1000
                        '"12":"' ls_cata05-zz_desc_cod_suna(3)        '",'  "12 TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-Name                         "IGV
                        '"13":"' ls_cata05-zz_un_ece                  '"}'  "13 TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-TaxTypeCode                  "VAT
                        INTO ls_jsondet-zzt_afectigv.                         "imp_igv_fct
          ENDIF.
        ENDIF.
      ENDIF.

      "43 TaxTotal ISC         Afectación al ISC por ítem
      "Ningun cliente tiene isc
      READ TABLE lt_cata05 INTO ls_cata05 WITH KEY zz_codigo_sunat = ls_detsal-zz_tipisc04.
      IF sy-subrc = 0.
        READ TABLE lt_catacons INTO ls_catacons WITH KEY zz_catalogo = gc_cat-catalogo07.
        IF sy-subrc = 0.
          READ TABLE lt_catacons INTO ls_catacon2 WITH KEY zz_catalogo = gc_cat-catalogo05.
          IF sy-subrc = 0.
            IF ls_detsal-zz_tipisc0102 IS INITIAL.
              CLEAR: ls_cata05, ls_catacons, ls_catacon2.
            ENDIF.

            CONCATENATE '{"0":"' lv_tipisc0102                        '",'  "0  TaxTotal-TaxAmount
                        '"1":"'                                       '",'  "1  TaxTotal-TaxSubtotal-TaxableAmount
                        '"2":"'  lv_tipisc0102                        '",'  "2  TaxTotal-TaxSubtotal-TaxAmount
                        '"3":"'                                       '",'  "3  TaxTotal-TaxSubtotal-TaxCategory-Percent                                "18%
                        '"4":"'  ls_catacons-zz_tagagencyname         '",'  "4  TaxTotal-TaxSubtotal-TaxCategory-TaxExemptionReasonCode-listAgencyName
                        '"5":"'  ls_catacons-zz_tagname               '",'  "5  TaxTotal-TaxSubtotal-TaxCategory-TaxExemptionReasonCode-listName
                        '"6":"'  ls_catacons-zz_taguri                '",'  "6  TaxTotal-TaxSubtotal-TaxCategory-TaxExemptionReasonCode-listURI
                        '"7":"'  ls_detsal-zz_tipisc03                '",'  "7  TaxTotal-TaxSubtotal-TaxCategory-TaxExemptionReasonCode                 "10
                        '"8":"'  ls_catacon2-zz_tagagencyname         '",'  "8  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-schemeAgencyName
                        '"9":"'  ls_catacon2-zz_tagname               '",'  "9  TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-schemeName
                        '"10":"' ls_catacon2-zz_taguri                '",'  "10 TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-schemeURI
                        '"11":"' ls_cata05-zz_codigo_sunat            '",'  "11 TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-Id                           "1000
                        '"12":"' ls_cata05-zz_desc_cod_suna(3)        '",'  "12 TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-Name                         "IGV
                        '"13":"' ls_cata05-zz_un_ece                  '"}'  "13 TaxTotal-TaxSubtotal-TaxCategory-TaxScheme-TaxTypeCode                  "VAT
                        INTO ls_jsondet-zzt_tipisc.                           "imp_isc_fct
          ENDIF.
        ENDIF.
      ENDIF.

      "44 Description          Descripción detallada del servicio prestado...
      CONDENSE ls_detsal-zz_descservicio.
      CONCATENATE '{"0":"' ls_detsal-zz_descservicio          '",'
                  '"1":"'  ls_detsal-zz_mat_cont              '"}' INTO  ls_jsondet-zzt_descservicio.

      "46 CommodityClassification    Código de producto SUNAT
      READ TABLE lt_catacons INTO ls_catacons WITH KEY zz_catalogo = gc_cat-catalogo25.
      IF sy-subrc = 0.
        CONCATENATE '{"0":"' ls_detsal-zz_material              '",'  "45 SellersItemIdentification  Código de producto
                    '"1":"'  ls_detsal-zz_material_sunat        '",'
                    '"2":"'  ls_catacons-zz_tagid               '",'
                    '"3":"'  ls_catacons-zz_tagagencyname       '",'
                    '"4":"'  ls_catacons-zz_tagname             '"}' INTO ls_jsondet-zzt_material.
      ENDIF.

      "47 AdditionalItemProperty    Propiedades Adicionales del Ítem

      "48 Price                     Valor unitario del ítem
      ls_jsondet-zzt_valunitario = lv_valunitario.

*     Transferencia Gratuita
      " Setear Valores de Importes de Boletas TG
      IF ls_detsal-zz_numeracion IS INITIAL.
        ls_jsondet-zzt_columns_tg = '{"0":"","1":"","2":""}'.
      ENDIF.

      "Lote y Cantidad x Lote
      ls_jsondet-zzt_lot_mat = ls_detsal-zz_lot_mat.

      " Texto de posición
      ls_jsondet-zzt_text_pos = ls_detsal-zz_text_pos.

      set_json_det_ubl2_1_customer(
        EXPORTING
          is_detsal = ls_detsal
        CHANGING
          cs_jsondet  = ls_jsondet
      ).

      "Adicionar registro
      APPEND ls_jsondet TO et_jsondet.

    ENDLOOP.

  ENDMETHOD.


  METHOD set_json_det_ubl2_1_customer.

    DATA: lw_value           TYPE         string.

    " Descuento 01
    CASE gw_license.
      WHEN '0020895037'.  " Promelsa
        CLEAR lw_value.
        IF is_detsal-zz_dscto_01 IS NOT INITIAL.
          lw_value = is_detsal-zz_dscto_01.
        ENDIF.
        CONCATENATE '{"0":"dscto1","1":"' lw_value '"}' INTO lw_value.
        CONDENSE lw_value NO-GAPS.

        IF cs_jsondet-zzt_desctoxite IS NOT INITIAL.
          CONCATENATE cs_jsondet-zzt_desctoxite lw_value
                      INTO cs_jsondet-zzt_desctoxite SEPARATED BY ','.
        ELSE.
          cs_jsondet-zzt_desctoxite = lw_value.
        ENDIF.

        " Descuento 02
        CLEAR lw_value.
        IF is_detsal-zz_dscto_02 IS NOT INITIAL.
          lw_value = is_detsal-zz_dscto_02.
        ENDIF.
        CONCATENATE '{"0":"dscto2","1":"' lw_value '"}' INTO lw_value.
        CONDENSE lw_value NO-GAPS.

        IF cs_jsondet-zzt_desctoxite IS NOT INITIAL.
          CONCATENATE cs_jsondet-zzt_desctoxite lw_value
                      INTO cs_jsondet-zzt_desctoxite SEPARATED BY ','.
        ELSE.
          cs_jsondet-zzt_desctoxite = lw_value.
        ENDIF.

*{  BEGIN OF INSERT WMR-20042020-3000014097
      WHEN '0020311006'   " AIB
        OR '0020863116'.  " AIB CLOUD
        " Descripción detallada del servicio prestado: Alternativo
        cs_jsondet-zzt_dessrv_alt = is_detsal-zz_dessrv_alt.

        " Texto de Posición: Alternativo
        cs_jsondet-zzt_txtpos_alt = is_detsal-zz_txtpos_alt.
*}  END OF INSERT WMR-20042020-3000014097
    ENDCASE.

  ENDMETHOD.


  METHOD set_json_res_v2.

    DATA: lv_nfila       TYPE c LENGTH 3.

    DATA: lt_det         TYPE ltt_rbdet_v2,                   "I-NTP-210416
          lt_tcurt       TYPE STANDARD TABLE OF zostb_tcurt,  "I-NTP-210416

          lv_totvvopgra  TYPE char15,
          lv_totvvopinaf TYPE char15,
          lv_totvvopexo  TYPE char15,
          lv_totvalveno  TYPE char15,
          lv_sumaigv     TYPE char15,
          lv_sumaisc     TYPE char15,
          lv_sumaotrtri  TYPE char15,

          ls_sumaisc     TYPE zostb_catalogo05,
          ls_sumaigv     TYPE zostb_catalogo05,
          ls_sumaotrtri  TYPE zostb_catalogo05,

          ls_cab         LIKE LINE OF pi_cab,
          ls_det         LIKE LINE OF pi_det,

          ls_cab_json    LIKE LINE OF pe_cab_json,
          ls_det_json    LIKE LINE OF pe_det_json,

          ls_tcurt       TYPE zostb_tcurt.  "I-NTP-210416


    LOOP AT pi_cab INTO ls_cab.
      MOVE-CORRESPONDING ls_cab TO ls_cab_json.

      CONCATENATE '{"0":"' ls_cab_json-zz_nroruc   '",'
                  '"1":"'  ls_cab_json-zz_nroruc_h '"}' INTO ls_cab_json-zz_nroruc.

      APPEND ls_cab_json TO pe_cab_json.
    ENDLOOP.

    " Obtener Vigencia de Monedas
    lt_det[] = pi_det[].
    SORT lt_det BY zz_waerk ASCENDING.
    DELETE ADJACENT DUPLICATES FROM lt_det COMPARING zz_waerk.

    IF lt_det[] IS NOT INITIAL.
      SELECT *
        INTO TABLE lt_tcurt
        FROM zostb_tcurt
        FOR ALL ENTRIES IN lt_det
        WHERE waers EQ lt_det-zz_waerk
          AND begda LE ls_cab-zz_femision
          AND endda GE ls_cab-zz_femision.
    ENDIF.

    LOOP AT pi_det INTO ls_det.

      MOVE-CORRESPONDING ls_det TO ls_det_json.

*     Limpiar variables
      CLEAR: ls_sumaisc,
             ls_sumaigv,
             ls_sumaotrtri.

*     Valores numéricos
      lv_totvvopgra    = ls_det_json-zz_totvvopgra.
      lv_totvvopexo    = ls_det_json-zz_totvvopexo.
      lv_totvvopinaf   = ls_det_json-zz_totvvopinaf.
      lv_totvalveno    = ls_det_json-zz_totvalveno.
      lv_sumaigv       = ls_det_json-zz_sumaigv.
      lv_sumaisc       = ls_det_json-zz_sumaisc.
      lv_sumaotrtri    = ls_det_json-zz_sumaotrtri.

      CONDENSE: lv_totvvopgra,
                lv_totvvopinaf,
                lv_totvvopexo,
                lv_sumaigv,
                lv_sumaisc,
                lv_sumaotrtri,
                lv_totvalveno.

*     Descripciones de catalogos sunat
      READ TABLE lt_cata05 INTO ls_sumaisc WITH KEY zz_codigo_sunat = ls_det_json-zz_sumaisc_h.
      READ TABLE lt_cata05 INTO ls_sumaigv WITH KEY zz_codigo_sunat = ls_det_json-zz_sumaigv_h.
      READ TABLE lt_cata05 INTO ls_sumaotrtri WITH KEY zz_codigo_sunat = ls_det_json-zz_sumaotrtri_h.

*     Valores Jeison
      CONCATENATE '{"0":"' ls_det_json-zz_nrodociadq      '",'
                  '"1":"'  ls_det_json-zz_nrodociadq_h    '"}' INTO ls_det_json-zz_nrodociadq.
      CONCATENATE '{"0":"' ls_det_json-zz_nrodocmodif     '",'
                  '"1":"'  ls_det_json-zz_nrodocmodif_h   '"}' INTO ls_det_json-zz_nrodocmodif.
      CONCATENATE '{"0":"' lv_totvvopgra                  '",'
                  '"1":"'  ls_det_json-zz_totvvopgra_h    '"}' INTO ls_det_json-zz_totvvopgra.
      CONCATENATE '{"0":"' lv_totvvopexo                  '",'
                  '"1":"'  ls_det_json-zz_totvvopexo_h    '"}' INTO ls_det_json-zz_totvvopexo.
      CONCATENATE '{"0":"' lv_totvvopinaf                 '",'
                  '"1":"'  ls_det_json-zz_totvvopinaf_h   '"}' INTO ls_det_json-zz_totvvopinaf.
      CONCATENATE '{"0":"' lv_totvalveno                  '",'
                  '"1":"'  ls_det_json-zz_totvalveno_h    '"}' INTO ls_det_json-zz_totvalveno.
      CONCATENATE '{"0":"' lv_sumaisc                     '",'
                  '"1":"'  lv_sumaisc                     '",'
                  '"2":"'  ls_det_json-zz_sumaisc_h       '",'
                  '"3":"'  ls_sumaisc-zz_desc_cod_suna    '",'
                  '"4":"'  ls_sumaisc-zz_un_ece           '"}' INTO ls_det_json-zz_sumaisc.
      CONCATENATE '{"0":"' lv_sumaigv                     '",'
                  '"1":"'  lv_sumaigv                     '",'
                  '"2":"'  ls_det_json-zz_sumaigv_h       '",'
                  '"3":"'  ls_sumaigv-zz_desc_cod_suna    '",'
                  '"4":"'  ls_sumaigv-zz_un_ece           '"}' INTO ls_det_json-zz_sumaigv.
      CONCATENATE '{"0":"' lv_sumaotrtri                  '",'
                  '"1":"'  lv_sumaotrtri                  '",'
                  '"2":"'  ls_det_json-zz_sumaotrtri_h    '",'
                  '"3":"'  ls_sumaotrtri-zz_desc_cod_suna '",'
                  '"4":"'  ls_sumaotrtri-zz_un_ece        '"}' INTO ls_det_json-zz_sumaotrtri.
      ls_det_json-zz_sumaotrcargos = '{"0":"true","1":"0.00"}'.

      " Obtener Vigencia de Monedas
      READ TABLE lt_tcurt INTO ls_tcurt
           WITH KEY waers = ls_det-zz_waerk.
      IF sy-subrc EQ 0.
        CONCATENATE '{"0":"'  ls_det-zz_waerk   '",'
                    '"1":"'   ls_tcurt-nomsun   '",'
                    '"2":"'   ls_tcurt-sigmon   '"}'
                    INTO ls_det_json-zz_moneda.
      ENDIF.

*{  BEGIN OF INSERT WMR-150218-3000009072: No pintar N°doc identidad adquirente
      ls_det_json-zz_bol_npnad = ls_det-zz_bol_npnad.
*}  END OF INSERT WMR-150218-3000009072: No pintar N°doc identidad adquirente

      APPEND ls_det_json TO pe_det_json.
    ENDLOOP.

  ENDMETHOD.                    "set_det_ws_res


  METHOD set_new_id.

    DATA: lt_numeracion TYPE tt_numeracion,
          lr_ident      TYPE RANGE OF zostb_rbcab-zz_identifiresu,
          l_string      TYPE string,
          l_fila        TYPE char03.

    CASE i_typid.
      WHEN gc_prefix_rb.
        CONCATENATE 'ICP' 'RC-' i_datum '*' INTO l_string.
        APPEND l_string TO lr_ident.

        SELECT bukrs zzt_identifiresu
          INTO TABLE lt_numeracion                ##TOO_MANY_ITAB_FIELDS
          FROM zostb_rblog
          WHERE bukrs            EQ i_bukrs
            AND zzt_identifiresu IN lr_ident.

        l_fila = get_last_identify( lt_numeracion ).
        ADD 1 TO l_fila.
        CONDENSE l_fila.
        CONCATENATE 'RC-' i_datum '-' l_fila INTO r_id.

      WHEN gc_prefix_bj.
        CONCATENATE 'ICP' 'RA-' i_datum '*' INTO l_string.
        APPEND l_string TO lr_ident.

        SELECT bukrs zzt_identifibaja
          INTO TABLE lt_numeracion                     ##TOO_MANY_ITAB_FIELDS
          FROM zostb_balog
          WHERE bukrs            EQ i_bukrs
            AND zzt_identifibaja IN lr_ident.

        l_fila = get_last_identify( lt_numeracion ).

        ADD 1 TO l_fila. CONDENSE l_fila.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = l_fila
          IMPORTING
            output = l_fila.
        CONCATENATE 'RA-' i_datum '-' l_fila INTO r_id.

    ENDCASE.


  ENDMETHOD.


  METHOD set_vbrp_final.

    DATA: lt_temp        TYPE ltt_vbrp,
          lt_vbrp_tot    TYPE STANDARD TABLE OF lty_vbrp_tot,               "I-3000011712-NTP100419
          lt_cardes_tot  TYPE STANDARD TABLE OF lty_cardes,                 "I-3000011712-NTP100419
*          lt_vbrp_f      TYPE STANDARD TABLE OF lty_vbrp_f,                 "I-WMR-180615
          lt_lines       TYPE ltt_text,                                     "I-WMR-200715
          ls_vbrp_tot    LIKE LINE OF lt_vbrp_tot,                          "I-3000011712-NTP100419
          ls_cardes_tot  LIKE LINE OF lt_cardes_tot,                        "I-3000011712-NTP100419
          ls_vbrp_f      LIKE LINE OF pe_vbrp_f,
          ls_cardes      TYPE lty_cardes,                                   "I-3000011712-NTP100419
          ls_lines       TYPE  lty_text,                                    "I-WMR-200715
          ls_mch1        TYPE lty_mch1,                                     "I-WMR-010915
          lth_mch1       TYPE HASHED TABLE OF lty_mch1                      "I-WMR-010915
                         WITH UNIQUE KEY matnr charg,                       "I-WMR-010915
          lt_posbonif    TYPE ltt_vbrp,                                     "I-WMR-010915
          lth_mvke       TYPE HASHED TABLE OF lty_mvke                      "I-WMR-160915
                         WITH UNIQUE KEY matnr vkorg vtweg,                 "I-WMR-160915
          lr_spart       TYPE RANGE OF vbrk-spart,                          "I-WMR-181218-3000009765

          ls_mvke        TYPE lty_mvke,                                     "I-WMR-160915
          ls_t052u       LIKE LINE OF lt_t052u,                             "I-WMR-231116-3000005346
          ls_vbrp        TYPE vbrp,                                         "I-WMR-180117-3000006249
          ls_spart       LIKE LINE OF lr_spart,                             "I-WMR-181218-3000009765

          lw_matnr       TYPE mara-matnr,
          lw_texto(1024) TYPE c,
          lw_last        TYPE char1,
          lw_fill        TYPE  xfeld,                                       "I-WMR-220715
          lw_date        TYPE char10,                                       "I-WMR-010915
          lw_tabix       TYPE sytabix.                                      "I-WMR-010915

    DATA: lw_name   TYPE thead-tdname,
          lw_texto1 TYPE string,
          lw_255    TYPE i,                                                 "I-WMR-120815
          lw_len    TYPE i,                                                 "I-WMR-120815
          lw_dif    TYPE i.                                                 "I-WMR-120815

    DATA: lt_vbrp_aux TYPE STANDARD TABLE OF lty_vbrp_f.

    DATA: ls_const      LIKE LINE OF lt_const,
          ls_constfkart LIKE LINE OF lt_constfkart,
          ls_agrup      LIKE LINE OF lt_agrup,
          ls_thead      TYPE thead.                                         "I-WMR-180615

    DATA: select   TYPE TABLE OF edpline,                                   "I-WMR-080817-3000007896
          sublist  TYPE edpline,                                            "I-WMR-080817-3000007896
          from     TYPE string,                                             "I-WMR-080817-3000007896
          where    TYPE string,                                             "I-WMR-080817-3000007896
          lo_error TYPE REF TO cx_root.                                     "I-WMR-080817-3000007896

    DATA: lr_vkorg1 TYPE RANGE OF vkorg,
          lr_vkorg2 TYPE RANGE OF vkorg.

    DATA: rs_vkorg LIKE LINE OF lr_vkorg1.

    FIELD-SYMBOLS: <lfs_vbrk>     LIKE LINE OF pi_vbrk,
                   <lfs_vbrp>     LIKE LINE OF pi_vbrp,
                   <lfs_temp>     LIKE LINE OF lt_temp,
                   <lfs_vbrp_f>   LIKE LINE OF pe_vbrp_f,
                   <lfs_vbrp_tot> LIKE LINE OF lt_vbrp_tot,                   "I-3000011712-NTP100419
                   <fs_cardes>    TYPE lty_cardes.                            "I-3000011712-NTP100419

    CASE gw_license.
      WHEN '0020299975'.
******************************************************
*                    ACFARMA                         *
******************************************************
*   Rango de Clase de Facturas
        REFRESH: ltr_fkart,ltr_fkart4.
        LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '6' AND zz_opcion02 = '' .
          lwa_fkart-low     = lwa_constfkart-fkart.
          lwa_fkart-sign    = 'I'.
          lwa_fkart-option  = 'EQ'.
          APPEND lwa_fkart TO ltr_fkart.
        ENDLOOP.

*   Rango de Organización de Venta
        LOOP AT lt_const INTO ls_const.
          CASE ls_const-campo.
            WHEN 'VKORG1'.
              rs_vkorg-sign   = 'I'.
              rs_vkorg-option = 'EQ'.
              rs_vkorg-low    = ls_const-valor1.
              APPEND rs_vkorg TO lr_vkorg1.
            WHEN 'VKORG2'.
              rs_vkorg-sign   = 'I'.
              rs_vkorg-option = 'EQ'.
              rs_vkorg-low    = ls_const-valor1.
              APPEND rs_vkorg TO lr_vkorg2.
          ENDCASE.
        ENDLOOP.


        READ TABLE pi_vbrk ASSIGNING <lfs_vbrk> INDEX 1.
*   Pasamos la tabla principal a la auxiliar
        LOOP AT pi_vbrp ASSIGNING <lfs_vbrp>.
          MOVE-CORRESPONDING <lfs_vbrp> TO ls_vbrp_f.
          APPEND ls_vbrp_f TO pe_vbrp_f.
        ENDLOOP.

*  1- Buscamos la Clase y validamos si es Ventas varias

        IF ( ltr_fkart[] IS NOT INITIAL ) AND ( <lfs_vbrk>-fkart IN ltr_fkart ).
          LOOP AT pe_vbrp_f ASSIGNING <lfs_vbrp_f>.
            CLEAR: lw_name, lw_texto1.
            CONCATENATE <lfs_vbrp_f>-vbeln <lfs_vbrp_f>-posnr INTO lw_name.
            <lfs_vbrp_f>-arktx = me->get_text( pi_name   = lw_name
                                               pi_id     = '0001'
                                               pi_object = 'VBBP' ).
            CONDENSE <lfs_vbrp_f>-arktx.
            SHIFT <lfs_vbrp_f>-arktx RIGHT DELETING TRAILING ''.
            SHIFT <lfs_vbrp_f>-arktx LEFT DELETING LEADING ''.
          ENDLOOP.
*
        ELSE. "Agrupa pos.
          me->set_agrupa_pos( EXPORTING pi_matrix = lt_matrix
                                        pi_vbrk   = <lfs_vbrk>
                              IMPORTING pe_agrup  = lt_agrup ).

          CHECK lt_vbrp_tot[] IS NOT INITIAL.
          lt_vbrp_aux[] = pe_vbrp_f[].
          IF gw_sin_agrup_pos EQ abap_false.                                      "I-WMR-290515
            REFRESH lt_vbrp_tot.
            LOOP AT lt_agrup INTO ls_agrup.
              READ TABLE lt_vbrp_aux INTO ls_vbrp_f WITH KEY posnr = ls_agrup-posmt
                                                             matnr = ls_agrup-matnr.
              IF sy-subrc = 0.
                ls_vbrp_f-fkimg      = ls_agrup-lfimg.
                ls_vbrp_f-valvenxite = ls_vbrp_f-netwr  = ls_agrup-netwr.
                ls_vbrp_f-valvenxite_taxa = ls_vbrp_f-netwr  = ls_agrup-netwr.  "I-3000011712-NTP210419
                ls_vbrp_f-zjson      = ls_agrup-zlotes.
                CONDENSE ls_vbrp_f-arktx.
                SHIFT ls_vbrp_f-arktx RIGHT DELETING TRAILING ''.
                SHIFT ls_vbrp_f-arktx LEFT DELETING LEADING ''.
                APPEND ls_vbrp_f TO pe_vbrp_f.
              ENDIF.
            ENDLOOP.
          ENDIF.                                                                  "I-WMR-290515

*2- Buscamos si la Org. de Venta AC01 y AC03
          IF ( lr_vkorg1[] IS NOT INITIAL ) AND ( <lfs_vbrk>-vkorg IN lr_vkorg1 ).
            LOOP AT pe_vbrp_f ASSIGNING <lfs_vbrp_f>.
              CLEAR: lw_name, lw_texto1.
              CONCATENATE <lfs_vbrp_f>-matnr <lfs_vbrk>-vkorg <lfs_vbrk>-vtweg INTO lw_name.
              <lfs_vbrp_f>-arktx = me->get_text( pi_name   = lw_name
                                                 pi_id     = '0001'
                                                 pi_object = 'MVKE' ).
              CONDENSE <lfs_vbrp_f>-arktx.
              SHIFT <lfs_vbrp_f>-arktx RIGHT DELETING TRAILING ''.
              SHIFT <lfs_vbrp_f>-arktx LEFT DELETING LEADING ''.
            ENDLOOP.
          ENDIF.
*   3- Buscamos si la Org. de Venta AC02 y AC04
*    ELSEIF <lfs_vbrk>-vkorg IN lr_vkorg2.
        ENDIF.
        SORT pe_vbrp_f BY  posnr matnr.

      WHEN '0020729594'.
******************************************************
*               CASO AUSTRAL                         *
******************************************************
*   Rango Facturas de Exportación
        REFRESH: ltr_fkart,ltr_fkart4.
        LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '1' AND zz_opcion02 = '0' .
          lwa_fkart-low     = lwa_constfkart-fkart.
          lwa_fkart-sign    = 'I'.
          lwa_fkart-option  = 'EQ'.
          APPEND lwa_fkart TO ltr_fkart.
        ENDLOOP.
*  Rango Ventas varias FEX
        LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '8' AND zz_opcion02 = '1' .
          lwa_fkart-low     = lwa_constfkart-fkart.
          lwa_fkart-sign    = 'I'.
          lwa_fkart-option  = 'EQ'.
          APPEND lwa_fkart TO ltr_fkart4.
        ENDLOOP.

*   Buscamos la Clase y validamos si es Ventas varias
        READ TABLE pi_vbrk ASSIGNING <lfs_vbrk> INDEX 1.
        IF NOT <lfs_vbrk>-fkart IN ltr_fkart4. "Si no es ventas varias agrupa
*   Consolidar por materiales iguales y posiciones de diferencia de peso
          lt_temp[] = pi_vbrp[].
          LOOP AT pi_vbrp ASSIGNING <lfs_vbrp>.
            READ TABLE pi_vbrk ASSIGNING <lfs_vbrk>
                       WITH KEY vbeln = <lfs_vbrp>-vbeln.
            CLEAR ls_vbrp_f.
            MOVE-CORRESPONDING <lfs_vbrp> TO ls_vbrp_tot.
            IF <lfs_vbrk>-fkart IN ltr_fkart
            AND ltr_fkart[] IS NOT INITIAL.
              CLEAR: ls_vbrp_tot-posnr,
                     ls_vbrp_tot-umvkz,
                     ls_vbrp_tot-kmein,
                     ls_vbrp_tot-arktx,
                     ls_vbrp_tot-kbetr,
                     ls_vbrp_tot-kwert,
                     ls_vbrp_tot-pventa,
                     ls_vbrp_tot-aubel,
                     ls_vbrp_tot-aupos,
*{I-3000010993-NTP200319: excluir de totalizar
                     ls_vbrp_tot-vgbel,
                     ls_vbrp_tot-vgpos,
                     ls_vbrp_tot-zjson,
                     ls_vbrp_tot-text_id,
                     ls_vbrp_tot-text_pos,
                     ls_vbrp_tot-zz_mat_cont,
                     ls_vbrp_tot-zzkdmat_auft,
                     ls_vbrp_tot-gewei,
                     ls_vbrp_tot-lgort,
                     ls_vbrp_tot-matkl,
                     ls_vbrp_tot-zz_sid_number,
                     ls_vbrp_tot-zz_sid_descr,
                     ls_vbrp_tot-zz_certif_fce,
                     ls_vbrp_tot-zz_certif_fda,
                     ls_vbrp_tot-zz_part_ara,
                     ls_vbrp_tot-zz_codigo_hts,
                     ls_vbrp_tot-zz_codreg_per,
                     ls_vbrp_tot-vstel.
*}I-3000010993-NTP200319
              IF ( <lfs_vbrk>-spart = '10' OR <lfs_vbrk>-spart = '20' ).
*          IF ( <lfs_vbrp>-pstyv <> 'ZPDS' AND <lfs_vbrp>-pstyv <> 'ZPPS' ).
*            lw_matnr = <lfs_vbrp>-matnr.
*          ENDIF.
                IF ( <lfs_vbrp>-pstyv = gc_pstyv_di1 OR <lfs_vbrp>-pstyv = gc_pstyv_di2 ).
                  LOOP AT lt_temp ASSIGNING <lfs_temp> WHERE ( pstyv <> gc_pstyv_di1 AND pstyv <> gc_pstyv_di2 ).
                    ls_vbrp_tot-matnr = <lfs_temp>-matnr.
                    EXIT.
                  ENDLOOP.
*            ls_vbrp_tot-matnr = lw_matnr.
                ENDIF.
              ENDIF.
            ENDIF.

*{I-3000011712-NTP100419
            LOOP AT <lfs_vbrp>-t_cardes_item ASSIGNING <fs_cardes>.
              MOVE-CORRESPONDING <fs_cardes> TO ls_cardes.
              ls_cardes-vbeln = ls_vbrp_tot-vbeln.
              ls_cardes-matnr = ls_vbrp_tot-matnr.
              COLLECT ls_cardes INTO lt_cardes_tot.
            ENDLOOP.
*}I-3000011712-NTP100419

            COLLECT ls_vbrp_tot INTO lt_vbrp_tot.
          ENDLOOP.

          LOOP AT lt_vbrp_tot INTO ls_vbrp_tot.
            MOVE-CORRESPONDING ls_vbrp_tot TO ls_vbrp_f.
            APPEND ls_vbrp_f TO pe_vbrp_f.
          ENDLOOP.

*   Setear valores no numéricos
          LOOP AT pe_vbrp_f ASSIGNING <lfs_vbrp_f>.
            AT LAST.
              lw_last = abap_true.
            ENDAT.
            READ TABLE pi_vbrk ASSIGNING <lfs_vbrk>
                       WITH KEY vbeln = <lfs_vbrp>-vbeln.
            IF <lfs_vbrk>-fkart IN ltr_fkart.
              READ TABLE pi_vbrp ASSIGNING <lfs_vbrp>           "Tomar POSNR
                         WITH KEY vbeln = <lfs_vbrp_f>-vbeln
                                  matnr = <lfs_vbrp_f>-matnr.
              IF sy-subrc EQ 0.
                <lfs_vbrp_f>-posnr  = <lfs_vbrp>-posnr.
                <lfs_vbrp_f>-umvkz  = <lfs_vbrp>-umvkz.
                <lfs_vbrp_f>-kmein  = <lfs_vbrp>-kmein.
                <lfs_vbrp_f>-arktx  = <lfs_vbrp>-arktx.
                <lfs_vbrp_f>-kbetr  = <lfs_vbrp>-kbetr.
                <lfs_vbrp_f>-kwert  = <lfs_vbrp>-kwert.
                <lfs_vbrp_f>-pventa = <lfs_vbrp>-pventa.
                <lfs_vbrp_f>-aubel  = <lfs_vbrp>-aubel.
                <lfs_vbrp_f>-aupos  = <lfs_vbrp>-aupos.
              ENDIF.
*{I-3000011712-NTP100419
              LOOP AT lt_cardes_tot ASSIGNING <fs_cardes> WHERE vbeln = <lfs_vbrp_f>-vbeln
                                                       AND matnr = <lfs_vbrp_f>-matnr.
                APPEND <fs_cardes> TO <lfs_vbrp_f>-t_cardes_item.
              ENDLOOP.
*}I-3000011712-NTP100419
            ENDIF.
            CLEAR lw_texto.
            lw_texto = me->get_mat_des( pi_vbrk    = <lfs_vbrk>       "Define Descripcion de Material
                                        pi_vbrp    = <lfs_vbrp_f>
                                        pi_tipdoc  = pi_tipdoc
                                        pi_last    = lw_last ).
            IF lw_texto IS NOT INITIAL.
              CONDENSE lw_texto.
              <lfs_vbrp_f>-arktx = lw_texto.
            ENDIF.
          ENDLOOP.
        ELSE. "Cuando sea ventas varias FEX
          LOOP AT pi_vbrp ASSIGNING <lfs_vbrp>.
            MOVE-CORRESPONDING <lfs_vbrp> TO ls_vbrp_f.
            APPEND ls_vbrp_f TO pe_vbrp_f.
          ENDLOOP.
          LOOP AT pe_vbrp_f ASSIGNING <lfs_vbrp_f>.
            IF pi_tipdoc EQ gc_tipdoc_fa.                                      "Facturas de Exportación
              <lfs_vbrp_f>-arktx = me->get_mat_des_exp( pi_vbrk = <lfs_vbrk>
                                                        pi_vbrp = <lfs_vbrp_f>
                                                        pi_last = lw_last ).
            ELSEIF ( pi_tipdoc EQ gc_tipdoc_nc OR pi_tipdoc EQ gc_tipdoc_nd ). "NC y ND Exportacion
              <lfs_vbrp_f>-arktx = me->get_mat_des_notexp( pi_vbrk = <lfs_vbrk>
                                                           pi_vbrp = <lfs_vbrp_f>
                                                           pi_last = lw_last ).
            ENDIF.
          ENDLOOP.
        ENDIF.

*{  BEGIN OF INSERT WMR-180615
      WHEN '0020316164'. "Modasa

        LOOP AT pi_vbrk ASSIGNING <lfs_vbrk>.
          CLEAR: lt_temp.", lt_vbrp_f.

          " Verificar Impresión Resumida
          LOOP AT pi_vbrp ASSIGNING <lfs_vbrp> WHERE vbeln EQ <lfs_vbrk>-vbeln
                                                 AND kvgr1 EQ 'RES'.
            EXIT.
          ENDLOOP.

          IF sy-subrc EQ 0.
            " Resumido
            LOOP AT pi_vbrp ASSIGNING <lfs_vbrp> WHERE vbeln EQ <lfs_vbrk>-vbeln.
              CLEAR ls_vbrp_tot.
              ls_vbrp_tot-vbeln           = <lfs_vbrp>-vbeln.
              ls_vbrp_tot-netwr           = <lfs_vbrp>-netwr.
              ls_vbrp_tot-mwsbp           = <lfs_vbrp>-mwsbp.
              ls_vbrp_tot-kwert           = <lfs_vbrp>-kwert.
*              ls_vbrp_tot-kbetr           = <lfs_vbrp>-kbetr.                    "E-170921-NTP-3000017804
              ls_vbrp_tot-kbetr           = <lfs_vbrp>-kbetr * <lfs_vbrp>-fkimg.  "I-170921-NTP-3000017804
              ls_vbrp_tot-pventa          = <lfs_vbrp>-pventa.
              ls_vbrp_tot-afigv0102       = <lfs_vbrp>-afigv0102.
              ls_vbrp_tot-tipisc00102     = <lfs_vbrp>-tipisc00102.
              ls_vbrp_tot-valvenxite      = <lfs_vbrp>-valvenxite.
              ls_vbrp_tot-valvenxite_taxa = <lfs_vbrp>-valvenxite_taxa. "I-3000011712-NTP210419
              ls_vbrp_tot-sumaigv         = <lfs_vbrp>-sumaigv.
              ls_vbrp_tot-sumaiscsv       = <lfs_vbrp>-sumaiscsv.
              ls_vbrp_tot-sumaisc         = <lfs_vbrp>-sumaisc.
              ls_vbrp_tot-sumaotrtri      = <lfs_vbrp>-sumaotrtri.
*              ls_vbrp_tot-sumaotrcar      = <lfs_vbrp>-sumaotrcar.  "E-100920-NTP-3000014481
*              ls_vbrp_tot-desctot         = <lfs_vbrp>-desctot.    "E-3000011712-NTP110419
*              ls_vbrp_tot-imptotvent      = <lfs_vbrp>-imptotvent.  "E-100920-NTP-3000014481
              ls_vbrp_tot-imporpermn      = <lfs_vbrp>-imporpermn.
              ls_vbrp_tot-imporpermn_mtc  = <lfs_vbrp>-imporpermn_mtc.
              ls_vbrp_tot-valrefunit      = <lfs_vbrp>-valrefunit.
              ls_vbrp_tot-totvalveno      = <lfs_vbrp>-totvalveno.
*              ls_vbrp_tot-desctoglob      = <lfs_vbrp>-desctoglob. "E-3000011712-NTP110419
*              ls_vbrp_tot-desctoxite      = <lfs_vbrp>-desctoxite. "E-3000011712-NTP110419
              ls_vbrp_tot-taxm1           = <lfs_vbrp>-taxm1.       "I-190521-NTP-3000016876
              ls_vbrp_tot-augru_auft      = <lfs_vbrp>-augru_auft.  "I-190521-NTP-3000016876
*{I-100920-NTP-3000014481
              ls_vbrp_tot-desctoxite      = <lfs_vbrp>-desctoxite.
              ls_vbrp_tot-desctoxite_sabi = <lfs_vbrp>-desctoxite_sabi.
              ls_vbrp_tot-desctoxite_nabi = <lfs_vbrp>-desctoxite_nabi.
              ls_vbrp_tot-cargosxite      = <lfs_vbrp>-desctoxite.
              ls_vbrp_tot-cargosxite_sabi = <lfs_vbrp>-desctoxite_sabi.
              ls_vbrp_tot-cargosxite_nabi = <lfs_vbrp>-desctoxite_nabi.
              ls_vbrp_tot-desctoglob      = <lfs_vbrp>-desctoglob.
              ls_vbrp_tot-desctoglob_sabi = <lfs_vbrp>-desctoglob_sabi.
              ls_vbrp_tot-desctoglob_nabi = <lfs_vbrp>-desctoglob_nabi.
              ls_vbrp_tot-cargosglob      = <lfs_vbrp>-desctoglob.
              ls_vbrp_tot-cargosglob_sabi = <lfs_vbrp>-desctoglob_sabi.
              ls_vbrp_tot-cargosglob_nabi = <lfs_vbrp>-desctoglob_nabi.
              ls_vbrp_tot-desctotot      = <lfs_vbrp>-desctotot.
              ls_vbrp_tot-desctotot_sabi = <lfs_vbrp>-desctotot_sabi.
              ls_vbrp_tot-desctotot_nabi = <lfs_vbrp>-desctotot_nabi.
              ls_vbrp_tot-cargostot      = <lfs_vbrp>-desctotot.
              ls_vbrp_tot-cargostot_sabi = <lfs_vbrp>-desctotot_sabi.
              ls_vbrp_tot-cargostot_nabi = <lfs_vbrp>-desctotot_nabi.
*}I-100920-NTP-3000014481
              COLLECT ls_vbrp_tot INTO lt_vbrp_tot.

*{I-3000011712-NTP100419
              LOOP AT <lfs_vbrp>-t_cardes_item ASSIGNING <fs_cardes>.
                MOVE-CORRESPONDING <fs_cardes> TO ls_cardes.
                COLLECT ls_cardes INTO lt_cardes_tot.
              ENDLOOP.
*}I-3000011712-NTP100419

              APPEND INITIAL LINE TO lt_temp ASSIGNING <lfs_temp>.
              <lfs_temp> = <lfs_vbrp>.
            ENDLOOP.

            LOOP AT lt_vbrp_tot INTO ls_vbrp_tot.
              MOVE-CORRESPONDING ls_vbrp_tot TO ls_vbrp_f.
              APPEND ls_vbrp_f TO pe_vbrp_f.
            ENDLOOP.

            " Los atributos se deben tomar de la primera posición del documento
            SORT lt_temp BY vbeln ASCENDING posnr ASCENDING.
            DELETE ADJACENT DUPLICATES FROM lt_temp COMPARING vbeln.

            READ TABLE lt_temp ASSIGNING <lfs_temp> INDEX 1.

            LOOP AT pe_vbrp_f ASSIGNING <lfs_vbrp_f>.
              <lfs_vbrp_f>-posnr      = <lfs_temp>-posnr.
              <lfs_vbrp_f>-matnr      = <lfs_temp>-matnr.             "I-PBM100419-3000011108
              <lfs_vbrp_f>-afigv      = <lfs_temp>-afigv.
              <lfs_vbrp_f>-tributo    = <lfs_temp>-tributo.           "I-100920-NTP-3000014481
              <lfs_vbrp_f>-afigv03    = <lfs_temp>-afigv03.
              <lfs_vbrp_f>-afigv04    = <lfs_temp>-afigv04.
              <lfs_vbrp_f>-afigv05    = <lfs_temp>-afigv05.
              <lfs_vbrp_f>-afigv06    = <lfs_temp>-afigv06.
              <lfs_vbrp_f>-tipisc     = <lfs_temp>-tipisc.
              <lfs_vbrp_f>-tipisc04   = <lfs_temp>-tipisc04.
              <lfs_vbrp_f>-tipisc05   = <lfs_temp>-tipisc05.
              <lfs_vbrp_f>-tipisc06   = <lfs_temp>-tipisc06.
              <lfs_vbrp_f>-uummsunat  = <lfs_temp>-uummsunat.
              <lfs_vbrp_f>-tipmonemif = <lfs_temp>-tipmonemif.
              <lfs_vbrp_f>-tipnumegre = <lfs_temp>-tipnumegre.
              <lfs_vbrp_f>-aubel      = <lfs_temp>-aubel.
              <lfs_vbrp_f>-aupos      = <lfs_temp>-aupos.
              " Unidad de Medida
              <lfs_vbrp_f>-vrkme      = 'ST'.
              " Cantidad
              <lfs_vbrp_f>-fkimg      = 1.
              " Valor unitario por ítem
*              <lfs_vbrp_f>-kbetr      = <lfs_vbrk>-netwr.  "E-170921-NTP-3000017804
              " Precio de venta unitario
              <lfs_vbrp_f>-pventa     = <lfs_vbrk>-netwr + <lfs_vbrk>-mwsbk.
              " Valor de venta por ítem
              <lfs_vbrp_f>-valvenxite = <lfs_vbrk>-netwr.
              <lfs_vbrp_f>-valvenxite_taxa = <lfs_vbrk>-netwr.  "I-3000011712-NTP210419
              " Descripción de Bien o Servicio
              <lfs_vbrp_f>-text_id    = '0002'.
              CLEAR ls_thead.
              ls_thead-tdname         = <lfs_vbrp_f>-vbeln.
              ls_thead-tdid           = '0002'.
              ls_thead-tdobject       = 'VBBK'.
*{  BEGIN OF REPLACE WMR-220715
              ""              <lfs_vbrp_f>-arktx      = get_text( pi_name   = ls_thead-tdname
              ""                                                  pi_id     = ls_thead-tdid
              ""                                                  pi_object = ls_thead-tdobject ).
              CLEAR: lt_lines, lw_fill.
              get_text_lines( EXPORTING is_thead = ls_thead
                              IMPORTING et_text  = lt_lines ).
              " Borrar Líneas iniciales en blanco
              LOOP AT lt_lines INTO ls_lines.
                IF ls_lines-tdline IS NOT INITIAL.
                  lw_fill = abap_true.
                ENDIF.
                IF  ls_lines-tdline IS INITIAL
                AND lw_fill EQ abap_false.
                  DELETE lt_lines INDEX sy-tabix.
                ENDIF.
              ENDLOOP.
              READ TABLE lt_lines INTO ls_lines INDEX 1.
              IF sy-subrc EQ 0.
                <lfs_vbrp_f>-arktx  = ls_lines-tdline.
              ELSE. "Si no hay, text Denominación 1era posición                  "I-PBM100419-3000011108
                <lfs_vbrp_f>-arktx = <lfs_temp>-arktx.                           "I-PBM100419-3000011108
              ENDIF.

              " Texto de posición
              DELETE lt_lines INDEX 1.
              LOOP AT lt_lines INTO ls_lines.
                IF <lfs_vbrp_f>-text_pos IS INITIAL.
                  <lfs_vbrp_f>-text_pos = ls_lines-tdline.
                ELSE.
                  CONCATENATE <lfs_vbrp_f>-text_pos ls_lines-tdline INTO <lfs_vbrp_f>-text_pos SEPARATED BY '#'.
                ENDIF.
              ENDLOOP.

*{I-3000011712-NTP100419
              LOOP AT lt_cardes_tot ASSIGNING <fs_cardes>.
                TRY.
                    <fs_cardes>-cargo_pct = <fs_cardes>-cargo / <fs_cardes>-cargo_base. "I-200921-NTP-3000017804
                    <fs_cardes>-dscto_pct = <fs_cardes>-dscto / <fs_cardes>-dscto_base. "I-200921-NTP-3000017804
                  CATCH cx_root.
                ENDTRY.
                APPEND <fs_cardes> TO <lfs_vbrp_f>-t_cardes_item.
              ENDLOOP.
*}I-3000011712-NTP100419
*}  END OF REPLACE WMR-220715
            ENDLOOP.

          ELSE.
            " Detallado
            LOOP AT pi_vbrp ASSIGNING <lfs_vbrp> WHERE vbeln EQ <lfs_vbrk>-vbeln.
              MOVE-CORRESPONDING <lfs_vbrp> TO ls_vbrp_f.
              " Si existe Texto en Id Texto de Posición, reemplaza Texto breve de posición
              CLEAR: ls_thead, lt_lines.
              CONCATENATE <lfs_vbrp>-vbeln <lfs_vbrp>-posnr INTO ls_thead-tdname.
              ls_thead-tdid           = 'Z049'.
              ls_thead-tdobject       = 'VBBP'.
*{  BEGIN OF REPLACE WMR-170715
              ""              lw_text                 = get_text( pi_name   = ls_thead-tdname
              ""                                                  pi_id     = ls_thead-tdid
              ""                                                  pi_object = ls_thead-tdobject ).
              ""              IF lw_text IS NOT INITIAL.
              ""                ls_vbrp_f-arktx       = lw_text.
              get_text_lines( EXPORTING is_thead = ls_thead
                              IMPORTING et_text  = lt_lines ).
              DELETE lt_lines WHERE tdline IS INITIAL.
              " La 1ra Línea (no en blanco) del Texto de posición reemplaza el Texto breve de posición
              READ TABLE lt_lines INTO ls_lines INDEX 1.
              IF sy-subrc EQ 0.
                ls_vbrp_f-arktx       = ls_lines-tdline.
*}  END OF REPLACE WMR-170715
              ENDIF.
              APPEND ls_vbrp_f TO pe_vbrp_f.
            ENDLOOP.

          ENDIF.
        ENDLOOP.

      WHEN '0020758614'. "Lsa
**        LOOP AT pi_vbrp ASSIGNING <lfs_vbrp>.
**          MOVE-CORRESPONDING <lfs_vbrp> TO ls_vbrp_f.
**          APPEND ls_vbrp_f TO lt_vbrp_tot.
**        ENDLOOP.

        LOOP AT pi_vbrk ASSIGNING <lfs_vbrk>.
          CLEAR: lt_temp.", lt_vbrp_f.
          " Agrupación por código de material
          LOOP AT pi_vbrp ASSIGNING <lfs_vbrp> WHERE vbeln EQ <lfs_vbrk>-vbeln.
            CLEAR ls_vbrp_tot.
            ls_vbrp_tot-vbeln           = <lfs_vbrp>-vbeln.
            ls_vbrp_tot-matnr           = <lfs_vbrp>-matnr.
            ls_vbrp_tot-arktx           = <lfs_vbrp>-arktx.
            ls_vbrp_tot-vrkme           = <lfs_vbrp>-vrkme.
            ls_vbrp_tot-fkimg           = <lfs_vbrp>-fkimg.
            ls_vbrp_tot-valvenxite      = <lfs_vbrp>-valvenxite.
            ls_vbrp_tot-valvenxite_taxa = <lfs_vbrp>-valvenxite_taxa. "I-3000011712-NTP210419
            ls_vbrp_tot-valigvant       = <lfs_vbrp>-valigvant.
            ls_vbrp_tot-afigv           = <lfs_vbrp>-afigv.
            ls_vbrp_tot-tipisc          = <lfs_vbrp>-tipisc.
            ls_vbrp_tot-netwr           = <lfs_vbrp>-netwr.
            ls_vbrp_tot-mwsbp           = <lfs_vbrp>-mwsbp.
            ls_vbrp_tot-kwert           = <lfs_vbrp>-kwert.
            ls_vbrp_tot-kbetr           = <lfs_vbrp>-kbetr.
            ls_vbrp_tot-pventa          = <lfs_vbrp>-pventa.
            ls_vbrp_tot-sumaigv         = <lfs_vbrp>-sumaigv.
            ls_vbrp_tot-sumaiscsv       = <lfs_vbrp>-sumaiscsv.
            ls_vbrp_tot-sumaisc         = <lfs_vbrp>-sumaisc.
            ls_vbrp_tot-sumaotrtri      = <lfs_vbrp>-sumaotrtri.
            ls_vbrp_tot-sumaotrcar      = <lfs_vbrp>-sumaotrcar.
*            ls_vbrp_tot-desctot         = <lfs_vbrp>-desctot.    "E-3000011712-NTP110419
            ls_vbrp_tot-imptotvent      = <lfs_vbrp>-imptotvent.
            ls_vbrp_tot-imporpermn      = <lfs_vbrp>-imporpermn.
            ls_vbrp_tot-imporpermn_mtc  = <lfs_vbrp>-imporpermn_mtc.
            ls_vbrp_tot-valrefunit      = <lfs_vbrp>-valrefunit.
            ls_vbrp_tot-totvalveno      = <lfs_vbrp>-totvalveno.
*            ls_vbrp_tot-desctoglob      = <lfs_vbrp>-desctoglob. "E-3000011712-NTP110419
*            ls_vbrp_tot-desctoxite      = <lfs_vbrp>-desctoxite. "E-3000011712-NTP110419
*{I-100920-NTP-3000014481
            ls_vbrp_tot-desctoxite      = <lfs_vbrp>-desctoxite.
            ls_vbrp_tot-desctoxite_sabi = <lfs_vbrp>-desctoxite_sabi.
            ls_vbrp_tot-desctoxite_nabi = <lfs_vbrp>-desctoxite_nabi.
            ls_vbrp_tot-cargosxite      = <lfs_vbrp>-desctoxite.
            ls_vbrp_tot-cargosxite_sabi = <lfs_vbrp>-desctoxite_sabi.
            ls_vbrp_tot-cargosxite_nabi = <lfs_vbrp>-desctoxite_nabi.
            ls_vbrp_tot-desctoglob      = <lfs_vbrp>-desctoglob.
            ls_vbrp_tot-desctoglob_sabi = <lfs_vbrp>-desctoglob_sabi.
            ls_vbrp_tot-desctoglob_nabi = <lfs_vbrp>-desctoglob_nabi.
            ls_vbrp_tot-cargosglob      = <lfs_vbrp>-desctoglob.
            ls_vbrp_tot-cargosglob_sabi = <lfs_vbrp>-desctoglob_sabi.
            ls_vbrp_tot-cargosglob_nabi = <lfs_vbrp>-desctoglob_nabi.
            ls_vbrp_tot-desctotot      = <lfs_vbrp>-desctotot.
            ls_vbrp_tot-desctotot_sabi = <lfs_vbrp>-desctotot_sabi.
            ls_vbrp_tot-desctotot_nabi = <lfs_vbrp>-desctotot_nabi.
            ls_vbrp_tot-cargostot      = <lfs_vbrp>-desctotot.
            ls_vbrp_tot-cargostot_sabi = <lfs_vbrp>-desctotot_sabi.
            ls_vbrp_tot-cargostot_nabi = <lfs_vbrp>-desctotot_nabi.
*}I-100920-NTP-3000014481
            ls_vbrp_tot-tipmonemif      = <lfs_vbrp>-tipmonemif.
            COLLECT ls_vbrp_tot INTO lt_vbrp_tot.

*{I-3000011712-NTP100419
            LOOP AT <lfs_vbrp>-t_cardes_item ASSIGNING <fs_cardes>.
              MOVE-CORRESPONDING <fs_cardes> TO ls_cardes.
              ls_cardes-vbeln = ls_vbrp_tot-vbeln.
              ls_cardes-matnr = ls_vbrp_tot-matnr.
              ls_cardes-vrkme = ls_vbrp_tot-vrkme.
              COLLECT ls_cardes INTO lt_cardes_tot.
            ENDLOOP.
*}I-3000011712-NTP100419

            APPEND INITIAL LINE TO lt_temp ASSIGNING <lfs_temp>.
            <lfs_temp> = <lfs_vbrp>.
          ENDLOOP.

          LOOP AT lt_vbrp_tot INTO ls_vbrp_tot.
            MOVE-CORRESPONDING ls_vbrp_tot TO ls_vbrp_f.
            APPEND ls_vbrp_f TO pe_vbrp_f.
          ENDLOOP.

          SORT lt_temp BY matnr ASCENDING vrkme ASCENDING posnr ASCENDING.
          DELETE ADJACENT DUPLICATES FROM lt_temp COMPARING matnr vrkme.

          LOOP AT pe_vbrp_f ASSIGNING <lfs_vbrp_f>.
            READ TABLE lt_temp ASSIGNING <lfs_temp>
                 WITH KEY matnr = <lfs_vbrp_f>-matnr
                          vrkme = <lfs_vbrp_f>-vrkme.
            IF sy-subrc EQ 0.
              " Posición: se debe tomar de la primera posición por material
              <lfs_vbrp_f>-posnr      = <lfs_temp>-posnr.
              " Texto de posición: se debe tomar de la primera posición por material
              <lfs_vbrp_f>-text_pos   = <lfs_temp>-text_pos.
            ENDIF.

*{I-3000011712-NTP100419
            LOOP AT lt_cardes_tot ASSIGNING <fs_cardes> WHERE vbeln = <lfs_vbrp_f>-vbeln
                                                     AND matnr = <lfs_vbrp_f>-matnr
                                                     AND vrkme = <lfs_vbrp_f>-vrkme.
              APPEND <fs_cardes> TO <lfs_vbrp_f>-t_cardes_item.
            ENDLOOP.
*}I-3000011712-NTP100419
          ENDLOOP.
        ENDLOOP.

      WHEN '0020879177'. "Petramas
        LOOP AT pi_vbrk ASSIGNING <lfs_vbrk>.
          CLEAR: lt_temp, lt_lines, lw_fill.", lt_vbrp_f.

          " Verificar Impresión Resumida
          CLEAR ls_thead.
          ls_thead-tdname         = <lfs_vbrk>-vbeln.
          ls_thead-tdid           = 'ZF01'.
          ls_thead-tdobject       = 'VBBK'.
          get_text_lines( EXPORTING is_thead = ls_thead
                          IMPORTING et_text  = lt_lines ).

          IF lt_lines[] IS NOT INITIAL.
            " Resumido
            LOOP AT pi_vbrp ASSIGNING <lfs_vbrp> WHERE vbeln EQ <lfs_vbrk>-vbeln.
              CLEAR ls_vbrp_tot.
              ls_vbrp_tot-vbeln           = <lfs_vbrp>-vbeln.
              ls_vbrp_tot-netwr           = <lfs_vbrp>-netwr.
              ls_vbrp_tot-mwsbp           = <lfs_vbrp>-mwsbp.
              ls_vbrp_tot-kwert           = <lfs_vbrp>-kwert.
              ls_vbrp_tot-kbetr           = <lfs_vbrp>-kbetr.
              ls_vbrp_tot-pventa          = <lfs_vbrp>-pventa.
              ls_vbrp_tot-afigv0102       = <lfs_vbrp>-afigv0102.
              ls_vbrp_tot-tipisc00102     = <lfs_vbrp>-tipisc00102.
              ls_vbrp_tot-valvenxite      = <lfs_vbrp>-valvenxite.
              ls_vbrp_tot-valvenxite_taxa = <lfs_vbrp>-valvenxite_taxa. "I-3000011712-NTP210419
              ls_vbrp_tot-sumaigv         = <lfs_vbrp>-sumaigv.
              ls_vbrp_tot-sumaiscsv       = <lfs_vbrp>-sumaiscsv.
              ls_vbrp_tot-sumaisc         = <lfs_vbrp>-sumaisc.
              ls_vbrp_tot-sumaotrtri      = <lfs_vbrp>-sumaotrtri.
              ls_vbrp_tot-sumaotrcar      = <lfs_vbrp>-sumaotrcar.
*              ls_vbrp_tot-desctot         = <lfs_vbrp>-desctot.    "E-3000011712-NTP110419
              ls_vbrp_tot-imptotvent      = <lfs_vbrp>-imptotvent.
              ls_vbrp_tot-imporpermn      = <lfs_vbrp>-imporpermn.
              ls_vbrp_tot-imporpermn_mtc  = <lfs_vbrp>-imporpermn_mtc.
              ls_vbrp_tot-valrefunit      = <lfs_vbrp>-valrefunit.
              ls_vbrp_tot-totvalveno      = <lfs_vbrp>-totvalveno.
*              ls_vbrp_tot-desctoglob      = <lfs_vbrp>-desctoglob. "E-3000011712-NTP110419
*              ls_vbrp_tot-desctoxite      = <lfs_vbrp>-desctoxite. "E-3000011712-NTP110419
*{I-100920-NTP-3000014481
              ls_vbrp_tot-desctoxite      = <lfs_vbrp>-desctoxite.
              ls_vbrp_tot-desctoxite_sabi = <lfs_vbrp>-desctoxite_sabi.
              ls_vbrp_tot-desctoxite_nabi = <lfs_vbrp>-desctoxite_nabi.
              ls_vbrp_tot-cargosxite      = <lfs_vbrp>-desctoxite.
              ls_vbrp_tot-cargosxite_sabi = <lfs_vbrp>-desctoxite_sabi.
              ls_vbrp_tot-cargosxite_nabi = <lfs_vbrp>-desctoxite_nabi.
              ls_vbrp_tot-desctoglob      = <lfs_vbrp>-desctoglob.
              ls_vbrp_tot-desctoglob_sabi = <lfs_vbrp>-desctoglob_sabi.
              ls_vbrp_tot-desctoglob_nabi = <lfs_vbrp>-desctoglob_nabi.
              ls_vbrp_tot-cargosglob      = <lfs_vbrp>-desctoglob.
              ls_vbrp_tot-cargosglob_sabi = <lfs_vbrp>-desctoglob_sabi.
              ls_vbrp_tot-cargosglob_nabi = <lfs_vbrp>-desctoglob_nabi.
              ls_vbrp_tot-desctotot      = <lfs_vbrp>-desctotot.
              ls_vbrp_tot-desctotot_sabi = <lfs_vbrp>-desctotot_sabi.
              ls_vbrp_tot-desctotot_nabi = <lfs_vbrp>-desctotot_nabi.
              ls_vbrp_tot-cargostot      = <lfs_vbrp>-desctotot.
              ls_vbrp_tot-cargostot_sabi = <lfs_vbrp>-desctotot_sabi.
              ls_vbrp_tot-cargostot_nabi = <lfs_vbrp>-desctotot_nabi.
*}I-100920-NTP-3000014481
              COLLECT ls_vbrp_tot INTO lt_vbrp_tot.

*{I-3000011712-NTP100419
              LOOP AT <lfs_vbrp>-t_cardes_item ASSIGNING <fs_cardes>.
                MOVE-CORRESPONDING <fs_cardes> TO ls_cardes.
                ls_cardes-vbeln = ls_vbrp_tot-vbeln.
                COLLECT ls_cardes INTO lt_cardes_tot.
              ENDLOOP.
*}I-3000011712-NTP100419

              APPEND INITIAL LINE TO lt_temp ASSIGNING <lfs_temp>.
              <lfs_temp> = <lfs_vbrp>.
            ENDLOOP.

            LOOP AT lt_vbrp_tot INTO ls_vbrp_tot.
              MOVE-CORRESPONDING ls_vbrp_tot TO ls_vbrp_f.
              APPEND ls_vbrp_f TO pe_vbrp_f.
            ENDLOOP.

            " Los atributos se deben tomar de la primera posición del documento
            SORT lt_temp BY vbeln ASCENDING posnr ASCENDING.
            DELETE ADJACENT DUPLICATES FROM lt_temp COMPARING vbeln.

            READ TABLE lt_temp ASSIGNING <lfs_temp> INDEX 1.

            LOOP AT pe_vbrp_f ASSIGNING <lfs_vbrp_f>.
              <lfs_vbrp_f>-posnr      = <lfs_temp>-posnr.
              <lfs_vbrp_f>-afigv      = <lfs_temp>-afigv.
              <lfs_vbrp_f>-afigv03    = <lfs_temp>-afigv03.
              <lfs_vbrp_f>-afigv04    = <lfs_temp>-afigv04.
              <lfs_vbrp_f>-afigv05    = <lfs_temp>-afigv05.
              <lfs_vbrp_f>-afigv06    = <lfs_temp>-afigv06.
              <lfs_vbrp_f>-tipisc     = <lfs_temp>-tipisc.
              <lfs_vbrp_f>-tipisc04   = <lfs_temp>-tipisc04.
              <lfs_vbrp_f>-tipisc05   = <lfs_temp>-tipisc05.
              <lfs_vbrp_f>-tipisc06   = <lfs_temp>-tipisc06.
              <lfs_vbrp_f>-uummsunat  = <lfs_temp>-uummsunat.
              <lfs_vbrp_f>-tipmonemif = <lfs_temp>-tipmonemif.
              <lfs_vbrp_f>-tipnumegre = <lfs_temp>-tipnumegre.
              <lfs_vbrp_f>-aubel      = <lfs_temp>-aubel.
              <lfs_vbrp_f>-aupos      = <lfs_temp>-aupos.
              " Unidad de Medida
              <lfs_vbrp_f>-vrkme      = 'ZUB'.
              " Cantidad
              <lfs_vbrp_f>-fkimg      = 1.
              " Valor unitario por ítem
              <lfs_vbrp_f>-kbetr      = <lfs_vbrk>-netwr.
              " Precio de venta unitario
              <lfs_vbrp_f>-pventa     = <lfs_vbrk>-netwr + <lfs_vbrk>-mwsbk.
              " Valor de venta por ítem
              <lfs_vbrp_f>-valvenxite = <lfs_vbrk>-netwr.
              <lfs_vbrp_f>-valvenxite_taxa = <lfs_vbrk>-netwr.  "I-3000011712-NTP210419
              " Descripción de Bien o Servicio

              " Borrar Líneas iniciales en blanco
              LOOP AT lt_lines INTO ls_lines.
                IF ls_lines-tdline IS NOT INITIAL.
                  lw_fill = abap_true.
                ENDIF.
                IF  ls_lines-tdline IS INITIAL
                AND lw_fill EQ abap_false.
                  DELETE lt_lines INDEX sy-tabix.
                ENDIF.
              ENDLOOP.

*{  BEGIN OF REPLACE WMR-120815
              ""              READ TABLE lt_lines INTO ls_lines INDEX 1.
              ""              IF sy-subrc EQ 0.
              ""                <lfs_vbrp_f>-arktx  = ls_lines-tdline.
              ""              ENDIF.

              ""              " Texto de posición
              ""              DELETE lt_lines INDEX 1.
              ""              LOOP AT lt_lines INTO ls_lines.
              ""                IF <lfs_vbrp_f>-text_pos IS INITIAL.
              ""                  <lfs_vbrp_f>-text_pos = ls_lines-tdline.
              ""                ELSE.
              ""                  CONCATENATE <lfs_vbrp_f>-text_pos ls_lines-tdline ASSIGNING <lfs_vbrp_f>-text_pos SEPARATED BY '#'.
              ""                ENDIF.
              ""              ENDLOOP.

              CLEAR lw_texto1.
              LOOP AT lt_lines INTO ls_lines.
                IF lw_texto1 IS INITIAL.
                  lw_texto1 = ls_lines-tdline.
                ELSE.
                  CONCATENATE lw_texto1 ls_lines-tdline INTO lw_texto1 SEPARATED BY space.
                ENDIF.
              ENDLOOP.
              " Número de caracteres de la descripción del bien o servicio
              lw_255 = gc_countchar_descr_bs.
              " Obtenemos longitud de la cadena
              lw_len = strlen( lw_texto1 ).
              " Cortamos hasta XXX caracteres
              lw_dif = ( lw_len - lw_255 ).
              " Descripción de Bien o Servicio
              IF lw_dif LE 0.
                <lfs_vbrp_f>-arktx = lw_texto1.
              ELSE.
                <lfs_vbrp_f>-arktx = lw_texto1(lw_255).
              ENDIF.
              " Texto de posición tomamos a partir del caracter definido en GC_VALOR_255
              IF lw_len GT lw_255.
                <lfs_vbrp_f>-text_pos = lw_texto1+lw_255.
              ENDIF.
*}  END OF REPLACE WMR-120815

*{I-3000011712-NTP100419
              LOOP AT lt_cardes_tot ASSIGNING <fs_cardes> WHERE vbeln = <lfs_vbrp_f>-vbeln.
                APPEND <fs_cardes> TO <lfs_vbrp_f>-t_cardes_item.
              ENDLOOP.
*}I-3000011712-NTP100419
            ENDLOOP.

          ELSE.
            " Detallado
            LOOP AT pi_vbrp ASSIGNING <lfs_vbrp> WHERE vbeln EQ <lfs_vbrk>-vbeln.
              MOVE-CORRESPONDING <lfs_vbrp> TO ls_vbrp_f.
              " Si existe Texto en Id Texto de Posición, reemplaza Texto breve de posición
              CLEAR: ls_thead, lt_lines.
              CONCATENATE <lfs_vbrp>-vbeln <lfs_vbrp>-posnr INTO ls_thead-tdname.
              ls_thead-tdid           = 'ZFP1'.
              ls_thead-tdobject       = 'VBBP'.
              get_text_lines( EXPORTING is_thead = ls_thead
                              IMPORTING et_text  = lt_lines ).
*{  BEGIN OF REPLACE WMR-210815
              ""              DELETE lt_lines WHERE tdline IS INITIAL.
              ""              " La 1ra Línea (no en blanco) del Texto de posición reemplaza el Texto breve de posición
              ""              READ TABLE lt_lines INTO ls_lines INDEX 1.
              ""              IF sy-subrc EQ 0.
              ""                ls_vbrp_f-arktx       = ls_lines-tdline.
              ""              ENDIF.

              " Borrar Líneas iniciales en blanco
              CLEAR lw_fill.
              LOOP AT lt_lines INTO ls_lines.
                IF ls_lines-tdline IS NOT INITIAL.
                  lw_fill = abap_true.
                ENDIF.
                IF  ls_lines-tdline IS INITIAL
                AND lw_fill EQ abap_false.
                  DELETE lt_lines INDEX sy-tabix.
                ENDIF.
              ENDLOOP.

              IF lt_lines[] IS NOT INITIAL.
                CLEAR lw_texto1.
                LOOP AT lt_lines INTO ls_lines.
                  IF lw_texto1 IS INITIAL.
                    lw_texto1 = ls_lines-tdline.
                  ELSE.
                    CONCATENATE lw_texto1 ls_lines-tdline INTO lw_texto1 SEPARATED BY space.
                  ENDIF.
                ENDLOOP.
                " Número de caracteres de la descripción del bien o servicio
                lw_255 = gc_countchar_descr_bs.
                " Obtenemos longitud de la cadena
                lw_len = strlen( lw_texto1 ).
                " Cortamos hasta XXX caracteres
                lw_dif = ( lw_len - lw_255 ).
                " Descripción de Bien o Servicio
                IF lw_dif LE 0.
                  ls_vbrp_f-arktx = lw_texto1.
                ELSE.
                  ls_vbrp_f-arktx = lw_texto1(lw_255).
                ENDIF.
                " Texto de posición tomamos a partir del caracter definido en GC_VALOR_255
                IF lw_len GT lw_255.
                  ls_vbrp_f-text_pos = lw_texto1+lw_255.
                ENDIF.
              ENDIF.
*}  END OF REPLACE WMR-210815
              APPEND ls_vbrp_f TO pe_vbrp_f.
            ENDLOOP.

          ENDIF.
        ENDLOOP.

        ""        LOOP AT pi_vbrp ASSIGNING <lfs_vbrp>.
        ""          MOVE-CORRESPONDING <lfs_vbrp> TO ls_vbrp_f.
        ""          APPEND ls_vbrp_f TO lt_vbrp_tot.
        ""        ENDLOOP.

      WHEN '0020744072'. "Medrock
*{  BEGIN OF INSERT WMR-180416
        " Tipos de posición Bonificados
        CLEAR ltr_pstyv.
        LOOP AT lt_constpstyv INTO lwa_constpstyv WHERE zz_opcion01 EQ 'B'.
          lwa_pstyv-low     = lwa_constpstyv-pstyv.
          lwa_pstyv-sign    = 'I'.
          lwa_pstyv-option  = 'EQ'.
          APPEND lwa_pstyv TO ltr_pstyv.
        ENDLOOP.
*}  END OF INSERT WMR-180416

        " Obtener Lotes y Fecha de vencimiento
        lt_temp[] = pi_vbrp[].
        SORT lt_temp BY matnr ASCENDING charg ASCENDING.
        DELETE ADJACENT DUPLICATES FROM lt_temp COMPARING matnr charg.

        IF lt_temp[] IS NOT INITIAL.
          SELECT matnr charg vfdat
            INTO TABLE lth_mch1
            FROM mch1
            FOR ALL ENTRIES IN lt_temp
            WHERE matnr EQ lt_temp-matnr
              AND charg EQ lt_temp-charg.
        ENDIF.

        " Posiciones bonificadas
        lt_posbonif[] = pi_vbrp[].
        LOOP AT lt_posbonif ASSIGNING <lfs_vbrp>.
          lw_tabix = sy-tabix.
          READ TABLE pi_vbrk ASSIGNING <lfs_vbrk>
               WITH KEY vbeln = <lfs_vbrp>-vbeln.
          IF  sy-subrc EQ 0
          AND ( <lfs_vbrk>-fkart EQ 'ZFNO' OR <lfs_vbrk>-fkart EQ 'ZBNO' OR <lfs_vbrk>-fkart EQ 'ZFXO' )
*{  BEGIN OF REPLACE WMR-180416
""          AND <lfs_vbrp>-pstyv EQ 'ZPPB'.
          AND ( <lfs_vbrp>-pstyv IN ltr_pstyv AND ltr_pstyv[] IS NOT INITIAL ).
*}  END OF REPLACE WMR-180416
          ELSE.
            DELETE lt_posbonif INDEX lw_tabix.
          ENDIF.
        ENDLOOP.

        LOOP AT pi_vbrk ASSIGNING <lfs_vbrk>.
          LOOP AT pi_vbrp ASSIGNING <lfs_vbrp> WHERE vbeln EQ <lfs_vbrk>-vbeln.
            CLEAR ls_vbrp_f.
            MOVE-CORRESPONDING <lfs_vbrp> TO ls_vbrp_f.
            ""          APPEND ls_vbrp_f TO lt_vbrp_tot.

            " Concatenar Lote y Fecha de Vencimiento en Descripción del Bien o Servicio
            READ TABLE lth_mch1 INTO ls_mch1
                 WITH TABLE KEY matnr = <lfs_vbrp>-matnr
                                charg = <lfs_vbrp>-charg.
            IF sy-subrc EQ 0.
              WRITE ls_mch1-vfdat TO lw_date.
              CONCATENATE ls_vbrp_f-arktx ls_mch1-charg lw_date
                INTO ls_vbrp_f-arktx SEPARATED BY space.
            ENDIF.

            " Colocar 'B' para posiciones bonificadas
            READ TABLE lt_posbonif TRANSPORTING NO FIELDS
                 WITH KEY vbeln = <lfs_vbrp>-vbeln
                          posnr = <lfs_vbrp>-posnr.
            IF sy-subrc EQ 0.
              ls_vbrp_f-zz_mat_cont = gc_charb.
            ENDIF.

            APPEND ls_vbrp_f TO pe_vbrp_f.
          ENDLOOP.
        ENDLOOP.

      WHEN '0020886783'. "Pedregal
        lt_temp[] = pi_vbrp[].
        SORT lt_temp BY matnr ASCENDING vkorg ASCENDING vtweg ASCENDING.
        DELETE ADJACENT DUPLICATES FROM lt_temp COMPARING matnr vkorg vtweg.

        IF lt_temp[] IS NOT INITIAL.
          SELECT matnr vkorg vtweg mvgr1
            INTO TABLE lth_mvke
            FROM mvke
            FOR ALL ENTRIES IN lt_temp
            WHERE matnr EQ lt_temp-matnr
              AND vkorg EQ lt_temp-vkorg
              AND vtweg EQ lt_temp-vtweg.
          DELETE lth_mvke WHERE mvgr1 IS INITIAL.
        ENDIF.
        FREE lt_temp.

        LOOP AT pi_vbrk ASSIGNING <lfs_vbrk>.
          CLEAR: lt_temp.", lt_vbrp_f.
          LOOP AT pi_vbrp ASSIGNING <lfs_vbrp> WHERE vbeln EQ <lfs_vbrk>-vbeln.
            CLEAR ls_vbrp_tot.
            " Agrupación por código de material y Calibre para Exportación
            IF <lfs_vbrk>-zz_check_expor EQ abap_true.
              ls_vbrp_tot-vbeln           = <lfs_vbrp>-vbeln.
              ls_vbrp_tot-matnr           = <lfs_vbrp>-matnr.
              ls_vbrp_tot-zzkdmat_auft    = <lfs_vbrp>-zzkdmat_auft.
              ls_vbrp_tot-arktx           = <lfs_vbrp>-arktx.
              ls_vbrp_tot-vrkme           = <lfs_vbrp>-vrkme.
              ls_vbrp_tot-fkimg           = <lfs_vbrp>-fkimg.
              ls_vbrp_tot-valvenxite      = <lfs_vbrp>-valvenxite.
              ls_vbrp_tot-valvenxite_taxa = <lfs_vbrp>-valvenxite_taxa. "I-3000011712-NTP210419
              ls_vbrp_tot-valigvant       = <lfs_vbrp>-valigvant.
              ls_vbrp_tot-afigv           = <lfs_vbrp>-afigv.
              ls_vbrp_tot-tipisc          = <lfs_vbrp>-tipisc.
              ls_vbrp_tot-netwr           = <lfs_vbrp>-netwr.
              ls_vbrp_tot-mwsbp           = <lfs_vbrp>-mwsbp.
              ls_vbrp_tot-kwert           = <lfs_vbrp>-kwert.
              ls_vbrp_tot-kbetr           = <lfs_vbrp>-kbetr.
              ls_vbrp_tot-pventa          = <lfs_vbrp>-pventa.
              ls_vbrp_tot-sumaigv         = <lfs_vbrp>-sumaigv.
              ls_vbrp_tot-sumaiscsv       = <lfs_vbrp>-sumaiscsv.
              ls_vbrp_tot-sumaisc         = <lfs_vbrp>-sumaisc.
              ls_vbrp_tot-sumaotrtri      = <lfs_vbrp>-sumaotrtri.
              ls_vbrp_tot-sumaotrcar      = <lfs_vbrp>-sumaotrcar.
*              ls_vbrp_tot-desctot         = <lfs_vbrp>-desctot.    "E-3000011712-NTP110419
              ls_vbrp_tot-imptotvent      = <lfs_vbrp>-imptotvent.
              ls_vbrp_tot-imporpermn      = <lfs_vbrp>-imporpermn.
              ls_vbrp_tot-imporpermn_mtc  = <lfs_vbrp>-imporpermn_mtc.
              ls_vbrp_tot-valrefunit      = <lfs_vbrp>-valrefunit.
              ls_vbrp_tot-totvalveno      = <lfs_vbrp>-totvalveno.
*              ls_vbrp_tot-desctoglob      = <lfs_vbrp>-desctoglob. "E-3000011712-NTP110419
*              ls_vbrp_tot-desctoxite      = <lfs_vbrp>-desctoxite. "E-3000011712-NTP110419
*{I-100920-NTP-3000014481
              ls_vbrp_tot-desctoxite      = <lfs_vbrp>-desctoxite.
              ls_vbrp_tot-desctoxite_sabi = <lfs_vbrp>-desctoxite_sabi.
              ls_vbrp_tot-desctoxite_nabi = <lfs_vbrp>-desctoxite_nabi.
              ls_vbrp_tot-cargosxite      = <lfs_vbrp>-desctoxite.
              ls_vbrp_tot-cargosxite_sabi = <lfs_vbrp>-desctoxite_sabi.
              ls_vbrp_tot-cargosxite_nabi = <lfs_vbrp>-desctoxite_nabi.
              ls_vbrp_tot-desctoglob      = <lfs_vbrp>-desctoglob.
              ls_vbrp_tot-desctoglob_sabi = <lfs_vbrp>-desctoglob_sabi.
              ls_vbrp_tot-desctoglob_nabi = <lfs_vbrp>-desctoglob_nabi.
              ls_vbrp_tot-cargosglob      = <lfs_vbrp>-desctoglob.
              ls_vbrp_tot-cargosglob_sabi = <lfs_vbrp>-desctoglob_sabi.
              ls_vbrp_tot-cargosglob_nabi = <lfs_vbrp>-desctoglob_nabi.
              ls_vbrp_tot-desctotot      = <lfs_vbrp>-desctotot.
              ls_vbrp_tot-desctotot_sabi = <lfs_vbrp>-desctotot_sabi.
              ls_vbrp_tot-desctotot_nabi = <lfs_vbrp>-desctotot_nabi.
              ls_vbrp_tot-cargostot      = <lfs_vbrp>-desctotot.
              ls_vbrp_tot-cargostot_sabi = <lfs_vbrp>-desctotot_sabi.
              ls_vbrp_tot-cargostot_nabi = <lfs_vbrp>-desctotot_nabi.
*}I-100920-NTP-3000014481
*              ls_vbrp_tot-tipmonemif      = <lfs_vbrp>-tipmonemif.
              COLLECT ls_vbrp_tot INTO lt_vbrp_tot.

*{I-3000011712-NTP100419
              LOOP AT <lfs_vbrp>-t_cardes_item ASSIGNING <fs_cardes>.
                MOVE-CORRESPONDING <fs_cardes> TO ls_cardes.
                ls_cardes-vbeln = ls_vbrp_tot-vbeln.
                ls_cardes-zzkdmat_auft = ls_vbrp_tot-zzkdmat_auft.
                ls_cardes-vrkme = ls_vbrp_tot-vrkme.
                COLLECT ls_cardes INTO lt_cardes_tot.
              ENDLOOP.
*}I-3000011712-NTP100419
            ELSE.
              MOVE-CORRESPONDING <lfs_vbrp> TO ls_vbrp_f.
              APPEND ls_vbrp_f TO pe_vbrp_f.
            ENDIF.

            APPEND INITIAL LINE TO lt_temp ASSIGNING <lfs_temp>.
            <lfs_temp> = <lfs_vbrp>.
          ENDLOOP.

          LOOP AT lt_vbrp_tot INTO ls_vbrp_tot.
            MOVE-CORRESPONDING ls_vbrp_tot TO ls_vbrp_f.
            APPEND ls_vbrp_f TO pe_vbrp_f.
          ENDLOOP.

          SORT lt_temp BY matnr ASCENDING zzkdmat_auft ASCENDING vrkme ASCENDING posnr ASCENDING.
          DELETE ADJACENT DUPLICATES FROM lt_temp COMPARING matnr zzkdmat_auft vrkme.

          LOOP AT pe_vbrp_f ASSIGNING <lfs_vbrp_f>.
            " Exportación: Recuperar datos que no deben agruparse
            IF <lfs_vbrk>-zz_check_expor EQ abap_true.
              READ TABLE lt_temp ASSIGNING <lfs_temp>
                   WITH KEY matnr         = <lfs_vbrp_f>-matnr
                            zzkdmat_auft  = <lfs_vbrp_f>-zzkdmat_auft
                            vrkme         = <lfs_vbrp_f>-vrkme.
              IF sy-subrc EQ 0.
                " Posición: se debe tomar de la 1ra posición por material y calibre
                <lfs_vbrp_f>-posnr      = <lfs_temp>-posnr.
                " Texto de posición: se debe tomar de la 1ra posición por material y calibre
                <lfs_vbrp_f>-text_pos   = <lfs_temp>-text_pos.
                " Valor unitario: se debe tomar de la 1ra posición por material y calibre
                <lfs_vbrp_f>-kbetr      = <lfs_temp>-kbetr.
                " Precio de venta unitario: se debe tomar de la 1ra posición por material y calibre
                <lfs_vbrp_f>-pventa     = <lfs_temp>-pventa.
              ENDIF.

              " Si existe Texto en Id Texto de Posición, reemplaza Texto breve de posición
              CLEAR: ls_thead, lt_lines.
              CONCATENATE <lfs_vbrp_f>-vbeln <lfs_vbrp_f>-posnr INTO ls_thead-tdname.
              ls_thead-tdid           = 'Z001'.
              ls_thead-tdobject       = 'VBBP'.
              get_text_lines( EXPORTING is_thead = ls_thead
                              IMPORTING et_text  = lt_lines ).

              " Borrar Líneas iniciales en blanco
              CLEAR lw_fill.
              LOOP AT lt_lines INTO ls_lines.
                IF ls_lines-tdline IS NOT INITIAL.
                  lw_fill = abap_true.
                ENDIF.
                IF  ls_lines-tdline IS INITIAL
                AND lw_fill EQ abap_false.
                  DELETE lt_lines INDEX sy-tabix.
                ENDIF.
              ENDLOOP.

              IF lt_lines[] IS NOT INITIAL.
                CLEAR lw_texto1.
                LOOP AT lt_lines INTO ls_lines.
                  IF lw_texto1 IS INITIAL.
                    lw_texto1 = ls_lines-tdline.
                  ELSE.
                    CONCATENATE lw_texto1 ls_lines-tdline INTO lw_texto1 SEPARATED BY space.
                  ENDIF.
                ENDLOOP.
                " Número de caracteres de la descripción del bien o servicio
                lw_255 = gc_countchar_descr_bs.
                " Obtenemos longitud de la cadena
                lw_len = strlen( lw_texto1 ).
                " Cortamos hasta XXX caracteres
                lw_dif = ( lw_len - lw_255 ).
                " Descripción de Bien o Servicio
                IF lw_dif LE 0.
                  <lfs_vbrp_f>-arktx = lw_texto1.
                ELSE.
                  <lfs_vbrp_f>-arktx = lw_texto1(lw_255).
                ENDIF.
              ENDIF.

*{I-3000011712-NTP100419
              LOOP AT lt_cardes_tot ASSIGNING <fs_cardes> WHERE vbeln = <lfs_vbrp_f>-vbeln
                                                       AND zzkdmat_auft = <lfs_vbrp_f>-zzkdmat_auft
                                                       AND vrkme = <lfs_vbrp_f>-vrkme.
                APPEND <fs_cardes> TO <lfs_vbrp_f>-t_cardes_item.
              ENDLOOP.
*}I-3000011712-NTP100419
            ENDIF.
            " Concatenar Calibre en Descripción de Bien o Servicio
            IF <lfs_vbrp_f>-zzkdmat_auft IS NOT INITIAL.
              CONCATENATE <lfs_vbrp_f>-arktx <lfs_vbrp_f>-zzkdmat_auft
                INTO <lfs_vbrp_f>-arktx SEPARATED BY space.
            ENDIF.
            " Concatenar Marca en Descripción de Bien o Servicio
            READ TABLE lth_mvke INTO ls_mvke
                 WITH TABLE KEY matnr = <lfs_vbrp_f>-matnr
                                vkorg = <lfs_vbrk>-vkorg
                                vtweg = <lfs_vbrk>-vtweg.
            IF sy-subrc EQ 0.
              CONCATENATE <lfs_vbrp_f>-arktx ls_mvke-mvgr1
                INTO <lfs_vbrp_f>-arktx SEPARATED BY space.
            ENDIF.
          ENDLOOP.

        ENDLOOP.

        ""        LOOP AT pi_vbrk ASSIGNING <lfs_vbrk>.
        ""          CLEAR: lt_vbrp_f.

        ""          IF <lfs_vbrk>-zz_check_expor EQ abap_true.  " Exportación
        ""            LOOP AT pi_vbrp ASSIGNING <lfs_vbrp> WHERE vbeln EQ <lfs_vbrk>-vbeln.
        ""              CLEAR ls_vbrp_f.
        ""              MOVE-CORRESPONDING <lfs_vbrp> TO ls_vbrp_f.

        ""              " Si existe Texto en Id Texto de Posición, reemplaza Texto breve de posición
        ""              CLEAR: ls_thead, lt_lines.
        ""              CONCATENATE <lfs_vbrp>-vbeln <lfs_vbrp>-posnr INTO ls_thead-tdname.
        ""              ls_thead-tdid           = 'Z001'.
        ""              ls_thead-tdobject       = 'VBBP'.
        ""              get_text_lines( EXPORTING is_thead = ls_thead
        ""                              IMPORTING et_text  = lt_lines ).
        ""              " Borrar Líneas iniciales en blanco
        ""              CLEAR lw_fill.
        ""              LOOP AT lt_lines INTO ls_lines.
        ""                IF ls_lines-tdline IS NOT INITIAL.
        ""                  lw_fill = abap_true.
        ""                ENDIF.
        ""                IF  ls_lines-tdline IS INITIAL
        ""                AND lw_fill EQ abap_false.
        ""                  DELETE lt_lines INDEX sy-tabix.
        ""                ENDIF.
        ""              ENDLOOP.

        ""              IF lt_lines[] IS NOT INITIAL.
        ""                CLEAR lw_texto1.
        ""                LOOP AT lt_lines INTO ls_lines.
        ""                  IF lw_texto1 IS INITIAL.
        ""                    lw_texto1 = ls_lines-tdline.
        ""                  ELSE.
        ""                    CONCATENATE lw_texto1 ls_lines-tdline INTO lw_texto1 SEPARATED BY space.
        ""                  ENDIF.
        ""                ENDLOOP.
        ""                " Número de caracteres de la descripción del bien o servicio
        ""                lw_255 = gc_countchar_descr_bs.
        ""                " Obtenemos longitud de la cadena
        ""                lw_len = strlen( lw_texto1 ).
        ""                " Cortamos hasta XXX caracteres
        ""                lw_dif = ( lw_len - lw_255 ).
        ""                " Descripción de Bien o Servicio
        ""                IF lw_dif LE 0.
        ""                  ls_vbrp_f-arktx = lw_texto1.
        ""                ELSE.
        ""                  ls_vbrp_f-arktx = lw_texto1(lw_255).
        ""                ENDIF.
        ""**                " Texto de posición tomamos a partir del caracter definido en GC_VALOR_255
        ""**                IF lw_len GT lw_255.
        ""**                  ls_vbrp_f-text_pos = lw_texto1+lw_255.
        ""**                ENDIF.
        ""              ENDIF.

        ""              " NC y ND de exportación, el calibre se envía en el
        ""              " 2do elemento del JSon de Descripción Bien o Servicio
        ""              CASE <lfs_vbrk>-tfact.
        ""                WHEN gc_tipdoc_nc OR gc_tipdoc_nd.
        ""                  ls_vbrp_f-zz_mat_cont = <lfs_vbrp>-zzkdmat_auft.
        ""              ENDCASE.

        ""              APPEND ls_vbrp_f TO lt_vbrp_f.
        ""            ENDLOOP.

        ""          ELSE.
        ""            LOOP AT pi_vbrp ASSIGNING <lfs_vbrp> WHERE vbeln EQ <lfs_vbrk>-vbeln.
        ""              MOVE-CORRESPONDING <lfs_vbrp> TO ls_vbrp_f.
        ""              APPEND ls_vbrp_f TO lt_vbrp_f.
        ""            ENDLOOP.

        ""          ENDIF.

        ""          APPEND LINES OF lt_vbrp_f TO lt_vbrp_tot.
        ""        ENDLOOP.

      WHEN '0020886706'. "Piramide
        LOOP AT pi_vbrp ASSIGNING <lfs_vbrp>.
          CLEAR ls_vbrp_f.
          MOVE-CORRESPONDING <lfs_vbrp> TO ls_vbrp_f.

          " Si existe Texto en Id Texto de Posición, reemplaza Texto breve de posición
          CLEAR: ls_thead, lt_lines.
          CONCATENATE ls_vbrp_f-vbeln ls_vbrp_f-posnr INTO ls_thead-tdname.
          ls_thead-tdid           = 'Z001'.
          ls_thead-tdobject       = 'VBBP'.
          get_text_lines( EXPORTING is_thead = ls_thead
                          IMPORTING et_text  = lt_lines ).

          " Borrar Líneas iniciales en blanco
          CLEAR lw_fill.
          LOOP AT lt_lines INTO ls_lines.
            IF ls_lines-tdline IS NOT INITIAL.
              lw_fill = abap_true.
            ENDIF.
            IF  ls_lines-tdline IS INITIAL
            AND lw_fill EQ abap_false.
              DELETE lt_lines INDEX sy-tabix.
            ENDIF.
          ENDLOOP.

          IF lt_lines[] IS NOT INITIAL.
            CLEAR lw_texto1.
            LOOP AT lt_lines INTO ls_lines.
              IF lw_texto1 IS INITIAL.
                lw_texto1 = ls_lines-tdline.
              ELSE.
                CONCATENATE lw_texto1 ls_lines-tdline INTO lw_texto1 SEPARATED BY space.
              ENDIF.
            ENDLOOP.
            " Número de caracteres de la descripción del bien o servicio
            lw_255 = gc_countchar_descr_bs.
            " Obtenemos longitud de la cadena
            lw_len = strlen( lw_texto1 ).
            " Cortamos hasta XXX caracteres
            lw_dif = ( lw_len - lw_255 ).
            " Descripción de Bien o Servicio
            IF lw_dif LE 0.
              ls_vbrp_f-arktx = lw_texto1.
            ELSE.
              ls_vbrp_f-arktx = lw_texto1(lw_255).
            ENDIF.
          ENDIF.
          APPEND ls_vbrp_f TO pe_vbrp_f.
        ENDLOOP.

******************************************************
*       COMPAÑIA MINERA BUENAVENTURA                 *
******************************************************
      WHEN '0020855404'. "Cmb

        LOOP AT pi_vbrp ASSIGNING <lfs_vbrp>.
          CLEAR ls_vbrp_f.
          MOVE-CORRESPONDING <lfs_vbrp> TO ls_vbrp_f.
          " Si existe Texto en Id Texto de Posición, reemplaza Texto breve de posición
          CLEAR: ls_thead, lt_lines, lw_texto1.
          CONCATENATE <lfs_vbrp>-vbeln <lfs_vbrp>-posnr INTO ls_thead-tdname.
          ls_thead-tdid           = 'Z001'.
          ls_thead-tdobject       = 'VBBP'.
          get_text_lines( EXPORTING is_thead = ls_thead
                          IMPORTING et_text  = lt_lines ).
          IF lt_lines[] IS NOT INITIAL.
            CALL FUNCTION 'IDMX_DI_TLINE_INTO_STRING'
              EXPORTING
                it_tline       = lt_lines
              IMPORTING
                ev_text_string = lw_texto1.
            IF lw_texto1 IS NOT INITIAL.
              ls_vbrp_f-arktx = lw_texto1.
            ENDIF.
          ENDIF.
          APPEND ls_vbrp_f TO pe_vbrp_f.
        ENDLOOP.

******************************************************
*       COMPLEJO AGROINDUSTRIAL BETA (3000005346)    *
******************************************************
      WHEN '0020673876'. "Beta

*{I-NTP-310117-3000006520
        LOOP AT lt_const INTO ls_const.
          CASE ls_const-campo.
            WHEN 'VKORG1'.
              rs_vkorg-sign   = ls_const-signo.
              rs_vkorg-option = ls_const-opcion.
              rs_vkorg-low    = ls_const-valor1.
              rs_vkorg-high   = ls_const-valor2.
              APPEND rs_vkorg TO lr_vkorg1.
*{  BEGIN OF INSERT WMR-190617-3000007466
            WHEN 'VKORG2'.
              CLEAR rs_vkorg.
              rs_vkorg-sign   = ls_const-signo.
              rs_vkorg-option = ls_const-opcion.
              rs_vkorg-low    = ls_const-valor1.
              rs_vkorg-high   = ls_const-valor2.
              APPEND rs_vkorg TO lr_vkorg2.
*}  END OF INSERT WMR-190617-3000007466
          ENDCASE.
        ENDLOOP.
*}I-NTP-310117-3000006520

        LOOP AT pi_vbrp ASSIGNING <lfs_vbrp>.
          CLEAR ls_vbrp_f.
          MOVE-CORRESPONDING <lfs_vbrp> TO ls_vbrp_f.
*{  BEGIN OF INSERT WMR-030217-3000006519
          " Adicionar Prefijo por Grupo de Artículos
          CLEAR lw_texto1.
          ""          CASE <lfs_vbrp>-matkl.                                                  "E-WMR-080817-3000007896
          ""            WHEN '058'. lw_texto1 = 'ESPARRAGO VERDE FRESCO'.                     "E-WMR-080817-3000007896
          ""            WHEN '198'. lw_texto1 = 'ESPARRAGO VERDE CONGELADO'.                  "E-WMR-080817-3000007896
          ""          ENDCASE.                                                                "E-WMR-080817-3000007896
          CLEAR select.                                                           "I-WMR-080817-3000007896
          sublist = 'LTEXT'.  APPEND sublist TO select.                           "I-WMR-080817-3000007896
          from    = 'ZOSTB_FEXPTPOS'.                                             "I-WMR-080817-3000007896
          where   = 'MATKL EQ <LFS_VBRP>-MATKL'.                                  "I-WMR-080817-3000007896
          TRY .                                                                   "I-WMR-080817-3000007896
              SELECT SINGLE (select) INTO lw_texto1                               "I-WMR-080817-3000007896
                FROM (from)                                                       "I-WMR-080817-3000007896
                WHERE (where).                                                    "I-WMR-080817-3000007896
            CATCH cx_root INTO lo_error.                                          "I-WMR-080817-3000007896
          ENDTRY.                                                                 "I-WMR-080817-3000007896
          IF lw_texto1 IS NOT INITIAL.
            CONCATENATE lw_texto1 ls_vbrp_f-arktx INTO ls_vbrp_f-arktx SEPARATED BY space.
          ENDIF.
*}  END OF INSERT WMR-030217-3000006519
          " Texto de Posición
          CLEAR: ls_thead, lw_texto1.
          ls_thead-tdid     = 'Z020'.
          ls_thead-tdobject = 'VBBP'.
          CONCATENATE <lfs_vbrp>-vbeln <lfs_vbrp>-posnr INTO ls_thead-tdname.
          lw_texto1 = get_text( pi_name   = ls_thead-tdname
                                pi_id     = ls_thead-tdid
                                pi_object = ls_thead-tdobject ).
          IF lw_texto1 IS NOT INITIAL.
            CONCATENATE ls_vbrp_f-arktx lw_texto1 INTO ls_vbrp_f-arktx SEPARATED BY space.
          ENDIF.

          AT LAST.
            READ TABLE pi_vbrk ASSIGNING <lfs_vbrk>
                 WITH KEY vbeln = <lfs_vbrp>-vbeln.
            IF sy-subrc EQ 0.

              IF <lfs_vbrk>-zz_check_expor EQ abap_true.  " Exportación
                CASE <lfs_vbrk>-tfact.

                  WHEN gc_tipdoc_fa.
                    " Texto Pie de Página
                    CLEAR: ls_thead, lw_texto1.
                    ls_thead-tdid     = 'Z086'.
                    ls_thead-tdobject = 'VBBK'.
                    ls_thead-tdname   = <lfs_vbrk>-vbeln.
                    lw_texto1 = format_idtext_type_paragraph( ls_thead ).

                    ls_vbrp_f-text_pos = lw_texto1.

                    " Certificado con Global Gap
                    IF <lfs_vbrk>-vkorg IN lr_vkorg1.                     "I-NTP-310117-3000006520

                      CLEAR: lw_texto1.
                      SELECT SINGLE vtext INTO lw_texto1
                        FROM tvkot
                        WHERE spras EQ sy-langu
                          AND vkorg EQ <lfs_vbrk>-vkorg.
                      IF lw_texto1 IS NOT INITIAL.
                        CONCATENATE lw_texto1 'CERTIFICADO CON GLOBAL GAP' INTO lw_texto1 SEPARATED BY space.
                        TRANSLATE lw_texto1 TO UPPER CASE.

                        IF ls_vbrp_f-text_pos IS INITIAL.
                          ls_vbrp_f-text_pos = lw_texto1.
                        ELSE.
                          CONCATENATE ls_vbrp_f-text_pos lw_texto1 INTO ls_vbrp_f-text_pos SEPARATED BY '##'.
                        ENDIF.
                      ENDIF.
                    ENDIF.                                                "I-NTP-310117-3000006520

                    " Exportación Bajo el Régimen del Drawback
                    IF ( <lfs_vbrk>-vkorg IN lr_vkorg2 AND lr_vkorg2[] IS NOT INITIAL ).          "I-WMR-190617-3000007466
                    ELSE.                                                                         "I-WMR-190617-3000007466
                      lw_texto1 = 'EXPORTACION BAJO EL REGIMEN DEL DRAWBACK'.
                      IF ls_vbrp_f-text_pos IS INITIAL.
                        ls_vbrp_f-text_pos = lw_texto1.
                      ELSE.
                        CONCATENATE ls_vbrp_f-text_pos lw_texto1 INTO ls_vbrp_f-text_pos SEPARATED BY '#'.
                      ENDIF.
                    ENDIF.                                                                        "I-WMR-190617-3000007466

                    " Condición de Pago
                    CLEAR: lw_texto1, ls_t052u.
                    READ TABLE lt_t052u INTO ls_t052u
                         WITH KEY spras = sy-langu
                                  zterm = <lfs_vbrk>-zterm.
                    IF sy-subrc EQ 0.
                      lw_texto1 = ls_t052u-text1. TRANSLATE lw_texto1 TO UPPER CASE.
                      IF ls_vbrp_f-text_pos IS INITIAL.
                        ls_vbrp_f-text_pos = lw_texto1.
                      ELSE.
                        CONCATENATE ls_vbrp_f-text_pos lw_texto1 INTO ls_vbrp_f-text_pos SEPARATED BY '#'.
                      ENDIF.
                    ENDIF.

                  WHEN gc_tipdoc_nc OR gc_tipdoc_nd.
                    " Texto Pie de Página ( Lote )
                    CLEAR: ls_thead, lw_texto1.
                    ls_thead-tdid     = 'Z086'.
                    ls_thead-tdobject = 'VBBK'.
                    ls_thead-tdname   = <lfs_vbrk>-vbeln.
                    lw_texto1 = format_idtext_type_paragraph( ls_thead ).

                    ls_vbrp_f-text_pos = lw_texto1.

                    " AWB/ Contenedor
                    IF <lfs_vbrk>-zz_sdrefer IS NOT INITIAL.
                      CLEAR: ls_thead, lw_texto1.
                      ls_thead-tdid     = 'Z094'.
                      ls_thead-tdobject = 'VBBK'.
                      ls_thead-tdname   = <lfs_vbrk>-zz_sdrefer.
                      lw_texto1 = get_text( pi_name   = ls_thead-tdname
                                            pi_id     = ls_thead-tdid
                                            pi_object = ls_thead-tdobject ).
                      IF ls_vbrp_f-text_pos IS INITIAL.
                        ls_vbrp_f-text_pos = lw_texto1.
                      ELSE.
                        CONCATENATE ls_vbrp_f-text_pos lw_texto1 INTO ls_vbrp_f-text_pos SEPARATED BY '#'.
                      ENDIF.
                    ENDIF.

                ENDCASE.

              ELSE. " Nacional

                " Texto Pie de Página ( Lote )
                CLEAR: ls_thead, lw_texto1.
                ls_thead-tdid     = 'Z086'.
                ls_thead-tdobject = 'VBBK'.
                ls_thead-tdname   = <lfs_vbrk>-vbeln.
                lw_texto1 = get_text( pi_name   = ls_thead-tdname
                                      pi_id     = ls_thead-tdid
                                      pi_object = ls_thead-tdobject ).
                ls_vbrp_f-text_pos = lw_texto1.

                CASE <lfs_vbrk>-tfact.
                  WHEN gc_tipdoc_fa OR gc_tipdoc_bl.

                    " Certificado con Global Gap
                    IF <lfs_vbrk>-vkorg IN lr_vkorg1.                     "I-NTP-310117-3000006520

                      CLEAR: lw_texto1.
                      SELECT SINGLE vtext INTO lw_texto1
                        FROM tvkot
                        WHERE spras EQ sy-langu
                          AND vkorg EQ <lfs_vbrk>-vkorg.
                      IF lw_texto1 IS NOT INITIAL.
                        CONCATENATE lw_texto1 'CERTIFICADO CON GLOBAL GAP' INTO lw_texto1 SEPARATED BY space.
                        TRANSLATE lw_texto1 TO UPPER CASE.

                        IF ls_vbrp_f-text_pos IS INITIAL.
                          ls_vbrp_f-text_pos = lw_texto1.
                        ELSE.
                          CONCATENATE ls_vbrp_f-text_pos lw_texto1 INTO ls_vbrp_f-text_pos SEPARATED BY '##'.
                        ENDIF.
                      ENDIF.
                    ENDIF.                                                "I-NTP-310117-3000006520

                ENDCASE.

              ENDIF.
            ENDIF.
          ENDAT.
          APPEND ls_vbrp_f TO pe_vbrp_f.
        ENDLOOP.

********************************************
*       AGROINDUSTRIAS AIB (3000006249)    *
********************************************
      WHEN '0020311006'  "AIB
        OR '0020863116'. "AIB CLOUD
        DATA: lt_vbrp1 TYPE ltt_vbrp.                     "I-140520-NTP-3000014470

        READ TABLE pi_vbrk ASSIGNING <lfs_vbrk> INDEX 1.  "I-140520-NTP-3000014470
        lt_vbrp1 = pi_vbrp.                               "I-140520-NTP-3000014470

*{I-140520-NTP-3000014470
        DATA: lr_dev_auart TYPE RANGE OF auart,
              lr_dev_fkart TYPE RANGE OF fkart,
              ls_auart     LIKE LINE OF lr_dev_auart,
              ls_fkart     LIKE LINE OF lr_dev_fkart,
              l_auart      TYPE auart.

        "1.Devolución (EXP-NAC) - Agrupar por material
        LOOP AT lt_const INTO ls_const.
          CASE ls_const-campo.
            WHEN 'DEV_AUART'.
              ls_auart-sign   = ls_const-signo.
              ls_auart-option = ls_const-opcion.
              ls_auart-low    = ls_const-valor1.
              ls_auart-high   = ls_const-valor2.
              APPEND ls_auart TO lr_dev_auart.
            WHEN 'DEV_FKART'.
              ls_fkart-sign   = ls_const-signo.
              ls_fkart-option = ls_const-opcion.
              ls_fkart-low    = ls_const-valor1.
              ls_fkart-high   = ls_const-valor2.
              APPEND ls_fkart TO lr_dev_fkart.
          ENDCASE.
        ENDLOOP.

        "1.1 Nota de credito
        IF <lfs_vbrk>-fkart IN lr_dev_fkart AND lr_dev_fkart IS NOT INITIAL.

          "1.1.1 Pedido referencia
          SELECT SINGLE auart INTO l_auart FROM vbak WHERE vbeln = <lfs_vbrk>-zz_vbeln.
          IF l_auart IN lr_dev_auart AND lr_dev_auart IS NOT INITIAL.

            "Agrupar posiciones por material
            lt_temp = pi_vbrp.
            SORT lt_temp BY matnr.
            DELETE ADJACENT DUPLICATES FROM lt_temp COMPARING matnr.

            LOOP AT lt_temp ASSIGNING <lfs_temp>.
              <lfs_temp>-uecha = <lfs_temp>-posnr.
              MODIFY lt_vbrp1 FROM <lfs_temp> TRANSPORTING uecha WHERE matnr = <lfs_temp>-matnr.
            ENDLOOP.

            FREE lt_temp.
          ENDIF.
        ENDIF.
*}I-140520-NTP-3000014470

        LOOP AT pi_vbrk ASSIGNING <lfs_vbrk>.
          CLEAR: lt_temp.", lt_vbrp_f.

          " 1. Agrupar posiciones con partición de Lote
*          LOOP AT pi_vbrp ASSIGNING <lfs_vbrp> WHERE vbeln EQ <lfs_vbrk>-vbeln "E-140520-NTP-3000014470
          LOOP AT lt_vbrp1 ASSIGNING <lfs_vbrp> WHERE vbeln EQ <lfs_vbrk>-vbeln  "I-140520-NTP-3000014470
                                                 AND uecha IS NOT INITIAL.
            CLEAR ls_vbrp_tot.
            ls_vbrp_tot-vbeln           = <lfs_vbrp>-vbeln.
            ls_vbrp_tot-posnr           = <lfs_vbrp>-uecha.
            ls_vbrp_tot-fkimg           = <lfs_vbrp>-fkimg.
            ls_vbrp_tot-vrkme           = <lfs_vbrp>-vrkme.
            ls_vbrp_tot-netwr           = <lfs_vbrp>-netwr.
            ls_vbrp_tot-mwsbp           = <lfs_vbrp>-mwsbp.
            ls_vbrp_tot-kwert           = <lfs_vbrp>-kwert.
            ls_vbrp_tot-kbetr           = <lfs_vbrp>-kbetr.
            ls_vbrp_tot-pventa          = <lfs_vbrp>-pventa.
            ls_vbrp_tot-afigv0102       = <lfs_vbrp>-afigv0102.
            ls_vbrp_tot-tipisc00102     = <lfs_vbrp>-tipisc00102.
            ls_vbrp_tot-valvenxite      = <lfs_vbrp>-valvenxite.
            ls_vbrp_tot-valvenxite_taxa = <lfs_vbrp>-valvenxite_taxa. "I-3000011712-NTP210419
            ls_vbrp_tot-sumaigv         = <lfs_vbrp>-sumaigv.
            ls_vbrp_tot-sumaiscsv       = <lfs_vbrp>-sumaiscsv.
            ls_vbrp_tot-sumaisc         = <lfs_vbrp>-sumaisc.
            ls_vbrp_tot-sumaotrtri      = <lfs_vbrp>-sumaotrtri.
            ls_vbrp_tot-sumaotrcar      = <lfs_vbrp>-sumaotrcar.
*            ls_vbrp_tot-desctot         = <lfs_vbrp>-desctot.    "E-3000011712-NTP110419
            ls_vbrp_tot-imptotvent      = <lfs_vbrp>-imptotvent.
            ls_vbrp_tot-imporpermn      = <lfs_vbrp>-imporpermn.
            ls_vbrp_tot-imporpermn_mtc  = <lfs_vbrp>-imporpermn_mtc.
            ls_vbrp_tot-valrefunit      = <lfs_vbrp>-valrefunit.
            ls_vbrp_tot-totvalveno      = <lfs_vbrp>-totvalveno.
*            ls_vbrp_tot-desctoglob      = <lfs_vbrp>-desctoglob. "E-3000011712-NTP110419
*            ls_vbrp_tot-desctoxite      = <lfs_vbrp>-desctoxite. "E-3000011712-NTP110419
*{I-100920-NTP-3000014481
            ls_vbrp_tot-desctoxite      = <lfs_vbrp>-desctoxite.
            ls_vbrp_tot-desctoxite_sabi = <lfs_vbrp>-desctoxite_sabi.
            ls_vbrp_tot-desctoxite_nabi = <lfs_vbrp>-desctoxite_nabi.
            ls_vbrp_tot-cargosxite      = <lfs_vbrp>-cargosxite.
            ls_vbrp_tot-cargosxite_sabi = <lfs_vbrp>-cargosxite_sabi.
            ls_vbrp_tot-cargosxite_nabi = <lfs_vbrp>-cargosxite_nabi.
            ls_vbrp_tot-desctoglob      = <lfs_vbrp>-desctoglob.
            ls_vbrp_tot-desctoglob_sabi = <lfs_vbrp>-desctoglob_sabi.
            ls_vbrp_tot-desctoglob_nabi = <lfs_vbrp>-desctoglob_nabi.
            ls_vbrp_tot-cargosglob      = <lfs_vbrp>-cargosglob.
            ls_vbrp_tot-cargosglob_sabi = <lfs_vbrp>-cargosglob_sabi.
            ls_vbrp_tot-cargosglob_nabi = <lfs_vbrp>-cargosglob_nabi.
            ls_vbrp_tot-desctotot      = <lfs_vbrp>-desctotot.
            ls_vbrp_tot-desctotot_sabi = <lfs_vbrp>-desctotot_sabi.
            ls_vbrp_tot-desctotot_nabi = <lfs_vbrp>-desctotot_nabi.
            ls_vbrp_tot-cargostot      = <lfs_vbrp>-cargostot.
            ls_vbrp_tot-cargostot_sabi = <lfs_vbrp>-cargostot_sabi.
            ls_vbrp_tot-cargostot_nabi = <lfs_vbrp>-cargostot_nabi.
*}I-100920-NTP-3000014481
            ls_vbrp_tot-zz_dscto_01     = <lfs_vbrp>-zz_dscto_01.
            ls_vbrp_tot-zz_dscto_02     = <lfs_vbrp>-zz_dscto_02.
            ls_vbrp_tot-ntgew           = <lfs_vbrp>-ntgew.
            ls_vbrp_tot-brgew           = <lfs_vbrp>-brgew.
            COLLECT ls_vbrp_tot INTO lt_vbrp_tot.

*{I-3000011712-NTP100419
            LOOP AT <lfs_vbrp>-t_cardes_item ASSIGNING <fs_cardes>.
              MOVE-CORRESPONDING <fs_cardes> TO ls_cardes.
              ls_cardes-vbeln = ls_vbrp_tot-vbeln.
              ls_cardes-uecha = <lfs_vbrp>-uecha.
              COLLECT ls_cardes INTO lt_cardes_tot.
            ENDLOOP.
*}I-3000011712-NTP100419

            APPEND INITIAL LINE TO lt_temp ASSIGNING <lfs_temp>.
            <lfs_temp> = <lfs_vbrp>.
          ENDLOOP.

          LOOP AT lt_vbrp_tot INTO ls_vbrp_tot.
            MOVE-CORRESPONDING ls_vbrp_tot TO ls_vbrp_f.
            APPEND ls_vbrp_f TO pe_vbrp_f.
          ENDLOOP.

          IF pe_vbrp_f[] IS NOT INITIAL.
            " Los atributos se deben tomar de la primera posición del material y posición origen de lote
*            SORT lt_temp BY vbeln ASCENDING uecha ASCENDING posnr ASCENDING. "E-041120-NTP-3000015502
            SORT lt_temp BY vbeln ASCENDING uecha ASCENDING pventa DESCENDING. "I-041120-NTP-3000015502
            DELETE ADJACENT DUPLICATES FROM lt_temp COMPARING vbeln uecha.

            LOOP AT pe_vbrp_f ASSIGNING <lfs_vbrp_f>.
*{I-3000011712-NTP100419
              LOOP AT lt_cardes_tot ASSIGNING <fs_cardes> WHERE vbeln = <lfs_vbrp_f>-vbeln
                                                       AND uecha = <lfs_vbrp_f>-posnr.
                APPEND <fs_cardes> TO <lfs_vbrp_f>-t_cardes_item.
              ENDLOOP.
*}I-3000011712-NTP100419

              READ TABLE lt_temp ASSIGNING <lfs_temp>
                   WITH KEY vbeln = <lfs_vbrp_f>-vbeln
                            uecha = <lfs_vbrp_f>-posnr.
              CHECK sy-subrc EQ 0.
*{  BEGIN OF INSERT WMR-180117-3000006249
              " Obtener Unidad de Medida de la posición principal
              CLEAR ls_vbrp.
              SELECT SINGLE vbeln posnr vrkme
                INTO CORRESPONDING FIELDS OF ls_vbrp
                FROM vbrp
                WHERE vbeln EQ <lfs_temp>-vbeln
                  AND posnr EQ <lfs_temp>-uecha.
              CHECK sy-subrc EQ 0.
              " Si la UMV de la posición superior de lote es diferente a la UMV de las posiciones de partición
              IF ls_vbrp-vrkme NE <lfs_temp>-vrkme.
                " Convertir Cantidad a UMV de la posición superior
                CALL FUNCTION 'MATERIAL_UNIT_CONVERSION'
                  EXPORTING
                    input                = <lfs_vbrp_f>-fkimg
                    kzmeinh              = ' '
                    matnr                = <lfs_temp>-matnr
                    meinh                = ls_vbrp-vrkme
                    meins                = <lfs_temp>-vrkme
                  IMPORTING
                    output               = ls_vbrp-fkimg
                    umren                = ls_vbrp-umvkz
                    umrez                = ls_vbrp-umvkn
                  EXCEPTIONS
                    conversion_not_found = 1
                    input_invalid        = 2
                    material_not_found   = 3
                    meinh_not_found      = 4
                    meins_missing        = 5
                    no_meinh             = 6
                    output_invalid       = 7
                    overflow             = 8
                    OTHERS               = 9.
                IF sy-subrc EQ 0.
                  " UMV convertida
                  <lfs_vbrp_f>-vrkme      = ls_vbrp-vrkme.
                  " Cantidad convertida
                  <lfs_vbrp_f>-fkimg      = ls_vbrp-fkimg.
*{E-WMR-11102021-3000017949
**                  IF ls_vbrp-umvkz NE 0.
**                    " Convertir Valor unitario por ítem por el factor
**                    <lfs_temp>-kbetr      = <lfs_temp>-kbetr * ( ls_vbrp-umvkn / ls_vbrp-umvkz ).
**                    " Convertir Precio de venta unitario por el factor
**                    <lfs_temp>-pventa     = <lfs_temp>-pventa * ( ls_vbrp-umvkn / ls_vbrp-umvkz ).
**                    " Convertir Valor referencial unitario por el factor
**                    <lfs_temp>-valrefunit = <lfs_temp>-valrefunit * ( ls_vbrp-umvkn / ls_vbrp-umvkz ).
**                  ENDIF.
*}E-WMR-11102021-3000017949
                ENDIF.
*{E-WMR-11102021-3000017949
**              ELSE.                                                                      "I-PBM010921-3000017694
**                "recalcular valor unitario x item                                        "I-PBM010921-3000017694
**                <lfs_temp>-kbetr = <lfs_vbrp_f>-valvenxite / <lfs_vbrp_f>-fkimg.         "I-PBM010921-3000017694
*}E-WMR-11102021-3000017949
              ENDIF.
*{I-WMR-11102021-3000017949
              " Recalcular Valor unitario por ítem
              IF <lfs_temp>-kbetr > 0.
                <lfs_temp>-kbetr = ( <lfs_vbrp_f>-valvenxite - <lfs_vbrp_f>-cargosxite + <lfs_vbrp_f>-desctoxite ) / <lfs_vbrp_f>-fkimg.
              ENDIF.
              " Recalcular Precio de venta unitario
              IF <lfs_temp>-pventa > 0.
                <lfs_temp>-pventa = ( <lfs_vbrp_f>-valvenxite + <lfs_vbrp_f>-mwsbp ) / <lfs_vbrp_f>-fkimg.
              ENDIF.
              " Recalcular Valor referencial unitario
              IF <lfs_temp>-valrefunit > 0.
                <lfs_temp>-valrefunit = <lfs_vbrp_f>-valvenxite / <lfs_vbrp_f>-fkimg.
              ENDIF.
*}I-WMR-11102021-3000017949
*}  END OF INSERT WMR-180117-3000006249
              <lfs_vbrp_f>-afigv      = <lfs_temp>-afigv.
              <lfs_vbrp_f>-tributo    = <lfs_temp>-tributo. "I-100920-NTP-3000014481
              <lfs_vbrp_f>-afigv03    = <lfs_temp>-afigv03.
              <lfs_vbrp_f>-afigv04    = <lfs_temp>-afigv04.
              <lfs_vbrp_f>-afigv05    = <lfs_temp>-afigv05.
              <lfs_vbrp_f>-afigv06    = <lfs_temp>-afigv06.
              <lfs_vbrp_f>-tipisc     = <lfs_temp>-tipisc.
              <lfs_vbrp_f>-tipisc04   = <lfs_temp>-tipisc04.
              <lfs_vbrp_f>-tipisc05   = <lfs_temp>-tipisc05.
              <lfs_vbrp_f>-tipisc06   = <lfs_temp>-tipisc06.
              <lfs_vbrp_f>-uummsunat  = <lfs_temp>-uummsunat.
              <lfs_vbrp_f>-tipmonemif = <lfs_temp>-tipmonemif.
              <lfs_vbrp_f>-tipnumegre = <lfs_temp>-tipnumegre.
              <lfs_vbrp_f>-matnr      = <lfs_temp>-matnr.
              <lfs_vbrp_f>-arktx      = <lfs_temp>-arktx.
              <lfs_vbrp_f>-text_pos   = <lfs_temp>-text_pos.
              " Valor unitario por ítem
              <lfs_vbrp_f>-kbetr      = <lfs_temp>-kbetr.
              " Precio de venta unitario
              <lfs_vbrp_f>-pventa     = <lfs_temp>-pventa.
              " Valor referencial unitario
              <lfs_vbrp_f>-valrefunit = <lfs_temp>-valrefunit.
            ENDLOOP.
          ENDIF.

          " 2. Adicionar posiciones sin partición de Lote
*          LOOP AT pi_vbrp ASSIGNING <lfs_vbrp> WHERE vbeln EQ <lfs_vbrk>-vbeln "E-140520-NTP-3000014470
          LOOP AT lt_vbrp1 ASSIGNING <lfs_vbrp> WHERE vbeln EQ <lfs_vbrk>-vbeln  "I-140520-NTP-3000014470
                                                 AND uecha IS INITIAL.
            CLEAR ls_vbrp_f.
            MOVE-CORRESPONDING <lfs_vbrp> TO ls_vbrp_f.
            APPEND ls_vbrp_f TO pe_vbrp_f.
          ENDLOOP.

*{  BEGIN OF INSERT WMR-100217-3000006581
*          CASE pi_tipdoc.                                                          "E-PBM270319-3000011466
*            WHEN gc_tipdoc_fa.  " Facturas                                         "E-PBM270319-3000011466
*              IF <lfs_vbrk>-zz_check_expor EQ abap_true. " Exportación             "E-PBM270319-3000011466
          LOOP AT pe_vbrp_f ASSIGNING <lfs_vbrp_f>.
            " Texto Comercial del Material
            CLEAR: ls_thead, lt_lines, lw_texto1.

            IF <lfs_vbrk>-zz_check_expor EQ abap_true. " Exportación                                    "I-PBM270319-3000011466
              ls_thead-tdspras  = 'S'.
              ls_thead-tdid     = '0001'.
              ls_thead-tdobject = 'MVKE'.
              CONCATENATE <lfs_vbrp_f>-matnr <lfs_vbrk>-vkorg <lfs_vbrk>-vtweg INTO ls_thead-tdname RESPECTING BLANKS.
            ELSE.                                                                                       "I-PBM270319-3000011466
              ls_thead-tdspras  = 'S'.                                                                  "I-PBM270319-3000011466
              ls_thead-tdid     = '0001'.                                                               "I-PBM270319-3000011466
              ls_thead-tdobject = 'VBBP'.                                                               "I-PBM270319-3000011466
              CONCATENATE <lfs_vbrp_f>-vbeln <lfs_vbrp_f>-posnr INTO ls_thead-tdname RESPECTING BLANKS. "I-PBM270319-3000011466
            ENDIF.                                                                                      "I-PBM270319-3000011466

            get_text_lines( EXPORTING is_thead = ls_thead
                            IMPORTING et_text  = lt_lines ).
            LOOP AT lt_lines INTO ls_lines.
              IF lw_texto1 IS INITIAL.
                lw_texto1 = ls_lines-tdline.
              ELSE.
                CONCATENATE lw_texto1 ls_lines-tdline INTO lw_texto1 SEPARATED BY space.
              ENDIF.
            ENDLOOP.
            " Si existe Texto Comercial del Material, este reemplaza el Texto de posición
            IF lw_texto1 IS NOT INITIAL.
              <lfs_vbrp_f>-arktx = lw_texto1.
            ENDIF.
          ENDLOOP.
*              ENDIF.                                                                 "E-PBM270319-3000011466
*          ENDCASE.                                                                   "E-PBM270319-3000011466
*}  END OF INSERT WMR-100217-3000006581

        ENDLOOP.

        SORT pe_vbrp_f BY vbeln ASCENDING posnr ASCENDING.

*{  BEGIN OF INSERT WMR-01042020-3000014097
        LOOP AT pe_vbrp_f ASSIGNING <lfs_vbrp_f>.
          AT END OF vbeln.
            " Agregar Observaciones de cabecera a la Descripción del material de la última posición
            READ TABLE pi_vbrk ASSIGNING <lfs_vbrk> WITH KEY vbeln = <lfs_vbrp_f>-vbeln.
            IF sy-subrc = 0 AND ( pi_tipdoc = gc_tipdoc_nc OR pi_tipdoc = gc_tipdoc_nd ).
              CLEAR: ls_thead, lw_texto1.
              ls_thead-tdname   = <lfs_vbrk>-vbeln.
              ls_thead-tdid     = '0002'.
              ls_thead-tdobject = 'VBBK'.
              SELECT SINGLE spras INTO ls_thead-tdspras FROM kna1 WHERE kunnr = <lfs_vbrk>-kunag.
              lw_texto1 = get_text( pi_name   = ls_thead-tdname
                                    pi_id     = ls_thead-tdid
                                    pi_object = ls_thead-tdobject
                                    pi_spras  = ls_thead-tdspras ).
              IF lw_texto1 IS INITIAL.
                ls_thead-tdspras = sy-langu.
                lw_texto1 = get_text( pi_name   = ls_thead-tdname
                                      pi_id     = ls_thead-tdid
                                      pi_object = ls_thead-tdobject
                                      pi_spras  = ls_thead-tdspras ).
              ENDIF.
              IF lw_texto1 IS NOT INITIAL.
                " Descripción detallada del servicio prestado: Alternativo para el PDF
                <lfs_vbrp_f>-zz_dessrv_alt = <lfs_vbrp_f>-arktx.
                CONCATENATE <lfs_vbrp_f>-arktx '- Observación:' lw_texto1
                  INTO <lfs_vbrp_f>-arktx SEPARATED BY space.
                " Texto de Posición: Alternativo para el PDF
                CONCATENATE <lfs_vbrp_f>-text_pos '- Observación:' lw_texto1
                  INTO <lfs_vbrp_f>-zz_txtpos_alt SEPARATED BY space.
              ENDIF.
            ENDIF.
          ENDAT.
        ENDLOOP.
*}  END OF INSERT WMR-01042020-3000014097

********************************************
*       DANPER (3000007140)    *
********************************************
      WHEN '0020974592'. "Danper
        LOOP AT pi_vbrk ASSIGNING <lfs_vbrk>.
          CLEAR: lt_temp.", lt_vbrp_f.

          " 1. Agrupar posiciones con partición de Lote
          LOOP AT pi_vbrp ASSIGNING <lfs_vbrp> WHERE vbeln EQ <lfs_vbrk>-vbeln
                                                 AND uecha IS NOT INITIAL.
            CLEAR ls_vbrp_tot.
            ls_vbrp_tot-vbeln           = <lfs_vbrp>-vbeln.
            ls_vbrp_tot-posnr           = <lfs_vbrp>-uecha.
            ls_vbrp_tot-fkimg           = <lfs_vbrp>-fkimg.
            ls_vbrp_tot-vrkme           = <lfs_vbrp>-vrkme.
            ls_vbrp_tot-netwr           = <lfs_vbrp>-netwr.
            ls_vbrp_tot-mwsbp           = <lfs_vbrp>-mwsbp.
            ls_vbrp_tot-kwert           = <lfs_vbrp>-kwert.
            ls_vbrp_tot-kbetr           = <lfs_vbrp>-kbetr.
            ls_vbrp_tot-pventa          = <lfs_vbrp>-pventa.
            ls_vbrp_tot-afigv0102       = <lfs_vbrp>-afigv0102.
            ls_vbrp_tot-tipisc00102     = <lfs_vbrp>-tipisc00102.
            ls_vbrp_tot-valvenxite      = <lfs_vbrp>-valvenxite.
            ls_vbrp_tot-valvenxite_taxa = <lfs_vbrp>-valvenxite_taxa. "I-3000011712-NTP210419
            ls_vbrp_tot-sumaigv         = <lfs_vbrp>-sumaigv.
            ls_vbrp_tot-sumaiscsv       = <lfs_vbrp>-sumaiscsv.
            ls_vbrp_tot-sumaisc         = <lfs_vbrp>-sumaisc.
            ls_vbrp_tot-sumaotrtri      = <lfs_vbrp>-sumaotrtri.
            ls_vbrp_tot-sumaotrcar      = <lfs_vbrp>-sumaotrcar.
*            ls_vbrp_tot-desctot         = <lfs_vbrp>-desctot.    "E-3000011712-NTP110419
            ls_vbrp_tot-imptotvent      = <lfs_vbrp>-imptotvent.
            ls_vbrp_tot-imporpermn      = <lfs_vbrp>-imporpermn.
            ls_vbrp_tot-imporpermn_mtc  = <lfs_vbrp>-imporpermn_mtc.
            ls_vbrp_tot-valrefunit      = <lfs_vbrp>-valrefunit.
            ls_vbrp_tot-totvalveno      = <lfs_vbrp>-totvalveno.
*            ls_vbrp_tot-desctoglob      = <lfs_vbrp>-desctoglob. "E-3000011712-NTP110419
*            ls_vbrp_tot-desctoxite      = <lfs_vbrp>-desctoxite. "E-3000011712-NTP110419
*{I-100920-NTP-3000014481
            ls_vbrp_tot-desctoxite      = <lfs_vbrp>-desctoxite.
            ls_vbrp_tot-desctoxite_sabi = <lfs_vbrp>-desctoxite_sabi.
            ls_vbrp_tot-desctoxite_nabi = <lfs_vbrp>-desctoxite_nabi.
            ls_vbrp_tot-cargosxite      = <lfs_vbrp>-desctoxite.
            ls_vbrp_tot-cargosxite_sabi = <lfs_vbrp>-desctoxite_sabi.
            ls_vbrp_tot-cargosxite_nabi = <lfs_vbrp>-desctoxite_nabi.
            ls_vbrp_tot-desctoglob      = <lfs_vbrp>-desctoglob.
            ls_vbrp_tot-desctoglob_sabi = <lfs_vbrp>-desctoglob_sabi.
            ls_vbrp_tot-desctoglob_nabi = <lfs_vbrp>-desctoglob_nabi.
            ls_vbrp_tot-cargosglob      = <lfs_vbrp>-desctoglob.
            ls_vbrp_tot-cargosglob_sabi = <lfs_vbrp>-desctoglob_sabi.
            ls_vbrp_tot-cargosglob_nabi = <lfs_vbrp>-desctoglob_nabi.
            ls_vbrp_tot-desctotot      = <lfs_vbrp>-desctotot.
            ls_vbrp_tot-desctotot_sabi = <lfs_vbrp>-desctotot_sabi.
            ls_vbrp_tot-desctotot_nabi = <lfs_vbrp>-desctotot_nabi.
            ls_vbrp_tot-cargostot      = <lfs_vbrp>-desctotot.
            ls_vbrp_tot-cargostot_sabi = <lfs_vbrp>-desctotot_sabi.
            ls_vbrp_tot-cargostot_nabi = <lfs_vbrp>-desctotot_nabi.
*}I-100920-NTP-3000014481
            ls_vbrp_tot-zz_dscto_01     = <lfs_vbrp>-zz_dscto_01.
            ls_vbrp_tot-zz_dscto_02     = <lfs_vbrp>-zz_dscto_02.
            ls_vbrp_tot-ntgew           = <lfs_vbrp>-ntgew.
            ls_vbrp_tot-brgew           = <lfs_vbrp>-brgew.
            COLLECT ls_vbrp_tot INTO lt_vbrp_tot.

*{I-3000011712-NTP100419
            LOOP AT <lfs_vbrp>-t_cardes_item ASSIGNING <fs_cardes>.
              MOVE-CORRESPONDING <fs_cardes> TO ls_cardes.
              ls_cardes-vbeln = ls_vbrp_tot-vbeln.
              ls_cardes-uecha = <lfs_vbrp>-uecha.
              COLLECT ls_cardes INTO lt_cardes_tot.
            ENDLOOP.
*}I-3000011712-NTP100419

            APPEND INITIAL LINE TO lt_temp ASSIGNING <lfs_temp>.
            <lfs_temp> = <lfs_vbrp>.
          ENDLOOP.

          LOOP AT lt_vbrp_tot INTO ls_vbrp_tot.
            MOVE-CORRESPONDING ls_vbrp_tot TO ls_vbrp_f.
            APPEND ls_vbrp_f TO pe_vbrp_f.
          ENDLOOP.

          IF pe_vbrp_f[] IS NOT INITIAL.
            " Los atributos se deben tomar de la primera posición del material y posición origen de lote
            SORT lt_temp BY vbeln ASCENDING uecha ASCENDING posnr ASCENDING.
            DELETE ADJACENT DUPLICATES FROM lt_temp COMPARING vbeln uecha.

            LOOP AT pe_vbrp_f ASSIGNING <lfs_vbrp_f>.

*{I-3000011712-NTP100419
              LOOP AT lt_cardes_tot ASSIGNING <fs_cardes> WHERE vbeln = <lfs_vbrp_f>-vbeln
                                                       AND uecha = <lfs_vbrp_f>-posnr.
                APPEND <fs_cardes> TO <lfs_vbrp_f>-t_cardes_item.
              ENDLOOP.
*}I-3000011712-NTP100419

              READ TABLE lt_temp ASSIGNING <lfs_temp>
                   WITH KEY vbeln = <lfs_vbrp_f>-vbeln
                            uecha = <lfs_vbrp_f>-posnr.
              CHECK sy-subrc EQ 0.
              " Obtener Unidad de Medida de la posición principal
              CLEAR ls_vbrp.
              SELECT SINGLE vbeln posnr vrkme
                INTO CORRESPONDING FIELDS OF ls_vbrp
                FROM vbrp
                WHERE vbeln EQ <lfs_temp>-vbeln
                  AND posnr EQ <lfs_temp>-uecha.
              CHECK sy-subrc EQ 0.
              " Si la UMV de la posición superior de lote es diferente a la UMV de las posiciones de partición
              IF ls_vbrp-vrkme NE <lfs_temp>-vrkme.
                " Convertir Cantidad a UMV de la posición superior
                CALL FUNCTION 'MATERIAL_UNIT_CONVERSION'
                  EXPORTING
                    input                = <lfs_vbrp_f>-fkimg
                    kzmeinh              = ' '
                    matnr                = <lfs_temp>-matnr
                    meinh                = ls_vbrp-vrkme
                    meins                = <lfs_temp>-vrkme
                  IMPORTING
                    output               = ls_vbrp-fkimg
                    umren                = ls_vbrp-umvkz
                    umrez                = ls_vbrp-umvkn
                  EXCEPTIONS
                    conversion_not_found = 1
                    input_invalid        = 2
                    material_not_found   = 3
                    meinh_not_found      = 4
                    meins_missing        = 5
                    no_meinh             = 6
                    output_invalid       = 7
                    overflow             = 8
                    OTHERS               = 9.
                IF sy-subrc EQ 0.
                  " UMV convertida
                  <lfs_vbrp_f>-vrkme      = ls_vbrp-vrkme.
                  " Cantidad convertida
                  <lfs_vbrp_f>-fkimg      = ls_vbrp-fkimg.
                  IF ls_vbrp-umvkz NE 0.
                    " Convertir Valor unitario por ítem por el factor
                    <lfs_temp>-kbetr      = <lfs_temp>-kbetr * ( ls_vbrp-umvkn / ls_vbrp-umvkz ).
                    " Convertir Precio de venta unitario por el factor
                    <lfs_temp>-pventa     = <lfs_temp>-pventa * ( ls_vbrp-umvkn / ls_vbrp-umvkz ).
                    " Convertir Valor referencial unitario por el factor
                    <lfs_temp>-valrefunit = <lfs_temp>-valrefunit * ( ls_vbrp-umvkn / ls_vbrp-umvkz ).
                  ENDIF.
                ENDIF.
              ENDIF.
              <lfs_vbrp_f>-afigv      = <lfs_temp>-afigv.
              <lfs_vbrp_f>-afigv03    = <lfs_temp>-afigv03.
              <lfs_vbrp_f>-afigv04    = <lfs_temp>-afigv04.
              <lfs_vbrp_f>-afigv05    = <lfs_temp>-afigv05.
              <lfs_vbrp_f>-afigv06    = <lfs_temp>-afigv06.
              <lfs_vbrp_f>-tipisc     = <lfs_temp>-tipisc.
              <lfs_vbrp_f>-tipisc04   = <lfs_temp>-tipisc04.
              <lfs_vbrp_f>-tipisc05   = <lfs_temp>-tipisc05.
              <lfs_vbrp_f>-tipisc06   = <lfs_temp>-tipisc06.
              <lfs_vbrp_f>-uummsunat  = <lfs_temp>-uummsunat.
              <lfs_vbrp_f>-tipmonemif = <lfs_temp>-tipmonemif.
              <lfs_vbrp_f>-tipnumegre = <lfs_temp>-tipnumegre.
              <lfs_vbrp_f>-matnr      = <lfs_temp>-matnr.
              <lfs_vbrp_f>-arktx      = <lfs_temp>-arktx.
              <lfs_vbrp_f>-text_pos   = <lfs_temp>-text_pos.
              " Valor unitario por ítem
              <lfs_vbrp_f>-kbetr      = <lfs_temp>-kbetr.
              " Precio de venta unitario
              <lfs_vbrp_f>-pventa     = <lfs_temp>-pventa.
              " Valor referencial unitario
              <lfs_vbrp_f>-valrefunit = <lfs_temp>-valrefunit.
            ENDLOOP.
          ENDIF.

          " 2. Adicionar posiciones sin partición de Lote
          LOOP AT pi_vbrp ASSIGNING <lfs_vbrp> WHERE vbeln EQ <lfs_vbrk>-vbeln
                                                 AND uecha IS INITIAL.
            CLEAR ls_vbrp_f.
            MOVE-CORRESPONDING <lfs_vbrp> TO ls_vbrp_f.
            APPEND ls_vbrp_f TO pe_vbrp_f.
          ENDLOOP.

*          APPEND LINES OF lt_vbrp_f TO lt_vbrp_tot.
        ENDLOOP.

        SORT pe_vbrp_f BY vbeln ASCENDING posnr ASCENDING.

********************************************
*       CMH (3000009765)                   *
********************************************
      WHEN '0021061097'. "Cmh
        " Sector Mineral
        LOOP AT lt_const INTO ls_const WHERE campo = 'SPART_MINE'.
          CLEAR ls_spart.
          ls_spart-sign   = ls_const-signo.
          ls_spart-option = ls_const-opcion.
          ls_spart-low    = ls_const-valor1.
          ls_spart-high   = ls_const-valor2.
          APPEND ls_spart TO lr_spart.
        ENDLOOP.

        LOOP AT pi_vbrk ASSIGNING <lfs_vbrk>.
          "CLEAR: lt_vbrp_f.

          LOOP AT pi_vbrp ASSIGNING <lfs_vbrp> WHERE vbeln EQ <lfs_vbrk>-vbeln.
            CLEAR ls_vbrp_f.
            MOVE-CORRESPONDING <lfs_vbrp> TO ls_vbrp_f.

            IF <lfs_vbrk>-spart IN lr_spart AND lr_spart[] IS NOT INITIAL.
            ELSE.
              CLEAR: lw_texto, lw_texto1.
              " 1.- Texto Ventas de material
              CLEAR ls_thead.
              CONCATENATE ls_vbrp_f-vbeln ls_vbrp_f-posnr INTO ls_thead-tdname.
              ls_thead-tdobject = 'VBBP'.
              ls_thead-tdid     = '0001'.
              SELECT SINGLE spras INTO ls_thead-tdspras FROM kna1 WHERE kunnr = <lfs_vbrk>-kunag.
              lw_texto = get_text( pi_name   = ls_thead-tdname
                                   pi_id     = ls_thead-tdid
                                   pi_object = ls_thead-tdobject
                                   pi_spras  = ls_thead-tdspras ).
              IF lw_texto IS INITIAL.
                ls_thead-tdspras = sy-langu.
                lw_texto = get_text( pi_name   = ls_thead-tdname
                                     pi_id     = ls_thead-tdid
                                     pi_object = ls_thead-tdobject
                                     pi_spras  = ls_thead-tdspras ).
              ENDIF.
              " 2.- Nota de Posición
              CLEAR ls_thead.
              CONCATENATE ls_vbrp_f-vbeln ls_vbrp_f-posnr INTO ls_thead-tdname.
              ls_thead-tdobject = 'VBBP'.
              ls_thead-tdid     = 'ZD01'.
              SELECT SINGLE spras INTO ls_thead-tdspras FROM kna1 WHERE kunnr = <lfs_vbrk>-kunag.
              lw_texto1 = get_text( pi_name   = ls_thead-tdname
                                    pi_id     = ls_thead-tdid
                                    pi_object = ls_thead-tdobject
                                    pi_spras  = ls_thead-tdspras ).
              IF lw_texto1 IS INITIAL.
                ls_thead-tdspras = sy-langu.
                lw_texto1 = get_text( pi_name   = ls_thead-tdname
                                      pi_id     = ls_thead-tdid
                                      pi_object = ls_thead-tdobject
                                      pi_spras  = ls_thead-tdspras ).
              ENDIF.
              " 3.- Concatenar 'Texto Ventas de material' y 'Nota de Posición'
              ls_vbrp_f-text_pos = lw_texto.
              IF lw_texto1 IS NOT INITIAL.
                CONCATENATE ls_vbrp_f-text_pos '/' lw_texto1 INTO ls_vbrp_f-text_pos SEPARATED BY space.
              ENDIF.
            ENDIF.
            APPEND ls_vbrp_f TO pe_vbrp_f.
          ENDLOOP.
        ENDLOOP.

      WHEN OTHERS.
        LOOP AT pi_vbrp ASSIGNING <lfs_vbrp>.
          CLEAR ls_vbrp_f.
          MOVE-CORRESPONDING <lfs_vbrp> TO ls_vbrp_f.
          APPEND ls_vbrp_f TO pe_vbrp_f.
        ENDLOOP.

*}  END OF INSERT WMR-180615

    ENDCASE.

  ENDMETHOD.                    "set_vbrp_final


  METHOD split_xblnr.

    DATA: l_lenght TYPE i.

    CLEAR: e_tipo, e_serie, e_corre, e_sercor.

    SPLIT i_xblnr AT abap_undefined
      INTO e_tipo                                   " Tipo
           e_serie                                  " Serie + Correlativo
           e_corre.                                 " Correlativo

    "Serie
    l_lenght = strlen( e_serie ) - 4.
    IF l_lenght < 0.
      l_lenght = 0.
    ENDIF.
    DO l_lenght TIMES.
      SHIFT e_serie BY 1 PLACES.
    ENDDO.

    CONCATENATE e_serie e_corre
            INTO e_sercor
            SEPARATED BY abap_undefined.

  ENDMETHOD.


  METHOD string_to_xstring.
    CALL FUNCTION 'SCMS_STRING_TO_XSTRING'
      EXPORTING
        text   = input
      IMPORTING
        buffer = output
      EXCEPTIONS
        failed = 1
        OTHERS = 2.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDMETHOD.


  METHOD sy_to_ret.

    MOVE: sy-msgv1 TO rs_return-message_v1,
          sy-msgv2 TO rs_return-message_v2,
          sy-msgv3 TO rs_return-message_v3,
          sy-msgv4 TO rs_return-message_v4,
          sy-msgid TO rs_return-id,
          sy-msgno TO rs_return-number,
          sy-msgty TO rs_return-type,
          i_row    TO rs_return-row.

  ENDMETHOD.                    "sy_to_ret


  METHOD upd_identi_baj.

    DATA: lt_felog TYPE TABLE OF zostb_felog.

    FIELD-SYMBOLS: <fs_felog> LIKE LINE OF lt_felog.

* Obtener Facturas Boletas  registradas por FE
    SELECT *
    FROM zostb_felog
    INTO TABLE lt_felog
    FOR ALL ENTRIES IN pi_vbrk
*{  BEGIN OF REPLACE WMR-240815
""    WHERE zzt_nrodocsap  EQ pi_vbrk-vbeln AND
    WHERE zzt_nrodocsap  EQ pi_vbrk-sfakn AND
*}  END OF REPLACE WMR-240815
          zzt_numeracion EQ pi_vbrk-zzt_numeracion
      AND bukrs          EQ pi_vbrk-bukrs                                       "I-WMR-200715
      AND zzt_tipodoc    EQ pi_vbrk-xblnr(2).                                   "I-WMR-170915

    CHECK sy-subrc EQ 0.

* Actualizar identificador
    LOOP AT lt_felog ASSIGNING <fs_felog>.
      <fs_felog>-zzt_identifibaja = pi_identicomun.
    ENDLOOP.

* Actualizar BD
    MODIFY zostb_felog FROM TABLE lt_felog.

  ENDMETHOD.                    "upd_identi_baj


  METHOD upd_identi_res.

    DATA: lt_felog TYPE TABLE OF zostb_felog,
          ls_det   LIKE LINE OF pi_det.

    FIELD-SYMBOLS: <fs_felog> LIKE LINE OF lt_felog.

    CHECK pi_det[] IS NOT INITIAL.                                          "I-WMR-160316

* Obtener Boletas / NC / ND registradas por FE
    SELECT *
    FROM zostb_felog
    INTO TABLE lt_felog
    FOR ALL ENTRIES IN pi_det
    WHERE zzt_nrodocsap  EQ pi_det-zz_nrodocsap AND
          zzt_numeracion EQ pi_det-zz_numeracion
      AND bukrs          EQ pi_det-bukrs                                    "I-WMR-200715
      AND zzt_tipodoc    EQ pi_det-zz_tipodoc.                              "I-WMR-170915

    CHECK sy-subrc EQ 0.

* Obtener identificador
    READ TABLE pi_det INTO ls_det INDEX 1.

* Actualizar identificador
    LOOP AT lt_felog ASSIGNING <fs_felog>.
      <fs_felog>-zzt_status_cdr   = gc_statuscdr_2.                         "I-WMR-160316
      <fs_felog>-zzt_identifiresu = ls_det-zz_identiresum.
    ENDLOOP.

* Actualizar BD
    MODIFY zostb_felog FROM TABLE lt_felog.

  ENDMETHOD.                    "upd_identi_res


  METHOD upd_identi_res_v2.

    DATA: lt_felog TYPE TABLE OF zostb_felog,
          lt_det   TYPE ltt_rbdet_v2,
          ls_det   LIKE LINE OF pi_det.

    FIELD-SYMBOLS: <fs_felog> LIKE LINE OF lt_felog.

    CHECK pi_det[] IS NOT INITIAL.                                          "I-WMR-160316

    LOOP AT pi_det INTO ls_det.
      ls_det-zz_numeracion = ls_det-zz_serie.
      APPEND ls_det TO lt_det.
    ENDLOOP.

* Obtener Boletas / NC / ND registradas por FE
****    SELECT *
****    FROM zostb_felog
****    INTO TABLE lt_felog
****    FOR ALL ENTRIES IN pi_det
****    WHERE zzt_nrodocsap  EQ pi_det-zz_nrodocsap AND
****          zzt_numeracion EQ pi_det-zz_numeracion
****      AND bukrs          EQ pi_det-bukrs                                    "I-WMR-200715
****      AND zzt_tipodoc    EQ pi_det-zz_tipodoc.                              "I-WMR-170915

    SELECT *
    FROM zostb_felog
    INTO TABLE lt_felog
    FOR ALL ENTRIES IN lt_det
    WHERE zzt_numeracion EQ lt_det-zz_numeracion
      AND bukrs          EQ lt_det-bukrs                                    "I-WMR-200715
      AND zzt_tipodoc    EQ lt_det-zz_tipodoc.                              "I-WMR-170915

    CHECK sy-subrc EQ 0.

* Obtener identificador
    READ TABLE pi_det INTO ls_det INDEX 1.

* Actualizar identificador
    LOOP AT lt_felog ASSIGNING <fs_felog>.
*{  BEGIN OF DELETE WMR-100118-3000008865
      ""      <fs_felog>-zzt_status_cdr   = gc_statuscdr_2.                         "I-WMR-160316
*}  END OF DELETE WMR-100118-3000008865
      <fs_felog>-zzt_identifiresu = ls_det-zz_identifiresu.
    ENDLOOP.

* Actualizar BD
    MODIFY zostb_felog FROM TABLE lt_felog.

  ENDMETHOD.                    "upd_identi_res


  METHOD upd_tabla_bajas.

    DATA: ls_bacab LIKE LINE OF pi_bacab.

    ""    IF pi_repro = '1'.                                                                "E-WMR-061015
    READ TABLE pi_bacab INTO ls_bacab INDEX 1.
    IF sy-subrc EQ 0.                                                               "I-WMR-061015
      DELETE FROM zostb_bacab WHERE zz_identifibaja  = ls_bacab-zz_identifibaja
                                AND bukrs            = ls_bacab-bukrs.            "I-WMR-200715
      DELETE FROM zostb_badet WHERE zz_identifibaja  = ls_bacab-zz_identifibaja
                                AND bukrs            = ls_bacab-bukrs.            "I-WMR-200715
      COMMIT WORK AND WAIT.             "I-NTP170418-3000009628
    ENDIF.                                                                          "I-WMR-061015
    ""    ENDIF.                                                                            "E-WMR-061015

    MODIFY zostb_bacab FROM TABLE pi_bacab.
    MODIFY zostb_badet FROM TABLE pi_badet.
    COMMIT WORK AND WAIT.             "I-NTP170418-3000009628

  ENDMETHOD.                    "upd_tabla_bajas


  METHOD upd_tabla_res.

    DATA: ls_cab LIKE LINE OF pi_cab.

    ""    IF pi_repro = '1'.                                                                "E-WMR-061015
    READ TABLE pi_cab INTO ls_cab INDEX 1.
    IF sy-subrc EQ 0.                                                               "I-WMR-061015
      DELETE FROM zostb_rbcab WHERE zz_identifiresu = ls_cab-zz_identifiresu
                                AND bukrs           = ls_cab-bukrs.             "I-WMR-200715
      DELETE FROM zostb_rbdet WHERE zz_identifiresu = ls_cab-zz_identifiresu
                                AND bukrs           = ls_cab-bukrs.             "I-WMR-200715
      COMMIT WORK AND WAIT.             "I-NTP170418-3000009628
    ENDIF.                                                                          "I-WMR-061015
    ""    ENDIF.                                                                            "E-WMR-061015

    MODIFY zostb_rbcab FROM TABLE pi_cab.
    MODIFY zostb_rbdet FROM TABLE pi_det.
    COMMIT WORK AND WAIT.             "I-NTP170418-3000009628

  ENDMETHOD.                    "upd_tabla_res


  METHOD upd_tabla_res_v2.

    DATA: ls_cab LIKE LINE OF pi_cab.

    READ TABLE pi_cab INTO ls_cab INDEX 1.
    DELETE FROM zostb_rbcab WHERE zz_identifiresu = ls_cab-zz_identifiresu
                              AND bukrs           = ls_cab-bukrs.             "I-WMR-230518-3000009922
    DELETE FROM zostb_rbdet_v2 WHERE zz_identifiresu = ls_cab-zz_identifiresu
                                 AND bukrs           = ls_cab-bukrs.          "I-WMR-230518-3000009922
    COMMIT WORK AND WAIT.

    MODIFY zostb_rbcab FROM TABLE pi_cab.
*{I-NTP170418-3000009628
    IF sy-subrc = 0.
      COMMIT WORK AND WAIT.
    ELSE.
      ROLLBACK WORK.
      MESSAGE e000 WITH 'Error al registrar el resumen' RAISING error.
    ENDIF.
*}I-NTP170418-3000009628

    MODIFY zostb_rbdet_v2 FROM TABLE pi_det.
*{I-NTP170418-3000009628
    IF sy-subrc = 0.
      COMMIT WORK AND WAIT.
    ELSE.
      ROLLBACK WORK.
      MESSAGE e000 WITH 'Error al registrar el resumen' RAISING error.
    ENDIF.
*}I-NTP170418-3000009628

  ENDMETHOD.                    "upd_tabla_res


  METHOD upd_tables.

    DATA: ls_json  TYPE zosfetb_json,
          l_string TYPE string.

    CHECK is_options-only_syncstat NE gc_statuscdr_1.       "I-NTP260717-3000006468.     "I-JBO260717-3000006468

* Actualizar tablas Z de valores (monitor)
    MODIFY zostb_docexposca FROM TABLE is_nojson_data-t_header.
    MODIFY zostb_docexposc2 FROM TABLE is_nojson_data-t_header2. "Campos adicionales Guias
    MODIFY zostb_docexposde FROM TABLE is_nojson_data-t_detail.
    MODIFY zostb_docexpostc FROM TABLE is_nojson_data-t_text_header.                 "I-WMR-230615
    MODIFY zostb_docexposgr FROM TABLE is_nojson_data-t_guirem.                       "I-WMR-250117-3000006411
    MODIFY zostb_docexposaa FROM TABLE is_nojson_data-t_aplant.                       "I-WMR-250117-3000006411
    MODIFY zostb_docexposcd FROM TABLE is_nojson_data-t_cardes.                       "I-3000011712-NTP110419
    MODIFY zostb_docexposfp FROM TABLE is_nojson_data-t_formapago.                    "I-120321-NTP-3000016017

* Actualizar tablas Z de envío a WS
    IF pi_error IS INITIAL.
*{E-NTP101218-3000009651
*      MODIFY zostb_fecab  FROM TABLE is_json_data-t_fecab.
*      MODIFY zostb_fecab2 FROM TABLE is_json_data-t_fecab2.   "Campos adicionales Guias
*      MODIFY zostb_fedet  FROM TABLE is_json_data-t_fedet.
*      MODIFY zostb_fecli  FROM TABLE is_json_data-t_fecli.
*}E-NTP101218-3000009651
      ls_json-zzt_nrodocsap = is_json_data-jsoncab-zzt_nrodocsap.
      ls_json-zzt_numeracion = is_json_data-jsoncab-zzt_numeracion.

      l_string = serialize_json( data = is_json_data-jsoncab ).
      ls_json-jsoncab = string_to_xstring( l_string ).
      l_string = serialize_json( data = is_json_data-jsoncli ).
      ls_json-jsoncli = string_to_xstring( l_string ).
      l_string = serialize_json( data = is_json_data-t_jsoncab_tc ).
      ls_json-jsoncab_tc = string_to_xstring( l_string ).
      l_string = serialize_json( data = is_json_data-t_jsoncab_gr ).
      ls_json-jsoncab_gr = string_to_xstring( l_string ).
      l_string = serialize_json( data = is_json_data-t_jsoncab_aa ).
      ls_json-jsoncab_aa = string_to_xstring( l_string ).
      l_string = serialize_json( data = is_json_data-t_jsondet ).
      ls_json-jsondet = string_to_xstring( l_string ).

      MODIFY zosfetb_json FROM ls_json.                                   "I-NTP101218-3000009651
    ENDIF.

  ENDMETHOD.                    "upd_tables


  METHOD upd_vbrk.

    DATA: lwa_t005u LIKE LINE OF lt_t005u,
          lwa_t001z LIKE LINE OF lt_t001z,
          lwa_vbrp  LIKE LINE OF pi_vbrp,
          lwa_t052u LIKE LINE OF lt_t052u,
          l_tpproc  TYPE zosfetb_ubl-tpproc.

    FIELD-SYMBOLS: <lfs_vbrk> LIKE LINE OF pe_vbrk.

    LOOP AT pe_vbrk ASSIGNING <lfs_vbrk>.

*{I-NTP210618-3000009651
      CASE pi_tipdoc.
        WHEN gc_tipdoc_fa. l_tpproc = gc_prefix_fc.
        WHEN gc_tipdoc_bl. l_tpproc = gc_prefix_bl.
        WHEN gc_tipdoc_nc. l_tpproc = gc_prefix_nc.
        WHEN gc_tipdoc_nd. l_tpproc = gc_prefix_nd.
      ENDCASE.

      "Versión de ubl y estructura
      SELECT SINGLE zz_verubl zz_verestrdoc INTO (<lfs_vbrk>-zz_verubl, <lfs_vbrk>-zz_verestrdoc)
        FROM zosfetb_ubl
        WHERE tpproc EQ l_tpproc
          AND begda LE <lfs_vbrk>-fkdat
          AND endda GE <lfs_vbrk>-fkdat.
*}I-NTP210618-3000009651

*     Datos del Adquiriente
      me->get_adquir_header( EXPORTING pi_tipdoc      = pi_tipdoc
                                       pi_vbrk        = <lfs_vbrk>
                              CHANGING pe_name12      = <lfs_vbrk>-name12
                                       pe_stcd1       = <lfs_vbrk>-stcd1
                                       pe_stcdt       = <lfs_vbrk>-stcdt
                                       pe_dirpaisadq  = <lfs_vbrk>-dirpaisadq ).

*     Datos para NC y ND.
      gw_tipdoc = pi_tipdoc.
      IF pi_tipdoc = gc_tipdoc_nc OR pi_tipdoc = gc_tipdoc_nd.
        me->get_notasv_header( EXPORTING pi_vbrk          = <lfs_vbrk>
                                         pi_tipdoc        = pi_tipdoc                   "I-WMR-17115-3000004081
*{  BEGIN OF INSERT WMR-130715
                                         it_vbrp          = pi_vbrp
*}  END OF INSERT WMR-130715
                                CHANGING pe_tipdocmodif   = <lfs_vbrk>-tipdocmodif
                                         pe_tipdocmodifho = <lfs_vbrk>-tipdocmodifho
                                         pe_tipodocref    = <lfs_vbrk>-tipodocref
                                         pe_tipodocdesc   = <lfs_vbrk>-tipodocdesc
                                         pe_motivosuste   = <lfs_vbrk>-motivosuste
                                         pe_tmotivo       = <lfs_vbrk>-tmotivo
*{  BEGIN OF INSERT WMR-130715
                                         pe_fecdocmodif   = <lfs_vbrk>-fecdocmodif
*}  END OF INSERT WMR-130715
*{  BEGIN OF INSERT WMR-010317-3000006743
                                         pe_sdrefer       = <lfs_vbrk>-zz_sdrefer  " Factura/ Boleta SD referencia de NC/ ND
                                         pe_sdreferwaerk  = <lfs_vbrk>-zz_sdreferwaerk    "I-PBM250721-3000017358
*}  END OF INSERT WMR-010317-3000006743
                                         pe_check_nccero  = <lfs_vbrk>-zz_check_nccero     "I-231020-NTP-3000015579
                                         pe_check_nc_corr = <lfs_vbrk>-zz_check_nc_corr ). "I-PBM030621-3000017155
      ENDIF.

*     Domicilio fiscal
      READ TABLE lt_t005u INTO lwa_t005u WITH KEY land1 = <lfs_vbrk>-country
                                                  bland = <lfs_vbrk>-region BINARY SEARCH.
      IF sy-subrc = 0.
        MOVE-CORRESPONDING lwa_t005u TO <lfs_vbrk>.
      ENDIF.

*     Busco Número de RUC (PAVAL)
      READ TABLE lt_t001z INTO lwa_t001z WITH KEY bukrs = <lfs_vbrk>-bukrs.
      IF sy-subrc = 0.
        MOVE-CORRESPONDING lwa_t001z TO <lfs_vbrk>.
      ENDIF.

*     Tipo de Documento
      <lfs_vbrk>-tfact = pi_tipdoc.

*     Pedido (para facturas de exportación es Pedido de Envio a Puerto)
      IF ( pi_tipdoc EQ gc_tipdoc_fa ) OR ( pi_tipdoc EQ gc_tipdoc_bl ) OR ( pi_tipdoc EQ gc_tipdoc_nc ) OR ( pi_tipdoc EQ gc_tipdoc_nd ).
        <lfs_vbrk>-zz_vbeln = me->get_pedido_header( pi_vbrk = <lfs_vbrk>
                                                     pi_vbrp = pi_vbrp ).
      ENDIF.

*     Orden de Compra
      IF ( pi_tipdoc EQ gc_tipdoc_fa ) OR ( pi_tipdoc EQ gc_tipdoc_bl )
*{  BEGIN OF INSERT WMR-220715
        OR ( pi_tipdoc EQ gc_tipdoc_nc ) OR ( pi_tipdoc EQ gc_tipdoc_nd ).
*}  END OF INSERT WMR-220715
        <lfs_vbrk>-zz_bstkd = me->get_ordenc_header( pi_vbrk = <lfs_vbrk>
*{  BEGIN OF INSERT WMR-030617-3000007316
                                                     it_vbrp = pi_vbrp ).
*}  END OF INSERT WMR-030617-3000007316
      ENDIF.

*{  BEGIN OF INSERT WMR-250515
*     Determinar Venta Itinerante
      <lfs_vbrk>-zz_check_vtaiti = determinar_venta_itinerante( is_vbrk = <lfs_vbrk>
                                                                it_vbrp = pi_vbrp ).

      " Determinar Venta de Servicios
      <lfs_vbrk>-zz_check_vtasrv = determinar_venta_servicios( is_vbrk = <lfs_vbrk>
                                                               it_vbrp = pi_vbrp ).
*}  END OF INSERT WMR-250515

*{  BEGIN OF INSERT WMR-190219-3000011108
      " Determinar Operación de Anticipos
      <lfs_vbrk>-zz_check_anticp = determinar_venta_anticipos( is_vbrk = <lfs_vbrk> ).
*}  END OF INSERT WMR-190219-3000011108

*{  BEGIN OF INSERT WMR-080715
*     Tipo de Operación
*{I-NTP281118-3000009651
      CASE <lfs_vbrk>-zz_verubl.
        WHEN gc_verubl-ubl2_0.
          <lfs_vbrk>-zz_tip_ope = me->get_tip_op( pi_vbrk = <lfs_vbrk> ).
        WHEN gc_verubl-ubl2_1.
          <lfs_vbrk>-zz_tip_ope = me->get_tip_op2_1( pi_vbrk = <lfs_vbrk>
                                                     it_vbrp = pi_vbrp          "I-PBM040319-3000011101
                                                     is_options = is_options ). "I-080720-NTP-3000014674
      ENDCASE.
*}I-NTP281118-3000009651
*}  END OF INSERT WMR-080715

*{-010722-NTP-3000018956
**{  BEGIN OF INSERT WMR-050615
*      " Determinar Transferencia Gratuita
*      <lfs_vbrk>-zz_check_tg = determine_free_transfer(           is_vbrk = <lfs_vbrk>
*                                                                  it_vbrp = pi_vbrp ).
**}  END OF INSERT WMR-050615
*}-010722-NTP-3000018956

*     Datos del Adquiriente
*{E-090920-NTP-3000014481
*      me->get_adquir_header( EXPORTING pi_tipdoc      = pi_tipdoc
*                                       pi_vbrk        = <lfs_vbrk>
*                              CHANGING pe_name12      = <lfs_vbrk>-name12
*                                       pe_stcd1       = <lfs_vbrk>-stcd1
*                                       pe_stcdt       = <lfs_vbrk>-stcdt
*                                       pe_dirpaisadq  = <lfs_vbrk>-dirpaisadq ).
*
*      IF ( <lfs_vbrk>-zz_check_tg NE abap_true ). "OFV 11.08.2015
**       Total valor de venta operaciones gravadas
*        get_opegra_header( EXPORTING pi_vbrk = <lfs_vbrk>
*                                     pi_vbrp = pi_vbrp
*                           IMPORTING pe_opegra = <lfs_vbrk>-totvvopgra
*                                     pe_opegra_neto = <lfs_vbrk>-totvvopgra_base ). "I-3000011712-NTP210419
*
**       Total valor de venta operaciones inafectas
*        <lfs_vbrk>-totvvopina = me->get_opeina_header( pi_vbrk = <lfs_vbrk>
*                                                       pi_vbrp = pi_vbrp ).
*
**       Total valor de venta operaciones exoneradas
*        <lfs_vbrk>-totvvopexo = me->get_opeexo_header( pi_vbrk = <lfs_vbrk>
*                                                       pi_vbrp = pi_vbrp ).
*      ENDIF.
*}E-090920-NTP-3000014481

*     Detracción
*      <lfs_vbrk>-zz_detra = me->get_detrac_header( ).                                     "E-WMR-070319-3000010823
*{  BEGIN OF INSERT WMR-070319-3000010823
      get_detrac_header(
        EXPORTING
          is_vbrk       = <lfs_vbrk>
          is_options    = is_options                                                      "I-080720-NTP-3000014674
        IMPORTING
          pe_detrac     = <lfs_vbrk>-zz_detra
          pe_detracodbs = <lfs_vbrk>-zz_detracodbs
          pe_detraporc  = <lfs_vbrk>-zz_detraporc                                         "I-WMR-120619-3000010823
          pe_detractabn = <lfs_vbrk>-zz_detractabn                                        "I-WMR-120619-3000010823
          pe_detra_mdpg = <lfs_vbrk>-zz_detra_mdpg                                        "I-WMR-260819-3000010823
          pe_detrac_mdoc = <lfs_vbrk>-zz_detra_mdoc                                       "+010922-NTP-3000018956
      ).
*}  END OF INSERT WMR-070319-3000010823

*     Forma de Pago descripción
      READ TABLE lt_t052u INTO lwa_t052u WITH KEY zterm = <lfs_vbrk>-zterm.
      IF sy-subrc = 0.
        <lfs_vbrk>-zz_text1 = lwa_t052u-text1.
      ENDIF.

*{I-100321-NTP-3000016017
*     Forma de Pago
      get_formadepago(
        EXPORTING
          is_vbrk      = <lfs_vbrk>
          it_vbrp      = pi_vbrp                       "I-040521-NTP-3000016917
        IMPORTING
          e_fp_tipo    = <lfs_vbrk>-zz_fp_tipo
          e_fp_total   = <lfs_vbrk>-zz_fp_total
          e_fp_fec_vto = <lfs_vbrk>-zz_fp_fec_vto
          e_fp_nc_ajuste = <lfs_vbrk>-zz_fp_nc_ajuste  "I-040521-NTP-3000016091
          et_formapago = <lfs_vbrk>-t_formapago
          e_check_tg     = <lfs_vbrk>-zz_check_tg      "+010722-NTP-3000018956
      ).
*}I-100321-NTP-3000016017

*{  BEGIN OF INSERT WMR-080715
      " Sub Totales Opciones por Cliente
      get_totals_optional( CHANGING cs_vbrk = <lfs_vbrk> ).
*}  END OF INSERT WMR-080715

*{  BEGIN OF DELETE WMR-010317-3000006743
      ""*{  BEGIN OF INSERT WMR-151216-3000005346
      ""      " Factura/ Boleta SD referencia de NC/ ND
      ""      <lfs_vbrk>-zz_sdrefer  = get_reference_sd( <lfs_vbrk> ).
      ""*}  END OF INSERT WMR-151216-3000005346
*}  END OF DELETE WMR-010317-3000006743

*{  BEGIN OF INSERT WMR-150218-3000009072
      " Boleta o NC/ND referido a Boleta con Rebate
      <lfs_vbrk>-zz_bolreb = determinar_boleta_rebate( is_vbrk = <lfs_vbrk>
                                                       it_vbrp = pi_vbrp ).
*}  END OF INSERT WMR-150218-3000009072

    ENDLOOP.

  ENDMETHOD.                    "upd_vbrk


  METHOD upd_vbrp.

    DATA: lt_vbrp_a TYPE ltt_vbrp.          "I-150920-NTP-3000014481
*          ls_vbrp_a LIKE LINE OF lt_vbrp_a. "I-150920-NTP-3000014481 "E-110521-NTP-3000016163

    FIELD-SYMBOLS: <lfs_vbrp> LIKE LINE OF pe_vbrp,
                   <lfs_vbrk> LIKE LINE OF pe_vbrk.

    DATA: l_sumaotrtri  TYPE lty_vbrp-sumaotrtri,
          lw_text       TYPE char30,
          lw_desctoxite TYPE p LENGTH 12 DECIMALS 2,
*{  BEGIN OF INSERT WMR-270317-3000006749
          lw_string     TYPE string.
*}  END OF INSERT WMR-270317-3000006749

    DATA: l_xblnr  TYPE vbrk-xblnr,                                               "I-WMR-190918-3000009765
          l_sercor TYPE zostb_felog-zzt_numeracion.                               "I-WMR-190918-3000009765

*   Rango para Anticipos, tomar Cantidad = 1 y Valor Venta Unitario = Neto posición
    CLEAR:ltr_fkart3.
    LOOP AT lt_constfkart INTO lwa_constfkart WHERE zz_opcion01 = '9'
                                                AND zz_opcion02 = '5'.
      lwa_fkart-low = lwa_constfkart-fkart.
      lwa_fkart-sign = 'I'.
      lwa_fkart-option = 'EQ'.
      APPEND lwa_fkart TO ltr_fkart3.
    ENDLOOP.

    LOOP AT pe_vbrp ASSIGNING <lfs_vbrp>.

*     Lectura de Tablas
      READ TABLE pe_vbrk ASSIGNING <lfs_vbrk> WITH KEY vbeln = <lfs_vbrp>-vbeln.
      IF pi_tipdoc = gc_tipdoc_nc OR pi_tipdoc = gc_tipdoc_nd.
        READ TABLE lt_aubel INTO lwa_aubel WITH KEY vbeln = <lfs_vbrk>-vbeln.
        IF sy-subrc = 0.
          READ TABLE lt_vbak INTO lwa_vbak WITH TABLE KEY vbeln = lwa_aubel-aubel.
          IF sy-subrc = 0.
            READ TABLE lt_vbrk_ref INTO lwa_vbrk_ref WITH KEY vbeln = lwa_vbak-xblnr.
          ENDIF.
        ENDIF.
      ENDIF.

*{  BEGIN OF INSERT WMR-240915
      " Determinar posición bonificada
      <lfs_vbrp>-zz_check_bonif = es_posicion_bonificada( <lfs_vbrp> ).
*}  END OF INSERT WMR-240915

*{E-110521-NTP-3000016163
**{  BEGIN OF INSERT WMR-100715
*      " Valor del Anticipo por Item
*      <lfs_vbrp>-valantxite = get_valant_item( i_knumv = <lfs_vbrk>-knumv
*                                               i_posnr = <lfs_vbrp>-posnr ).
**}  END OF INSERT WMR-100715
*
**{  BEGIN OF INSERT WMR-100715
*      " Valor del IGV de Aplicación de Anticipos
*      <lfs_vbrp>-valigvant  = get_valigvanticip_item( i_knumv = <lfs_vbrk>-knumv
*                                                      i_posnr = <lfs_vbrp>-posnr ).
**}  END OF INSERT WMR-100715
*}E-110521-NTP-3000016163
*{I-110521-NTP-3000016163
      CLEAR lt_vbrp_a.
      APPEND <lfs_vbrp> TO lt_vbrp_a.

      get_fact_anticipos(
        EXPORTING is_vbrk    = <lfs_vbrk>
                  it_vbrp    = lt_vbrp_a
        IMPORTING e_tot_ant  = <lfs_vbrp>-valantxite
                  e_mwsbp    = <lfs_vbrp>-valigvant ).
*}I-110521-NTP-3000016163

*     Descuentos Especiales solo para el Valor Unitario x Item
      CLEAR:lw_desctoxite.
      lw_desctoxite = me->get_descto_item_es( pi_knumv = <lfs_vbrk>-knumv
                                              pi_posnr = <lfs_vbrp>-posnr ).

*{  BEGIN OF INSERT WMR-181119-3000013223
      " Valor unitario por ítem (10 decimales según lo establecido por SUNAT)
      get_valuni_item(
        EXPORTING
          pi_knumv   = <lfs_vbrk>-knumv
          pi_vbrk    = <lfs_vbrk>
          pi_vbrp    = <lfs_vbrp>
        CHANGING
          pe_valunit = <lfs_vbrp>-kbetr
          pe_kmein   = <lfs_vbrp>-kmein
      ).
      IF lw_desctoxite IS NOT INITIAL.
        <lfs_vbrp>-kbetr = <lfs_vbrp>-kbetr - ( <lfs_vbrp>-kbetr * lw_desctoxite / 100 ). "Aplica Descuento Especial
      ENDIF.
      " Valor Unitario a 4 decimales
      <lfs_vbrp>-zz_valunit_4d = <lfs_vbrp>-kbetr.
*}  END OF INSERT WMR-181119-3000013223

*{  BEGIN OF INSERT WMR-181119-3000013223
***{  BEGIN OF INSERT WMR-060919-3000010823
**      " Valor Unitario a 4 decimales
**      get_valuni_item( EXPORTING pi_knumv   = <lfs_vbrk>-knumv
**                                 pi_vbrk    = <lfs_vbrk>
**                                 pi_vbrp    = <lfs_vbrp>
**                        CHANGING pe_valunit = <lfs_vbrp>-zz_valunit_4d
**                                 pe_kmein   = <lfs_vbrp>-kmein ).
**      IF lw_desctoxite <> 0.
**        <lfs_vbrp>-zz_valunit_4d = <lfs_vbrp>-zz_valunit_4d -
**                                  ( <lfs_vbrp>-zz_valunit_4d * lw_desctoxite / 100 ).
**      ENDIF.
**
***     Valor unitario por ítem a decimales
**      <lfs_vbrp>-kbetr = <lfs_vbrp>-zz_valunit_4d.
***}  END OF INSERT WMR-060919-3000010823
*}  END OF INSERT WMR-181119-3000013223

*{  BEGIN OF DELETE WMR-060919-3000010823
***     Valor unitario por ítem
**      me->get_valuni_item( EXPORTING pi_knumv   = <lfs_vbrk>-knumv
**                                     pi_vbrk    = <lfs_vbrk>
**                                     pi_vbrp    = <lfs_vbrp>
**                            CHANGING pe_valunit = <lfs_vbrp>-kbetr
**                                     pe_kmein   = <lfs_vbrp>-kmein ).
**      IF lw_desctoxite IS NOT INITIAL.
**        <lfs_vbrp>-kbetr = <lfs_vbrp>-kbetr - ( <lfs_vbrp>-kbetr * lw_desctoxite / 100 ). "Aplica Descuento Especial
**      ENDIF.
**
**      CASE gs_process-license.                                                          "I-WMR-231118-3000010907
**        WHEN '0021061097'.  " CMH                                                       "I-WMR-231118-3000010907
**          " Valor Unitario a 4 decimales                                                "I-WMR-231118-3000010907
**          get_valuni_item( EXPORTING pi_knumv   = <lfs_vbrk>-knumv                      "I-WMR-231118-3000010907
**                                     pi_vbrk    = <lfs_vbrk>                            "I-WMR-231118-3000010907
**                                     pi_vbrp    = <lfs_vbrp>                            "I-WMR-231118-3000010907
**                            CHANGING pe_valunit = <lfs_vbrp>-zz_valunit_4d              "I-WMR-231118-3000010907
**                                     pe_kmein   = <lfs_vbrp>-kmein ).                   "I-WMR-231118-3000010907
**          IF lw_desctoxite <> 0.                                                        "I-WMR-231118-3000010907
**            <lfs_vbrp>-zz_valunit_4d = <lfs_vbrp>-zz_valunit_4d -                       "I-WMR-231118-3000010907
**                                      ( <lfs_vbrp>-kbetr * lw_desctoxite / 100 ).       "I-WMR-231118-3000010907
**          ENDIF.                                                                        "I-WMR-231118-3000010907
**      ENDCASE.                                                                          "I-WMR-231118-3000010907
*}  END OF DELETE WMR-060919-3000010823

      IF <lfs_vbrk>-tfact = gc_tipdoc_fa OR <lfs_vbrk>-tfact = gc_tipdoc_bl.              "+260822-NTP-3000019741
        "Descuento por item
*{I-NTP280618-3000009651
        get_descto_item(
          EXPORTING
            pi_knumv  = <lfs_vbrk>-knumv
            pi_posnr  = <lfs_vbrp>-posnr
            i_tipdoc  = <lfs_vbrk>-tfact                    "I-080921-NTP-3000017358
            i_netwr   = <lfs_vbrp>-netwr                    "I-020921-NTP-3000017358
            i_kzwi1   = <lfs_vbrp>-kzwi1                    "I-100921-NTP-3000017750
            i_check_expor = <lfs_vbrk>-zz_check_expor       "I-100921-NTP-3000017750
            i_check_tg    = <lfs_vbrk>-zz_check_tg          "+250822-NTP-3000019741
            i_check_bonif = <lfs_vbrp>-zz_check_bonif       "+250822-NTP-3000019741
          IMPORTING
            et_cardes = <lfs_vbrp>-t_cardes_item
            e_desctoxite_sabi = <lfs_vbrp>-desctoxite_sabi  "I-080920-NTP-3000014481
            e_desctoxite_nabi = <lfs_vbrp>-desctoxite_nabi  "I-080920-NTP-3000014481
            e_tdscto_gratuito = <lfs_vbrp>-tdscto_gratuito "+250822-NTP-3000019741
        ).
*}I-NTP280618-3000009651

        "Otros Tributos (No Aplica Austral)
        l_sumaotrtri = me->get_otrtri_item( pi_knumv = <lfs_vbrk>-knumv
                                            pi_posnr = <lfs_vbrp>-posnr ).

*{  BEGIN OF INSERT WMR-240715
        "Cargo por Item
*{  BEGIN OF INSERT WMR-070319-3000010823
        get_cargos_item(
          EXPORTING
            is_vbrk   = <lfs_vbrk>
            pi_knumv  = <lfs_vbrk>-knumv
            pi_posnr  = <lfs_vbrp>-posnr
            i_tipdoc  = <lfs_vbrk>-tfact                    "I-080921-NTP-3000017358
            i_netwr   = <lfs_vbrp>-netwr                    "I-020921-NTP-3000017358
            i_kzwi1   = <lfs_vbrp>-kzwi1                    "I-100921-NTP-3000017750
            i_check_expor = <lfs_vbrk>-zz_check_expor       "I-100921-NTP-3000017750
            i_check_tg    = <lfs_vbrk>-zz_check_tg          "+250822-NTP-3000019741
            i_check_bonif = <lfs_vbrp>-zz_check_bonif       "+250822-NTP-3000019741
          IMPORTING
            et_cardes         = <lfs_vbrp>-t_cardes_item
            e_cargosxite_sabi = <lfs_vbrp>-cargosxite_sabi  "I-020920-NTP-3000014481
            e_cargosxite_nabi = <lfs_vbrp>-cargosxite_nabi  "I-020920-NTP-3000014481
            e_tcargo_gratuito = <lfs_vbrp>-tcargo_gratuito "+250822-NTP-3000019741
        ).
*      <lfs_vbrp>-cargosxite = <lfs_vbrp>-sumaotrcar.
*}  END OF INSERT WMR-070319-3000010823

*{  BEGIN OF INSERT WMR-070319-3000010823
        "Descuento global
        get_dscglo_item(
          EXPORTING
            pi_knumv  = <lfs_vbrk>-knumv
            pi_posnr  = <lfs_vbrp>-posnr
            i_netwr   = <lfs_vbrp>-netwr                    "I-020921-NTP-3000017358
            i_kzwi1   = <lfs_vbrp>-kzwi1                    "I-100921-NTP-3000017750
            i_check_expor = <lfs_vbrk>-zz_check_expor       "I-100921-NTP-3000017750
            i_check_tg    = <lfs_vbrk>-zz_check_tg          "+250822-NTP-3000019741
            i_check_bonif = <lfs_vbrp>-zz_check_bonif       "+250822-NTP-3000019741
          IMPORTING
            et_cardes = <lfs_vbrp>-t_cardes_glob
            e_desctoglob_sabi = <lfs_vbrp>-desctoglob_sabi  "I-020920-NTP-3000014481
            e_desctoglob_nabi = <lfs_vbrp>-desctoglob_nabi  "I-020920-NTP-3000014481
            e_tdscto_gratuito = <lfs_vbrp>-tdscto_gratuito "+250822-NTP-3000019741
        ).
      ENDIF.

      " Cargo Global
      get_cargoglo_item(
        EXPORTING
          is_vbrk   = <lfs_vbrk>
          ip_posnr  = <lfs_vbrp>-posnr
          i_netwr   = <lfs_vbrp>-netwr                    "I-020921-NTP-3000017358
          i_kzwi1   = <lfs_vbrp>-kzwi1                    "I-100921-NTP-3000017750
          i_check_expor = <lfs_vbrk>-zz_check_expor       "I-100921-NTP-3000017750
          i_check_tg    = <lfs_vbrk>-zz_check_tg          "+250822-NTP-3000019741
          i_check_bonif = <lfs_vbrp>-zz_check_bonif       "+250822-NTP-3000019741
        IMPORTING
          et_cardes = <lfs_vbrp>-t_cardes_glob
          e_cargosglob_sabi = <lfs_vbrp>-cargosglob_sabi  "I-020920-NTP-3000014481
          e_cargosglob_nabi = <lfs_vbrp>-cargosglob_nabi  "I-020920-NTP-3000014481
          e_tcargo_gratuito = <lfs_vbrp>-tcargo_gratuito "+250822-NTP-3000019741
      ).
*}  END OF INSERT WMR-070319-3000010823

      ADD <lfs_vbrp>-valantxite TO <lfs_vbrp>-desctoglob.           "I-190421-NTP-3000016080
*{I-080920-NTP-3000014481
      ADD <lfs_vbrp>-desctoxite_sabi TO <lfs_vbrp>-desctotot_sabi.  "I-290721-NTP-3000017358
      ADD <lfs_vbrp>-desctoglob_sabi TO <lfs_vbrp>-desctotot_sabi.  "I-290721-NTP-3000017358
      ADD <lfs_vbrp>-cargosxite_sabi TO <lfs_vbrp>-cargostot_sabi.  "I-290721-NTP-3000017358
      ADD <lfs_vbrp>-cargosglob_sabi TO <lfs_vbrp>-cargostot_sabi.  "I-290721-NTP-3000017358
      ADD <lfs_vbrp>-desctoxite_nabi TO <lfs_vbrp>-desctotot_nabi.
      ADD <lfs_vbrp>-desctoglob_nabi TO <lfs_vbrp>-desctotot_nabi.
      ADD <lfs_vbrp>-cargosxite_nabi TO <lfs_vbrp>-cargostot_nabi.
      ADD <lfs_vbrp>-cargosglob_nabi TO <lfs_vbrp>-cargostot_nabi.
*}I-080920-NTP-3000014481
*{I-290721-NTP-3000017358
      ADD <lfs_vbrp>-desctoxite_sabi TO <lfs_vbrp>-desctoxite.
      ADD <lfs_vbrp>-desctoxite_nabi TO <lfs_vbrp>-desctoxite.
      ADD <lfs_vbrp>-cargosxite_sabi TO <lfs_vbrp>-cargosxite.
      ADD <lfs_vbrp>-cargosxite_nabi TO <lfs_vbrp>-cargosxite.
      ADD <lfs_vbrp>-desctoglob_sabi TO <lfs_vbrp>-desctoglob.
      ADD <lfs_vbrp>-desctoglob_nabi TO <lfs_vbrp>-desctoglob.
      ADD <lfs_vbrp>-cargosglob_sabi TO <lfs_vbrp>-cargosglob.
      ADD <lfs_vbrp>-cargosglob_nabi TO <lfs_vbrp>-cargosglob.
*}I-290721-NTP-3000017358
*{I-030821-NTP-3000017358
      ADD <lfs_vbrp>-desctoxite TO <lfs_vbrp>-desctotot.
      ADD <lfs_vbrp>-desctoglob TO <lfs_vbrp>-desctotot.
      ADD <lfs_vbrp>-cargosxite TO <lfs_vbrp>-cargostot.
      ADD <lfs_vbrp>-cargosglob TO <lfs_vbrp>-cargostot.
*}I-030821-NTP-3000017358

*     Valor de venta por ítem
*{  BEGIN OF REPLACE WMR-100715
      ""      <lfs_vbrp>-valvenxite = <lfs_vbrp>-netwr.
*      <lfs_vbrp>-pventa = ( <lfs_vbrp>-netwr + <lfs_vbrp>-mwsbp + <lfs_vbrp>-valantxite - <lfs_vbrp>-sumaotrcar ) / <lfs_vbrp>-fkimg.
*{ BEGIN OF DELETE WMR-12022021-3000015973
***{I-110920-NTP-3000014481
****      IF <lfs_vbrp>-kbetr > 0.                                                            "E-WMR-09122020-3000014557
**      IF ( <lfs_vbrp>-kbetr > 0 )                                                         "I-WMR-09122020-3000014557
**      OR ( ( <lfs_vbrk>-tfact = gc_tipdoc_nc OR <lfs_vbrk>-tfact = gc_tipdoc_nd ) AND     "I-WMR-09122020-3000014557
**           ( <lfs_vbrk>-vbklt = gc_chard ) AND ( <lfs_vbrp>-kbetr < 0 ) ).                "I-WMR-09122020-3000014557
**        <lfs_vbrp>-netwr = <lfs_vbrp>-fkimg * <lfs_vbrp>-kbetr.
**
***{I-301220-NTP-3000014557
**        fit_netwr_item(
**          EXPORTING
**            i_knumv = <lfs_vbrk>-knumv
**            is_vbrp  = <lfs_vbrp>
**          CHANGING
**            c_netwr = <lfs_vbrp>-netwr
**        ).
***}I-301220-NTP-3000014557
**
**        <lfs_vbrp>-valvenxite = <lfs_vbrp>-netwr + <lfs_vbrp>-cargosxite - <lfs_vbrp>-desctoxite - l_sumaotrtri +
**                                <lfs_vbrp>-valantxite.
**        <lfs_vbrp>-valvenxite_cab = <lfs_vbrp>-valvenxite + <lfs_vbrp>-cargosglob - <lfs_vbrp>-desctoglob.          "Lineextensionamount
**        <lfs_vbrp>-valvenxite_taxa = <lfs_vbrp>-valvenxite_cab.                                                     "TaxableAmount Cab
**      ENDIF.
***}I-110920-NTP-3000014481
*} END OF DELETE WMR-12022021-3000015973
*}  END OF REPLACE WMR-100715
*{ BEGIN OF INSERT WMR-12022021-3000015973
*{I-301220-NTP-3000014557
*}I-301220-NTP-3000014557
      <lfs_vbrp>-valvenxite      = <lfs_vbrp>-netwr
                                   "+ <lfs_vbrp>-valantxite                                                        "E-190421-NTP-3000016080
                                   - <lfs_vbrp>-cargosglob + <lfs_vbrp>-desctoglob.                                "I-310321-NTP-3000016017
      "- <lfs_vbrp>-cargosxite + <lfs_vbrp>-desctoxite.                                "I-310321-NTP-3000016017 "E-210421-NTP-3000016091
      "<lfs_vbrp>-valvenxite_cab  = <lfs_vbrp>-valvenxite + <lfs_vbrp>-cargosglob - <lfs_vbrp>-desctoglob.          "Lineextensionamount  "E-080921-NTP-3000017358
      <lfs_vbrp>-valvenxite_cab  = <lfs_vbrp>-valvenxite + <lfs_vbrp>-cargosglob_nabi - <lfs_vbrp>-desctoglob_nabi. "Lineextensionamount  "I-080921-NTP-3000017358
      "+ <lfs_vbrp>-cargosxite - <lfs_vbrp>-desctoxite.                                "I-310321-NTP-3000016017 "E-210421-NTP-3000016091
      IF <lfs_vbrp>-netwr <= 0.
        <lfs_vbrp>-valvenxite_taxa = ( <lfs_vbrp>-fkimg * <lfs_vbrp>-kbetr )                                       "TaxableAmount Cab
                                     + <lfs_vbrp>-cargosxite - <lfs_vbrp>-desctoxite - l_sumaotrtri
                                     + <lfs_vbrp>-cargosglob - <lfs_vbrp>-desctoglob.
        "+ <lfs_vbrp>-valantxite                                                      "E-190421-NTP-3000016080
*{I-160421-NTP-3000016125
        IF <lfs_vbrk>-zz_check_tg IS NOT INITIAL.
          <lfs_vbrp>-valvenxite_cab = <lfs_vbrp>-valvenxite = <lfs_vbrp>-fkimg * <lfs_vbrp>-kbetr.
        ENDIF.
*}I-160421-NTP-3000016125
      ELSE.
        <lfs_vbrp>-valvenxite_taxa = <lfs_vbrp>-valvenxite_cab.                                                     "TaxableAmount Cab
*                                     + <lfs_vbrp>-valantxite.                                                      "I-190421-NTP-3000016080 "E-090921-NTP-3000017358
      ENDIF.
*} END OF INSERT WMR-12022021-3000015973

*     Afectación al IGV por Item
      me->get_afecigv_item( EXPORTING pi_tipdoc  = pi_tipdoc
                                      pi_vbrk    = <lfs_vbrk>
                                      pi_vbrp    = <lfs_vbrp>
                            IMPORTING pe_afigv   = <lfs_vbrp>-afigv
                                      pe_tributo = <lfs_vbrp>-tributo ). "I-100920-NTP-3000014481

*     IGV por Item
      me->get_valigv_item( EXPORTING pi_knumv      = <lfs_vbrk>-knumv
                                     pi_posnr      = <lfs_vbrp>-posnr
                                     pi_vbrk       = <lfs_vbrk>
                                     is_vbrp       = <lfs_vbrp>                         "I-WMR-270619-3000012056
                                     it_vbrp       = pe_vbrp                            "I-3000012056-NTP-100719
                            CHANGING
                                     pe_igvporcent = <lfs_vbrk>-igvporcent
                                     pe_mwsbp      = <lfs_vbrp>-mwsbp
                                     pe_mwsbp_cab  = <lfs_vbrp>-mwsbp_cab ).            "I-150920-NTP-3000014481

*{I-150920-NTP-3000014481
      CASE gw_license.
        WHEN '0021131379' OR "Resemin
             '0021154274'. "Ilender
          " Cambio Temporal                                                             "I-WMR-04022021-3000016237
          IF  gs_process-license = '0021154274'   " ILENDER                             "I-WMR-04022021-3000016237
          AND <lfs_vbrk>-bukrs = 'PE11'           " LABOT                               "I-WMR-04022021-3000016237
          AND <lfs_vbrk>-kalsm = 'ZPRA05'.                                              "I-WMR-04022021-3000016237
          ELSE.                                                                         "I-WMR-04022021-3000016237
            IF <lfs_vbrp>-mwsbp IS NOT INITIAL.
              <lfs_vbrp>-mwsbp = <lfs_vbrp>-valvenxite * <lfs_vbrk>-igvporcent / 100.
            ENDIF.
            IF <lfs_vbrp>-mwsbp_cab IS NOT INITIAL.
              <lfs_vbrp>-mwsbp_cab = <lfs_vbrp>-valvenxite_taxa * <lfs_vbrk>-igvporcent / 100.
            ENDIF.
          ENDIF.                                                                        "I-WMR-04022021-3000016237
        WHEN OTHERS.
      ENDCASE.
*}I-150920-NTP-3000014481

*{  BEGIN OF INSERT WMR-100715
      " Adicionar Valor del IGV de Aplicación de Anticipos en IGV por Item
      ADD <lfs_vbrp>-valigvant TO <lfs_vbrp>-mwsbp.
*}  END OF INSERT WMR-100715

      <lfs_vbrp>-imporpermn_mtc = <lfs_vbrp>-netwr + <lfs_vbrp>-mwsbp.

*     Valor referencial unitario por ítem en operaciones no onerosas y código (TG)
      me->get_valref_item( EXPORTING pi_knumv = <lfs_vbrk>-knumv
                                     pi_fkart = <lfs_vbrk>-fkart
*{  BEGIN OF INSERT WMR-300615
                                     pi_vbrk  = <lfs_vbrk>
*}  END OF INSERT WMR-300615
                                     pi_vbrp  = <lfs_vbrp>
                            CHANGING pe_valrefunit = <lfs_vbrp>-valrefunit
                                     pe_totvalveno = <lfs_vbrp>-totvalveno ).

*     Precio de venta unitario por ítem y código
      IF ( ltr_fkart3[] IS NOT INITIAL ) AND ( <lfs_vbrk>-fkart IN ltr_fkart3[] ). "Validacion CASO AUSTRAL
        <lfs_vbrp>-kbetr = <lfs_vbrp>-netwr.
        CASE gs_process-license.                                                        "I-WMR-231118-3000010907
          WHEN '0021061097'.  " CMH                                                     "I-WMR-231118-3000010907
            <lfs_vbrp>-zz_valunit_4d = <lfs_vbrp>-netwr.                                "I-WMR-231118-3000010907
        ENDCASE.                                                                        "I-WMR-231118-3000010907
        <lfs_vbrp>-fkimg = 1.
      ENDIF.
      TRY.
*{  BEGIN OF REPLACE WMR-240715
          ""*{  BEGIN OF REPLACE WMR-100715
          ""         ""*{  BEGIN OF REPLACE WMR-110615
          ""         ""          ""          <lfs_vbrp>-pventa =  <lfs_vbrp>-kbetr + ( <lfs_vbrp>-mwsbp + lv_adicio - <lfs_vbrp>-desctoxite )  / <lfs_vbrp>-fkimg.
          ""         ""          <lfs_vbrp>-pventa = ( <lfs_vbrp>-netwr + <lfs_vbrp>-mwsbp ) / <lfs_vbrp>-fkimg.
          ""         ""*}  END OF REPLACE WMR-110615
          ""         <lfs_vbrp>-pventa = ( <lfs_vbrp>-netwr + <lfs_vbrp>-mwsbp + <lfs_vbrp>-valantxite ) / <lfs_vbrp>-fkimg.
          ""*}  END OF REPLACE WMR-100715

*          <lfs_vbrp>-pventa = ( <lfs_vbrp>-netwr + <lfs_vbrp>-mwsbp + <lfs_vbrp>-valantxite - <lfs_vbrp>-cargostot_nabi ) / <lfs_vbrp>-fkimg. "E-010920-NTP-3000014481
*{I-010920-NTP-3000014481
          IF <lfs_vbrk>-zz_check_tg IS NOT INITIAL.
            <lfs_vbrp>-pventa = <lfs_vbrp>-zz_valunit_4d.
          ELSE.
*            <lfs_vbrp>-pventa = ( <lfs_vbrp>-valvenxite_cab + <lfs_vbrp>-mwsbp ) / <lfs_vbrp>-fkimg. "//TODO priceamount
            <lfs_vbrp>-pventa = ( <lfs_vbrp>-valvenxite + <lfs_vbrp>-mwsbp ) / <lfs_vbrp>-fkimg. "//TODO priceamount
          ENDIF.
*}I-010920-NTP-3000014481
*}  END OF REPLACE WMR-240715
        CATCH cx_sy_zerodivide.                         "#EC NO_HANDLER
      ENDTRY.

      CASE gw_license.
        WHEN '0020299975'. " Acfarma
*{================================================================
*{  BEGIN OF REPLACE WMR-100816-3000005589
*{================================================================
          " Si "Valor unitario por ítem" es igual a cero
          IF <lfs_vbrp>-kbetr EQ 0.
            IF <lfs_vbrp>-fkimg IS NOT INITIAL.
              " Valor Unitario
              <lfs_vbrp>-kbetr  = <lfs_vbrp>-netwr / <lfs_vbrp>-fkimg.
              " Precio Venta Unitario
              <lfs_vbrp>-pventa = ( <lfs_vbrp>-netwr + <lfs_vbrp>-mwsbp ) / <lfs_vbrp>-fkimg.
            ENDIF.
          ENDIF.

          " Si "Precio de Venta" es igual a cero
          IF <lfs_vbrp>-pventa EQ 0.
            IF <lfs_vbrp>-fkimg IS NOT INITIAL.
              <lfs_vbrp>-pventa = ( <lfs_vbrp>-netwr + <lfs_vbrp>-mwsbp ) / <lfs_vbrp>-fkimg.
            ENDIF.
          ENDIF.

          " Si "Precio de Venta" es igual a cero
          IF ( <lfs_vbrp>-pventa GT 0 AND <lfs_vbrp>-pventa LT gc_pvmin ).
            <lfs_vbrp>-pventa = gc_pvmin.
          ENDIF.
*}================================================================
*}  END OF REPLACE WMR-100816-3000005589
*}================================================================
*{I-3000012375-NTP-090819
        WHEN '0021061097'. "cmh
          " Si "Precio de Venta" es igual a cero
          IF ( <lfs_vbrp>-pventa GT 0 AND <lfs_vbrp>-pventa LT gc_pvmin ).
            <lfs_vbrp>-pventa = gc_pvmin.
          ENDIF.
*}I-3000012375-NTP-090819
      ENDCASE.

*     Sistema de ISC por item (No Aplica Austral)
      me->get_tipisc_item( EXPORTING pi_knumv     = <lfs_vbrk>-knumv
                                     pi_posnr     = <lfs_vbrp>-posnr
                                     pi_taxm1     = <lfs_vbrp>-taxm1
                            CHANGING pe_tipisc    = <lfs_vbrp>-tipisc
                                     pe_sumaiscsv = <lfs_vbrp>-sumaiscsv ).

*     Sumatoria ISC (No aplica Austral)
      <lfs_vbrp>-sumaisc = me->get_sumisc_item( pi_fkart = <lfs_vbrk>-fkart
                                                pi_knumv = <lfs_vbrk>-knumv
                                                pi_posnr = <lfs_vbrp>-posnr ).

*{  BEGIN OF DELETE WMR-240715
      ""*     Sumatoria otros cargos (No Aplica Austral)
      ""      <lfs_vbrp>-sumaotrcar = me->get_otrcar_item( pi_knumv = <lfs_vbrk>-knumv
      ""                                                   pi_posnr = <lfs_vbrp>-posnr ).
*}  END OF DELETE WMR-240715

*     Importe Total Venta
*      <lfs_vbrp>-imptotvent = <lfs_vbrp>-sumaotrtri + <lfs_vbrp>-sumaotrcar.   "E-090920-NTP-3000014481

*     Tipo de moneda en el cual se emite la factura electrónica
      <lfs_vbrp>-tipmonemif = <lfs_vbrk>-waerk.

*     Importe y Porcentaje de Percepción
      me->get_percep_item( EXPORTING pi_knumv          = <lfs_vbrk>-knumv
                                     pi_posnr          = <lfs_vbrp>-posnr
                           IMPORTING pe_imporpermn     = <lfs_vbrp>-imporpermn
                                     pe_imporpermn_por = <lfs_vbrp>-imporpermn_por
                                     pe_codreg_per     = <lfs_vbrp>-zz_codreg_per ).  "I-WMR-161017-3000008124

*     Descuento Global
*      <lfs_vbrp>-desctoglob = me->get_dscglo_item( pi_knumv = <lfs_vbrk>-knumv            "E-WMR-070319-3000010823
*                                                   pi_posnr = <lfs_vbrp>-posnr ).         "E-WMR-070319-3000010823
*
*     Guía de Remisión
***{  BEGIN OF DELETE WMR-181119-3000013223
**      IF pi_tipdoc = gc_tipdoc_fa OR pi_tipdoc = gc_tipdoc_bl.
**        IF <lfs_vbrp>-vgtyp = 'J'.
**          LOOP AT lt_likp INTO lwa_likp WHERE vbeln = <lfs_vbrp>-vgbel.
**            IF lwa_likp-xblnr NE space.
***{  BEGIN OF REPLACE WMR-010815
**              ""              MOVE lwa_likp-xblnr     TO lwa_guiremi-xblnr.
***              lwa_guiremi-xblnr = lwa_likp-xblnr+4.                               "E-WMR-190918-3000009765
**              l_xblnr = lwa_likp-xblnr.                                           "I-WMR-190918-3000009765
**              split_xblnr( EXPORTING i_xblnr  = l_xblnr                           "I-WMR-190918-3000009765
**                           IMPORTING e_sercor = l_sercor ).                       "I-WMR-190918-3000009765
**              lwa_guiremi-xblnr = l_sercor.                                       "I-WMR-190918-3000009765
***}  END OF REPLACE WMR-010815
**              MOVE lwa_likp-wadat_ist TO lwa_guiremi-wadat_ist.
**              COLLECT lwa_guiremi INTO lt_guiremi.
**            ENDIF.
**          ENDLOOP.
**        ENDIF.
**      ENDIF.
***{  BEGIN OF INSERT WMR-111119-3000012593
**      CASE gs_process-license.
**        WHEN '0020262397'.  " ARTESCO
**          " Devoluciones
**          IF pi_tipdoc = gc_tipdoc_nc AND <lfs_vbrp>-vgtyp = 'H'.
**            LOOP AT lt_likp INTO lwa_likp WHERE xblnr <> space.
**              CLEAR lwa_guiremi.
**              l_xblnr = lwa_likp-xblnr.
**              split_xblnr( EXPORTING i_xblnr  = l_xblnr
**                           IMPORTING e_sercor = l_sercor ).
**              lwa_guiremi-xblnr = l_sercor.
**              MOVE lwa_likp-wadat_ist TO lwa_guiremi-wadat_ist.
**              COLLECT lwa_guiremi INTO lt_guiremi.
**            ENDLOOP.
**          ENDIF.
**      ENDCASE.
***}  END OF INSERT WMR-111119-3000012593
*}  END OF DELETE WMR-181119-3000013223
*{  BEGIN OF INSERT WMR-181119-3000013223
*     Guía de Remisión
      get_guia_remision( EXPORTING is_vbrk = <lfs_vbrk>
                                   is_vbrp = <lfs_vbrp>
                         CHANGING  ct_guiremi = lt_guiremi ).
*}  END OF INSERT WMR-181119-3000013223

*{  BEGIN OF INSERT WMR-270317-3000006749
      " Obtener Certificados y Números de Registros para Exportación
      get_certificates_export_by_pos( EXPORTING is_vbrk = <lfs_vbrk>
                                      CHANGING  cs_vbrp = <lfs_vbrp> ).
*}  END OF INSERT WMR-270317-3000006749

*{  BEGIN OF INSERT WMR-170615
      " Texto de posición
      <lfs_vbrp>-text_pos = build_aditional_text_position(           is_vbrk = <lfs_vbrk>
                                                                     is_vbrp = <lfs_vbrp> ).

      " Descripción detallada del servicio prestado, bien vendido o cedido en uso   "I-WMR-181119-3000013223
*{  BEGIN OF INSERT WMR-270317-3000006749
      CASE gw_license.
        WHEN '0020974592'   " DANPER
          OR '0021131379'.  " RESEMIN                                               "I-WMR-181119-3000013223
          " Tomar como Descripción del Servicio la primera línea del campo Texto de posición
          IF <lfs_vbrp>-text_pos IS NOT INITIAL.
            CLEAR lw_string.
            IF gw_license EQ '0021131379'.  " RESEMIN                                                       "I-SVM311219-3000013223
              SPLIT <lfs_vbrp>-text_pos AT cl_abap_char_utilities=>cr_lf INTO lw_string <lfs_vbrp>-text_pos.  "I-SVM311219-3000013223
            ELSE.                                                                                           "I-SVM311219-3000013223
              SPLIT <lfs_vbrp>-text_pos AT gc_crlf INTO lw_string <lfs_vbrp>-text_pos.
            ENDIF.                                                                                          "I-SVM311219-3000013223
            IF lw_string IS NOT INITIAL.
              <lfs_vbrp>-arktx = lw_string.
            ENDIF.
            IF <lfs_vbrp>-text_pos IS NOT INITIAL.                                                           "I-SVM210120-3000013716
              REPLACE ALL OCCURRENCES OF cl_abap_char_utilities=>cr_lf IN <lfs_vbrp>-text_pos WITH gc_crlf.  "I-SVM210120-3000013716
            ENDIF.                                                                                           "I-SVM210120-3000013716
          ENDIF.

      ENDCASE.
*}  END OF INSERT WMR-270317-3000006749

*}  END OF INSERT WMR-170615

*{  BEGIN OF INSERT WMR-250116
      " Descuentos 01 y 02
      others_discounts( CHANGING cs_vbrp = <lfs_vbrp> ).
*}  END OF INSERT WMR-250116

      " Número EAN
      " Número de material del cliente

*{E-110521-NTP-3000016163
**{I-150920-NTP-3000014481
*      CLEAR ls_vbrp_a.
*      MOVE-CORRESPONDING <lfs_vbrp> TO ls_vbrp_a.
*      APPEND ls_vbrp_a TO lt_vbrp_a.
**}I-150920-NTP-3000014481
*}E-110521-NTP-3000016163
    ENDLOOP.

*{I-090920-NTP-3000014481
    LOOP AT pe_vbrk ASSIGNING <lfs_vbrk>.
*     Lineextensionamount Det
      IF ( <lfs_vbrk>-zz_check_tg NE abap_true ).
*       Total valor de venta operaciones gravadas
        get_opegra_header( EXPORTING pi_vbrk = <lfs_vbrk>
                                     pi_vbrp = pe_vbrp
                           IMPORTING pe_opegra = <lfs_vbrk>-totvvopgra
                                     pe_opegra_neto = <lfs_vbrk>-totvvopgra_taxa ).

*       Total valor de venta operaciones inafectas
        <lfs_vbrk>-totvvopina = me->get_opeina_header( pi_vbrk = <lfs_vbrk>
                                                       pi_vbrp = pe_vbrp ).
*       Total valor de venta operaciones exoneradas
        <lfs_vbrk>-totvvopexo = me->get_opeexo_header( pi_vbrk = <lfs_vbrk>
                                                       pi_vbrp = pe_vbrp ).
      ENDIF.

      " Aplicación de Anticipos
      IF <lfs_vbrk>-zz_check_anticp <> abap_true.
        get_fact_anticipos(
          EXPORTING is_vbrk    = <lfs_vbrk>
                    it_vbrp    = pe_vbrp               "I-110521-NTP-3000016163
          IMPORTING e_tot_ant  = <lfs_vbrk>-tot_ant
                    e_mwsbp    = <lfs_vbrk>-igv_ant ). "I-110521-NTP-3000016163
*{E-110521-NTP-3000016163
*        READ TABLE pe_vbrp ASSIGNING <lfs_vbrp> INDEX 1.
*        IF sy-subrc = 0.
*          <lfs_vbrk>-igv_ant = <lfs_vbrk>-tot_ant * <lfs_vbrk>-igvporcent / 100.
*        ENDIF.
*}E-110521-NTP-3000016163
      ENDIF.
    ENDLOOP.
*}I-090920-NTP-3000014481

  ENDMETHOD.                    "upd_vbrp


  METHOD xstring_to_string.
    DATA: l_length TYPE i,
          lt_bin   TYPE STANDARD TABLE OF x255.

    CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
      EXPORTING
        buffer        = input
      IMPORTING
        output_length = l_length
      TABLES
        binary_tab    = lt_bin.

    CALL FUNCTION 'SCMS_BINARY_TO_STRING'
      EXPORTING
        input_length = l_length
      IMPORTING
        text_buffer  = output
      TABLES
        binary_tab   = lt_bin
      EXCEPTIONS
        failed       = 1.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDMETHOD.
ENDCLASS.
